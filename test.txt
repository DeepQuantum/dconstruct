              DeepQuantum's DC Disassembler ver. 1
              Listing for script: UNKNOWN SCRIPT
              Script ID: UNKNOWN SCRIPT ID
              Filesize: 136232 bytes
              START OF DISASSEMBLY
              --------------------------------------------------
  [0x0001C0] #14C6FC79122F4A87: script-lambda 
  {
LAMBDA0000   0x000218   43 00 31 00   Move                r0, r49        r0 = r49 [0x0]
0001   0x000220   15 01 00 00   LookupPointer       r1, 0          r1 = ST[0] -> <ddict-key-count>
0002   0x000228   43 02 00 00   Move                r2, r0         r2 = r0 [0x0]
0003   0x000230   43 31 02 00   Move                r49, r2        r49 = r2 [0x0]
0004   0x000238   1C 01 01 01   CallFf              r1, r1, 1      r1 = ddict-key-count(0x0)
0005   0x000240   15 02 01 00   LookupPointer       r2, 1          r2 = ST[1] -> <darray-create>
0006   0x000248   4A 03 02 00   LoadStaticU64Imm    r3, 2          r3 = ST[2] -> <self>
0007   0x000250   3F 04 03 00   LoadStaticI32Imm    r4, 3          r4 = ST[3] -> <-1>
0008   0x000258   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
0009   0x000260   43 31 03 00   Move                r49, r3        r49 = r3 [self]
000A   0x000268   43 32 04 00   Move                r50, r4        r50 = r4 [-1]
000B   0x000270   43 33 05 00   Move                r51, r5        r51 = r5 [0]
000C   0x000278   1C 02 02 03   CallFf              r2, r2, 3      r2 = darray-create(self, -1, 0)
000D   0x000280   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
L_1:
000E   0x000288   43 04 03 00   Move                r4, r3         r4 = r3 [0]
000F   0x000290   43 05 01 00   Move                r5, r1         r5 = r1 [ddict-key-count()]
0010   0x000298   20 04 04 05   ILessThan           r4, r4, r5     r4 = r4 [1] < r5 [453060971]
0011   0x0002A0   2F 76 04 00   BranchIfNot         r4, 0076       IF NOT r4 [0x1] => L_0
0012   0x0002A8   15 04 04 00   LookupPointer       r4, 4          r4 = ST[4] -> <ddict-key-at>
0013   0x0002B0   43 05 00 00   Move                r5, r0         r5 = r0 [0x0]
0014   0x0002B8   43 06 03 00   Move                r6, r3         r6 = r3 [0]
0015   0x0002C0   43 31 05 00   Move                r49, r5        r49 = r5 [0x0]
0016   0x0002C8   43 32 06 00   Move                r50, r6        r50 = r6 [0]
0017   0x0002D0   1C 04 04 02   CallFf              r4, r4, 2      r4 = ddict-key-at(0x0, 0)
0018   0x0002D8   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
0019   0x0002E0   15 06 05 00   LookupPointer       r6, 5          r6 = ST[5] -> <get-spawner-position>
001A   0x0002E8   43 07 04 00   Move                r7, r4         r7 = r4 [ddict-key-at()]
001B   0x0002F0   0C 08 01 00   LoadU16Imm          r8, 1          r8 = 1
001C   0x0002F8   43 31 07 00   Move                r49, r7        r49 = r7 [ddict-key-at()]
001D   0x000300   43 32 08 00   Move                r50, r8        r50 = r8 [1]
001E   0x000308   1C 06 06 02   CallFf              r6, r6, 2      r6 = get-spawner-position(ddict-key-at(), 1)
001F   0x000310   15 07 06 00   LookupPointer       r7, 6          r7 = ST[6] -> <alloc-vector>
0020   0x000318   40 08 07 00   LoadStaticFloatImm  r8, 7          r8 = ST[7] -> <0.00>
0021   0x000320   40 09 08 00   LoadStaticFloatImm  r9, 8          r9 = ST[8] -> <1.40>
0022   0x000328   40 0A 07 00   LoadStaticFloatImm  r10, 7         r10 = ST[7] -> <0.00>
0023   0x000330   40 0B 09 00   LoadStaticFloatImm  r11, 9         r11 = ST[9] -> <1.00>
0024   0x000338   0C 0C 00 00   LoadU16Imm          r12, 0         r12 = 0
0025   0x000340   43 31 08 00   Move                r49, r8        r49 = r8 [0x0]
0026   0x000348   43 32 09 00   Move                r50, r9        r50 = r9 [0x3FB33333]
0027   0x000350   43 33 0A 00   Move                r51, r10       r51 = r10 [0x0]
0028   0x000358   43 34 0B 00   Move                r52, r11       r52 = r11 [0x3F800000]
0029   0x000360   43 35 0C 00   Move                r53, r12       r53 = r12 [0]
002A   0x000368   1C 07 07 05   CallFf              r7, r7, 5      r7 = alloc-vector(0x0, 0x3FB33333, 0x0, 0x3F800000, 0)
002B   0x000370   15 08 0A 00   LookupPointer       r8, 10         r8 = ST[10] -> <alloc-bound-frame>
002C   0x000378   15 09 0B 00   LookupPointer       r9, 11         r9 = ST[11] -> <offset-position>
002D   0x000380   43 0A 06 00   Move                r10, r6        r10 = r6 [get-spawner-position()]
002E   0x000388   43 0B 07 00   Move                r11, r7        r11 = r7 [alloc-vector()]
002F   0x000390   43 31 0A 00   Move                r49, r10       r49 = r10 [get-spawner-position()]
0030   0x000398   43 32 0B 00   Move                r50, r11       r50 = r11 [alloc-vector()]
0031   0x0003A0   1C 09 09 02   CallFf              r9, r9, 2      r9 = offset-position(get-spawner-position(), alloc-vector())
0032   0x0003A8   0C 0A 00 00   LoadU16Imm          r10, 0         r10 = 0
0033   0x0003B0   0C 0B 00 00   LoadU16Imm          r11, 0         r11 = 0
0034   0x0003B8   0C 0C 00 00   LoadU16Imm          r12, 0         r12 = 0
0035   0x0003C0   0C 0D 00 00   LoadU16Imm          r13, 0         r13 = 0
0036   0x0003C8   43 31 09 00   Move                r49, r9        r49 = r9 [offset-position()]
0037   0x0003D0   43 32 0A 00   Move                r50, r10       r50 = r10 [0]
0038   0x0003D8   43 33 0B 00   Move                r51, r11       r51 = r11 [0]
0039   0x0003E0   43 34 0C 00   Move                r52, r12       r52 = r12 [0]
003A   0x0003E8   43 35 0D 00   Move                r53, r13       r53 = r13 [0]
003B   0x0003F0   1C 08 08 05   CallFf              r8, r8, 5      r8 = alloc-bound-frame(offset-position(), 0, 0, 0, 0)
003C   0x0003F8   15 09 0C 00   LookupPointer       r9, 12         r9 = ST[12] -> <camera-locator>
003D   0x000400   0C 0A 00 00   LoadU16Imm          r10, 0         r10 = 0
003E   0x000408   43 31 0A 00   Move                r49, r10       r49 = r10 [0]
003F   0x000410   1C 09 09 01   CallFf              r9, r9, 1      r9 = camera-locator(0)
0040   0x000418   15 0A 0D 00   LookupPointer       r10, 13        r10 = ST[13] -> <kick-raycast>
0041   0x000420   43 0B 08 00   Move                r11, r8        r11 = r8 [alloc-bound-frame()]
0042   0x000428   43 0C 09 00   Move                r12, r9        r12 = r9 [camera-locator()]
0043   0x000430   4A 0D 0E 00   LoadStaticU64Imm    r13, 14        r13 = ST[14] -> <player>
0044   0x000438   0C 0E 03 18   LoadU16Imm          r14, 6147      r14 = 6147
0045   0x000440   43 31 0B 00   Move                r49, r11       r49 = r11 [alloc-bound-frame()]
0046   0x000448   43 32 0C 00   Move                r50, r12       r50 = r12 [camera-locator()]
0047   0x000450   43 33 0D 00   Move                r51, r13       r51 = r13 [player]
0048   0x000458   43 34 0E 00   Move                r52, r14       r52 = r14 [6147]
0049   0x000460   1C 0A 0A 04   CallFf              r10, r10, 4    r10 = kick-raycast(alloc-bound-frame(), camera-locator(), player, 6147)
004A   0x000468   43 05 0A 00   Move                r5, r10        r5 = r10 [kick-raycast()]
004B   0x000470   43 0A 05 00   Move                r10, r5        r10 = r5 [kick-raycast()]
004C   0x000478   15 0A 0F 00   LookupPointer       r10, 15        r10 = ST[15] -> <ddict-set>
004D   0x000480   43 0B 00 00   Move                r11, r0        r11 = r0 [0x0]
004E   0x000488   43 0C 04 00   Move                r12, r4        r12 = r4 [ddict-key-at()]
004F   0x000490   15 0D 10 00   LookupPointer       r13, 16        r13 = ST[16] -> <new-boxed-value>
0050   0x000498   0C 0E 02 00   LoadU16Imm          r14, 2         r14 = 2
0051   0x0004A0   43 0F 05 00   Move                r15, r5        r15 = r5 [kick-raycast()]
0052   0x0004A8   43 31 0E 00   Move                r49, r14       r49 = r14 [2]
0053   0x0004B0   43 32 0F 00   Move                r50, r15       r50 = r15 [kick-raycast()]
0054   0x0004B8   1C 0D 0D 02   CallFf              r13, r13, 2    r13 = new-boxed-value(2, kick-raycast())
0055   0x0004C0   43 31 0B 00   Move                r49, r11       r49 = r11 [0x0]
0056   0x0004C8   43 32 0C 00   Move                r50, r12       r50 = r12 [ddict-key-at()]
0057   0x0004D0   43 33 0D 00   Move                r51, r13       r51 = r13 [new-boxed-value()]
0058   0x0004D8   1C 0A 0A 03   CallFf              r10, r10, 3    r10 = ddict-set(0x0, ddict-key-at(), new-boxed-value())
0059   0x0004E0   15 0A 11 00   LookupPointer       r10, 17        r10 = ST[17] -> <darray-append>
005A   0x0004E8   43 0B 02 00   Move                r11, r2        r11 = r2 [darray-create()]
005B   0x0004F0   15 0C 10 00   LookupPointer       r12, 16        r12 = ST[16] -> <new-boxed-value>
005C   0x0004F8   0C 0D 0E 00   LoadU16Imm          r13, 14        r13 = 14
005D   0x000500   15 0E 12 00   LookupPointer       r14, 18        r14 = ST[18] -> <get-locator-position>
005E   0x000508   43 0F 08 00   Move                r15, r8        r15 = r8 [alloc-bound-frame()]
005F   0x000510   43 31 0F 00   Move                r49, r15       r49 = r15 [alloc-bound-frame()]
0060   0x000518   1C 0E 0E 01   CallFf              r14, r14, 1    r14 = get-locator-position(alloc-bound-frame())
0061   0x000520   43 31 0D 00   Move                r49, r13       r49 = r13 [14]
0062   0x000528   43 32 0E 00   Move                r50, r14       r50 = r14 [get-locator-position()]
0063   0x000530   1C 0C 0C 02   CallFf              r12, r12, 2    r12 = new-boxed-value(14, get-locator-position())
0064   0x000538   0C 0D 00 00   LoadU16Imm          r13, 0         r13 = 0
0065   0x000540   43 31 0B 00   Move                r49, r11       r49 = r11 [darray-create()]
0066   0x000548   43 32 0C 00   Move                r50, r12       r50 = r12 [new-boxed-value()]
0067   0x000550   43 33 0D 00   Move                r51, r13       r51 = r13 [0]
0068   0x000558   1C 0A 0A 03   CallFf              r10, r10, 3    r10 = darray-append(darray-create(), new-boxed-value(), 0)
0069   0x000560   43 0A 0A 00   Move                r10, r10       r10 = r10 [darray-append()]
006A   0x000568   43 09 0A 00   Move                r9, r10        r9 = r10 [darray-append]
006B   0x000570   43 08 09 00   Move                r8, r9         r8 = r9 [darray-append]
006C   0x000578   43 07 08 00   Move                r7, r8         r7 = r8 [darray-append]
006D   0x000580   43 06 07 00   Move                r6, r7         r6 = r7 [darray-append]
006E   0x000588   43 05 06 00   Move                r5, r6         r5 = r6 [darray-append]
006F   0x000590   43 04 05 00   Move                r4, r5         r4 = r5 [darray-append]
0070   0x000598   43 04 03 00   Move                r4, r3         r4 = r3 [0]
0071   0x0005A0   0C 05 01 00   LoadU16Imm          r5, 1          r5 = 1
0072   0x0005A8   01 04 04 05   IAdd                r4, r4, r5     1 = 0 + 1
0073   0x0005B0   43 03 04 00   Move                r3, r4         r3 = r4 [1]
0074   0x0005B8   43 04 03 00   Move                r4, r3         r4 = r3 [1]
0075   0x0005C0   2D 0E 00 00   Branch              000E           => L_1
L_0:
0076   0x0005C8   43 03 04 00   Move                r3, r4         r3 = r4 [1]
0077   0x0005D0   15 03 13 00   LookupPointer       r3, 19         r3 = ST[19] -> <wait-one-frame>
0078   0x0005D8   1C 03 03 00   CallFf              r3, r3, 0      r3 = wait-one-frame()
0079   0x0005E0   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
L_31:
007A   0x0005E8   43 04 03 00   Move                r4, r3         r4 = r3 [0]
007B   0x0005F0   43 05 01 00   Move                r5, r1         r5 = r1 [ddict-key-count()]
007C   0x0005F8   20 04 04 05   ILessThan           r4, r4, r5     r4 = r4 [1] < r5 [453060971]
007D   0x000600   2F 87 04 01   BranchIfNot         r4, 0187       IF NOT r4 [0x1] => L_2
007E   0x000608   15 04 04 00   LookupPointer       r4, 4          r4 = ST[4] -> <ddict-key-at>
007F   0x000610   43 05 00 00   Move                r5, r0         r5 = r0 [0x0]
0080   0x000618   43 06 03 00   Move                r6, r3         r6 = r3 [0]
0081   0x000620   43 31 05 00   Move                r49, r5        r49 = r5 [0x0]
0082   0x000628   43 32 06 00   Move                r50, r6        r50 = r6 [0]
0083   0x000630   1C 04 04 02   CallFf              r4, r4, 2      r4 = ddict-key-at(0x0, 0)
0084   0x000638   15 05 14 00   LookupPointer       r5, 20         r5 = ST[20] -> <ddict-value-at>
0085   0x000640   43 06 00 00   Move                r6, r0         r6 = r0 [0x0]
0086   0x000648   43 07 03 00   Move                r7, r3         r7 = r3 [0]
0087   0x000650   43 31 06 00   Move                r49, r6        r49 = r6 [0x0]
0088   0x000658   43 32 07 00   Move                r50, r7        r50 = r7 [0]
0089   0x000660   1C 05 05 02   CallFf              r5, r5, 2      r5 = ddict-value-at(0x0, 0)
008A   0x000668   43 06 05 00   Move                r6, r5         r6 = r5 [ddict-value-at()]
008B   0x000670   2F 92 06 00   BranchIfNot         r6, 0092       IF NOT r6 [ddict-value-at()] => L_3
008C   0x000678   43 06 05 00   Move                r6, r5         r6 = r5 [ddict-value-at()]
008D   0x000680   5D 06 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
008E   0x000688   3B 06 06 0C   IAddImm             r6, r6, 12     r6 = r6 [1998752874] / 12 -> <1998752874>
008F   0x000690   4E 06 06 00   LoadU16             ???            UNKNOWN INSTRUCTION
0090   0x000698   0C 07 01 00   LoadU16Imm          r7, 1          r7 = 1
0091   0x0006A0   1D 06 06 07   IEqual              r6, r6, r7     r6 = r6 [1998752768] == r7 [1]
L_3:
0092   0x0006A8   2F 97 06 00   BranchIfNot         r6, 0097       IF NOT r6 [0x77228C00] => L_4
0093   0x0006B0   43 06 05 00   Move                r6, r5         r6 = r5 [ddict-value-at()]
0094   0x0006B8   5D 06 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0095   0x0006C0   4C 06 06 00   LoadU8              ???            UNKNOWN INSTRUCTION
0096   0x0006C8   2D DA 00 00   Branch              00DA           => L_5
L_4:
0097   0x0006D0   43 06 05 00   Move                r6, r5         r6 = r5 [ddict-value-at()]
0098   0x0006D8   2F 9F 06 00   BranchIfNot         r6, 009F       IF NOT r6 [ddict-value-at()] => L_6
0099   0x0006E0   43 06 05 00   Move                r6, r5         r6 = r5 [ddict-value-at()]
009A   0x0006E8   5D 06 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
009B   0x0006F0   3B 06 06 0C   IAddImm             r6, r6, 12     r6 = r6 [1998752874] / 12 -> <1998752874>
009C   0x0006F8   4E 06 06 00   LoadU16             ???            UNKNOWN INSTRUCTION
009D   0x000700   0C 07 02 00   LoadU16Imm          r7, 2          r7 = 2
009E   0x000708   1D 06 06 07   IEqual              r6, r6, r7     r6 = r6 [1998752768] == r7 [2]
L_6:
009F   0x000710   2F A4 06 00   BranchIfNot         r6, 00A4       IF NOT r6 [0x77228C00] => L_7
00A0   0x000718   43 06 05 00   Move                r6, r5         r6 = r5 [ddict-value-at()]
00A1   0x000720   5D 06 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00A2   0x000728   4F 06 06 00   LoadI32             ???            UNKNOWN INSTRUCTION
00A3   0x000730   2D DA 00 00   Branch              00DA           => L_5
L_7:
00A4   0x000738   43 06 05 00   Move                r6, r5         r6 = r5 [ddict-value-at()]
00A5   0x000740   2F AC 06 00   BranchIfNot         r6, 00AC       IF NOT r6 [ddict-value-at()] => L_8
00A6   0x000748   43 06 05 00   Move                r6, r5         r6 = r5 [ddict-value-at()]
00A7   0x000750   5D 06 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00A8   0x000758   3B 06 06 0C   IAddImm             r6, r6, 12     r6 = r6 [1998752874] / 12 -> <1998752874>
00A9   0x000760   4E 06 06 00   LoadU16             ???            UNKNOWN INSTRUCTION
00AA   0x000768   0C 07 03 00   LoadU16Imm          r7, 3          r7 = 3
00AB   0x000770   1D 06 06 07   IEqual              r6, r6, r7     r6 = r6 [1998752768] == r7 [3]
L_8:
00AC   0x000778   2F B1 06 00   BranchIfNot         r6, 00B1       IF NOT r6 [0x77228C00] => L_9
00AD   0x000780   43 06 05 00   Move                r6, r5         r6 = r5 [ddict-value-at()]
00AE   0x000788   5D 06 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00AF   0x000790   0D 06 06 00   LoadU32             r6, [r6]       r6 = [0x0 + 0x0]
00B0   0x000798   2D DA 00 00   Branch              00DA           => L_5
L_9:
00B1   0x0007A0   43 06 05 00   Move                r6, r5         r6 = r5 [ddict-value-at()]
00B2   0x0007A8   2F B9 06 00   BranchIfNot         r6, 00B9       IF NOT r6 [ddict-value-at()] => L_10
00B3   0x0007B0   43 06 05 00   Move                r6, r5         r6 = r5 [ddict-value-at()]
00B4   0x0007B8   5D 06 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00B5   0x0007C0   3B 06 06 0C   IAddImm             r6, r6, 12     r6 = r6 [1998752874] / 12 -> <1998752874>
00B6   0x0007C8   4E 06 06 00   LoadU16             ???            UNKNOWN INSTRUCTION
00B7   0x0007D0   0C 07 04 00   LoadU16Imm          r7, 4          r7 = 4
00B8   0x0007D8   1D 06 06 07   IEqual              r6, r6, r7     r6 = r6 [1998752768] == r7 [4]
L_10:
00B9   0x0007E0   2F BE 06 00   BranchIfNot         r6, 00BE       IF NOT r6 [0x77228C00] => L_11
00BA   0x0007E8   43 06 05 00   Move                r6, r5         r6 = r5 [ddict-value-at()]
00BB   0x0007F0   5D 06 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00BC   0x0007F8   50 06 06 00   LoadI64             r6, [r6]       r6 = [0x0 + 0x0]
00BD   0x000800   2D DA 00 00   Branch              00DA           => L_5
L_11:
00BE   0x000808   43 06 05 00   Move                r6, r5         r6 = r5 [ddict-value-at()]
00BF   0x000810   2F C6 06 00   BranchIfNot         r6, 00C6       IF NOT r6 [ddict-value-at()] => L_12
00C0   0x000818   43 06 05 00   Move                r6, r5         r6 = r5 [ddict-value-at()]
00C1   0x000820   5D 06 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00C2   0x000828   3B 06 06 0C   IAddImm             r6, r6, 12     r6 = r6 [1998752874] / 12 -> <1998752874>
00C3   0x000830   4E 06 06 00   LoadU16             ???            UNKNOWN INSTRUCTION
00C4   0x000838   0C 07 05 00   LoadU16Imm          r7, 5          r7 = 5
00C5   0x000840   1D 06 06 07   IEqual              r6, r6, r7     r6 = r6 [1998752768] == r7 [5]
L_12:
00C6   0x000848   2F CB 06 00   BranchIfNot         r6, 00CB       IF NOT r6 [0x77228C00] => L_13
00C7   0x000850   43 06 05 00   Move                r6, r5         r6 = r5 [ddict-value-at()]
00C8   0x000858   5D 06 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00C9   0x000860   51 06 06 00   LoadU64             r6, [r6]       r6 = [0x0 + 0x0]
00CA   0x000868   2D DA 00 00   Branch              00DA           => L_5
L_13:
00CB   0x000870   43 06 05 00   Move                r6, r5         r6 = r5 [ddict-value-at()]
00CC   0x000878   2F D3 06 00   BranchIfNot         r6, 00D3       IF NOT r6 [ddict-value-at()] => L_14
00CD   0x000880   43 06 05 00   Move                r6, r5         r6 = r5 [ddict-value-at()]
00CE   0x000888   5D 06 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00CF   0x000890   3B 06 06 0C   IAddImm             r6, r6, 12     r6 = r6 [1998752874] / 12 -> <1998752874>
00D0   0x000898   4E 06 06 00   LoadU16             ???            UNKNOWN INSTRUCTION
00D1   0x0008A0   0C 07 06 00   LoadU16Imm          r7, 6          r7 = 6
00D2   0x0008A8   1D 06 06 07   IEqual              r6, r6, r7     r6 = r6 [1998752768] == r7 [6]
L_14:
00D3   0x0008B0   2F D9 06 00   BranchIfNot         r6, 00D9       IF NOT r6 [0x77228C00] => L_15
00D4   0x0008B8   43 06 05 00   Move                r6, r5         r6 = r5 [ddict-value-at()]
00D5   0x0008C0   5D 06 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00D6   0x0008C8   0E 06 06 00   LoadFloat           r6, [r6]       r6 = [0x0 + 0x0]
00D7   0x0008D0   19 06 06 00   CastInteger         r6, r6         r6 = int(r6) -> <0.000000> => <0>
00D8   0x0008D8   2D DA 00 00   Branch              00DA           => L_5
L_15:
00D9   0x0008E0   0C 06 00 00   LoadU16Imm          r6, 0          r6 = 0
L_5:
00DA   0x0008E8   43 05 06 00   Move                r5, r6         r5 = r6 [0]
00DB   0x0008F0   15 06 15 00   LookupPointer       r6, 21         r6 = ST[21] -> <darray-at>
00DC   0x0008F8   43 07 02 00   Move                r7, r2         r7 = r2 [darray-create()]
00DD   0x000900   43 08 03 00   Move                r8, r3         r8 = r3 [0]
00DE   0x000908   43 31 07 00   Move                r49, r7        r49 = r7 [darray-create()]
00DF   0x000910   43 32 08 00   Move                r50, r8        r50 = r8 [0]
00E0   0x000918   1C 06 06 02   CallFf              r6, r6, 2      r6 = darray-at(darray-create(), 0)
00E1   0x000920   43 07 06 00   Move                r7, r6         r7 = r6 [darray-at()]
00E2   0x000928   2F E9 07 00   BranchIfNot         r7, 00E9       IF NOT r7 [darray-at()] => L_16
00E3   0x000930   43 07 06 00   Move                r7, r6         r7 = r6 [darray-at()]
00E4   0x000938   5D 07 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00E5   0x000940   3B 07 07 0C   IAddImm             r7, r7, 12     r7 = r7 [-739117676] / 12 -> <-739117676>
00E6   0x000948   4E 07 07 00   LoadU16             ???            UNKNOWN INSTRUCTION
00E7   0x000950   0C 08 0E 00   LoadU16Imm          r8, 14         r8 = 14
00E8   0x000958   1D 07 07 08   IEqual              r7, r7, r8     r7 = r7 [-739117824] == r8 [14]
L_16:
00E9   0x000960   2F EE 07 00   BranchIfNot         r7, 00EE       IF NOT r7 [0xD3F1F500] => L_17
00EA   0x000968   43 07 06 00   Move                r7, r6         r7 = r6 [darray-at()]
00EB   0x000970   5D 07 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00EC   0x000978   0F 07 07 00   LoadPointer         r7, [r7]       r7 = [0x0 + 0x0]
00ED   0x000980   2D EF 00 00   Branch              00EF           => L_18
L_17:
00EE   0x000988   41 07 16 00   LoadStaticPointerImmr7, 22         r7 = ST[22] -> <0xBF008060>
L_18:
00EF   0x000990   43 06 07 00   Move                r6, r7         r6 = r7 [0xBF008060]
00F0   0x000998   15 07 17 00   LookupPointer       r7, 23         r7 = ST[23] -> <wait-raycast-t>
00F1   0x0009A0   43 08 05 00   Move                r8, r5         r8 = r5 [0]
00F2   0x0009A8   43 31 08 00   Move                r49, r8        r49 = r8 [0]
00F3   0x0009B0   1C 07 07 01   CallFf              r7, r7, 1      r7 = wait-raycast-t(0)
00F4   0x0009B8   43 08 07 00   Move                r8, r7         r8 = r7 [wait-raycast-t()]
00F5   0x0009C0   40 09 18 00   LoadStaticFloatImm  r9, 24         r9 = ST[24] -> <-1.00>
00F6   0x0009C8   22 08 08 09   FEqual              r8, r8, r9     r8 = r8 [-0.000000] == r9 [-1.000000]
00F7   0x0009D0   2E FB 08 00   BranchIf            r8, 00FB       IF r8 [0x92DC6800] => L_19
00F8   0x0009D8   43 08 07 00   Move                r8, r7         r8 = r7 [wait-raycast-t()]
00F9   0x0009E0   40 09 19 00   LoadStaticFloatImm  r9, 25         r9 = ST[25] -> <0.90>
00FA   0x0009E8   24 08 08 09   FGreaterThanEqual   r8, r8, r9     r8 = r8 [-0.000000] >= r9 [0.900000]
L_19:
00FB   0x0009F0   40 09 1A 00   LoadStaticFloatImm  r9, 26         r9 = ST[26] -> <2.00>
00FC   0x0009F8   15 0A 1B 00   LookupPointer       r10, 27        r10 = ST[27] -> <#B96C7EEF7ACAB122>
00FD   0x000A00   2F 02 0A 01   BranchIfNot         r10, 0102      IF NOT r10 [0x7ACAB122] => L_20
00FE   0x000A08   15 0A 1B 01   LookupPointer       r10, 27        r10 = ST[27] -> <#B96C7EEF7ACAB122>
00FF   0x000A10   5D 0A 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0100   0x000A18   3B 0A 0A 27   IAddImm             r10, r10, 39   r10 = r10 [-1353844394] / 39 -> <-1353844394>
0101   0x000A20   4C 0A 0A 00   LoadU8              ???            UNKNOWN INSTRUCTION
L_20:
0102   0x000A28   2F 5C 0A 01   BranchIfNot         r10, 015C      IF NOT r10 [-1353844394] => L_21
0103   0x000A30   15 0A 1C 00   LookupPointer       r10, 28        r10 = ST[28] -> <debug-draw-cross>
0104   0x000A38   15 0B 05 00   LookupPointer       r11, 5         r11 = ST[5] -> <get-spawner-position>
0105   0x000A40   43 0C 04 00   Move                r12, r4        r12 = r4 [ddict-key-at()]
0106   0x000A48   0C 0D 01 00   LoadU16Imm          r13, 1         r13 = 1
0107   0x000A50   43 31 0C 00   Move                r49, r12       r49 = r12 [ddict-key-at()]
0108   0x000A58   43 32 0D 00   Move                r50, r13       r50 = r13 [1]
0109   0x000A60   1C 0B 0B 02   CallFf              r11, r11, 2    r11 = get-spawner-position(ddict-key-at(), 1)
010A   0x000A68   40 0C 1D 00   LoadStaticFloatImm  r12, 29        r12 = ST[29] -> <0.25>
010B   0x000A70   43 0D 08 00   Move                r13, r8        r13 = r8 [0x92DC6800]
010C   0x000A78   2F 0F 0D 01   BranchIfNot         r13, 010F      IF NOT r13 [0x92DC6800] => L_22
010D   0x000A80   0C 0D 02 00   LoadU16Imm          r13, 2         r13 = 2
010E   0x000A88   2D 10 00 01   Branch              0110           => L_23
L_22:
010F   0x000A90   0C 0D 03 00   LoadU16Imm          r13, 3         r13 = 3
L_23:
0110   0x000A98   43 0E 09 00   Move                r14, r9        r14 = r9 [0x40000000]
0111   0x000AA0   0C 0F 00 00   LoadU16Imm          r15, 0         r15 = 0
0112   0x000AA8   0C 10 00 00   LoadU16Imm          r16, 0         r16 = 0
0113   0x000AB0   0C 11 00 00   LoadU16Imm          r17, 0         r17 = 0
0114   0x000AB8   43 31 0B 00   Move                r49, r11       r49 = r11 [get-spawner-position()]
0115   0x000AC0   43 32 0C 00   Move                r50, r12       r50 = r12 [0x3E800000]
0116   0x000AC8   43 33 0D 00   Move                r51, r13       r51 = r13 [3]
0117   0x000AD0   43 34 0E 00   Move                r52, r14       r52 = r14 [0x40000000]
0118   0x000AD8   43 35 0F 00   Move                r53, r15       r53 = r15 [0]
0119   0x000AE0   43 36 10 00   Move                r54, r16       r54 = r16 [0]
011A   0x000AE8   43 37 11 00   Move                r55, r17       r55 = r17 [0]
011B   0x000AF0   1C 0A 0A 07   CallFf              r10, r10, 7    r10 = debug-draw-cross(get-spawner-position(), 0x3E800000, 3, 0x40000000, 0, 0, 0)
011C   0x000AF8   15 0A 1E 00   LookupPointer       r10, 30        r10 = ST[30] -> <debug-draw-string>
011D   0x000B00   15 0B 05 00   LookupPointer       r11, 5         r11 = ST[5] -> <get-spawner-position>
011E   0x000B08   43 0C 04 00   Move                r12, r4        r12 = r4 [ddict-key-at()]
011F   0x000B10   0C 0D 01 00   LoadU16Imm          r13, 1         r13 = 1
0120   0x000B18   43 31 0C 00   Move                r49, r12       r49 = r12 [ddict-key-at()]
0121   0x000B20   43 32 0D 00   Move                r50, r13       r50 = r13 [1]
0122   0x000B28   1C 0B 0B 02   CallFf              r11, r11, 2    r11 = get-spawner-position(ddict-key-at(), 1)
0123   0x000B30   15 0C 1F 00   LookupPointer       r12, 31        r12 = ST[31] -> <string-debug>
0124   0x000B38   43 0D 04 00   Move                r13, r4        r13 = r4 [ddict-key-at()]
0125   0x000B40   43 31 0D 00   Move                r49, r13       r49 = r13 [ddict-key-at()]
0126   0x000B48   1C 0C 0C 01   CallFf              r12, r12, 1    r12 = string-debug(ddict-key-at())
0127   0x000B50   43 0D 08 00   Move                r13, r8        r13 = r8 [0x92DC6800]
0128   0x000B58   2F 2B 0D 01   BranchIfNot         r13, 012B      IF NOT r13 [0x92DC6800] => L_24
0129   0x000B60   0C 0D 02 00   LoadU16Imm          r13, 2         r13 = 2
012A   0x000B68   2D 2C 00 01   Branch              012C           => L_25
L_24:
012B   0x000B70   0C 0D 03 00   LoadU16Imm          r13, 3         r13 = 3
L_25:
012C   0x000B78   43 0E 09 00   Move                r14, r9        r14 = r9 [0x40000000]
012D   0x000B80   0C 0F 00 00   LoadU16Imm          r15, 0         r15 = 0
012E   0x000B88   40 10 20 00   LoadStaticFloatImm  r16, 32        r16 = ST[32] -> <0.50>
012F   0x000B90   0C 11 00 00   LoadU16Imm          r17, 0         r17 = 0
0130   0x000B98   0C 12 00 00   LoadU16Imm          r18, 0         r18 = 0
0131   0x000BA0   43 31 0B 00   Move                r49, r11       r49 = r11 [get-spawner-position()]
0132   0x000BA8   43 32 0C 00   Move                r50, r12       r50 = r12 [string-debug()]
0133   0x000BB0   43 33 0D 00   Move                r51, r13       r51 = r13 [3]
0134   0x000BB8   43 34 0E 00   Move                r52, r14       r52 = r14 [0x40000000]
0135   0x000BC0   43 35 0F 00   Move                r53, r15       r53 = r15 [0]
0136   0x000BC8   43 36 10 00   Move                r54, r16       r54 = r16 [0x3F000000]
0137   0x000BD0   43 37 11 00   Move                r55, r17       r55 = r17 [0]
0138   0x000BD8   43 38 12 00   Move                r56, r18       r56 = r18 [0]
0139   0x000BE0   1C 0A 0A 08   CallFf              r10, r10, 8    r10 = debug-draw-string(get-spawner-position(), string-debug(), 3, 0x40000000, 0, 0x3F000000, 0, 0)
013A   0x000BE8   15 0A 1E 00   LookupPointer       r10, 30        r10 = ST[30] -> <debug-draw-string>
013B   0x000BF0   43 0B 06 00   Move                r11, r6        r11 = r6 [0xBF008060]
013C   0x000BF8   15 0C 21 00   LookupPointer       r12, 33        r12 = ST[33] -> <#5445173390656D6D>
013D   0x000C00   41 0D 22 00   LoadStaticPointerImmr13, 34        r13 = ST[34] -> <0xBF025EFD>
013E   0x000C08   43 0E 07 00   Move                r14, r7        r14 = r7 [wait-raycast-t()]
013F   0x000C10   43 31 0D 00   Move                r49, r13       r49 = r13 [0xBF025EFD]
0140   0x000C18   43 32 0E 00   Move                r50, r14       r50 = r14 [wait-raycast-t()]
0141   0x000C20   1C 0C 0C 02   CallFf              r12, r12, 2    r12 = #5445173390656D6D(0xBF025EFD, wait-raycast-t())
0142   0x000C28   43 0D 08 00   Move                r13, r8        r13 = r8 [0x92DC6800]
0143   0x000C30   2F 46 0D 01   BranchIfNot         r13, 0146      IF NOT r13 [0x92DC6800] => L_26
0144   0x000C38   0C 0D 02 00   LoadU16Imm          r13, 2         r13 = 2
0145   0x000C40   2D 47 00 01   Branch              0147           => L_27
L_26:
0146   0x000C48   0C 0D 03 00   LoadU16Imm          r13, 3         r13 = 3
L_27:
0147   0x000C50   43 0E 09 00   Move                r14, r9        r14 = r9 [0x40000000]
0148   0x000C58   0C 0F 00 00   LoadU16Imm          r15, 0         r15 = 0
0149   0x000C60   40 10 20 00   LoadStaticFloatImm  r16, 32        r16 = ST[32] -> <0.50>
014A   0x000C68   0C 11 00 00   LoadU16Imm          r17, 0         r17 = 0
014B   0x000C70   0C 12 00 00   LoadU16Imm          r18, 0         r18 = 0
014C   0x000C78   43 31 0B 00   Move                r49, r11       r49 = r11 [0xBF008060]
014D   0x000C80   43 32 0C 00   Move                r50, r12       r50 = r12 [#5445173390656D6D()]
014E   0x000C88   43 33 0D 00   Move                r51, r13       r51 = r13 [3]
014F   0x000C90   43 34 0E 00   Move                r52, r14       r52 = r14 [0x40000000]
0150   0x000C98   43 35 0F 00   Move                r53, r15       r53 = r15 [0]
0151   0x000CA0   43 36 10 00   Move                r54, r16       r54 = r16 [0x3F000000]
0152   0x000CA8   43 37 11 00   Move                r55, r17       r55 = r17 [0]
0153   0x000CB0   43 38 12 00   Move                r56, r18       r56 = r18 [0]
0154   0x000CB8   1C 0A 0A 08   CallFf              r10, r10, 8    r10 = debug-draw-string(0xBF008060, #5445173390656D6D(), 3, 0x40000000, 0, 0x3F000000, 0, 0)
0155   0x000CC0   15 0A 23 00   LookupPointer       r10, 35        r10 = ST[35] -> <debug-draw-raycast>
0156   0x000CC8   43 0B 05 00   Move                r11, r5        r11 = r5 [0]
0157   0x000CD0   43 0C 09 00   Move                r12, r9        r12 = r9 [0x40000000]
0158   0x000CD8   43 31 0B 00   Move                r49, r11       r49 = r11 [0]
0159   0x000CE0   43 32 0C 00   Move                r50, r12       r50 = r12 [0x40000000]
015A   0x000CE8   1C 0A 0A 02   CallFf              r10, r10, 2    r10 = debug-draw-raycast(0, 0x40000000)
015B   0x000CF0   2D 5D 00 01   Branch              015D           => L_28
L_21:
015C   0x000CF8   0C 0A 00 00   LoadU16Imm          r10, 0         r10 = 0
L_28:
015D   0x000D00   43 0A 08 00   Move                r10, r8        r10 = r8 [0x92DC6800]
015E   0x000D08   2F 6D 0A 01   BranchIfNot         r10, 016D      IF NOT r10 [0x92DC6800] => L_29
015F   0x000D10   15 0A 0F 00   LookupPointer       r10, 15        r10 = ST[15] -> <ddict-set>
0160   0x000D18   43 0B 00 00   Move                r11, r0        r11 = r0 [0x0]
0161   0x000D20   43 0C 04 00   Move                r12, r4        r12 = r4 [ddict-key-at()]
0162   0x000D28   15 0D 10 00   LookupPointer       r13, 16        r13 = ST[16] -> <new-boxed-value>
0163   0x000D30   0C 0E 01 00   LoadU16Imm          r14, 1         r14 = 1
0164   0x000D38   0C 0F 00 00   LoadU16Imm          r15, 0         r15 = 0
0165   0x000D40   43 31 0E 00   Move                r49, r14       r49 = r14 [1]
0166   0x000D48   43 32 0F 00   Move                r50, r15       r50 = r15 [0]
0167   0x000D50   1C 0D 0D 02   CallFf              r13, r13, 2    r13 = new-boxed-value(1, 0)
0168   0x000D58   43 31 0B 00   Move                r49, r11       r49 = r11 [0x0]
0169   0x000D60   43 32 0C 00   Move                r50, r12       r50 = r12 [ddict-key-at()]
016A   0x000D68   43 33 0D 00   Move                r51, r13       r51 = r13 [new-boxed-value()]
016B   0x000D70   1C 0A 0A 03   CallFf              r10, r10, 3    r10 = ddict-set(0x0, ddict-key-at(), new-boxed-value())
016C   0x000D78   2D 7A 00 01   Branch              017A           => L_30
L_29:
016D   0x000D80   15 0A 0F 00   LookupPointer       r10, 15        r10 = ST[15] -> <ddict-set>
016E   0x000D88   43 0B 00 00   Move                r11, r0        r11 = r0 [0x0]
016F   0x000D90   43 0C 04 00   Move                r12, r4        r12 = r4 [ddict-key-at()]
0170   0x000D98   15 0D 10 00   LookupPointer       r13, 16        r13 = ST[16] -> <new-boxed-value>
0171   0x000DA0   0C 0E 01 00   LoadU16Imm          r14, 1         r14 = 1
0172   0x000DA8   0C 0F 01 00   LoadU16Imm          r15, 1         r15 = 1
0173   0x000DB0   43 31 0E 00   Move                r49, r14       r49 = r14 [1]
0174   0x000DB8   43 32 0F 00   Move                r50, r15       r50 = r15 [1]
0175   0x000DC0   1C 0D 0D 02   CallFf              r13, r13, 2    r13 = new-boxed-value(1, 1)
0176   0x000DC8   43 31 0B 00   Move                r49, r11       r49 = r11 [0x0]
0177   0x000DD0   43 32 0C 00   Move                r50, r12       r50 = r12 [ddict-key-at()]
0178   0x000DD8   43 33 0D 00   Move                r51, r13       r51 = r13 [new-boxed-value()]
0179   0x000DE0   1C 0A 0A 03   CallFf              r10, r10, 3    r10 = ddict-set(0x0, ddict-key-at(), new-boxed-value())
L_30:
017A   0x000DE8   43 0A 0A 00   Move                r10, r10       r10 = r10 [ddict-set()]
017B   0x000DF0   43 09 0A 00   Move                r9, r10        r9 = r10 [ddict-set]
017C   0x000DF8   43 08 09 00   Move                r8, r9         r8 = r9 [ddict-set]
017D   0x000E00   43 07 08 00   Move                r7, r8         r7 = r8 [ddict-set]
017E   0x000E08   43 06 07 00   Move                r6, r7         r6 = r7 [ddict-set]
017F   0x000E10   43 05 06 00   Move                r5, r6         r5 = r6 [ddict-set]
0180   0x000E18   43 04 05 00   Move                r4, r5         r4 = r5 [ddict-set]
0181   0x000E20   43 04 03 00   Move                r4, r3         r4 = r3 [0]
0182   0x000E28   0C 05 01 00   LoadU16Imm          r5, 1          r5 = 1
0183   0x000E30   01 04 04 05   IAdd                r4, r4, r5     1 = 0 + 1
0184   0x000E38   43 03 04 00   Move                r3, r4         r3 = r4 [1]
0185   0x000E40   43 04 03 00   Move                r4, r3         r4 = r3 [1]
0186   0x000E48   2D 7A 00 00   Branch              007A           => L_31
L_2:
0187   0x000E50   43 03 04 00   Move                r3, r4         r3 = r4 [1]
0188   0x000E58   15 03 24 00   LookupPointer       r3, 36         r3 = ST[36] -> <darray-destroy>
0189   0x000E60   43 04 02 00   Move                r4, r2         r4 = r2 [darray-create]
018A   0x000E68   43 31 04 00   Move                r49, r4        r49 = r4 [darray-create]
018B   0x000E70   1C 03 03 01   CallFf              r3, r3, 1      r3 = darray-destroy(darray-create)
018C   0x000E78   43 01 03 00   Move                r1, r3         r1 = r3 [darray-destroy()]
018D   0x000E80   00 01 01 00   Return              r1             Return darray-destroy()
SYMBOL TABLE: 
0000   0x000E88    POINTER <ddict-key-count>
0001   0x000E90    POINTER <darray-create>
0002   0x000E98    SID <self>
0003   0x000EA0    INT <-1>
0004   0x000EA8    POINTER <ddict-key-at>
0005   0x000EB0    POINTER <get-spawner-position>
0006   0x000EB8    POINTER <alloc-vector>
0007   0x000EC0    FLOAT <0.000000>
0008   0x000EC8    FLOAT <1.400000>
0009   0x000ED0    FLOAT <1.000000>
000A   0x000ED8    POINTER <alloc-bound-frame>
000B   0x000EE0    POINTER <offset-position>
000C   0x000EE8    POINTER <camera-locator>
000D   0x000EF0    POINTER <kick-raycast>
000E   0x000EF8    SID <player>
000F   0x000F00    POINTER <ddict-set>
0010   0x000F08    POINTER <new-boxed-value>
0011   0x000F10    POINTER <darray-append>
0012   0x000F18    POINTER <get-locator-position>
0013   0x000F20    POINTER <wait-one-frame>
0014   0x000F28    POINTER <ddict-value-at>
0015   0x000F30    POINTER <darray-at>
0016   0x000F38    POINTER <#00000282BF008060>
0017   0x000F40    POINTER <wait-raycast-t>
0018   0x000F48    FLOAT <-1.000000>
0019   0x000F50    FLOAT <0.900000>
001A   0x000F58    FLOAT <2.000000>
001B   0x000F60    POINTER <#B96C7EEF7ACAB122>
001C   0x000F68    POINTER <debug-draw-cross>
001D   0x000F70    FLOAT <0.250000>
001E   0x000F78    POINTER <debug-draw-string>
001F   0x000F80    POINTER <string-debug>
0020   0x000F88    FLOAT <0.500000>
0021   0x000F90    POINTER <#5445173390656D6D>
0022   0x000F98    POINTER <#00000282BF025EFD>
0023   0x000FA0    POINTER <debug-draw-raycast>
0024   0x000FA8    POINTER <darray-destroy>
  }
####################################################################################################
  [0x000FC0] #43DF4E5E85BFD47C: script-lambda 
  {
LAMBDA0000   0x001018   43 00 31 00   Move                r0, r49        r0 = r49 [0x0]
0001   0x001020   43 01 32 00   Move                r1, r50        r1 = r50 [0x0]
0002   0x001028   0C 02 00 00   LoadU16Imm          r2, 0          r2 = 0
0003   0x001030   41 03 00 00   LoadStaticPointerImmr3, 0          r3 = ST[0] -> <0xBF025EFC>
0004   0x001038   15 04 01 00   LookupPointer       r4, 1          r4 = ST[1] -> <npc-get-awareness>
0005   0x001040   43 05 00 00   Move                r5, r0         r5 = r0 [0x0]
0006   0x001048   4A 06 02 00   LoadStaticU64Imm    r6, 2          r6 = ST[2] -> <player>
0007   0x001050   43 31 05 00   Move                r49, r5        r49 = r5 [0x0]
0008   0x001058   43 32 06 00   Move                r50, r6        r50 = r6 [player]
0009   0x001060   1C 04 04 02   CallFf              r4, r4, 2      r4 = npc-get-awareness(0x0, player)
000A   0x001068   15 05 03 00   LookupPointer       r5, 3          r5 = ST[3] -> <npc-get-acquisition>
000B   0x001070   43 06 00 00   Move                r6, r0         r6 = r0 [0x0]
000C   0x001078   4A 07 02 00   LoadStaticU64Imm    r7, 2          r7 = ST[2] -> <player>
000D   0x001080   43 31 06 00   Move                r49, r6        r49 = r6 [0x0]
000E   0x001088   43 32 07 00   Move                r50, r7        r50 = r7 [player]
000F   0x001090   1C 05 05 02   CallFf              r5, r5, 2      r5 = npc-get-acquisition(0x0, player)
0010   0x001098   43 06 05 00   Move                r6, r5         r6 = r5 [npc-get-acquisition()]
0011   0x0010A0   40 07 04 00   LoadStaticFloatImm  r7, 4          r7 = ST[4] -> <0.00>
0012   0x0010A8   23 06 06 07   FGreaterThan        ???            UNKNOWN INSTRUCTION
0013   0x0010B0   15 07 05 00   LookupPointer       r7, 5          r7 = ST[5] -> <npc-get-recognition>
0014   0x0010B8   43 08 00 00   Move                r8, r0         r8 = r0 [0x0]
0015   0x0010C0   4A 09 02 00   LoadStaticU64Imm    r9, 2          r9 = ST[2] -> <player>
0016   0x0010C8   43 31 08 00   Move                r49, r8        r49 = r8 [0x0]
0017   0x0010D0   43 32 09 00   Move                r50, r9        r50 = r9 [player]
0018   0x0010D8   1C 07 07 02   CallFf              r7, r7, 2      r7 = npc-get-recognition(0x0, player)
0019   0x0010E0   43 08 07 00   Move                r8, r7         r8 = r7 [npc-get-recognition()]
001A   0x0010E8   40 09 04 00   LoadStaticFloatImm  r9, 4          r9 = ST[4] -> <0.00>
001B   0x0010F0   23 08 08 09   FGreaterThan        ???            UNKNOWN INSTRUCTION
001C   0x0010F8   43 09 04 00   Move                r9, r4         r9 = r4 [npc-get-awareness()]
001D   0x001100   43 0A 01 00   Move                r10, r1        r10 = r1 [0x0]
001E   0x001108   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [658906624] == r10 [0]
001F   0x001110   2F 5C 09 00   BranchIfNot         r9, 005C       IF NOT r9 [0x27461E00] => L_0
0020   0x001118   43 09 01 00   Move                r9, r1         r9 = r1 [0x0]
0021   0x001120   0C 0A 02 00   LoadU16Imm          r10, 2         r10 = 2
0022   0x001128   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [0] == r10 [2]
0023   0x001130   2F 2B 09 00   BranchIfNot         r9, 002B       IF NOT r9 [0x0] => L_1
0024   0x001138   0C 09 01 00   LoadU16Imm          r9, 1          r9 = 1
0025   0x001140   43 02 09 00   Move                r2, r9         r2 = r9 [1]
0026   0x001148   43 09 02 00   Move                r9, r2         r9 = r2 [1]
0027   0x001150   41 09 06 00   LoadStaticPointerImmr9, 6          r9 = ST[6] -> <0xBF027381>
0028   0x001158   43 03 09 00   Move                r3, r9         r3 = r9 [0xBF027381]
0029   0x001160   43 09 03 00   Move                r9, r3         r9 = r3 [0xBF027381]
002A   0x001168   2D 5B 00 00   Branch              005B           => L_2
L_1:
002B   0x001170   15 09 07 00   LookupPointer       r9, 7          r9 = ST[7] -> <#A548628CB635DC72>
002C   0x001178   43 0A 00 00   Move                r10, r0        r10 = r0 [0x0]
002D   0x001180   43 0B 01 00   Move                r11, r1        r11 = r1 [0x0]
002E   0x001188   43 31 0A 00   Move                r49, r10       r49 = r10 [0x0]
002F   0x001190   43 32 0B 00   Move                r50, r11       r50 = r11 [0x0]
0030   0x001198   1B 09 09 02   Call                r9, r9, 2      r9 = #A548628CB635DC72(0x0, 0x0)
0031   0x0011A0   2F 39 09 00   BranchIfNot         r9, 0039       IF NOT r9 [#A548628CB635DC72()] => L_3
0032   0x0011A8   0C 09 00 00   LoadU16Imm          r9, 0          r9 = 0
0033   0x0011B0   43 02 09 00   Move                r2, r9         r2 = r9 [0]
0034   0x0011B8   43 09 02 00   Move                r9, r2         r9 = r2 [0]
0035   0x0011C0   41 09 08 00   LoadStaticPointerImmr9, 8          r9 = ST[8] -> <0xBF02734B>
0036   0x0011C8   43 03 09 00   Move                r3, r9         r3 = r9 [0xBF02734B]
0037   0x0011D0   43 09 03 00   Move                r9, r3         r9 = r3 [0xBF02734B]
0038   0x0011D8   2D 5B 00 00   Branch              005B           => L_2
L_3:
0039   0x0011E0   43 09 01 00   Move                r9, r1         r9 = r1 [0x0]
003A   0x0011E8   0C 0A 03 00   LoadU16Imm          r10, 3         r10 = 3
003B   0x0011F0   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [0] == r10 [3]
003C   0x0011F8   2F 3F 09 00   BranchIfNot         r9, 003F       IF NOT r9 [0x0] => L_4
003D   0x001200   43 09 08 00   Move                r9, r8         r9 = r8 [npc-get-recognition]
003E   0x001208   30 09 09 00   OpLogNot            r9, r9         r9 = !r9 -> <TRUE>
L_4:
003F   0x001210   2F 47 09 00   BranchIfNot         r9, 0047       IF NOT r9 [0xDFBF4722] => L_5
0040   0x001218   0C 09 01 00   LoadU16Imm          r9, 1          r9 = 1
0041   0x001220   43 02 09 00   Move                r2, r9         r2 = r9 [1]
0042   0x001228   43 09 02 00   Move                r9, r2         r9 = r2 [1]
0043   0x001230   41 09 09 00   LoadStaticPointerImmr9, 9          r9 = ST[9] -> <0xBF0273EF>
0044   0x001238   43 03 09 00   Move                r3, r9         r3 = r9 [0xBF0273EF]
0045   0x001240   43 09 03 00   Move                r9, r3         r9 = r3 [0xBF0273EF]
0046   0x001248   2D 5B 00 00   Branch              005B           => L_2
L_5:
0047   0x001250   43 09 01 00   Move                r9, r1         r9 = r1 [0x0]
0048   0x001258   0C 0A 04 00   LoadU16Imm          r10, 4         r10 = 4
0049   0x001260   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [0] == r10 [4]
004A   0x001268   2F 4D 09 00   BranchIfNot         r9, 004D       IF NOT r9 [0x0] => L_6
004B   0x001270   43 09 06 00   Move                r9, r6         r9 = r6 [npc-get-acquisition]
004C   0x001278   30 09 09 00   OpLogNot            r9, r9         r9 = !r9 -> <TRUE>
L_6:
004D   0x001280   2F 55 09 00   BranchIfNot         r9, 0055       IF NOT r9 [0x6BB428FA] => L_7
004E   0x001288   0C 09 01 00   LoadU16Imm          r9, 1          r9 = 1
004F   0x001290   43 02 09 00   Move                r2, r9         r2 = r9 [1]
0050   0x001298   43 09 02 00   Move                r9, r2         r9 = r2 [1]
0051   0x0012A0   41 09 0A 00   LoadStaticPointerImmr9, 10         r9 = ST[10] -> <0xBF0273D4>
0052   0x0012A8   43 03 09 00   Move                r3, r9         r3 = r9 [0xBF0273D4]
0053   0x0012B0   43 09 03 00   Move                r9, r3         r9 = r3 [0xBF0273D4]
0054   0x0012B8   2D 5B 00 00   Branch              005B           => L_2
L_7:
0055   0x0012C0   0C 09 00 00   LoadU16Imm          r9, 0          r9 = 0
0056   0x0012C8   43 02 09 00   Move                r2, r9         r2 = r9 [0]
0057   0x0012D0   43 09 02 00   Move                r9, r2         r9 = r2 [0]
0058   0x0012D8   41 09 0B 00   LoadStaticPointerImmr9, 11         r9 = ST[11] -> <0xBF027499>
0059   0x0012E0   43 03 09 00   Move                r3, r9         r3 = r9 [0xBF027499]
005A   0x0012E8   43 09 03 00   Move                r9, r3         r9 = r3 [0xBF027499]
L_2:
005B   0x0012F0   2D 79 00 00   Branch              0079           => L_8
L_0:
005C   0x0012F8   43 09 04 00   Move                r9, r4         r9 = r4 [npc-get-awareness()]
005D   0x001300   0C 0A 00 00   LoadU16Imm          r10, 0         r10 = 0
005E   0x001308   21 09 09 0A   ILessThanEqual      r9, r9, r10    r9 = r9 [658906625] <= r10 [0]
005F   0x001310   2F 62 09 00   BranchIfNot         r9, 0062       IF NOT r9 [0x27461E01] => L_9
0060   0x001318   43 09 06 00   Move                r9, r6         r9 = r6 [npc-get-acquisition]
0061   0x001320   30 09 09 00   OpLogNot            r9, r9         r9 = !r9 -> <TRUE>
L_9:
0062   0x001328   2F 65 09 00   BranchIfNot         r9, 0065       IF NOT r9 [0x6BB428FA] => L_10
0063   0x001330   43 09 08 00   Move                r9, r8         r9 = r8 [npc-get-recognition]
0064   0x001338   30 09 09 00   OpLogNot            r9, r9         r9 = !r9 -> <TRUE>
L_10:
0065   0x001340   2F 6D 09 00   BranchIfNot         r9, 006D       IF NOT r9 [0xDFBF4722] => L_11
0066   0x001348   0C 09 01 00   LoadU16Imm          r9, 1          r9 = 1
0067   0x001350   43 02 09 00   Move                r2, r9         r2 = r9 [1]
0068   0x001358   43 09 02 00   Move                r9, r2         r9 = r2 [1]
0069   0x001360   41 09 0C 00   LoadStaticPointerImmr9, 12         r9 = ST[12] -> <0xBF02738D>
006A   0x001368   43 03 09 00   Move                r3, r9         r3 = r9 [0xBF02738D]
006B   0x001370   43 09 03 00   Move                r9, r3         r9 = r3 [0xBF02738D]
006C   0x001378   2D 79 00 00   Branch              0079           => L_8
L_11:
006D   0x001380   0C 09 00 00   LoadU16Imm          r9, 0          r9 = 0
006E   0x001388   43 02 09 00   Move                r2, r9         r2 = r9 [0]
006F   0x001390   43 09 02 00   Move                r9, r2         r9 = r2 [0]
0070   0x001398   43 09 06 00   Move                r9, r6         r9 = r6 [npc-get-acquisition]
0071   0x0013A0   2E 73 09 00   BranchIf            r9, 0073       IF r9 [npc-get-acquisition] => L_12
0072   0x0013A8   43 09 08 00   Move                r9, r8         r9 = r8 [npc-get-recognition]
L_12:
0073   0x0013B0   2F 76 09 00   BranchIfNot         r9, 0076       IF NOT r9 [npc-get-recognition] => L_13
0074   0x0013B8   41 09 0D 00   LoadStaticPointerImmr9, 13         r9 = ST[13] -> <0xBF027396>
0075   0x0013C0   2D 77 00 00   Branch              0077           => L_14
L_13:
0076   0x0013C8   41 09 0E 00   LoadStaticPointerImmr9, 14         r9 = ST[14] -> <0xBF027373>
L_14:
0077   0x0013D0   43 03 09 00   Move                r3, r9         r3 = r9 [0xBF027373]
0078   0x0013D8   43 09 03 00   Move                r9, r3         r9 = r3 [0xBF027373]
L_8:
0079   0x0013E0   15 09 0F 00   LookupPointer       r9, 15         r9 = ST[15] -> <#B96C7EEF7ACAB122>
007A   0x0013E8   2F 7F 09 00   BranchIfNot         r9, 007F       IF NOT r9 [0x7ACAB122] => L_15
007B   0x0013F0   15 09 0F 01   LookupPointer       r9, 15         r9 = ST[15] -> <#B96C7EEF7ACAB122>
007C   0x0013F8   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
007D   0x001400   3B 09 09 31   IAddImm             r9, r9, 49     r9 = r9 [-1621296570] / 49 -> <-1621296570>
007E   0x001408   4C 09 09 00   LoadU8              ???            UNKNOWN INSTRUCTION
L_15:
007F   0x001410   2F B9 09 00   BranchIfNot         r9, 00B9       IF NOT r9 [-1621296570] => L_16
0080   0x001418   15 09 10 00   LookupPointer       r9, 16         r9 = ST[16] -> <debug-draw-string>
0081   0x001420   15 0A 11 00   LookupPointer       r10, 17        r10 = ST[17] -> <offset-position>
0082   0x001428   15 0B 12 00   LookupPointer       r11, 18        r11 = ST[18] -> <get-object-position>
0083   0x001430   43 0C 00 00   Move                r12, r0        r12 = r0 [0x0]
0084   0x001438   43 31 0C 00   Move                r49, r12       r49 = r12 [0x0]
0085   0x001440   1C 0B 0B 01   CallFf              r11, r11, 1    r11 = get-object-position(0x0)
0086   0x001448   15 0C 13 00   LookupPointer       r12, 19        r12 = ST[19] -> <alloc-vector>
0087   0x001450   40 0D 04 00   LoadStaticFloatImm  r13, 4         r13 = ST[4] -> <0.00>
0088   0x001458   40 0E 14 00   LoadStaticFloatImm  r14, 20        r14 = ST[20] -> <1.80>
0089   0x001460   40 0F 04 00   LoadStaticFloatImm  r15, 4         r15 = ST[4] -> <0.00>
008A   0x001468   40 10 15 00   LoadStaticFloatImm  r16, 21        r16 = ST[21] -> <1.00>
008B   0x001470   0C 11 00 00   LoadU16Imm          r17, 0         r17 = 0
008C   0x001478   43 31 0D 00   Move                r49, r13       r49 = r13 [0x0]
008D   0x001480   43 32 0E 00   Move                r50, r14       r50 = r14 [0x3FE66666]
008E   0x001488   43 33 0F 00   Move                r51, r15       r51 = r15 [0x0]
008F   0x001490   43 34 10 00   Move                r52, r16       r52 = r16 [0x3F800000]
0090   0x001498   43 35 11 00   Move                r53, r17       r53 = r17 [0]
0091   0x0014A0   1C 0C 0C 05   CallFf              r12, r12, 5    r12 = alloc-vector(0x0, 0x3FE66666, 0x0, 0x3F800000, 0)
0092   0x0014A8   43 31 0B 00   Move                r49, r11       r49 = r11 [get-object-position()]
0093   0x0014B0   43 32 0C 00   Move                r50, r12       r50 = r12 [alloc-vector()]
0094   0x0014B8   1C 0A 0A 02   CallFf              r10, r10, 2    r10 = offset-position(get-object-position(), alloc-vector())
0095   0x0014C0   15 0B 16 00   LookupPointer       r11, 22        r11 = ST[22] -> <#5445173390656D6D>
0096   0x0014C8   41 0C 17 00   LoadStaticPointerImmr12, 23        r12 = ST[23] -> <0xBF027782>
0097   0x0014D0   43 0D 05 00   Move                r13, r5        r13 = r5 [npc-get-acquisition()]
0098   0x0014D8   43 0E 07 00   Move                r14, r7        r14 = r7 [npc-get-recognition()]
0099   0x0014E0   43 0F 02 00   Move                r15, r2        r15 = r2 [0]
009A   0x0014E8   2F 9D 0F 00   BranchIfNot         r15, 009D      IF NOT r15 [0] => L_17
009B   0x0014F0   41 0F 18 00   LoadStaticPointerImmr15, 24        r15 = ST[24] -> <0xBF027561>
009C   0x0014F8   2D 9E 00 00   Branch              009E           => L_18
L_17:
009D   0x001500   41 0F 19 00   LoadStaticPointerImmr15, 25        r15 = ST[25] -> <0xBF02766A>
L_18:
009E   0x001508   43 10 03 00   Move                r16, r3        r16 = r3 [0xBF027373]
009F   0x001510   43 31 0C 00   Move                r49, r12       r49 = r12 [0xBF027782]
00A0   0x001518   43 32 0D 00   Move                r50, r13       r50 = r13 [npc-get-acquisition()]
00A1   0x001520   43 33 0E 00   Move                r51, r14       r51 = r14 [npc-get-recognition()]
00A2   0x001528   43 34 0F 00   Move                r52, r15       r52 = r15 [0xBF02766A]
00A3   0x001530   43 35 10 00   Move                r53, r16       r53 = r16 [0xBF027373]
00A4   0x001538   1C 0B 0B 05   CallFf              r11, r11, 5    r11 = #5445173390656D6D(0xBF027782, npc-get-acquisition(), npc-get-recognition(), 0xBF02766A, 0xBF027373)
00A5   0x001540   43 0C 02 00   Move                r12, r2        r12 = r2 [0]
00A6   0x001548   2F A9 0C 00   BranchIfNot         r12, 00A9      IF NOT r12 [0] => L_19
00A7   0x001550   0C 0C 01 00   LoadU16Imm          r12, 1         r12 = 1
00A8   0x001558   2D AA 00 00   Branch              00AA           => L_20
L_19:
00A9   0x001560   0C 0C 09 00   LoadU16Imm          r12, 9         r12 = 9
L_20:
00AA   0x001568   40 0D 04 00   LoadStaticFloatImm  r13, 4         r13 = ST[4] -> <0.00>
00AB   0x001570   0C 0E 00 00   LoadU16Imm          r14, 0         r14 = 0
00AC   0x001578   40 0F 15 00   LoadStaticFloatImm  r15, 21        r15 = ST[21] -> <1.00>
00AD   0x001580   0C 10 00 00   LoadU16Imm          r16, 0         r16 = 0
00AE   0x001588   0C 11 00 00   LoadU16Imm          r17, 0         r17 = 0
00AF   0x001590   43 31 0A 00   Move                r49, r10       r49 = r10 [offset-position()]
00B0   0x001598   43 32 0B 00   Move                r50, r11       r50 = r11 [#5445173390656D6D()]
00B1   0x0015A0   43 33 0C 00   Move                r51, r12       r51 = r12 [9]
00B2   0x0015A8   43 34 0D 00   Move                r52, r13       r52 = r13 [0x0]
00B3   0x0015B0   43 35 0E 00   Move                r53, r14       r53 = r14 [0]
00B4   0x0015B8   43 36 0F 00   Move                r54, r15       r54 = r15 [0x3F800000]
00B5   0x0015C0   43 37 10 00   Move                r55, r16       r55 = r16 [0]
00B6   0x0015C8   43 38 11 00   Move                r56, r17       r56 = r17 [0]
00B7   0x0015D0   1C 09 09 08   CallFf              r9, r9, 8      r9 = debug-draw-string(offset-position(), #5445173390656D6D(), 9, 0x0, 0, 0x3F800000, 0, 0)
00B8   0x0015D8   2D BA 00 00   Branch              00BA           => L_21
L_16:
00B9   0x0015E0   0C 09 00 00   LoadU16Imm          r9, 0          r9 = 0
L_21:
00BA   0x0015E8   43 09 02 00   Move                r9, r2         r9 = r2 [0]
00BB   0x0015F0   43 09 09 00   Move                r9, r9         r9 = r9 [0]
00BC   0x0015F8   43 08 09 00   Move                r8, r9         r8 = r9 [0]
00BD   0x001600   43 07 08 00   Move                r7, r8         r7 = r8 [0]
00BE   0x001608   43 06 07 00   Move                r6, r7         r6 = r7 [0]
00BF   0x001610   43 05 06 00   Move                r5, r6         r5 = r6 [0]
00C0   0x001618   43 04 05 00   Move                r4, r5         r4 = r5 [0]
00C1   0x001620   43 03 04 00   Move                r3, r4         r3 = r4 [0]
00C2   0x001628   43 02 03 00   Move                r2, r3         r2 = r3 [0]
00C3   0x001630   00 02 02 00   Return              r2             Return 0
SYMBOL TABLE: 
0000   0x001638    POINTER <#00000282BF025EFC>
0001   0x001640    POINTER <npc-get-awareness>
0002   0x001648    SID <player>
0003   0x001650    POINTER <npc-get-acquisition>
0004   0x001658    FLOAT <0.000000>
0005   0x001660    POINTER <npc-get-recognition>
0006   0x001668    POINTER <#00000282BF027381>
0007   0x001670    POINTER <#A548628CB635DC72>
0008   0x001678    POINTER <#00000282BF02734B>
0009   0x001680    POINTER <#00000282BF0273EF>
000A   0x001688    POINTER <#00000282BF0273D4>
000B   0x001690    POINTER <#00000282BF027499>
000C   0x001698    POINTER <#00000282BF02738D>
000D   0x0016A0    POINTER <#00000282BF027396>
000E   0x0016A8    POINTER <#00000282BF027373>
000F   0x0016B0    POINTER <#B96C7EEF7ACAB122>
0010   0x0016B8    POINTER <debug-draw-string>
0011   0x0016C0    POINTER <offset-position>
0012   0x0016C8    POINTER <get-object-position>
0013   0x0016D0    POINTER <alloc-vector>
0014   0x0016D8    FLOAT <1.800000>
0015   0x0016E0    FLOAT <1.000000>
0016   0x0016E8    POINTER <#5445173390656D6D>
0017   0x0016F0    POINTER <#00000282BF027782>
0018   0x0016F8    POINTER <#00000282BF027561>
0019   0x001700    POINTER <#00000282BF02766A>
  }
####################################################################################################
  [0x001708] #608356039B1FD9FD: script-lambda 
  {
LAMBDA0000   0x001760   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <get-symbol>
0001   0x001768   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <current-task>
0002   0x001770   4A 02 02 00   LoadStaticU64Imm    r2, 2          r2 = ST[2] -> <self>
0003   0x001778   43 31 01 00   Move                r49, r1        r49 = r1 [current-task]
0004   0x001780   43 32 02 00   Move                r50, r2        r50 = r2 [self]
0005   0x001788   1C 00 00 02   CallFf              r0, r0, 2      r0 = get-symbol(current-task, self)
0006   0x001790   15 01 00 00   LookupPointer       r1, 0          r1 = ST[0] -> <get-symbol>
0007   0x001798   4A 02 01 00   LoadStaticU64Imm    r2, 1          r2 = ST[1] -> <current-task>
0008   0x0017A0   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <ss-wave-manager-level-set-loader-1>
0009   0x0017A8   43 31 02 00   Move                r49, r2        r49 = r2 [current-task]
000A   0x0017B0   43 32 03 00   Move                r50, r3        r50 = r3 [ss-wave-manager-level-set-loader-1]
000B   0x0017B8   1C 01 01 02   CallFf              r1, r1, 2      r1 = get-symbol(current-task, ss-wave-manager-level-set-loader-1)
000C   0x0017C0   1D 00 00 01   IEqual              r0, r0, r1     r0 = r0 [1774822657] == r1 [1774822854]
000D   0x0017C8   2F 14 00 00   BranchIfNot         r0, 0014       IF NOT r0 [0x69C9A501] => L_0
000E   0x0017D0   15 00 04 00   LookupPointer       r0, 4          r0 = ST[4] -> <get-boolean>
000F   0x0017D8   4A 01 05 00   LoadStaticU64Imm    r1, 5          r1 = ST[5] -> <#B0E4DDF4A79D13AC>
0010   0x0017E0   4A 02 03 00   LoadStaticU64Imm    r2, 3          r2 = ST[3] -> <ss-wave-manager-level-set-loader-1>
0011   0x0017E8   43 31 01 00   Move                r49, r1        r49 = r1 [#B0E4DDF4A79D13AC]
0012   0x0017F0   43 32 02 00   Move                r50, r2        r50 = r2 [ss-wave-manager-level-set-loader-1]
0013   0x0017F8   1C 00 00 02   CallFf              r0, r0, 2      r0 = get-boolean(#B0E4DDF4A79D13AC, ss-wave-manager-level-set-loader-1)
L_0:
0014   0x001800   2F 4D 00 00   BranchIfNot         r0, 004D       IF NOT r0 [get-boolean()] => L_1
0015   0x001808   15 00 06 00   LookupPointer       r0, 6          r0 = ST[6] -> <get-svar>
0016   0x001810   4A 01 07 00   LoadStaticU64Imm    r1, 7          r1 = ST[7] -> <#47CB08FCD5FE82DB>
0017   0x001818   43 31 01 00   Move                r49, r1        r49 = r1 [#47CB08FCD5FE82DB]
0018   0x001820   1B 00 00 01   Call                r0, r0, 1      r0 = get-svar(#47CB08FCD5FE82DB)
0019   0x001828   15 01 08 00   LookupPointer       r1, 8          r1 = ST[8] -> <#8693D9A4BDE7277F>
001A   0x001830   43 02 00 00   Move                r2, r0         r2 = r0 [get-svar()]
001B   0x001838   43 31 02 00   Move                r49, r2        r49 = r2 [get-svar()]
001C   0x001840   1B 01 01 01   Call                r1, r1, 1      r1 = #8693D9A4BDE7277F(get-svar())
001D   0x001848   15 02 09 00   LookupPointer       r2, 9          r2 = ST[9] -> <#1E176D04CC65D2D7>
001E   0x001850   15 03 0A 00   LookupPointer       r3, 10         r3 = ST[10] -> <task-get-current-node-id>
001F   0x001858   1C 03 03 00   CallFf              r3, r3, 0      r3 = task-get-current-node-id()
0020   0x001860   15 04 0B 00   LookupPointer       r4, 11         r4 = ST[11] -> <task-get-current-subnode-id>
0021   0x001868   1C 04 04 00   CallFf              r4, r4, 0      r4 = task-get-current-subnode-id()
0022   0x001870   43 31 03 00   Move                r49, r3        r49 = r3 [task-get-current-node-id()]
0023   0x001878   43 32 04 00   Move                r50, r4        r50 = r4 [task-get-current-subnode-id()]
0024   0x001880   1B 02 02 02   Call                r2, r2, 2      r2 = #1E176D04CC65D2D7(task-get-current-node-id(), task-get-current-subnode-id())
0025   0x001888   15 03 0C 00   LookupPointer       r3, 12         r3 = ST[12] -> <#9B439BF7680342CC>
0026   0x001890   43 04 02 00   Move                r4, r2         r4 = r2 [#1E176D04CC65D2D7()]
0027   0x001898   43 31 04 00   Move                r49, r4        r49 = r4 [#1E176D04CC65D2D7()]
0028   0x0018A0   1B 03 03 01   Call                r3, r3, 1      r3 = #9B439BF7680342CC(#1E176D04CC65D2D7())
0029   0x0018A8   15 04 0D 00   LookupPointer       r4, 13         r4 = ST[13] -> <log-event>
002A   0x0018B0   41 05 0E 00   LoadStaticPointerImmr5, 14         r5 = ST[14] -> <0xBF0277D3>
002B   0x0018B8   0C 06 01 00   LoadU16Imm          r6, 1          r6 = 1
002C   0x0018C0   15 07 0F 00   LookupPointer       r7, 15         r7 = ST[15] -> <#5445173390656D6D>
002D   0x0018C8   41 08 10 00   LoadStaticPointerImmr8, 16         r8 = ST[16] -> <0xBF025F0D>
002E   0x0018D0   0C 09 00 00   LoadU16Imm          r9, 0          r9 = 0
002F   0x0018D8   15 0A 11 00   LookupPointer       r10, 17        r10 = ST[17] -> <string-compare>
0030   0x0018E0   43 0B 01 00   Move                r11, r1        r11 = r1 [#8693D9A4BDE7277F()]
0031   0x0018E8   41 0C 12 00   LoadStaticPointerImmr12, 18        r12 = ST[18] -> <0xBF025EFC>
0032   0x0018F0   43 31 0B 00   Move                r49, r11       r49 = r11 [#8693D9A4BDE7277F()]
0033   0x0018F8   43 32 0C 00   Move                r50, r12       r50 = r12 [0xBF025EFC]
0034   0x001900   1C 0A 0A 02   CallFf              r10, r10, 2    r10 = string-compare(#8693D9A4BDE7277F(), 0xBF025EFC)
0035   0x001908   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [0] == r10 [-1511029010]
0036   0x001910   2F 39 09 00   BranchIfNot         r9, 0039       IF NOT r9 [0x0] => L_2
0037   0x001918   41 09 13 00   LoadStaticPointerImmr9, 19         r9 = ST[19] -> <0xBF0271AE>
0038   0x001920   2D 3A 00 00   Branch              003A           => L_3
L_2:
0039   0x001928   43 09 01 00   Move                r9, r1         r9 = r1 [#8693D9A4BDE7277F()]
L_3:
003A   0x001930   43 0A 03 00   Move                r10, r3        r10 = r3 [#9B439BF7680342CC()]
003B   0x001938   43 31 08 00   Move                r49, r8        r49 = r8 [0xBF025F0D]
003C   0x001940   43 32 09 00   Move                r50, r9        r50 = r9 [#8693D9A4BDE7277F()]
003D   0x001948   43 33 0A 00   Move                r51, r10       r51 = r10 [#9B439BF7680342CC()]
003E   0x001950   1C 07 07 03   CallFf              r7, r7, 3      r7 = #5445173390656D6D(0xBF025F0D, #8693D9A4BDE7277F(), #9B439BF7680342CC())
003F   0x001958   0C 08 00 00   LoadU16Imm          r8, 0          r8 = 0
0040   0x001960   0C 09 00 00   LoadU16Imm          r9, 0          r9 = 0
0041   0x001968   43 31 05 00   Move                r49, r5        r49 = r5 [0xBF0277D3]
0042   0x001970   43 32 06 00   Move                r50, r6        r50 = r6 [1]
0043   0x001978   43 33 07 00   Move                r51, r7        r51 = r7 [#5445173390656D6D()]
0044   0x001980   43 34 08 00   Move                r52, r8        r52 = r8 [0]
0045   0x001988   43 35 09 00   Move                r53, r9        r53 = r9 [0]
0046   0x001990   1C 04 04 05   CallFf              r4, r4, 5      r4 = log-event(0xBF0277D3, 1, #5445173390656D6D(), 0, 0)
0047   0x001998   43 04 04 00   Move                r4, r4         r4 = r4 [log-event()]
0048   0x0019A0   43 03 04 00   Move                r3, r4         r3 = r4 [log-event]
0049   0x0019A8   43 02 03 00   Move                r2, r3         r2 = r3 [log-event]
004A   0x0019B0   43 01 02 00   Move                r1, r2         r1 = r2 [log-event]
004B   0x0019B8   43 00 01 00   Move                r0, r1         r0 = r1 [log-event]
004C   0x0019C0   2D 4E 00 00   Branch              004E           => L_RETURN
L_1:
004D   0x0019C8   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
004E   0x0019D0   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x0019D8    POINTER <get-symbol>
0001   0x0019E0    SID <current-task>
0002   0x0019E8    SID <self>
0003   0x0019F0    SID <ss-wave-manager-level-set-loader-1>
0004   0x0019F8    POINTER <get-boolean>
0005   0x001A00    SID <#B0E4DDF4A79D13AC>
0006   0x001A08    POINTER <get-svar>
0007   0x001A10    SID <#47CB08FCD5FE82DB>
0008   0x001A18    POINTER <#8693D9A4BDE7277F>
0009   0x001A20    POINTER <#1E176D04CC65D2D7>
000A   0x001A28    POINTER <task-get-current-node-id>
000B   0x001A30    POINTER <task-get-current-subnode-id>
000C   0x001A38    POINTER <#9B439BF7680342CC>
000D   0x001A40    POINTER <log-event>
000E   0x001A48    POINTER <#00000282BF0277D3>
000F   0x001A50    POINTER <#5445173390656D6D>
0010   0x001A58    POINTER <#00000282BF025F0D>
0011   0x001A60    POINTER <string-compare>
0012   0x001A68    POINTER <#00000282BF025EFC>
0013   0x001A70    POINTER <#00000282BF0271AE>
  }
####################################################################################################
  [0x001A78] #7C28D25188889230: script-lambda 
  {
LAMBDA0000   0x001AD0   43 00 31 00   Move                r0, r49        r0 = r49 [0x0]
0001   0x001AD8   15 01 00 00   LookupPointer       r1, 0          r1 = ST[0] -> <#E16F9CC43A37FADA>
0002   0x001AE0   43 02 00 00   Move                r2, r0         r2 = r0 [0x0]
0003   0x001AE8   43 31 02 00   Move                r49, r2        r49 = r2 [0x0]
0004   0x001AF0   1B 01 01 01   Call                r1, r1, 1      r1 = #E16F9CC43A37FADA(0x0)
0005   0x001AF8   3F 02 01 00   LoadStaticI32Imm    r2, 1          r2 = ST[1] -> <-1>
0006   0x001B00   1A 02 02 00   CastFloat           r2, r2         r2 = float(r2) -> <-1082130432> => <-1.000000>
0007   0x001B08   07 01 01 02   FMul                r1, r1, r2     0x0 = #E16F9CC43A37FADA() * 0xBF800000
0008   0x001B10   00 01 01 00   Return              r1             Return 0x0
SYMBOL TABLE: 
0000   0x001B18    POINTER <#E16F9CC43A37FADA>
0001   0x001B20    INT <-1>
  }
####################################################################################################
  [0x004DD0] #88F409F4BF0F056A: d-array 
  {
    array** -> [0x06150] {
          *default-global-combat-params** -> [0x068F0] {
                sid: array
                sid: main
                float: 0.0000
                float: 0.0000
                array* -> [0x06EA0] {
                      script-lambda* -> [0x078D0] {
                        LAMBDA0000   0x00B4F8   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <#B96C7EEF7ACAB122>
0001   0x00B500   2F 06 00 00   BranchIfNot         r0, 0006       IF NOT r0 [0x7ACAB122] => L_0
0002   0x00B508   15 00 00 01   LookupPointer       r0, 0          r0 = ST[0] -> <#B96C7EEF7ACAB122>
0003   0x00B510   5D 00 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0004   0x00B518   3B 00 00 10   IAddImm             r0, r0, 16     r0 = r0 [2060103970] / 16 -> <2060103970>
0005   0x00B520   4C 00 00 00   LoadU8              ???            UNKNOWN INSTRUCTION
L_0:
0006   0x00B528   2F 0E 00 00   BranchIfNot         r0, 000E       IF NOT r0 [2060103970] => L_1
0007   0x00B530   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <#B96C7EEF7ACAB122>
0008   0x00B538   3B 00 00 10   IAddImm             r0, r0, 16     r0 = r0 [2060103970] / 16 -> <2060103970>
0009   0x00B540   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
000A   0x00B548   53 00 00 01   StoreU8             ???            UNKNOWN INSTRUCTION
000B   0x00B550   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <task-restart-from-continue>
000C   0x00B558   1C 00 00 00   CallFf              r0, r0, 0      r0 = task-restart-from-continue()
000D   0x00B560   2D 0F 00 00   Branch              000F           => L_RETURN
L_1:
000E   0x00B568   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
000F   0x00B570   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x00B578    POINTER <#B96C7EEF7ACAB122>
0001   0x00B580    POINTER <task-restart-from-continue>
                      }
                      float: 0.0000
                      float: 0.0000
                }
          }
          float: 0.0000
          int: -1
    }
    float: 0.0000
    float: 0.0000
  }
####################################################################################################
  [0x001B28] #8A8D5C923D5DDB3B: script-lambda 
  {
LAMBDA0000   0x001B80   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <get-int32>
0001   0x001B88   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#5389CC70A44E7358>
0002   0x001B90   4A 02 02 00   LoadStaticU64Imm    r2, 2          r2 = ST[2] -> <self>
0003   0x001B98   43 31 01 00   Move                r49, r1        r49 = r1 [#5389CC70A44E7358]
0004   0x001BA0   43 32 02 00   Move                r50, r2        r50 = r2 [self]
0005   0x001BA8   1C 00 00 02   CallFf              r0, r0, 2      r0 = get-int32(#5389CC70A44E7358, self)
0006   0x001BB0   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
0007   0x001BB8   1E 00 00 01   IGreaterThan        r0, r0, r1     r0 = r0 [-635293440] > r1 [0]
0008   0x001BC0   2F 10 00 00   BranchIfNot         r0, 0010       IF NOT r0 [0xDA223100] => L_0
0009   0x001BC8   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <get-int32>
000A   0x001BD0   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#5389CC70A44E7358>
000B   0x001BD8   4A 02 02 00   LoadStaticU64Imm    r2, 2          r2 = ST[2] -> <self>
000C   0x001BE0   43 31 01 00   Move                r49, r1        r49 = r1 [#5389CC70A44E7358]
000D   0x001BE8   43 32 02 00   Move                r50, r2        r50 = r2 [self]
000E   0x001BF0   1C 00 00 02   CallFf              r0, r0, 2      r0 = get-int32(#5389CC70A44E7358, self)
000F   0x001BF8   2D 16 00 00   Branch              0016           => L_RETURN
L_0:
0010   0x001C00   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <get-int32>
0011   0x001C08   4A 01 03 00   LoadStaticU64Imm    r1, 3          r1 = ST[3] -> <#CEF93DF859F605EA>
0012   0x001C10   4A 02 02 00   LoadStaticU64Imm    r2, 2          r2 = ST[2] -> <self>
0013   0x001C18   43 31 01 00   Move                r49, r1        r49 = r1 [#CEF93DF859F605EA]
0014   0x001C20   43 32 02 00   Move                r50, r2        r50 = r2 [self]
0015   0x001C28   1C 00 00 02   CallFf              r0, r0, 2      r0 = get-int32(#CEF93DF859F605EA, self)
L_RETURN:
0016   0x001C30   00 00 00 00   Return              r0             Return get-int32()
SYMBOL TABLE: 
0000   0x001C38    POINTER <get-int32>
0001   0x001C40    SID <#5389CC70A44E7358>
0002   0x001C48    SID <self>
0003   0x001C50    SID <#CEF93DF859F605EA>
  }
####################################################################################################
  [0x001C58] #9265F983755147F4: script-lambda 
  {
LAMBDA0000   0x001CB0   41 00 00 00   LoadStaticPointerImmr0, 0          r0 = ST[0] -> <0xBF027CA1>
0001   0x001CB8   41 01 00 00   LoadStaticPointerImmr1, 0          r1 = ST[0] -> <0xBF027CA1>
0002   0x001CC0   41 02 00 00   LoadStaticPointerImmr2, 0          r2 = ST[0] -> <0xBF027CA1>
0003   0x001CC8   41 03 00 00   LoadStaticPointerImmr3, 0          r3 = ST[0] -> <0xBF027CA1>
0004   0x001CD0   41 04 00 00   LoadStaticPointerImmr4, 0          r4 = ST[0] -> <0xBF027CA1>
0005   0x001CD8   41 05 00 00   LoadStaticPointerImmr5, 0          r5 = ST[0] -> <0xBF027CA1>
0006   0x001CE0   15 06 01 00   LookupPointer       r6, 1          r6 = ST[1] -> <darray-count>
0007   0x001CE8   15 07 02 00   LookupPointer       r7, 2          r7 = ST[2] -> <get-symbol>
0008   0x001CF0   4A 08 03 00   LoadStaticU64Imm    r8, 3          r8 = ST[3] -> <#3CD186F47CCAE6B1>
0009   0x001CF8   4A 09 04 00   LoadStaticU64Imm    r9, 4          r9 = ST[4] -> <self>
000A   0x001D00   43 31 08 00   Move                r49, r8        r49 = r8 [#3CD186F47CCAE6B1]
000B   0x001D08   43 32 09 00   Move                r50, r9        r50 = r9 [self]
000C   0x001D10   1C 07 07 02   CallFf              r7, r7, 2      r7 = get-symbol(#3CD186F47CCAE6B1, self)
000D   0x001D18   43 31 07 00   Move                r49, r7        r49 = r7 [get-symbol()]
000E   0x001D20   1C 06 06 01   CallFf              r6, r6, 1      r6 = darray-count(get-symbol())
000F   0x001D28   0C 07 00 00   LoadU16Imm          r7, 0          r7 = 0
0010   0x001D30   1D 06 06 07   IEqual              r6, r6, r7     r6 = r6 [1753163008] == r7 [0]
0011   0x001D38   30 06 06 00   OpLogNot            r6, r6         r6 = !r6 -> <TRUE>
0012   0x001D40   2F D3 06 01   BranchIfNot         r6, 01D3       IF NOT r6 [0x687F2501] => L_0
0013   0x001D48   0C 06 00 00   LoadU16Imm          r6, 0          r6 = 0
0014   0x001D50   15 07 01 00   LookupPointer       r7, 1          r7 = ST[1] -> <darray-count>
0015   0x001D58   15 08 02 00   LookupPointer       r8, 2          r8 = ST[2] -> <get-symbol>
0016   0x001D60   4A 09 03 00   LoadStaticU64Imm    r9, 3          r9 = ST[3] -> <#3CD186F47CCAE6B1>
0017   0x001D68   4A 0A 04 00   LoadStaticU64Imm    r10, 4         r10 = ST[4] -> <self>
0018   0x001D70   43 31 09 00   Move                r49, r9        r49 = r9 [#3CD186F47CCAE6B1]
0019   0x001D78   43 32 0A 00   Move                r50, r10       r50 = r10 [self]
001A   0x001D80   1C 08 08 02   CallFf              r8, r8, 2      r8 = get-symbol(#3CD186F47CCAE6B1, self)
001B   0x001D88   43 31 08 00   Move                r49, r8        r49 = r8 [get-symbol()]
001C   0x001D90   1C 07 07 01   CallFf              r7, r7, 1      r7 = darray-count(get-symbol())
001D   0x001D98   15 08 05 00   LookupPointer       r8, 5          r8 = ST[5] -> <begin-foreach>
001E   0x001DA0   1C 08 08 00   CallFf              r8, r8, 0      r8 = begin-foreach()
L_15:
001F   0x001DA8   43 08 06 00   Move                r8, r6         r8 = r6 [0]
0020   0x001DB0   43 09 07 00   Move                r9, r7         r9 = r7 [darray-count()]
0021   0x001DB8   20 08 08 09   ILessThan           r8, r8, r9     r8 = r8 [1] < r9 [1753163078]
0022   0x001DC0   2F 90 08 00   BranchIfNot         r8, 0090       IF NOT r8 [0x1] => L_1
0023   0x001DC8   15 08 06 00   LookupPointer       r8, 6          r8 = ST[6] -> <darray-at>
0024   0x001DD0   15 09 02 00   LookupPointer       r9, 2          r9 = ST[2] -> <get-symbol>
0025   0x001DD8   4A 0A 03 00   LoadStaticU64Imm    r10, 3         r10 = ST[3] -> <#3CD186F47CCAE6B1>
0026   0x001DE0   4A 0B 04 00   LoadStaticU64Imm    r11, 4         r11 = ST[4] -> <self>
0027   0x001DE8   43 31 0A 00   Move                r49, r10       r49 = r10 [#3CD186F47CCAE6B1]
0028   0x001DF0   43 32 0B 00   Move                r50, r11       r50 = r11 [self]
0029   0x001DF8   1C 09 09 02   CallFf              r9, r9, 2      r9 = get-symbol(#3CD186F47CCAE6B1, self)
002A   0x001E00   43 0A 06 00   Move                r10, r6        r10 = r6 [0]
002B   0x001E08   43 31 09 00   Move                r49, r9        r49 = r9 [get-symbol()]
002C   0x001E10   43 32 0A 00   Move                r50, r10       r50 = r10 [0]
002D   0x001E18   1C 08 08 02   CallFf              r8, r8, 2      r8 = darray-at(get-symbol(), 0)
002E   0x001E20   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
002F   0x001E28   2F 36 09 00   BranchIfNot         r9, 0036       IF NOT r9 [darray-at()] => L_2
0030   0x001E30   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0031   0x001E38   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0032   0x001E40   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
0033   0x001E48   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
0034   0x001E50   0C 0A 01 00   LoadU16Imm          r10, 1         r10 = 1
0035   0x001E58   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [1]
L_2:
0036   0x001E60   2F 3B 09 00   BranchIfNot         r9, 003B       IF NOT r9 [0xD3F1F500] => L_3
0037   0x001E68   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0038   0x001E70   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0039   0x001E78   4C 09 09 00   LoadU8              ???            UNKNOWN INSTRUCTION
003A   0x001E80   2D 7E 00 00   Branch              007E           => L_4
L_3:
003B   0x001E88   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
003C   0x001E90   2F 43 09 00   BranchIfNot         r9, 0043       IF NOT r9 [darray-at()] => L_5
003D   0x001E98   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
003E   0x001EA0   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
003F   0x001EA8   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
0040   0x001EB0   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
0041   0x001EB8   0C 0A 02 00   LoadU16Imm          r10, 2         r10 = 2
0042   0x001EC0   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [2]
L_5:
0043   0x001EC8   2F 48 09 00   BranchIfNot         r9, 0048       IF NOT r9 [0xD3F1F500] => L_6
0044   0x001ED0   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0045   0x001ED8   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0046   0x001EE0   4F 09 09 00   LoadI32             ???            UNKNOWN INSTRUCTION
0047   0x001EE8   2D 7E 00 00   Branch              007E           => L_4
L_6:
0048   0x001EF0   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0049   0x001EF8   2F 50 09 00   BranchIfNot         r9, 0050       IF NOT r9 [darray-at()] => L_7
004A   0x001F00   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
004B   0x001F08   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
004C   0x001F10   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
004D   0x001F18   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
004E   0x001F20   0C 0A 03 00   LoadU16Imm          r10, 3         r10 = 3
004F   0x001F28   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [3]
L_7:
0050   0x001F30   2F 55 09 00   BranchIfNot         r9, 0055       IF NOT r9 [0xD3F1F500] => L_8
0051   0x001F38   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0052   0x001F40   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0053   0x001F48   0D 09 09 00   LoadU32             r9, [r9]       r9 = [0x0 + 0x0]
0054   0x001F50   2D 7E 00 00   Branch              007E           => L_4
L_8:
0055   0x001F58   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0056   0x001F60   2F 5D 09 00   BranchIfNot         r9, 005D       IF NOT r9 [darray-at()] => L_9
0057   0x001F68   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0058   0x001F70   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0059   0x001F78   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
005A   0x001F80   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
005B   0x001F88   0C 0A 04 00   LoadU16Imm          r10, 4         r10 = 4
005C   0x001F90   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [4]
L_9:
005D   0x001F98   2F 62 09 00   BranchIfNot         r9, 0062       IF NOT r9 [0xD3F1F500] => L_10
005E   0x001FA0   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
005F   0x001FA8   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0060   0x001FB0   50 09 09 00   LoadI64             r9, [r9]       r9 = [0x0 + 0x0]
0061   0x001FB8   2D 7E 00 00   Branch              007E           => L_4
L_10:
0062   0x001FC0   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0063   0x001FC8   2F 6A 09 00   BranchIfNot         r9, 006A       IF NOT r9 [darray-at()] => L_11
0064   0x001FD0   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0065   0x001FD8   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0066   0x001FE0   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
0067   0x001FE8   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
0068   0x001FF0   0C 0A 05 00   LoadU16Imm          r10, 5         r10 = 5
0069   0x001FF8   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [5]
L_11:
006A   0x002000   2F 6F 09 00   BranchIfNot         r9, 006F       IF NOT r9 [0xD3F1F500] => L_12
006B   0x002008   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
006C   0x002010   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
006D   0x002018   51 09 09 00   LoadU64             r9, [r9]       r9 = [0x0 + 0x0]
006E   0x002020   2D 7E 00 00   Branch              007E           => L_4
L_12:
006F   0x002028   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0070   0x002030   2F 77 09 00   BranchIfNot         r9, 0077       IF NOT r9 [darray-at()] => L_13
0071   0x002038   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0072   0x002040   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0073   0x002048   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
0074   0x002050   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
0075   0x002058   0C 0A 06 00   LoadU16Imm          r10, 6         r10 = 6
0076   0x002060   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [6]
L_13:
0077   0x002068   2F 7D 09 00   BranchIfNot         r9, 007D       IF NOT r9 [0xD3F1F500] => L_14
0078   0x002070   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0079   0x002078   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
007A   0x002080   0E 09 09 00   LoadFloat           r9, [r9]       r9 = [0x0 + 0x0]
007B   0x002088   19 09 09 00   CastInteger         r9, r9         r9 = int(r9) -> <0.000000> => <0>
007C   0x002090   2D 7E 00 00   Branch              007E           => L_4
L_14:
007D   0x002098   0C 09 00 00   LoadU16Imm          r9, 0          r9 = 0
L_4:
007E   0x0020A0   43 08 09 00   Move                r8, r9         r8 = r9 [0]
007F   0x0020A8   15 09 07 00   LookupPointer       r9, 7          r9 = ST[7] -> <#5445173390656D6D>
0080   0x0020B0   41 0A 08 00   LoadStaticPointerImmr10, 8         r10 = ST[8] -> <0xBF025F07>
0081   0x0020B8   43 0B 00 00   Move                r11, r0        r11 = r0 [0xBF027CA1]
0082   0x0020C0   43 0C 08 00   Move                r12, r8        r12 = r8 [0]
0083   0x0020C8   43 31 0A 00   Move                r49, r10       r49 = r10 [0xBF025F07]
0084   0x0020D0   43 32 0B 00   Move                r50, r11       r50 = r11 [0xBF027CA1]
0085   0x0020D8   43 33 0C 00   Move                r51, r12       r51 = r12 [0]
0086   0x0020E0   1C 09 09 03   CallFf              r9, r9, 3      r9 = #5445173390656D6D(0xBF025F07, 0xBF027CA1, 0)
0087   0x0020E8   43 00 09 00   Move                r0, r9         r0 = r9 [#5445173390656D6D()]
0088   0x0020F0   43 09 00 00   Move                r9, r0         r9 = r0 [#5445173390656D6D()]
0089   0x0020F8   43 09 06 00   Move                r9, r6         r9 = r6 [0]
008A   0x002100   0C 0A 01 00   LoadU16Imm          r10, 1         r10 = 1
008B   0x002108   01 09 09 0A   IAdd                r9, r9, r10    1 = 0 + 1
008C   0x002110   43 06 09 00   Move                r6, r9         r6 = r9 [1]
008D   0x002118   43 09 06 00   Move                r9, r6         r9 = r6 [1]
008E   0x002120   43 08 09 00   Move                r8, r9         r8 = r9 [1]
008F   0x002128   2D 1F 00 00   Branch              001F           => L_15
L_1:
0090   0x002130   15 08 09 00   LookupPointer       r8, 9          r8 = ST[9] -> <end-foreach>
0091   0x002138   1C 08 08 00   CallFf              r8, r8, 0      r8 = end-foreach()
0092   0x002140   43 06 08 00   Move                r6, r8         r6 = r8 [end-foreach()]
0093   0x002148   15 06 0A 00   LookupPointer       r6, 10         r6 = ST[10] -> <is-final-build?>
0094   0x002150   1C 06 06 00   CallFf              r6, r6, 0      r6 = is-final-build?()
0095   0x002158   30 06 06 00   OpLogNot            r6, r6         r6 = !r6 -> <TRUE>
0096   0x002160   2F A7 06 00   BranchIfNot         r6, 00A7       IF NOT r6 [0x6620ACB7] => L_16
0097   0x002168   15 06 0B 00   LookupPointer       r6, 11         r6 = ST[11] -> <display>
0098   0x002170   15 07 07 00   LookupPointer       r7, 7          r7 = ST[7] -> <#5445173390656D6D>
0099   0x002178   41 08 0C 00   LoadStaticPointerImmr8, 12         r8 = ST[12] -> <0xBF026C1C>
009A   0x002180   41 09 0D 00   LoadStaticPointerImmr9, 13         r9 = ST[13] -> <0xBF025EFC>
009B   0x002188   41 0A 0E 00   LoadStaticPointerImmr10, 14        r10 = ST[14] -> <0xBF0276DB>
009C   0x002190   43 0B 00 00   Move                r11, r0        r11 = r0 [#5445173390656D6D]
009D   0x002198   43 31 08 00   Move                r49, r8        r49 = r8 [0xBF026C1C]
009E   0x0021A0   43 32 09 00   Move                r50, r9        r50 = r9 [0xBF025EFC]
009F   0x0021A8   43 33 0A 00   Move                r51, r10       r51 = r10 [0xBF0276DB]
00A0   0x0021B0   43 34 0B 00   Move                r52, r11       r52 = r11 [#5445173390656D6D]
00A1   0x0021B8   1C 07 07 04   CallFf              r7, r7, 4      r7 = #5445173390656D6D(0xBF026C1C, 0xBF025EFC, 0xBF0276DB, #5445173390656D6D)
00A2   0x0021C0   0C 08 13 00   LoadU16Imm          r8, 19         r8 = 19
00A3   0x0021C8   43 31 07 00   Move                r49, r7        r49 = r7 [#5445173390656D6D()]
00A4   0x0021D0   43 32 08 00   Move                r50, r8        r50 = r8 [19]
00A5   0x0021D8   1C 06 06 02   CallFf              r6, r6, 2      r6 = display(#5445173390656D6D(), 19)
00A6   0x0021E0   2D A8 00 00   Branch              00A8           => L_17
L_16:
00A7   0x0021E8   0C 06 00 00   LoadU16Imm          r6, 0          r6 = 0
L_17:
00A8   0x0021F0   0C 06 00 00   LoadU16Imm          r6, 0          r6 = 0
00A9   0x0021F8   15 07 01 00   LookupPointer       r7, 1          r7 = ST[1] -> <darray-count>
00AA   0x002200   15 08 02 00   LookupPointer       r8, 2          r8 = ST[2] -> <get-symbol>
00AB   0x002208   4A 09 0F 00   LoadStaticU64Imm    r9, 15         r9 = ST[15] -> <#FDC4C8C377BAE464>
00AC   0x002210   4A 0A 04 00   LoadStaticU64Imm    r10, 4         r10 = ST[4] -> <self>
00AD   0x002218   43 31 09 00   Move                r49, r9        r49 = r9 [#FDC4C8C377BAE464]
00AE   0x002220   43 32 0A 00   Move                r50, r10       r50 = r10 [self]
00AF   0x002228   1C 08 08 02   CallFf              r8, r8, 2      r8 = get-symbol(#FDC4C8C377BAE464, self)
00B0   0x002230   43 31 08 00   Move                r49, r8        r49 = r8 [get-symbol()]
00B1   0x002238   1C 07 07 01   CallFf              r7, r7, 1      r7 = darray-count(get-symbol())
00B2   0x002240   15 08 05 00   LookupPointer       r8, 5          r8 = ST[5] -> <begin-foreach>
00B3   0x002248   1C 08 08 00   CallFf              r8, r8, 0      r8 = begin-foreach()
L_32:
00B4   0x002250   43 08 06 00   Move                r8, r6         r8 = r6 [0]
00B5   0x002258   43 09 07 00   Move                r9, r7         r9 = r7 [darray-count()]
00B6   0x002260   20 08 08 09   ILessThan           r8, r8, r9     r8 = r8 [1] < r9 [1753163078]
00B7   0x002268   2F 25 08 01   BranchIfNot         r8, 0125       IF NOT r8 [0x1] => L_18
00B8   0x002270   15 08 06 00   LookupPointer       r8, 6          r8 = ST[6] -> <darray-at>
00B9   0x002278   15 09 02 00   LookupPointer       r9, 2          r9 = ST[2] -> <get-symbol>
00BA   0x002280   4A 0A 0F 00   LoadStaticU64Imm    r10, 15        r10 = ST[15] -> <#FDC4C8C377BAE464>
00BB   0x002288   4A 0B 04 00   LoadStaticU64Imm    r11, 4         r11 = ST[4] -> <self>
00BC   0x002290   43 31 0A 00   Move                r49, r10       r49 = r10 [#FDC4C8C377BAE464]
00BD   0x002298   43 32 0B 00   Move                r50, r11       r50 = r11 [self]
00BE   0x0022A0   1C 09 09 02   CallFf              r9, r9, 2      r9 = get-symbol(#FDC4C8C377BAE464, self)
00BF   0x0022A8   43 0A 06 00   Move                r10, r6        r10 = r6 [0]
00C0   0x0022B0   43 31 09 00   Move                r49, r9        r49 = r9 [get-symbol()]
00C1   0x0022B8   43 32 0A 00   Move                r50, r10       r50 = r10 [0]
00C2   0x0022C0   1C 08 08 02   CallFf              r8, r8, 2      r8 = darray-at(get-symbol(), 0)
00C3   0x0022C8   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
00C4   0x0022D0   2F CB 09 00   BranchIfNot         r9, 00CB       IF NOT r9 [darray-at()] => L_19
00C5   0x0022D8   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
00C6   0x0022E0   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00C7   0x0022E8   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
00C8   0x0022F0   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
00C9   0x0022F8   0C 0A 01 00   LoadU16Imm          r10, 1         r10 = 1
00CA   0x002300   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [1]
L_19:
00CB   0x002308   2F D0 09 00   BranchIfNot         r9, 00D0       IF NOT r9 [0xD3F1F500] => L_20
00CC   0x002310   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
00CD   0x002318   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00CE   0x002320   4C 09 09 00   LoadU8              ???            UNKNOWN INSTRUCTION
00CF   0x002328   2D 13 00 01   Branch              0113           => L_21
L_20:
00D0   0x002330   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
00D1   0x002338   2F D8 09 00   BranchIfNot         r9, 00D8       IF NOT r9 [darray-at()] => L_22
00D2   0x002340   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
00D3   0x002348   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00D4   0x002350   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
00D5   0x002358   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
00D6   0x002360   0C 0A 02 00   LoadU16Imm          r10, 2         r10 = 2
00D7   0x002368   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [2]
L_22:
00D8   0x002370   2F DD 09 00   BranchIfNot         r9, 00DD       IF NOT r9 [0xD3F1F500] => L_23
00D9   0x002378   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
00DA   0x002380   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00DB   0x002388   4F 09 09 00   LoadI32             ???            UNKNOWN INSTRUCTION
00DC   0x002390   2D 13 00 01   Branch              0113           => L_21
L_23:
00DD   0x002398   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
00DE   0x0023A0   2F E5 09 00   BranchIfNot         r9, 00E5       IF NOT r9 [darray-at()] => L_24
00DF   0x0023A8   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
00E0   0x0023B0   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00E1   0x0023B8   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
00E2   0x0023C0   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
00E3   0x0023C8   0C 0A 03 00   LoadU16Imm          r10, 3         r10 = 3
00E4   0x0023D0   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [3]
L_24:
00E5   0x0023D8   2F EA 09 00   BranchIfNot         r9, 00EA       IF NOT r9 [0xD3F1F500] => L_25
00E6   0x0023E0   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
00E7   0x0023E8   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00E8   0x0023F0   0D 09 09 00   LoadU32             r9, [r9]       r9 = [0x0 + 0x0]
00E9   0x0023F8   2D 13 00 01   Branch              0113           => L_21
L_25:
00EA   0x002400   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
00EB   0x002408   2F F2 09 00   BranchIfNot         r9, 00F2       IF NOT r9 [darray-at()] => L_26
00EC   0x002410   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
00ED   0x002418   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00EE   0x002420   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
00EF   0x002428   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
00F0   0x002430   0C 0A 04 00   LoadU16Imm          r10, 4         r10 = 4
00F1   0x002438   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [4]
L_26:
00F2   0x002440   2F F7 09 00   BranchIfNot         r9, 00F7       IF NOT r9 [0xD3F1F500] => L_27
00F3   0x002448   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
00F4   0x002450   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00F5   0x002458   50 09 09 00   LoadI64             r9, [r9]       r9 = [0x0 + 0x0]
00F6   0x002460   2D 13 00 01   Branch              0113           => L_21
L_27:
00F7   0x002468   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
00F8   0x002470   2F FF 09 00   BranchIfNot         r9, 00FF       IF NOT r9 [darray-at()] => L_28
00F9   0x002478   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
00FA   0x002480   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00FB   0x002488   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
00FC   0x002490   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
00FD   0x002498   0C 0A 05 00   LoadU16Imm          r10, 5         r10 = 5
00FE   0x0024A0   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [5]
L_28:
00FF   0x0024A8   2F 04 09 01   BranchIfNot         r9, 0104       IF NOT r9 [0xD3F1F500] => L_29
0100   0x0024B0   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0101   0x0024B8   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0102   0x0024C0   51 09 09 00   LoadU64             r9, [r9]       r9 = [0x0 + 0x0]
0103   0x0024C8   2D 13 00 01   Branch              0113           => L_21
L_29:
0104   0x0024D0   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0105   0x0024D8   2F 0C 09 01   BranchIfNot         r9, 010C       IF NOT r9 [darray-at()] => L_30
0106   0x0024E0   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0107   0x0024E8   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0108   0x0024F0   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
0109   0x0024F8   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
010A   0x002500   0C 0A 06 00   LoadU16Imm          r10, 6         r10 = 6
010B   0x002508   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [6]
L_30:
010C   0x002510   2F 12 09 01   BranchIfNot         r9, 0112       IF NOT r9 [0xD3F1F500] => L_31
010D   0x002518   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
010E   0x002520   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
010F   0x002528   0E 09 09 00   LoadFloat           r9, [r9]       r9 = [0x0 + 0x0]
0110   0x002530   19 09 09 00   CastInteger         r9, r9         r9 = int(r9) -> <0.000000> => <0>
0111   0x002538   2D 13 00 01   Branch              0113           => L_21
L_31:
0112   0x002540   0C 09 00 00   LoadU16Imm          r9, 0          r9 = 0
L_21:
0113   0x002548   43 08 09 00   Move                r8, r9         r8 = r9 [0]
0114   0x002550   15 09 07 00   LookupPointer       r9, 7          r9 = ST[7] -> <#5445173390656D6D>
0115   0x002558   41 0A 08 00   LoadStaticPointerImmr10, 8         r10 = ST[8] -> <0xBF025F07>
0116   0x002560   43 0B 01 00   Move                r11, r1        r11 = r1 [0xBF027CA1]
0117   0x002568   43 0C 08 00   Move                r12, r8        r12 = r8 [0]
0118   0x002570   43 31 0A 00   Move                r49, r10       r49 = r10 [0xBF025F07]
0119   0x002578   43 32 0B 00   Move                r50, r11       r50 = r11 [0xBF027CA1]
011A   0x002580   43 33 0C 00   Move                r51, r12       r51 = r12 [0]
011B   0x002588   1C 09 09 03   CallFf              r9, r9, 3      r9 = #5445173390656D6D(0xBF025F07, 0xBF027CA1, 0)
011C   0x002590   43 01 09 00   Move                r1, r9         r1 = r9 [#5445173390656D6D()]
011D   0x002598   43 09 01 00   Move                r9, r1         r9 = r1 [#5445173390656D6D()]
011E   0x0025A0   43 09 06 00   Move                r9, r6         r9 = r6 [0]
011F   0x0025A8   0C 0A 01 00   LoadU16Imm          r10, 1         r10 = 1
0120   0x0025B0   01 09 09 0A   IAdd                r9, r9, r10    1 = 0 + 1
0121   0x0025B8   43 06 09 00   Move                r6, r9         r6 = r9 [1]
0122   0x0025C0   43 09 06 00   Move                r9, r6         r9 = r6 [1]
0123   0x0025C8   43 08 09 00   Move                r8, r9         r8 = r9 [1]
0124   0x0025D0   2D B4 00 00   Branch              00B4           => L_32
L_18:
0125   0x0025D8   15 08 09 00   LookupPointer       r8, 9          r8 = ST[9] -> <end-foreach>
0126   0x0025E0   1C 08 08 00   CallFf              r8, r8, 0      r8 = end-foreach()
0127   0x0025E8   43 06 08 00   Move                r6, r8         r6 = r8 [end-foreach()]
0128   0x0025F0   15 06 0A 00   LookupPointer       r6, 10         r6 = ST[10] -> <is-final-build?>
0129   0x0025F8   1C 06 06 00   CallFf              r6, r6, 0      r6 = is-final-build?()
012A   0x002600   30 06 06 00   OpLogNot            r6, r6         r6 = !r6 -> <TRUE>
012B   0x002608   2F 3C 06 01   BranchIfNot         r6, 013C       IF NOT r6 [0x6620ACB7] => L_33
012C   0x002610   15 06 0B 00   LookupPointer       r6, 11         r6 = ST[11] -> <display>
012D   0x002618   15 07 07 00   LookupPointer       r7, 7          r7 = ST[7] -> <#5445173390656D6D>
012E   0x002620   41 08 0C 00   LoadStaticPointerImmr8, 12         r8 = ST[12] -> <0xBF026C1C>
012F   0x002628   41 09 0D 00   LoadStaticPointerImmr9, 13         r9 = ST[13] -> <0xBF025EFC>
0130   0x002630   41 0A 10 00   LoadStaticPointerImmr10, 16        r10 = ST[16] -> <0xBF0276F2>
0131   0x002638   43 0B 01 00   Move                r11, r1        r11 = r1 [#5445173390656D6D()]
0132   0x002640   43 31 08 00   Move                r49, r8        r49 = r8 [0xBF026C1C]
0133   0x002648   43 32 09 00   Move                r50, r9        r50 = r9 [0xBF025EFC]
0134   0x002650   43 33 0A 00   Move                r51, r10       r51 = r10 [0xBF0276F2]
0135   0x002658   43 34 0B 00   Move                r52, r11       r52 = r11 [#5445173390656D6D()]
0136   0x002660   1C 07 07 04   CallFf              r7, r7, 4      r7 = #5445173390656D6D(0xBF026C1C, 0xBF025EFC, 0xBF0276F2, #5445173390656D6D())
0137   0x002668   0C 08 13 00   LoadU16Imm          r8, 19         r8 = 19
0138   0x002670   43 31 07 00   Move                r49, r7        r49 = r7 [#5445173390656D6D()]
0139   0x002678   43 32 08 00   Move                r50, r8        r50 = r8 [19]
013A   0x002680   1C 06 06 02   CallFf              r6, r6, 2      r6 = display(#5445173390656D6D(), 19)
013B   0x002688   2D 3D 00 01   Branch              013D           => L_34
L_33:
013C   0x002690   0C 06 00 00   LoadU16Imm          r6, 0          r6 = 0
L_34:
013D   0x002698   0C 06 00 00   LoadU16Imm          r6, 0          r6 = 0
013E   0x0026A0   15 07 01 00   LookupPointer       r7, 1          r7 = ST[1] -> <darray-count>
013F   0x0026A8   15 08 02 00   LookupPointer       r8, 2          r8 = ST[2] -> <get-symbol>
0140   0x0026B0   4A 09 11 00   LoadStaticU64Imm    r9, 17         r9 = ST[17] -> <#95B0EBA52417EDE3>
0141   0x0026B8   4A 0A 04 00   LoadStaticU64Imm    r10, 4         r10 = ST[4] -> <self>
0142   0x0026C0   43 31 09 00   Move                r49, r9        r49 = r9 [#95B0EBA52417EDE3]
0143   0x0026C8   43 32 0A 00   Move                r50, r10       r50 = r10 [self]
0144   0x0026D0   1C 08 08 02   CallFf              r8, r8, 2      r8 = get-symbol(#95B0EBA52417EDE3, self)
0145   0x0026D8   43 31 08 00   Move                r49, r8        r49 = r8 [get-symbol()]
0146   0x0026E0   1C 07 07 01   CallFf              r7, r7, 1      r7 = darray-count(get-symbol())
0147   0x0026E8   15 08 05 00   LookupPointer       r8, 5          r8 = ST[5] -> <begin-foreach>
0148   0x0026F0   1C 08 08 00   CallFf              r8, r8, 0      r8 = begin-foreach()
L_49:
0149   0x0026F8   43 08 06 00   Move                r8, r6         r8 = r6 [0]
014A   0x002700   43 09 07 00   Move                r9, r7         r9 = r7 [darray-count()]
014B   0x002708   20 08 08 09   ILessThan           r8, r8, r9     r8 = r8 [1] < r9 [1753163078]
014C   0x002710   2F BA 08 01   BranchIfNot         r8, 01BA       IF NOT r8 [0x1] => L_35
014D   0x002718   15 08 06 00   LookupPointer       r8, 6          r8 = ST[6] -> <darray-at>
014E   0x002720   15 09 02 00   LookupPointer       r9, 2          r9 = ST[2] -> <get-symbol>
014F   0x002728   4A 0A 11 00   LoadStaticU64Imm    r10, 17        r10 = ST[17] -> <#95B0EBA52417EDE3>
0150   0x002730   4A 0B 04 00   LoadStaticU64Imm    r11, 4         r11 = ST[4] -> <self>
0151   0x002738   43 31 0A 00   Move                r49, r10       r49 = r10 [#95B0EBA52417EDE3]
0152   0x002740   43 32 0B 00   Move                r50, r11       r50 = r11 [self]
0153   0x002748   1C 09 09 02   CallFf              r9, r9, 2      r9 = get-symbol(#95B0EBA52417EDE3, self)
0154   0x002750   43 0A 06 00   Move                r10, r6        r10 = r6 [0]
0155   0x002758   43 31 09 00   Move                r49, r9        r49 = r9 [get-symbol()]
0156   0x002760   43 32 0A 00   Move                r50, r10       r50 = r10 [0]
0157   0x002768   1C 08 08 02   CallFf              r8, r8, 2      r8 = darray-at(get-symbol(), 0)
0158   0x002770   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0159   0x002778   2F 60 09 01   BranchIfNot         r9, 0160       IF NOT r9 [darray-at()] => L_36
015A   0x002780   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
015B   0x002788   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
015C   0x002790   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
015D   0x002798   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
015E   0x0027A0   0C 0A 01 00   LoadU16Imm          r10, 1         r10 = 1
015F   0x0027A8   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [1]
L_36:
0160   0x0027B0   2F 65 09 01   BranchIfNot         r9, 0165       IF NOT r9 [0xD3F1F500] => L_37
0161   0x0027B8   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0162   0x0027C0   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0163   0x0027C8   4C 09 09 00   LoadU8              ???            UNKNOWN INSTRUCTION
0164   0x0027D0   2D A8 00 01   Branch              01A8           => L_38
L_37:
0165   0x0027D8   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0166   0x0027E0   2F 6D 09 01   BranchIfNot         r9, 016D       IF NOT r9 [darray-at()] => L_39
0167   0x0027E8   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0168   0x0027F0   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0169   0x0027F8   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
016A   0x002800   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
016B   0x002808   0C 0A 02 00   LoadU16Imm          r10, 2         r10 = 2
016C   0x002810   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [2]
L_39:
016D   0x002818   2F 72 09 01   BranchIfNot         r9, 0172       IF NOT r9 [0xD3F1F500] => L_40
016E   0x002820   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
016F   0x002828   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0170   0x002830   4F 09 09 00   LoadI32             ???            UNKNOWN INSTRUCTION
0171   0x002838   2D A8 00 01   Branch              01A8           => L_38
L_40:
0172   0x002840   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0173   0x002848   2F 7A 09 01   BranchIfNot         r9, 017A       IF NOT r9 [darray-at()] => L_41
0174   0x002850   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0175   0x002858   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0176   0x002860   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
0177   0x002868   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
0178   0x002870   0C 0A 03 00   LoadU16Imm          r10, 3         r10 = 3
0179   0x002878   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [3]
L_41:
017A   0x002880   2F 7F 09 01   BranchIfNot         r9, 017F       IF NOT r9 [0xD3F1F500] => L_42
017B   0x002888   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
017C   0x002890   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
017D   0x002898   0D 09 09 00   LoadU32             r9, [r9]       r9 = [0x0 + 0x0]
017E   0x0028A0   2D A8 00 01   Branch              01A8           => L_38
L_42:
017F   0x0028A8   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0180   0x0028B0   2F 87 09 01   BranchIfNot         r9, 0187       IF NOT r9 [darray-at()] => L_43
0181   0x0028B8   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0182   0x0028C0   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0183   0x0028C8   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
0184   0x0028D0   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
0185   0x0028D8   0C 0A 04 00   LoadU16Imm          r10, 4         r10 = 4
0186   0x0028E0   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [4]
L_43:
0187   0x0028E8   2F 8C 09 01   BranchIfNot         r9, 018C       IF NOT r9 [0xD3F1F500] => L_44
0188   0x0028F0   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0189   0x0028F8   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
018A   0x002900   50 09 09 00   LoadI64             r9, [r9]       r9 = [0x0 + 0x0]
018B   0x002908   2D A8 00 01   Branch              01A8           => L_38
L_44:
018C   0x002910   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
018D   0x002918   2F 94 09 01   BranchIfNot         r9, 0194       IF NOT r9 [darray-at()] => L_45
018E   0x002920   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
018F   0x002928   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0190   0x002930   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
0191   0x002938   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
0192   0x002940   0C 0A 05 00   LoadU16Imm          r10, 5         r10 = 5
0193   0x002948   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [5]
L_45:
0194   0x002950   2F 99 09 01   BranchIfNot         r9, 0199       IF NOT r9 [0xD3F1F500] => L_46
0195   0x002958   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0196   0x002960   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0197   0x002968   51 09 09 00   LoadU64             r9, [r9]       r9 = [0x0 + 0x0]
0198   0x002970   2D A8 00 01   Branch              01A8           => L_38
L_46:
0199   0x002978   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
019A   0x002980   2F A1 09 01   BranchIfNot         r9, 01A1       IF NOT r9 [darray-at()] => L_47
019B   0x002988   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
019C   0x002990   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
019D   0x002998   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
019E   0x0029A0   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
019F   0x0029A8   0C 0A 06 00   LoadU16Imm          r10, 6         r10 = 6
01A0   0x0029B0   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [6]
L_47:
01A1   0x0029B8   2F A7 09 01   BranchIfNot         r9, 01A7       IF NOT r9 [0xD3F1F500] => L_48
01A2   0x0029C0   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
01A3   0x0029C8   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
01A4   0x0029D0   0E 09 09 00   LoadFloat           r9, [r9]       r9 = [0x0 + 0x0]
01A5   0x0029D8   19 09 09 00   CastInteger         r9, r9         r9 = int(r9) -> <0.000000> => <0>
01A6   0x0029E0   2D A8 00 01   Branch              01A8           => L_38
L_48:
01A7   0x0029E8   0C 09 00 00   LoadU16Imm          r9, 0          r9 = 0
L_38:
01A8   0x0029F0   43 08 09 00   Move                r8, r9         r8 = r9 [0]
01A9   0x0029F8   15 09 07 00   LookupPointer       r9, 7          r9 = ST[7] -> <#5445173390656D6D>
01AA   0x002A00   41 0A 08 00   LoadStaticPointerImmr10, 8         r10 = ST[8] -> <0xBF025F07>
01AB   0x002A08   43 0B 02 00   Move                r11, r2        r11 = r2 [0xBF027CA1]
01AC   0x002A10   43 0C 08 00   Move                r12, r8        r12 = r8 [0]
01AD   0x002A18   43 31 0A 00   Move                r49, r10       r49 = r10 [0xBF025F07]
01AE   0x002A20   43 32 0B 00   Move                r50, r11       r50 = r11 [0xBF027CA1]
01AF   0x002A28   43 33 0C 00   Move                r51, r12       r51 = r12 [0]
01B0   0x002A30   1C 09 09 03   CallFf              r9, r9, 3      r9 = #5445173390656D6D(0xBF025F07, 0xBF027CA1, 0)
01B1   0x002A38   43 02 09 00   Move                r2, r9         r2 = r9 [#5445173390656D6D()]
01B2   0x002A40   43 09 02 00   Move                r9, r2         r9 = r2 [#5445173390656D6D()]
01B3   0x002A48   43 09 06 00   Move                r9, r6         r9 = r6 [0]
01B4   0x002A50   0C 0A 01 00   LoadU16Imm          r10, 1         r10 = 1
01B5   0x002A58   01 09 09 0A   IAdd                r9, r9, r10    1 = 0 + 1
01B6   0x002A60   43 06 09 00   Move                r6, r9         r6 = r9 [1]
01B7   0x002A68   43 09 06 00   Move                r9, r6         r9 = r6 [1]
01B8   0x002A70   43 08 09 00   Move                r8, r9         r8 = r9 [1]
01B9   0x002A78   2D 49 00 01   Branch              0149           => L_49
L_35:
01BA   0x002A80   15 08 09 00   LookupPointer       r8, 9          r8 = ST[9] -> <end-foreach>
01BB   0x002A88   1C 08 08 00   CallFf              r8, r8, 0      r8 = end-foreach()
01BC   0x002A90   43 06 08 00   Move                r6, r8         r6 = r8 [end-foreach()]
01BD   0x002A98   15 06 0A 00   LookupPointer       r6, 10         r6 = ST[10] -> <is-final-build?>
01BE   0x002AA0   1C 06 06 00   CallFf              r6, r6, 0      r6 = is-final-build?()
01BF   0x002AA8   30 06 06 00   OpLogNot            r6, r6         r6 = !r6 -> <TRUE>
01C0   0x002AB0   2F D1 06 01   BranchIfNot         r6, 01D1       IF NOT r6 [0x6620ACB7] => L_50
01C1   0x002AB8   15 06 0B 00   LookupPointer       r6, 11         r6 = ST[11] -> <display>
01C2   0x002AC0   15 07 07 00   LookupPointer       r7, 7          r7 = ST[7] -> <#5445173390656D6D>
01C3   0x002AC8   41 08 0C 00   LoadStaticPointerImmr8, 12         r8 = ST[12] -> <0xBF026C1C>
01C4   0x002AD0   41 09 0D 00   LoadStaticPointerImmr9, 13         r9 = ST[13] -> <0xBF025EFC>
01C5   0x002AD8   41 0A 12 00   LoadStaticPointerImmr10, 18        r10 = ST[18] -> <0xBF027706>
01C6   0x002AE0   43 0B 02 00   Move                r11, r2        r11 = r2 [#5445173390656D6D()]
01C7   0x002AE8   43 31 08 00   Move                r49, r8        r49 = r8 [0xBF026C1C]
01C8   0x002AF0   43 32 09 00   Move                r50, r9        r50 = r9 [0xBF025EFC]
01C9   0x002AF8   43 33 0A 00   Move                r51, r10       r51 = r10 [0xBF027706]
01CA   0x002B00   43 34 0B 00   Move                r52, r11       r52 = r11 [#5445173390656D6D()]
01CB   0x002B08   1C 07 07 04   CallFf              r7, r7, 4      r7 = #5445173390656D6D(0xBF026C1C, 0xBF025EFC, 0xBF027706, #5445173390656D6D())
01CC   0x002B10   0C 08 13 00   LoadU16Imm          r8, 19         r8 = 19
01CD   0x002B18   43 31 07 00   Move                r49, r7        r49 = r7 [#5445173390656D6D()]
01CE   0x002B20   43 32 08 00   Move                r50, r8        r50 = r8 [19]
01CF   0x002B28   1C 06 06 02   CallFf              r6, r6, 2      r6 = display(#5445173390656D6D(), 19)
01D0   0x002B30   2D D2 00 01   Branch              01D2           => L_51
L_50:
01D1   0x002B38   0C 06 00 00   LoadU16Imm          r6, 0          r6 = 0
L_51:
01D2   0x002B40   2D D4 00 01   Branch              01D4           => L_52
L_0:
01D3   0x002B48   0C 06 00 00   LoadU16Imm          r6, 0          r6 = 0
L_52:
01D4   0x002B50   15 06 01 00   LookupPointer       r6, 1          r6 = ST[1] -> <darray-count>
01D5   0x002B58   15 07 02 00   LookupPointer       r7, 2          r7 = ST[2] -> <get-symbol>
01D6   0x002B60   4A 08 13 00   LoadStaticU64Imm    r8, 19         r8 = ST[19] -> <#AE606DDB7F18D76F>
01D7   0x002B68   4A 09 04 00   LoadStaticU64Imm    r9, 4          r9 = ST[4] -> <self>
01D8   0x002B70   43 31 08 00   Move                r49, r8        r49 = r8 [#AE606DDB7F18D76F]
01D9   0x002B78   43 32 09 00   Move                r50, r9        r50 = r9 [self]
01DA   0x002B80   1C 07 07 02   CallFf              r7, r7, 2      r7 = get-symbol(#AE606DDB7F18D76F, self)
01DB   0x002B88   43 31 07 00   Move                r49, r7        r49 = r7 [get-symbol()]
01DC   0x002B90   1C 06 06 01   CallFf              r6, r6, 1      r6 = darray-count(get-symbol())
01DD   0x002B98   0C 07 00 00   LoadU16Imm          r7, 0          r7 = 0
01DE   0x002BA0   1D 06 06 07   IEqual              r6, r6, r7     r6 = r6 [1753163008] == r7 [0]
01DF   0x002BA8   30 06 06 00   OpLogNot            r6, r6         r6 = !r6 -> <TRUE>
01E0   0x002BB0   2F A1 06 03   BranchIfNot         r6, 03A1       IF NOT r6 [0x687F2501] => L_53
01E1   0x002BB8   0C 06 00 00   LoadU16Imm          r6, 0          r6 = 0
01E2   0x002BC0   15 07 01 00   LookupPointer       r7, 1          r7 = ST[1] -> <darray-count>
01E3   0x002BC8   15 08 02 00   LookupPointer       r8, 2          r8 = ST[2] -> <get-symbol>
01E4   0x002BD0   4A 09 13 00   LoadStaticU64Imm    r9, 19         r9 = ST[19] -> <#AE606DDB7F18D76F>
01E5   0x002BD8   4A 0A 04 00   LoadStaticU64Imm    r10, 4         r10 = ST[4] -> <self>
01E6   0x002BE0   43 31 09 00   Move                r49, r9        r49 = r9 [#AE606DDB7F18D76F]
01E7   0x002BE8   43 32 0A 00   Move                r50, r10       r50 = r10 [self]
01E8   0x002BF0   1C 08 08 02   CallFf              r8, r8, 2      r8 = get-symbol(#AE606DDB7F18D76F, self)
01E9   0x002BF8   43 31 08 00   Move                r49, r8        r49 = r8 [get-symbol()]
01EA   0x002C00   1C 07 07 01   CallFf              r7, r7, 1      r7 = darray-count(get-symbol())
01EB   0x002C08   15 08 05 00   LookupPointer       r8, 5          r8 = ST[5] -> <begin-foreach>
01EC   0x002C10   1C 08 08 00   CallFf              r8, r8, 0      r8 = begin-foreach()
L_68:
01ED   0x002C18   43 08 06 00   Move                r8, r6         r8 = r6 [0]
01EE   0x002C20   43 09 07 00   Move                r9, r7         r9 = r7 [darray-count()]
01EF   0x002C28   20 08 08 09   ILessThan           r8, r8, r9     r8 = r8 [1] < r9 [1753163078]
01F0   0x002C30   2F 5E 08 02   BranchIfNot         r8, 025E       IF NOT r8 [0x1] => L_54
01F1   0x002C38   15 08 06 00   LookupPointer       r8, 6          r8 = ST[6] -> <darray-at>
01F2   0x002C40   15 09 02 00   LookupPointer       r9, 2          r9 = ST[2] -> <get-symbol>
01F3   0x002C48   4A 0A 13 00   LoadStaticU64Imm    r10, 19        r10 = ST[19] -> <#AE606DDB7F18D76F>
01F4   0x002C50   4A 0B 04 00   LoadStaticU64Imm    r11, 4         r11 = ST[4] -> <self>
01F5   0x002C58   43 31 0A 00   Move                r49, r10       r49 = r10 [#AE606DDB7F18D76F]
01F6   0x002C60   43 32 0B 00   Move                r50, r11       r50 = r11 [self]
01F7   0x002C68   1C 09 09 02   CallFf              r9, r9, 2      r9 = get-symbol(#AE606DDB7F18D76F, self)
01F8   0x002C70   43 0A 06 00   Move                r10, r6        r10 = r6 [0]
01F9   0x002C78   43 31 09 00   Move                r49, r9        r49 = r9 [get-symbol()]
01FA   0x002C80   43 32 0A 00   Move                r50, r10       r50 = r10 [0]
01FB   0x002C88   1C 08 08 02   CallFf              r8, r8, 2      r8 = darray-at(get-symbol(), 0)
01FC   0x002C90   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
01FD   0x002C98   2F 04 09 02   BranchIfNot         r9, 0204       IF NOT r9 [darray-at()] => L_55
01FE   0x002CA0   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
01FF   0x002CA8   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0200   0x002CB0   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
0201   0x002CB8   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
0202   0x002CC0   0C 0A 01 00   LoadU16Imm          r10, 1         r10 = 1
0203   0x002CC8   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [1]
L_55:
0204   0x002CD0   2F 09 09 02   BranchIfNot         r9, 0209       IF NOT r9 [0xD3F1F500] => L_56
0205   0x002CD8   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0206   0x002CE0   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0207   0x002CE8   4C 09 09 00   LoadU8              ???            UNKNOWN INSTRUCTION
0208   0x002CF0   2D 4C 00 02   Branch              024C           => L_57
L_56:
0209   0x002CF8   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
020A   0x002D00   2F 11 09 02   BranchIfNot         r9, 0211       IF NOT r9 [darray-at()] => L_58
020B   0x002D08   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
020C   0x002D10   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
020D   0x002D18   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
020E   0x002D20   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
020F   0x002D28   0C 0A 02 00   LoadU16Imm          r10, 2         r10 = 2
0210   0x002D30   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [2]
L_58:
0211   0x002D38   2F 16 09 02   BranchIfNot         r9, 0216       IF NOT r9 [0xD3F1F500] => L_59
0212   0x002D40   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0213   0x002D48   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0214   0x002D50   4F 09 09 00   LoadI32             ???            UNKNOWN INSTRUCTION
0215   0x002D58   2D 4C 00 02   Branch              024C           => L_57
L_59:
0216   0x002D60   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0217   0x002D68   2F 1E 09 02   BranchIfNot         r9, 021E       IF NOT r9 [darray-at()] => L_60
0218   0x002D70   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0219   0x002D78   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
021A   0x002D80   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
021B   0x002D88   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
021C   0x002D90   0C 0A 03 00   LoadU16Imm          r10, 3         r10 = 3
021D   0x002D98   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [3]
L_60:
021E   0x002DA0   2F 23 09 02   BranchIfNot         r9, 0223       IF NOT r9 [0xD3F1F500] => L_61
021F   0x002DA8   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0220   0x002DB0   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0221   0x002DB8   0D 09 09 00   LoadU32             r9, [r9]       r9 = [0x0 + 0x0]
0222   0x002DC0   2D 4C 00 02   Branch              024C           => L_57
L_61:
0223   0x002DC8   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0224   0x002DD0   2F 2B 09 02   BranchIfNot         r9, 022B       IF NOT r9 [darray-at()] => L_62
0225   0x002DD8   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0226   0x002DE0   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0227   0x002DE8   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
0228   0x002DF0   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
0229   0x002DF8   0C 0A 04 00   LoadU16Imm          r10, 4         r10 = 4
022A   0x002E00   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [4]
L_62:
022B   0x002E08   2F 30 09 02   BranchIfNot         r9, 0230       IF NOT r9 [0xD3F1F500] => L_63
022C   0x002E10   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
022D   0x002E18   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
022E   0x002E20   50 09 09 00   LoadI64             r9, [r9]       r9 = [0x0 + 0x0]
022F   0x002E28   2D 4C 00 02   Branch              024C           => L_57
L_63:
0230   0x002E30   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0231   0x002E38   2F 38 09 02   BranchIfNot         r9, 0238       IF NOT r9 [darray-at()] => L_64
0232   0x002E40   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0233   0x002E48   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0234   0x002E50   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
0235   0x002E58   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
0236   0x002E60   0C 0A 05 00   LoadU16Imm          r10, 5         r10 = 5
0237   0x002E68   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [5]
L_64:
0238   0x002E70   2F 3D 09 02   BranchIfNot         r9, 023D       IF NOT r9 [0xD3F1F500] => L_65
0239   0x002E78   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
023A   0x002E80   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
023B   0x002E88   51 09 09 00   LoadU64             r9, [r9]       r9 = [0x0 + 0x0]
023C   0x002E90   2D 4C 00 02   Branch              024C           => L_57
L_65:
023D   0x002E98   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
023E   0x002EA0   2F 45 09 02   BranchIfNot         r9, 0245       IF NOT r9 [darray-at()] => L_66
023F   0x002EA8   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0240   0x002EB0   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0241   0x002EB8   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
0242   0x002EC0   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
0243   0x002EC8   0C 0A 06 00   LoadU16Imm          r10, 6         r10 = 6
0244   0x002ED0   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [6]
L_66:
0245   0x002ED8   2F 4B 09 02   BranchIfNot         r9, 024B       IF NOT r9 [0xD3F1F500] => L_67
0246   0x002EE0   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0247   0x002EE8   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0248   0x002EF0   0E 09 09 00   LoadFloat           r9, [r9]       r9 = [0x0 + 0x0]
0249   0x002EF8   19 09 09 00   CastInteger         r9, r9         r9 = int(r9) -> <0.000000> => <0>
024A   0x002F00   2D 4C 00 02   Branch              024C           => L_57
L_67:
024B   0x002F08   0C 09 00 00   LoadU16Imm          r9, 0          r9 = 0
L_57:
024C   0x002F10   43 08 09 00   Move                r8, r9         r8 = r9 [0]
024D   0x002F18   15 09 07 00   LookupPointer       r9, 7          r9 = ST[7] -> <#5445173390656D6D>
024E   0x002F20   41 0A 08 00   LoadStaticPointerImmr10, 8         r10 = ST[8] -> <0xBF025F07>
024F   0x002F28   43 0B 03 00   Move                r11, r3        r11 = r3 [0xBF027CA1]
0250   0x002F30   43 0C 08 00   Move                r12, r8        r12 = r8 [0]
0251   0x002F38   43 31 0A 00   Move                r49, r10       r49 = r10 [0xBF025F07]
0252   0x002F40   43 32 0B 00   Move                r50, r11       r50 = r11 [0xBF027CA1]
0253   0x002F48   43 33 0C 00   Move                r51, r12       r51 = r12 [0]
0254   0x002F50   1C 09 09 03   CallFf              r9, r9, 3      r9 = #5445173390656D6D(0xBF025F07, 0xBF027CA1, 0)
0255   0x002F58   43 03 09 00   Move                r3, r9         r3 = r9 [#5445173390656D6D()]
0256   0x002F60   43 09 03 00   Move                r9, r3         r9 = r3 [#5445173390656D6D()]
0257   0x002F68   43 09 06 00   Move                r9, r6         r9 = r6 [0]
0258   0x002F70   0C 0A 01 00   LoadU16Imm          r10, 1         r10 = 1
0259   0x002F78   01 09 09 0A   IAdd                r9, r9, r10    1 = 0 + 1
025A   0x002F80   43 06 09 00   Move                r6, r9         r6 = r9 [1]
025B   0x002F88   43 09 06 00   Move                r9, r6         r9 = r6 [1]
025C   0x002F90   43 08 09 00   Move                r8, r9         r8 = r9 [1]
025D   0x002F98   2D ED 00 01   Branch              01ED           => L_68
L_54:
025E   0x002FA0   15 08 09 00   LookupPointer       r8, 9          r8 = ST[9] -> <end-foreach>
025F   0x002FA8   1C 08 08 00   CallFf              r8, r8, 0      r8 = end-foreach()
0260   0x002FB0   43 06 08 00   Move                r6, r8         r6 = r8 [end-foreach()]
0261   0x002FB8   15 06 0A 00   LookupPointer       r6, 10         r6 = ST[10] -> <is-final-build?>
0262   0x002FC0   1C 06 06 00   CallFf              r6, r6, 0      r6 = is-final-build?()
0263   0x002FC8   30 06 06 00   OpLogNot            r6, r6         r6 = !r6 -> <TRUE>
0264   0x002FD0   2F 75 06 02   BranchIfNot         r6, 0275       IF NOT r6 [0x6620ACB7] => L_69
0265   0x002FD8   15 06 0B 00   LookupPointer       r6, 11         r6 = ST[11] -> <display>
0266   0x002FE0   15 07 07 00   LookupPointer       r7, 7          r7 = ST[7] -> <#5445173390656D6D>
0267   0x002FE8   41 08 0C 00   LoadStaticPointerImmr8, 12         r8 = ST[12] -> <0xBF026C1C>
0268   0x002FF0   41 09 0D 00   LoadStaticPointerImmr9, 13         r9 = ST[13] -> <0xBF025EFC>
0269   0x002FF8   41 0A 14 00   LoadStaticPointerImmr10, 20        r10 = ST[20] -> <0xBF0275F5>
026A   0x003000   43 0B 03 00   Move                r11, r3        r11 = r3 [#5445173390656D6D()]
026B   0x003008   43 31 08 00   Move                r49, r8        r49 = r8 [0xBF026C1C]
026C   0x003010   43 32 09 00   Move                r50, r9        r50 = r9 [0xBF025EFC]
026D   0x003018   43 33 0A 00   Move                r51, r10       r51 = r10 [0xBF0275F5]
026E   0x003020   43 34 0B 00   Move                r52, r11       r52 = r11 [#5445173390656D6D()]
026F   0x003028   1C 07 07 04   CallFf              r7, r7, 4      r7 = #5445173390656D6D(0xBF026C1C, 0xBF025EFC, 0xBF0275F5, #5445173390656D6D())
0270   0x003030   0C 08 13 00   LoadU16Imm          r8, 19         r8 = 19
0271   0x003038   43 31 07 00   Move                r49, r7        r49 = r7 [#5445173390656D6D()]
0272   0x003040   43 32 08 00   Move                r50, r8        r50 = r8 [19]
0273   0x003048   1C 06 06 02   CallFf              r6, r6, 2      r6 = display(#5445173390656D6D(), 19)
0274   0x003050   2D 76 00 02   Branch              0276           => L_70
L_69:
0275   0x003058   0C 06 00 00   LoadU16Imm          r6, 0          r6 = 0
L_70:
0276   0x003060   0C 06 00 00   LoadU16Imm          r6, 0          r6 = 0
0277   0x003068   15 07 01 00   LookupPointer       r7, 1          r7 = ST[1] -> <darray-count>
0278   0x003070   15 08 02 00   LookupPointer       r8, 2          r8 = ST[2] -> <get-symbol>
0279   0x003078   4A 09 15 00   LoadStaticU64Imm    r9, 21         r9 = ST[21] -> <#F14ED4EDE9DDEA26>
027A   0x003080   4A 0A 04 00   LoadStaticU64Imm    r10, 4         r10 = ST[4] -> <self>
027B   0x003088   43 31 09 00   Move                r49, r9        r49 = r9 [#F14ED4EDE9DDEA26]
027C   0x003090   43 32 0A 00   Move                r50, r10       r50 = r10 [self]
027D   0x003098   1C 08 08 02   CallFf              r8, r8, 2      r8 = get-symbol(#F14ED4EDE9DDEA26, self)
027E   0x0030A0   43 31 08 00   Move                r49, r8        r49 = r8 [get-symbol()]
027F   0x0030A8   1C 07 07 01   CallFf              r7, r7, 1      r7 = darray-count(get-symbol())
0280   0x0030B0   15 08 05 00   LookupPointer       r8, 5          r8 = ST[5] -> <begin-foreach>
0281   0x0030B8   1C 08 08 00   CallFf              r8, r8, 0      r8 = begin-foreach()
L_85:
0282   0x0030C0   43 08 06 00   Move                r8, r6         r8 = r6 [0]
0283   0x0030C8   43 09 07 00   Move                r9, r7         r9 = r7 [darray-count()]
0284   0x0030D0   20 08 08 09   ILessThan           r8, r8, r9     r8 = r8 [1] < r9 [1753163078]
0285   0x0030D8   2F F3 08 02   BranchIfNot         r8, 02F3       IF NOT r8 [0x1] => L_71
0286   0x0030E0   15 08 06 00   LookupPointer       r8, 6          r8 = ST[6] -> <darray-at>
0287   0x0030E8   15 09 02 00   LookupPointer       r9, 2          r9 = ST[2] -> <get-symbol>
0288   0x0030F0   4A 0A 15 00   LoadStaticU64Imm    r10, 21        r10 = ST[21] -> <#F14ED4EDE9DDEA26>
0289   0x0030F8   4A 0B 04 00   LoadStaticU64Imm    r11, 4         r11 = ST[4] -> <self>
028A   0x003100   43 31 0A 00   Move                r49, r10       r49 = r10 [#F14ED4EDE9DDEA26]
028B   0x003108   43 32 0B 00   Move                r50, r11       r50 = r11 [self]
028C   0x003110   1C 09 09 02   CallFf              r9, r9, 2      r9 = get-symbol(#F14ED4EDE9DDEA26, self)
028D   0x003118   43 0A 06 00   Move                r10, r6        r10 = r6 [0]
028E   0x003120   43 31 09 00   Move                r49, r9        r49 = r9 [get-symbol()]
028F   0x003128   43 32 0A 00   Move                r50, r10       r50 = r10 [0]
0290   0x003130   1C 08 08 02   CallFf              r8, r8, 2      r8 = darray-at(get-symbol(), 0)
0291   0x003138   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0292   0x003140   2F 99 09 02   BranchIfNot         r9, 0299       IF NOT r9 [darray-at()] => L_72
0293   0x003148   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0294   0x003150   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0295   0x003158   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
0296   0x003160   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
0297   0x003168   0C 0A 01 00   LoadU16Imm          r10, 1         r10 = 1
0298   0x003170   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [1]
L_72:
0299   0x003178   2F 9E 09 02   BranchIfNot         r9, 029E       IF NOT r9 [0xD3F1F500] => L_73
029A   0x003180   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
029B   0x003188   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
029C   0x003190   4C 09 09 00   LoadU8              ???            UNKNOWN INSTRUCTION
029D   0x003198   2D E1 00 02   Branch              02E1           => L_74
L_73:
029E   0x0031A0   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
029F   0x0031A8   2F A6 09 02   BranchIfNot         r9, 02A6       IF NOT r9 [darray-at()] => L_75
02A0   0x0031B0   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
02A1   0x0031B8   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
02A2   0x0031C0   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
02A3   0x0031C8   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
02A4   0x0031D0   0C 0A 02 00   LoadU16Imm          r10, 2         r10 = 2
02A5   0x0031D8   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [2]
L_75:
02A6   0x0031E0   2F AB 09 02   BranchIfNot         r9, 02AB       IF NOT r9 [0xD3F1F500] => L_76
02A7   0x0031E8   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
02A8   0x0031F0   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
02A9   0x0031F8   4F 09 09 00   LoadI32             ???            UNKNOWN INSTRUCTION
02AA   0x003200   2D E1 00 02   Branch              02E1           => L_74
L_76:
02AB   0x003208   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
02AC   0x003210   2F B3 09 02   BranchIfNot         r9, 02B3       IF NOT r9 [darray-at()] => L_77
02AD   0x003218   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
02AE   0x003220   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
02AF   0x003228   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
02B0   0x003230   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
02B1   0x003238   0C 0A 03 00   LoadU16Imm          r10, 3         r10 = 3
02B2   0x003240   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [3]
L_77:
02B3   0x003248   2F B8 09 02   BranchIfNot         r9, 02B8       IF NOT r9 [0xD3F1F500] => L_78
02B4   0x003250   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
02B5   0x003258   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
02B6   0x003260   0D 09 09 00   LoadU32             r9, [r9]       r9 = [0x0 + 0x0]
02B7   0x003268   2D E1 00 02   Branch              02E1           => L_74
L_78:
02B8   0x003270   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
02B9   0x003278   2F C0 09 02   BranchIfNot         r9, 02C0       IF NOT r9 [darray-at()] => L_79
02BA   0x003280   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
02BB   0x003288   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
02BC   0x003290   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
02BD   0x003298   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
02BE   0x0032A0   0C 0A 04 00   LoadU16Imm          r10, 4         r10 = 4
02BF   0x0032A8   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [4]
L_79:
02C0   0x0032B0   2F C5 09 02   BranchIfNot         r9, 02C5       IF NOT r9 [0xD3F1F500] => L_80
02C1   0x0032B8   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
02C2   0x0032C0   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
02C3   0x0032C8   50 09 09 00   LoadI64             r9, [r9]       r9 = [0x0 + 0x0]
02C4   0x0032D0   2D E1 00 02   Branch              02E1           => L_74
L_80:
02C5   0x0032D8   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
02C6   0x0032E0   2F CD 09 02   BranchIfNot         r9, 02CD       IF NOT r9 [darray-at()] => L_81
02C7   0x0032E8   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
02C8   0x0032F0   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
02C9   0x0032F8   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
02CA   0x003300   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
02CB   0x003308   0C 0A 05 00   LoadU16Imm          r10, 5         r10 = 5
02CC   0x003310   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [5]
L_81:
02CD   0x003318   2F D2 09 02   BranchIfNot         r9, 02D2       IF NOT r9 [0xD3F1F500] => L_82
02CE   0x003320   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
02CF   0x003328   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
02D0   0x003330   51 09 09 00   LoadU64             r9, [r9]       r9 = [0x0 + 0x0]
02D1   0x003338   2D E1 00 02   Branch              02E1           => L_74
L_82:
02D2   0x003340   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
02D3   0x003348   2F DA 09 02   BranchIfNot         r9, 02DA       IF NOT r9 [darray-at()] => L_83
02D4   0x003350   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
02D5   0x003358   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
02D6   0x003360   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
02D7   0x003368   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
02D8   0x003370   0C 0A 06 00   LoadU16Imm          r10, 6         r10 = 6
02D9   0x003378   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [6]
L_83:
02DA   0x003380   2F E0 09 02   BranchIfNot         r9, 02E0       IF NOT r9 [0xD3F1F500] => L_84
02DB   0x003388   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
02DC   0x003390   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
02DD   0x003398   0E 09 09 00   LoadFloat           r9, [r9]       r9 = [0x0 + 0x0]
02DE   0x0033A0   19 09 09 00   CastInteger         r9, r9         r9 = int(r9) -> <0.000000> => <0>
02DF   0x0033A8   2D E1 00 02   Branch              02E1           => L_74
L_84:
02E0   0x0033B0   0C 09 00 00   LoadU16Imm          r9, 0          r9 = 0
L_74:
02E1   0x0033B8   43 08 09 00   Move                r8, r9         r8 = r9 [0]
02E2   0x0033C0   15 09 07 00   LookupPointer       r9, 7          r9 = ST[7] -> <#5445173390656D6D>
02E3   0x0033C8   41 0A 08 00   LoadStaticPointerImmr10, 8         r10 = ST[8] -> <0xBF025F07>
02E4   0x0033D0   43 0B 04 00   Move                r11, r4        r11 = r4 [0xBF027CA1]
02E5   0x0033D8   43 0C 08 00   Move                r12, r8        r12 = r8 [0]
02E6   0x0033E0   43 31 0A 00   Move                r49, r10       r49 = r10 [0xBF025F07]
02E7   0x0033E8   43 32 0B 00   Move                r50, r11       r50 = r11 [0xBF027CA1]
02E8   0x0033F0   43 33 0C 00   Move                r51, r12       r51 = r12 [0]
02E9   0x0033F8   1C 09 09 03   CallFf              r9, r9, 3      r9 = #5445173390656D6D(0xBF025F07, 0xBF027CA1, 0)
02EA   0x003400   43 04 09 00   Move                r4, r9         r4 = r9 [#5445173390656D6D()]
02EB   0x003408   43 09 04 00   Move                r9, r4         r9 = r4 [#5445173390656D6D()]
02EC   0x003410   43 09 06 00   Move                r9, r6         r9 = r6 [0]
02ED   0x003418   0C 0A 01 00   LoadU16Imm          r10, 1         r10 = 1
02EE   0x003420   01 09 09 0A   IAdd                r9, r9, r10    1 = 0 + 1
02EF   0x003428   43 06 09 00   Move                r6, r9         r6 = r9 [1]
02F0   0x003430   43 09 06 00   Move                r9, r6         r9 = r6 [1]
02F1   0x003438   43 08 09 00   Move                r8, r9         r8 = r9 [1]
02F2   0x003440   2D 82 00 02   Branch              0282           => L_85
L_71:
02F3   0x003448   15 08 09 00   LookupPointer       r8, 9          r8 = ST[9] -> <end-foreach>
02F4   0x003450   1C 08 08 00   CallFf              r8, r8, 0      r8 = end-foreach()
02F5   0x003458   43 06 08 00   Move                r6, r8         r6 = r8 [end-foreach()]
02F6   0x003460   15 06 0A 00   LookupPointer       r6, 10         r6 = ST[10] -> <is-final-build?>
02F7   0x003468   1C 06 06 00   CallFf              r6, r6, 0      r6 = is-final-build?()
02F8   0x003470   30 06 06 00   OpLogNot            r6, r6         r6 = !r6 -> <TRUE>
02F9   0x003478   2F 0A 06 03   BranchIfNot         r6, 030A       IF NOT r6 [0x6620ACB7] => L_86
02FA   0x003480   15 06 0B 00   LookupPointer       r6, 11         r6 = ST[11] -> <display>
02FB   0x003488   15 07 07 00   LookupPointer       r7, 7          r7 = ST[7] -> <#5445173390656D6D>
02FC   0x003490   41 08 0C 00   LoadStaticPointerImmr8, 12         r8 = ST[12] -> <0xBF026C1C>
02FD   0x003498   41 09 0D 00   LoadStaticPointerImmr9, 13         r9 = ST[13] -> <0xBF025EFC>
02FE   0x0034A0   41 0A 16 00   LoadStaticPointerImmr10, 22        r10 = ST[22] -> <0xBF02760C>
02FF   0x0034A8   43 0B 04 00   Move                r11, r4        r11 = r4 [#5445173390656D6D()]
0300   0x0034B0   43 31 08 00   Move                r49, r8        r49 = r8 [0xBF026C1C]
0301   0x0034B8   43 32 09 00   Move                r50, r9        r50 = r9 [0xBF025EFC]
0302   0x0034C0   43 33 0A 00   Move                r51, r10       r51 = r10 [0xBF02760C]
0303   0x0034C8   43 34 0B 00   Move                r52, r11       r52 = r11 [#5445173390656D6D()]
0304   0x0034D0   1C 07 07 04   CallFf              r7, r7, 4      r7 = #5445173390656D6D(0xBF026C1C, 0xBF025EFC, 0xBF02760C, #5445173390656D6D())
0305   0x0034D8   0C 08 13 00   LoadU16Imm          r8, 19         r8 = 19
0306   0x0034E0   43 31 07 00   Move                r49, r7        r49 = r7 [#5445173390656D6D()]
0307   0x0034E8   43 32 08 00   Move                r50, r8        r50 = r8 [19]
0308   0x0034F0   1C 06 06 02   CallFf              r6, r6, 2      r6 = display(#5445173390656D6D(), 19)
0309   0x0034F8   2D 0B 00 03   Branch              030B           => L_87
L_86:
030A   0x003500   0C 06 00 00   LoadU16Imm          r6, 0          r6 = 0
L_87:
030B   0x003508   0C 06 00 00   LoadU16Imm          r6, 0          r6 = 0
030C   0x003510   15 07 01 00   LookupPointer       r7, 1          r7 = ST[1] -> <darray-count>
030D   0x003518   15 08 02 00   LookupPointer       r8, 2          r8 = ST[2] -> <get-symbol>
030E   0x003520   4A 09 17 00   LoadStaticU64Imm    r9, 23         r9 = ST[23] -> <#813B48C382415979>
030F   0x003528   4A 0A 04 00   LoadStaticU64Imm    r10, 4         r10 = ST[4] -> <self>
0310   0x003530   43 31 09 00   Move                r49, r9        r49 = r9 [#813B48C382415979]
0311   0x003538   43 32 0A 00   Move                r50, r10       r50 = r10 [self]
0312   0x003540   1C 08 08 02   CallFf              r8, r8, 2      r8 = get-symbol(#813B48C382415979, self)
0313   0x003548   43 31 08 00   Move                r49, r8        r49 = r8 [get-symbol()]
0314   0x003550   1C 07 07 01   CallFf              r7, r7, 1      r7 = darray-count(get-symbol())
0315   0x003558   15 08 05 00   LookupPointer       r8, 5          r8 = ST[5] -> <begin-foreach>
0316   0x003560   1C 08 08 00   CallFf              r8, r8, 0      r8 = begin-foreach()
L_102:
0317   0x003568   43 08 06 00   Move                r8, r6         r8 = r6 [0]
0318   0x003570   43 09 07 00   Move                r9, r7         r9 = r7 [darray-count()]
0319   0x003578   20 08 08 09   ILessThan           r8, r8, r9     r8 = r8 [1] < r9 [1753163078]
031A   0x003580   2F 88 08 03   BranchIfNot         r8, 0388       IF NOT r8 [0x1] => L_88
031B   0x003588   15 08 06 00   LookupPointer       r8, 6          r8 = ST[6] -> <darray-at>
031C   0x003590   15 09 02 00   LookupPointer       r9, 2          r9 = ST[2] -> <get-symbol>
031D   0x003598   4A 0A 17 00   LoadStaticU64Imm    r10, 23        r10 = ST[23] -> <#813B48C382415979>
031E   0x0035A0   4A 0B 04 00   LoadStaticU64Imm    r11, 4         r11 = ST[4] -> <self>
031F   0x0035A8   43 31 0A 00   Move                r49, r10       r49 = r10 [#813B48C382415979]
0320   0x0035B0   43 32 0B 00   Move                r50, r11       r50 = r11 [self]
0321   0x0035B8   1C 09 09 02   CallFf              r9, r9, 2      r9 = get-symbol(#813B48C382415979, self)
0322   0x0035C0   43 0A 06 00   Move                r10, r6        r10 = r6 [0]
0323   0x0035C8   43 31 09 00   Move                r49, r9        r49 = r9 [get-symbol()]
0324   0x0035D0   43 32 0A 00   Move                r50, r10       r50 = r10 [0]
0325   0x0035D8   1C 08 08 02   CallFf              r8, r8, 2      r8 = darray-at(get-symbol(), 0)
0326   0x0035E0   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0327   0x0035E8   2F 2E 09 03   BranchIfNot         r9, 032E       IF NOT r9 [darray-at()] => L_89
0328   0x0035F0   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0329   0x0035F8   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
032A   0x003600   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
032B   0x003608   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
032C   0x003610   0C 0A 01 00   LoadU16Imm          r10, 1         r10 = 1
032D   0x003618   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [1]
L_89:
032E   0x003620   2F 33 09 03   BranchIfNot         r9, 0333       IF NOT r9 [0xD3F1F500] => L_90
032F   0x003628   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0330   0x003630   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0331   0x003638   4C 09 09 00   LoadU8              ???            UNKNOWN INSTRUCTION
0332   0x003640   2D 76 00 03   Branch              0376           => L_91
L_90:
0333   0x003648   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0334   0x003650   2F 3B 09 03   BranchIfNot         r9, 033B       IF NOT r9 [darray-at()] => L_92
0335   0x003658   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0336   0x003660   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0337   0x003668   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
0338   0x003670   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
0339   0x003678   0C 0A 02 00   LoadU16Imm          r10, 2         r10 = 2
033A   0x003680   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [2]
L_92:
033B   0x003688   2F 40 09 03   BranchIfNot         r9, 0340       IF NOT r9 [0xD3F1F500] => L_93
033C   0x003690   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
033D   0x003698   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
033E   0x0036A0   4F 09 09 00   LoadI32             ???            UNKNOWN INSTRUCTION
033F   0x0036A8   2D 76 00 03   Branch              0376           => L_91
L_93:
0340   0x0036B0   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0341   0x0036B8   2F 48 09 03   BranchIfNot         r9, 0348       IF NOT r9 [darray-at()] => L_94
0342   0x0036C0   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0343   0x0036C8   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0344   0x0036D0   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
0345   0x0036D8   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
0346   0x0036E0   0C 0A 03 00   LoadU16Imm          r10, 3         r10 = 3
0347   0x0036E8   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [3]
L_94:
0348   0x0036F0   2F 4D 09 03   BranchIfNot         r9, 034D       IF NOT r9 [0xD3F1F500] => L_95
0349   0x0036F8   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
034A   0x003700   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
034B   0x003708   0D 09 09 00   LoadU32             r9, [r9]       r9 = [0x0 + 0x0]
034C   0x003710   2D 76 00 03   Branch              0376           => L_91
L_95:
034D   0x003718   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
034E   0x003720   2F 55 09 03   BranchIfNot         r9, 0355       IF NOT r9 [darray-at()] => L_96
034F   0x003728   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0350   0x003730   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0351   0x003738   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
0352   0x003740   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
0353   0x003748   0C 0A 04 00   LoadU16Imm          r10, 4         r10 = 4
0354   0x003750   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [4]
L_96:
0355   0x003758   2F 5A 09 03   BranchIfNot         r9, 035A       IF NOT r9 [0xD3F1F500] => L_97
0356   0x003760   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0357   0x003768   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0358   0x003770   50 09 09 00   LoadI64             r9, [r9]       r9 = [0x0 + 0x0]
0359   0x003778   2D 76 00 03   Branch              0376           => L_91
L_97:
035A   0x003780   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
035B   0x003788   2F 62 09 03   BranchIfNot         r9, 0362       IF NOT r9 [darray-at()] => L_98
035C   0x003790   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
035D   0x003798   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
035E   0x0037A0   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
035F   0x0037A8   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
0360   0x0037B0   0C 0A 05 00   LoadU16Imm          r10, 5         r10 = 5
0361   0x0037B8   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [5]
L_98:
0362   0x0037C0   2F 67 09 03   BranchIfNot         r9, 0367       IF NOT r9 [0xD3F1F500] => L_99
0363   0x0037C8   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0364   0x0037D0   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0365   0x0037D8   51 09 09 00   LoadU64             r9, [r9]       r9 = [0x0 + 0x0]
0366   0x0037E0   2D 76 00 03   Branch              0376           => L_91
L_99:
0367   0x0037E8   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0368   0x0037F0   2F 6F 09 03   BranchIfNot         r9, 036F       IF NOT r9 [darray-at()] => L_100
0369   0x0037F8   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
036A   0x003800   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
036B   0x003808   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
036C   0x003810   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
036D   0x003818   0C 0A 06 00   LoadU16Imm          r10, 6         r10 = 6
036E   0x003820   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [6]
L_100:
036F   0x003828   2F 75 09 03   BranchIfNot         r9, 0375       IF NOT r9 [0xD3F1F500] => L_101
0370   0x003830   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0371   0x003838   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0372   0x003840   0E 09 09 00   LoadFloat           r9, [r9]       r9 = [0x0 + 0x0]
0373   0x003848   19 09 09 00   CastInteger         r9, r9         r9 = int(r9) -> <0.000000> => <0>
0374   0x003850   2D 76 00 03   Branch              0376           => L_91
L_101:
0375   0x003858   0C 09 00 00   LoadU16Imm          r9, 0          r9 = 0
L_91:
0376   0x003860   43 08 09 00   Move                r8, r9         r8 = r9 [0]
0377   0x003868   15 09 07 00   LookupPointer       r9, 7          r9 = ST[7] -> <#5445173390656D6D>
0378   0x003870   41 0A 08 00   LoadStaticPointerImmr10, 8         r10 = ST[8] -> <0xBF025F07>
0379   0x003878   43 0B 05 00   Move                r11, r5        r11 = r5 [0xBF027CA1]
037A   0x003880   43 0C 08 00   Move                r12, r8        r12 = r8 [0]
037B   0x003888   43 31 0A 00   Move                r49, r10       r49 = r10 [0xBF025F07]
037C   0x003890   43 32 0B 00   Move                r50, r11       r50 = r11 [0xBF027CA1]
037D   0x003898   43 33 0C 00   Move                r51, r12       r51 = r12 [0]
037E   0x0038A0   1C 09 09 03   CallFf              r9, r9, 3      r9 = #5445173390656D6D(0xBF025F07, 0xBF027CA1, 0)
037F   0x0038A8   43 05 09 00   Move                r5, r9         r5 = r9 [#5445173390656D6D()]
0380   0x0038B0   43 09 05 00   Move                r9, r5         r9 = r5 [#5445173390656D6D()]
0381   0x0038B8   43 09 06 00   Move                r9, r6         r9 = r6 [0]
0382   0x0038C0   0C 0A 01 00   LoadU16Imm          r10, 1         r10 = 1
0383   0x0038C8   01 09 09 0A   IAdd                r9, r9, r10    1 = 0 + 1
0384   0x0038D0   43 06 09 00   Move                r6, r9         r6 = r9 [1]
0385   0x0038D8   43 09 06 00   Move                r9, r6         r9 = r6 [1]
0386   0x0038E0   43 08 09 00   Move                r8, r9         r8 = r9 [1]
0387   0x0038E8   2D 17 00 03   Branch              0317           => L_102
L_88:
0388   0x0038F0   15 08 09 00   LookupPointer       r8, 9          r8 = ST[9] -> <end-foreach>
0389   0x0038F8   1C 08 08 00   CallFf              r8, r8, 0      r8 = end-foreach()
038A   0x003900   43 06 08 00   Move                r6, r8         r6 = r8 [end-foreach()]
038B   0x003908   15 06 0A 00   LookupPointer       r6, 10         r6 = ST[10] -> <is-final-build?>
038C   0x003910   1C 06 06 00   CallFf              r6, r6, 0      r6 = is-final-build?()
038D   0x003918   30 06 06 00   OpLogNot            r6, r6         r6 = !r6 -> <TRUE>
038E   0x003920   2F 9F 06 03   BranchIfNot         r6, 039F       IF NOT r6 [0x6620ACB7] => L_103
038F   0x003928   15 06 0B 00   LookupPointer       r6, 11         r6 = ST[11] -> <display>
0390   0x003930   15 07 07 00   LookupPointer       r7, 7          r7 = ST[7] -> <#5445173390656D6D>
0391   0x003938   41 08 0C 00   LoadStaticPointerImmr8, 12         r8 = ST[12] -> <0xBF026C1C>
0392   0x003940   41 09 0D 00   LoadStaticPointerImmr9, 13         r9 = ST[13] -> <0xBF025EFC>
0393   0x003948   41 0A 18 00   LoadStaticPointerImmr10, 24        r10 = ST[24] -> <0xBF027620>
0394   0x003950   43 0B 05 00   Move                r11, r5        r11 = r5 [#5445173390656D6D()]
0395   0x003958   43 31 08 00   Move                r49, r8        r49 = r8 [0xBF026C1C]
0396   0x003960   43 32 09 00   Move                r50, r9        r50 = r9 [0xBF025EFC]
0397   0x003968   43 33 0A 00   Move                r51, r10       r51 = r10 [0xBF027620]
0398   0x003970   43 34 0B 00   Move                r52, r11       r52 = r11 [#5445173390656D6D()]
0399   0x003978   1C 07 07 04   CallFf              r7, r7, 4      r7 = #5445173390656D6D(0xBF026C1C, 0xBF025EFC, 0xBF027620, #5445173390656D6D())
039A   0x003980   0C 08 13 00   LoadU16Imm          r8, 19         r8 = 19
039B   0x003988   43 31 07 00   Move                r49, r7        r49 = r7 [#5445173390656D6D()]
039C   0x003990   43 32 08 00   Move                r50, r8        r50 = r8 [19]
039D   0x003998   1C 06 06 02   CallFf              r6, r6, 2      r6 = display(#5445173390656D6D(), 19)
039E   0x0039A0   2D A0 00 03   Branch              03A0           => L_104
L_103:
039F   0x0039A8   0C 06 00 00   LoadU16Imm          r6, 0          r6 = 0
L_104:
03A0   0x0039B0   2D A2 00 03   Branch              03A2           => L_105
L_53:
03A1   0x0039B8   0C 06 00 00   LoadU16Imm          r6, 0          r6 = 0
L_105:
03A2   0x0039C0   43 00 06 00   Move                r0, r6         r0 = r6 [0]
03A3   0x0039C8   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x0039D0    POINTER <#00000282BF027CA1>
0001   0x0039D8    POINTER <darray-count>
0002   0x0039E0    POINTER <get-symbol>
0003   0x0039E8    SID <#3CD186F47CCAE6B1>
0004   0x0039F0    SID <self>
0005   0x0039F8    POINTER <begin-foreach>
0006   0x003A00    POINTER <darray-at>
0007   0x003A08    POINTER <#5445173390656D6D>
0008   0x003A10    POINTER <#00000282BF025F07>
0009   0x003A18    POINTER <end-foreach>
000A   0x003A20    POINTER <is-final-build?>
000B   0x003A28    POINTER <display>
000C   0x003A30    POINTER <#00000282BF026C1C>
000D   0x003A38    POINTER <#00000282BF025EFC>
000E   0x003A40    POINTER <#00000282BF0276DB>
000F   0x003A48    SID <#FDC4C8C377BAE464>
0010   0x003A50    POINTER <#00000282BF0276F2>
0011   0x003A58    SID <#95B0EBA52417EDE3>
0012   0x003A60    POINTER <#00000282BF027706>
0013   0x003A68    SID <#AE606DDB7F18D76F>
0014   0x003A70    POINTER <#00000282BF0275F5>
0015   0x003A78    SID <#F14ED4EDE9DDEA26>
0016   0x003A80    POINTER <#00000282BF02760C>
0017   0x003A88    SID <#813B48C382415979>
0018   0x003A90    POINTER <#00000282BF027620>
  }
####################################################################################################
  [0x004DD0] #9C27142D7E9F3555: d-array 
  {
ALREADY_EMITTED
  }
####################################################################################################
  [0x003A98] ss-wave-manager: state-script 
  {
      OPTIONS: player
DECLARATIONS: 
[0x0052C0]symbol#16B1C967EF31FE79        <--------->
[0x0052F0]boolean#C682097AD6DD2276        <UNINITIALIZED>
[0x005320]boolean#41BF7ED9363E5B7E        <UNINITIALIZED>
[0x005350]boolean#BE1B99861A282419TRUE        <>
[0x005380]boolean#031D4F1C6B501E2BTRUE        <>
[0x0053B0]boolean#8011CE00FED42EB7        <UNINITIALIZED>
[0x0053E0]int32#A7826A8526845AFE        <0>
[0x005410]symbol#A66E1D7D3CA6BCC0        <--------->
[0x005440]symbolcurrent-task        <#0000000000000000>
[0x005470]symbol#220FDE5797DE75AE        <#0000000000000000>
[0x0054A0]symbol#355CB666FED58A80        <#0000000000000000>
[0x0054D0]symbol#E9B2C1F1C000B5AA        <--------->
[0x005500]symbol#7E358C581E146817        <#0000000000000000>
[0x005530]symbol#CD9D116CF6E5DE86        <#0000000000000000>
[0x005560]int32num-waves        <0>
[0x005590]boolean#5F89BCA42A4FC333        <UNINITIALIZED>
[0x0055C0]boolean#FB027CA453EDDE5B        <UNINITIALIZED>
[0x0055F0]int32#5389CC70A44E7358        <-1>
[0x005620]boolean#1FD0D5BACF6C26B1        <UNINITIALIZED>
[0x005650]symbol#CD5807AC5F281201        <#0000000000000000>
[0x005680]symbol#F4BB1A242FE97D63        <#0000000000000000>
[0x0056B0]symbol#C263A5545573F0BD        <--------->
[0x0056E0]symbol#7F25A075B1A9E239        <#0000000000000000>
[0x005710]symbol#8BE9BBBC87A08374        <#0000000000000000>
[0x005740]int32#30BFAD05B9FB096E        <-1>
[0x005770]symbol#FB88BDBA9A4B5DAA        <#0000000000000000>
[0x0057A0]symbolglobal-combat-params        <#0000000000000000>
[0x0057D0]symbol#84335FAD5E97BB40        <#0000000000000000>
[0x005800]symbol#67A48F159F8C807D        <--------->
[0x005830]int32#CEF93DF859F605EA        <1>
[0x005860]int32#A2DAF2B622A5ECFD        <-1>
[0x005890]symbol#0766E6126DD16724        <#0000000000000000>
[0x0058C0]int32#1F9001DFBF054576        <-1>
[0x0058F0]symbol#FDCBB431C41579BC        <#0000000000000000>
[0x005920]symbol#38CF869B468CECC9        <--------->
[0x005950]symbol#28D1CA76BD462D70        <#0000000000000000>
[0x005980]symbol#77621D191B920833        <#0000000000000000>
[0x0059B0]boolean#32E94EADDED8F01D        <UNINITIALIZED>
[0x0059E0]int32#928E23508A42DAF2        <0>
[0x005A10]int32#0676F87AA7DD009C        <0>
[0x005A40]int32#B779DF53A01D4CD9        <-1>
[0x005A70]float#648F7E10342158ED        <0.0000>
[0x005AA0]boolean#FA343BC04362318D        <UNINITIALIZED>
[0x005AD0]symbol#06CE369F019EC283        <--------->
[0x005B00]symbol#3CD186F47CCAE6B1        <#0000000000000000>
[0x005B30]symbol#FDC4C8C377BAE464        <#0000000000000000>
[0x005B60]symbol#95B0EBA52417EDE3        <#0000000000000000>
[0x005B90]symbol#AE606DDB7F18D76F        <#0000000000000000>
[0x005BC0]symbol#F14ED4EDE9DDEA26        <#0000000000000000>
[0x005BF0]symbol#813B48C382415979        <#0000000000000000>
[0x005C20]symbol#129B0447586D0CD8        <#0000000000000000>
[0x005C50]symbol#2D7661AFEECF44C9        <#0000000000000000>
[0x005C80]symbol#0DB1F3A99E880DB1        <#0000000000000000>
[0x005CB0]symbol#0B2B4ACCA5F49744        <#0000000000000000>
[0x005CE0]symbol#D7FD1882C0C51376        <--------->
[0x005D10]symbol#95719EBD5D274866        <#0000000000000000>
[0x005D40]symbol#ACA135ADD5938983        <#0000000000000000>
[0x005D70]symbol#80F4C52A6BDCA6BC        <#0000000000000000>
[0x005DA0]symbol#FE0CDBDD4CC9DFAD        <#0000000000000000>
[0x005DD0]symbol#E44FA889CD257D23        <#0000000000000000>
[0x005E00]symbol#2005DE6CD0556E13        <#0000000000000000>
[0x005E30]symbol#341648904111D0DF        <--------->
[0x005E60]boolean#D9DFB4F910DB3FD9        <UNINITIALIZED>
[0x005E90]timer#A9297DB4F1A30CF7        <UNINITIALIZED>
[0x005EC0]int32#0118A324CA34E676        <-1>
[0x005EF0]boolean#4776367E4365CE74        <UNINITIALIZED>
[0x005F20]int32#73ADFC94A6C6AC49        <-1>
[0x005F50]symbol#E5D6EE6D8F06F33D        <--------->
[0x005F80]boolean#503D45B686F0E282        <UNINITIALIZED>
[0x005FB0]int32#4046927F0EB6E142        <3>
[0x005FE0]symbol#F1186475D251E396        <*default-global-combat-params*>
      STATE --script--:
         ON start
          TRACK main:
0000   0x00FDD0   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <set-symbol>
0001   0x00FDD8   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#3CD186F47CCAE6B1>
0002   0x00FDE0   15 02 02 00   LookupPointer       r2, 2          r2 = ST[2] -> <darray-create>
0003   0x00FDE8   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
0004   0x00FDF0   3F 04 04 00   LoadStaticI32Imm    r4, 4          r4 = ST[4] -> <-1>
0005   0x00FDF8   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
0006   0x00FE00   43 31 03 00   Move                r49, r3        r49 = r3 [self]
0007   0x00FE08   43 32 04 00   Move                r50, r4        r50 = r4 [-1]
0008   0x00FE10   43 33 05 00   Move                r51, r5        r51 = r5 [0]
0009   0x00FE18   1C 02 02 03   CallFf              r2, r2, 3      r2 = darray-create(self, -1, 0)
000A   0x00FE20   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
000B   0x00FE28   43 31 01 00   Move                r49, r1        r49 = r1 [#3CD186F47CCAE6B1]
000C   0x00FE30   43 32 02 00   Move                r50, r2        r50 = r2 [darray-create()]
000D   0x00FE38   43 33 03 00   Move                r51, r3        r51 = r3 [self]
000E   0x00FE40   1C 00 00 03   CallFf              r0, r0, 3      r0 = set-symbol(#3CD186F47CCAE6B1, darray-create(), self)
000F   0x00FE48   00 00 00 00   Return              r0             Return set-symbol()
SYMBOL TABLE: 
0000   0x00FE50    POINTER <set-symbol>
0001   0x00FE58    SID <#3CD186F47CCAE6B1>
0002   0x00FE60    POINTER <darray-create>
0003   0x00FE68    SID <self>
0004   0x00FE70    INT <-1>
0000   0x009E00   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <set-symbol>
0001   0x009E08   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#FDC4C8C377BAE464>
0002   0x009E10   15 02 02 00   LookupPointer       r2, 2          r2 = ST[2] -> <darray-create>
0003   0x009E18   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
0004   0x009E20   3F 04 04 00   LoadStaticI32Imm    r4, 4          r4 = ST[4] -> <-1>
0005   0x009E28   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
0006   0x009E30   43 31 03 00   Move                r49, r3        r49 = r3 [self]
0007   0x009E38   43 32 04 00   Move                r50, r4        r50 = r4 [-1]
0008   0x009E40   43 33 05 00   Move                r51, r5        r51 = r5 [0]
0009   0x009E48   1C 02 02 03   CallFf              r2, r2, 3      r2 = darray-create(self, -1, 0)
000A   0x009E50   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
000B   0x009E58   43 31 01 00   Move                r49, r1        r49 = r1 [#FDC4C8C377BAE464]
000C   0x009E60   43 32 02 00   Move                r50, r2        r50 = r2 [darray-create()]
000D   0x009E68   43 33 03 00   Move                r51, r3        r51 = r3 [self]
000E   0x009E70   1C 00 00 03   CallFf              r0, r0, 3      r0 = set-symbol(#FDC4C8C377BAE464, darray-create(), self)
000F   0x009E78   00 00 00 00   Return              r0             Return set-symbol()
SYMBOL TABLE: 
0000   0x009E80    POINTER <set-symbol>
0001   0x009E88    SID <#FDC4C8C377BAE464>
0002   0x009E90    POINTER <darray-create>
0003   0x009E98    SID <self>
0004   0x009EA0    INT <-1>
0000   0x017788   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <set-symbol>
0001   0x017790   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#95B0EBA52417EDE3>
0002   0x017798   15 02 02 00   LookupPointer       r2, 2          r2 = ST[2] -> <darray-create>
0003   0x0177A0   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
0004   0x0177A8   3F 04 04 00   LoadStaticI32Imm    r4, 4          r4 = ST[4] -> <-1>
0005   0x0177B0   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
0006   0x0177B8   43 31 03 00   Move                r49, r3        r49 = r3 [self]
0007   0x0177C0   43 32 04 00   Move                r50, r4        r50 = r4 [-1]
0008   0x0177C8   43 33 05 00   Move                r51, r5        r51 = r5 [0]
0009   0x0177D0   1C 02 02 03   CallFf              r2, r2, 3      r2 = darray-create(self, -1, 0)
000A   0x0177D8   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
000B   0x0177E0   43 31 01 00   Move                r49, r1        r49 = r1 [#95B0EBA52417EDE3]
000C   0x0177E8   43 32 02 00   Move                r50, r2        r50 = r2 [darray-create()]
000D   0x0177F0   43 33 03 00   Move                r51, r3        r51 = r3 [self]
000E   0x0177F8   1C 00 00 03   CallFf              r0, r0, 3      r0 = set-symbol(#95B0EBA52417EDE3, darray-create(), self)
000F   0x017800   00 00 00 00   Return              r0             Return set-symbol()
SYMBOL TABLE: 
0000   0x017808    POINTER <set-symbol>
0001   0x017810    SID <#95B0EBA52417EDE3>
0002   0x017818    POINTER <darray-create>
0003   0x017820    SID <self>
0004   0x017828    INT <-1>
0000   0x015808   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <set-symbol>
0001   0x015810   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#AE606DDB7F18D76F>
0002   0x015818   15 02 02 00   LookupPointer       r2, 2          r2 = ST[2] -> <darray-create>
0003   0x015820   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
0004   0x015828   3F 04 04 00   LoadStaticI32Imm    r4, 4          r4 = ST[4] -> <-1>
0005   0x015830   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
0006   0x015838   43 31 03 00   Move                r49, r3        r49 = r3 [self]
0007   0x015840   43 32 04 00   Move                r50, r4        r50 = r4 [-1]
0008   0x015848   43 33 05 00   Move                r51, r5        r51 = r5 [0]
0009   0x015850   1C 02 02 03   CallFf              r2, r2, 3      r2 = darray-create(self, -1, 0)
000A   0x015858   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
000B   0x015860   43 31 01 00   Move                r49, r1        r49 = r1 [#AE606DDB7F18D76F]
000C   0x015868   43 32 02 00   Move                r50, r2        r50 = r2 [darray-create()]
000D   0x015870   43 33 03 00   Move                r51, r3        r51 = r3 [self]
000E   0x015878   1C 00 00 03   CallFf              r0, r0, 3      r0 = set-symbol(#AE606DDB7F18D76F, darray-create(), self)
000F   0x015880   00 00 00 00   Return              r0             Return set-symbol()
SYMBOL TABLE: 
0000   0x015888    POINTER <set-symbol>
0001   0x015890    SID <#AE606DDB7F18D76F>
0002   0x015898    POINTER <darray-create>
0003   0x0158A0    SID <self>
0004   0x0158A8    INT <-1>
0000   0x019EB0   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <set-symbol>
0001   0x019EB8   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#F14ED4EDE9DDEA26>
0002   0x019EC0   15 02 02 00   LookupPointer       r2, 2          r2 = ST[2] -> <darray-create>
0003   0x019EC8   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
0004   0x019ED0   3F 04 04 00   LoadStaticI32Imm    r4, 4          r4 = ST[4] -> <-1>
0005   0x019ED8   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
0006   0x019EE0   43 31 03 00   Move                r49, r3        r49 = r3 [self]
0007   0x019EE8   43 32 04 00   Move                r50, r4        r50 = r4 [-1]
0008   0x019EF0   43 33 05 00   Move                r51, r5        r51 = r5 [0]
0009   0x019EF8   1C 02 02 03   CallFf              r2, r2, 3      r2 = darray-create(self, -1, 0)
000A   0x019F00   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
000B   0x019F08   43 31 01 00   Move                r49, r1        r49 = r1 [#F14ED4EDE9DDEA26]
000C   0x019F10   43 32 02 00   Move                r50, r2        r50 = r2 [darray-create()]
000D   0x019F18   43 33 03 00   Move                r51, r3        r51 = r3 [self]
000E   0x019F20   1C 00 00 03   CallFf              r0, r0, 3      r0 = set-symbol(#F14ED4EDE9DDEA26, darray-create(), self)
000F   0x019F28   00 00 00 00   Return              r0             Return set-symbol()
SYMBOL TABLE: 
0000   0x019F30    POINTER <set-symbol>
0001   0x019F38    SID <#F14ED4EDE9DDEA26>
0002   0x019F40    POINTER <darray-create>
0003   0x019F48    SID <self>
0004   0x019F50    INT <-1>
0000   0x00FE78   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <set-symbol>
0001   0x00FE80   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#813B48C382415979>
0002   0x00FE88   15 02 02 00   LookupPointer       r2, 2          r2 = ST[2] -> <darray-create>
0003   0x00FE90   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
0004   0x00FE98   3F 04 04 00   LoadStaticI32Imm    r4, 4          r4 = ST[4] -> <-1>
0005   0x00FEA0   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
0006   0x00FEA8   43 31 03 00   Move                r49, r3        r49 = r3 [self]
0007   0x00FEB0   43 32 04 00   Move                r50, r4        r50 = r4 [-1]
0008   0x00FEB8   43 33 05 00   Move                r51, r5        r51 = r5 [0]
0009   0x00FEC0   1C 02 02 03   CallFf              r2, r2, 3      r2 = darray-create(self, -1, 0)
000A   0x00FEC8   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
000B   0x00FED0   43 31 01 00   Move                r49, r1        r49 = r1 [#813B48C382415979]
000C   0x00FED8   43 32 02 00   Move                r50, r2        r50 = r2 [darray-create()]
000D   0x00FEE0   43 33 03 00   Move                r51, r3        r51 = r3 [self]
000E   0x00FEE8   1C 00 00 03   CallFf              r0, r0, 3      r0 = set-symbol(#813B48C382415979, darray-create(), self)
000F   0x00FEF0   00 00 00 00   Return              r0             Return set-symbol()
SYMBOL TABLE: 
0000   0x00FEF8    POINTER <set-symbol>
0001   0x00FF00    SID <#813B48C382415979>
0002   0x00FF08    POINTER <darray-create>
0003   0x00FF10    SID <self>
0004   0x00FF18    INT <-1>
0000   0x00A598   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <set-symbol>
0001   0x00A5A0   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#129B0447586D0CD8>
0002   0x00A5A8   15 02 02 00   LookupPointer       r2, 2          r2 = ST[2] -> <darray-create>
0003   0x00A5B0   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
0004   0x00A5B8   3F 04 04 00   LoadStaticI32Imm    r4, 4          r4 = ST[4] -> <-1>
0005   0x00A5C0   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
0006   0x00A5C8   43 31 03 00   Move                r49, r3        r49 = r3 [self]
0007   0x00A5D0   43 32 04 00   Move                r50, r4        r50 = r4 [-1]
0008   0x00A5D8   43 33 05 00   Move                r51, r5        r51 = r5 [0]
0009   0x00A5E0   1C 02 02 03   CallFf              r2, r2, 3      r2 = darray-create(self, -1, 0)
000A   0x00A5E8   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
000B   0x00A5F0   43 31 01 00   Move                r49, r1        r49 = r1 [#129B0447586D0CD8]
000C   0x00A5F8   43 32 02 00   Move                r50, r2        r50 = r2 [darray-create()]
000D   0x00A600   43 33 03 00   Move                r51, r3        r51 = r3 [self]
000E   0x00A608   1C 00 00 03   CallFf              r0, r0, 3      r0 = set-symbol(#129B0447586D0CD8, darray-create(), self)
000F   0x00A610   00 00 00 00   Return              r0             Return set-symbol()
SYMBOL TABLE: 
0000   0x00A618    POINTER <set-symbol>
0001   0x00A620    SID <#129B0447586D0CD8>
0002   0x00A628    POINTER <darray-create>
0003   0x00A630    SID <self>
0004   0x00A638    INT <-1>
0000   0x01A0A8   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <set-symbol>
0001   0x01A0B0   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#2D7661AFEECF44C9>
0002   0x01A0B8   15 02 02 00   LookupPointer       r2, 2          r2 = ST[2] -> <darray-create>
0003   0x01A0C0   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
0004   0x01A0C8   3F 04 04 00   LoadStaticI32Imm    r4, 4          r4 = ST[4] -> <-1>
0005   0x01A0D0   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
0006   0x01A0D8   43 31 03 00   Move                r49, r3        r49 = r3 [self]
0007   0x01A0E0   43 32 04 00   Move                r50, r4        r50 = r4 [-1]
0008   0x01A0E8   43 33 05 00   Move                r51, r5        r51 = r5 [0]
0009   0x01A0F0   1C 02 02 03   CallFf              r2, r2, 3      r2 = darray-create(self, -1, 0)
000A   0x01A0F8   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
000B   0x01A100   43 31 01 00   Move                r49, r1        r49 = r1 [#2D7661AFEECF44C9]
000C   0x01A108   43 32 02 00   Move                r50, r2        r50 = r2 [darray-create()]
000D   0x01A110   43 33 03 00   Move                r51, r3        r51 = r3 [self]
000E   0x01A118   1C 00 00 03   CallFf              r0, r0, 3      r0 = set-symbol(#2D7661AFEECF44C9, darray-create(), self)
000F   0x01A120   00 00 00 00   Return              r0             Return set-symbol()
SYMBOL TABLE: 
0000   0x01A128    POINTER <set-symbol>
0001   0x01A130    SID <#2D7661AFEECF44C9>
0002   0x01A138    POINTER <darray-create>
0003   0x01A140    SID <self>
0004   0x01A148    INT <-1>
0000   0x0178D0   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <set-symbol>
0001   0x0178D8   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#0DB1F3A99E880DB1>
0002   0x0178E0   15 02 02 00   LookupPointer       r2, 2          r2 = ST[2] -> <darray-create>
0003   0x0178E8   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
0004   0x0178F0   3F 04 04 00   LoadStaticI32Imm    r4, 4          r4 = ST[4] -> <-1>
0005   0x0178F8   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
0006   0x017900   43 31 03 00   Move                r49, r3        r49 = r3 [self]
0007   0x017908   43 32 04 00   Move                r50, r4        r50 = r4 [-1]
0008   0x017910   43 33 05 00   Move                r51, r5        r51 = r5 [0]
0009   0x017918   1C 02 02 03   CallFf              r2, r2, 3      r2 = darray-create(self, -1, 0)
000A   0x017920   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
000B   0x017928   43 31 01 00   Move                r49, r1        r49 = r1 [#0DB1F3A99E880DB1]
000C   0x017930   43 32 02 00   Move                r50, r2        r50 = r2 [darray-create()]
000D   0x017938   43 33 03 00   Move                r51, r3        r51 = r3 [self]
000E   0x017940   1C 00 00 03   CallFf              r0, r0, 3      r0 = set-symbol(#0DB1F3A99E880DB1, darray-create(), self)
000F   0x017948   00 00 00 00   Return              r0             Return set-symbol()
SYMBOL TABLE: 
0000   0x017950    POINTER <set-symbol>
0001   0x017958    SID <#0DB1F3A99E880DB1>
0002   0x017960    POINTER <darray-create>
0003   0x017968    SID <self>
0004   0x017970    INT <-1>
0000   0x01ECA0   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <set-symbol>
0001   0x01ECA8   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#0B2B4ACCA5F49744>
0002   0x01ECB0   15 02 02 00   LookupPointer       r2, 2          r2 = ST[2] -> <darray-create>
0003   0x01ECB8   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
0004   0x01ECC0   3F 04 04 00   LoadStaticI32Imm    r4, 4          r4 = ST[4] -> <-1>
0005   0x01ECC8   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
0006   0x01ECD0   43 31 03 00   Move                r49, r3        r49 = r3 [self]
0007   0x01ECD8   43 32 04 00   Move                r50, r4        r50 = r4 [-1]
0008   0x01ECE0   43 33 05 00   Move                r51, r5        r51 = r5 [0]
0009   0x01ECE8   1C 02 02 03   CallFf              r2, r2, 3      r2 = darray-create(self, -1, 0)
000A   0x01ECF0   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
000B   0x01ECF8   43 31 01 00   Move                r49, r1        r49 = r1 [#0B2B4ACCA5F49744]
000C   0x01ED00   43 32 02 00   Move                r50, r2        r50 = r2 [darray-create()]
000D   0x01ED08   43 33 03 00   Move                r51, r3        r51 = r3 [self]
000E   0x01ED10   1C 00 00 03   CallFf              r0, r0, 3      r0 = set-symbol(#0B2B4ACCA5F49744, darray-create(), self)
000F   0x01ED18   00 00 00 00   Return              r0             Return set-symbol()
SYMBOL TABLE: 
0000   0x01ED20    POINTER <set-symbol>
0001   0x01ED28    SID <#0B2B4ACCA5F49744>
0002   0x01ED30    POINTER <darray-create>
0003   0x01ED38    SID <self>
0004   0x01ED40    INT <-1>
0000   0x0100F0   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <set-symbol>
0001   0x0100F8   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#ACA135ADD5938983>
0002   0x010100   15 02 02 00   LookupPointer       r2, 2          r2 = ST[2] -> <darray-create>
0003   0x010108   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
0004   0x010110   3F 04 04 00   LoadStaticI32Imm    r4, 4          r4 = ST[4] -> <-1>
0005   0x010118   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
0006   0x010120   43 31 03 00   Move                r49, r3        r49 = r3 [self]
0007   0x010128   43 32 04 00   Move                r50, r4        r50 = r4 [-1]
0008   0x010130   43 33 05 00   Move                r51, r5        r51 = r5 [0]
0009   0x010138   1C 02 02 03   CallFf              r2, r2, 3      r2 = darray-create(self, -1, 0)
000A   0x010140   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
000B   0x010148   43 31 01 00   Move                r49, r1        r49 = r1 [#ACA135ADD5938983]
000C   0x010150   43 32 02 00   Move                r50, r2        r50 = r2 [darray-create()]
000D   0x010158   43 33 03 00   Move                r51, r3        r51 = r3 [self]
000E   0x010160   1C 00 00 03   CallFf              r0, r0, 3      r0 = set-symbol(#ACA135ADD5938983, darray-create(), self)
000F   0x010168   00 00 00 00   Return              r0             Return set-symbol()
SYMBOL TABLE: 
0000   0x010170    POINTER <set-symbol>
0001   0x010178    SID <#ACA135ADD5938983>
0002   0x010180    POINTER <darray-create>
0003   0x010188    SID <self>
0004   0x010190    INT <-1>
0000   0x01B930   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <set-symbol>
0001   0x01B938   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#80F4C52A6BDCA6BC>
0002   0x01B940   15 02 02 00   LookupPointer       r2, 2          r2 = ST[2] -> <darray-create>
0003   0x01B948   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
0004   0x01B950   3F 04 04 00   LoadStaticI32Imm    r4, 4          r4 = ST[4] -> <-1>
0005   0x01B958   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
0006   0x01B960   43 31 03 00   Move                r49, r3        r49 = r3 [self]
0007   0x01B968   43 32 04 00   Move                r50, r4        r50 = r4 [-1]
0008   0x01B970   43 33 05 00   Move                r51, r5        r51 = r5 [0]
0009   0x01B978   1C 02 02 03   CallFf              r2, r2, 3      r2 = darray-create(self, -1, 0)
000A   0x01B980   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
000B   0x01B988   43 31 01 00   Move                r49, r1        r49 = r1 [#80F4C52A6BDCA6BC]
000C   0x01B990   43 32 02 00   Move                r50, r2        r50 = r2 [darray-create()]
000D   0x01B998   43 33 03 00   Move                r51, r3        r51 = r3 [self]
000E   0x01B9A0   1C 00 00 03   CallFf              r0, r0, 3      r0 = set-symbol(#80F4C52A6BDCA6BC, darray-create(), self)
000F   0x01B9A8   00 00 00 00   Return              r0             Return set-symbol()
SYMBOL TABLE: 
0000   0x01B9B0    POINTER <set-symbol>
0001   0x01B9B8    SID <#80F4C52A6BDCA6BC>
0002   0x01B9C0    POINTER <darray-create>
0003   0x01B9C8    SID <self>
0004   0x01B9D0    INT <-1>
0000   0x00D5F0   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <set-symbol>
0001   0x00D5F8   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#FE0CDBDD4CC9DFAD>
0002   0x00D600   15 02 02 00   LookupPointer       r2, 2          r2 = ST[2] -> <darray-create>
0003   0x00D608   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
0004   0x00D610   3F 04 04 00   LoadStaticI32Imm    r4, 4          r4 = ST[4] -> <-1>
0005   0x00D618   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
0006   0x00D620   43 31 03 00   Move                r49, r3        r49 = r3 [self]
0007   0x00D628   43 32 04 00   Move                r50, r4        r50 = r4 [-1]
0008   0x00D630   43 33 05 00   Move                r51, r5        r51 = r5 [0]
0009   0x00D638   1C 02 02 03   CallFf              r2, r2, 3      r2 = darray-create(self, -1, 0)
000A   0x00D640   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
000B   0x00D648   43 31 01 00   Move                r49, r1        r49 = r1 [#FE0CDBDD4CC9DFAD]
000C   0x00D650   43 32 02 00   Move                r50, r2        r50 = r2 [darray-create()]
000D   0x00D658   43 33 03 00   Move                r51, r3        r51 = r3 [self]
000E   0x00D660   1C 00 00 03   CallFf              r0, r0, 3      r0 = set-symbol(#FE0CDBDD4CC9DFAD, darray-create(), self)
000F   0x00D668   00 00 00 00   Return              r0             Return set-symbol()
SYMBOL TABLE: 
0000   0x00D670    POINTER <set-symbol>
0001   0x00D678    SID <#FE0CDBDD4CC9DFAD>
0002   0x00D680    POINTER <darray-create>
0003   0x00D688    SID <self>
0004   0x00D690    INT <-1>
0000   0x013ED0   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <set-symbol>
0001   0x013ED8   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#E44FA889CD257D23>
0002   0x013EE0   15 02 02 00   LookupPointer       r2, 2          r2 = ST[2] -> <darray-create>
0003   0x013EE8   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
0004   0x013EF0   3F 04 04 00   LoadStaticI32Imm    r4, 4          r4 = ST[4] -> <-1>
0005   0x013EF8   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
0006   0x013F00   43 31 03 00   Move                r49, r3        r49 = r3 [self]
0007   0x013F08   43 32 04 00   Move                r50, r4        r50 = r4 [-1]
0008   0x013F10   43 33 05 00   Move                r51, r5        r51 = r5 [0]
0009   0x013F18   1C 02 02 03   CallFf              r2, r2, 3      r2 = darray-create(self, -1, 0)
000A   0x013F20   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
000B   0x013F28   43 31 01 00   Move                r49, r1        r49 = r1 [#E44FA889CD257D23]
000C   0x013F30   43 32 02 00   Move                r50, r2        r50 = r2 [darray-create()]
000D   0x013F38   43 33 03 00   Move                r51, r3        r51 = r3 [self]
000E   0x013F40   1C 00 00 03   CallFf              r0, r0, 3      r0 = set-symbol(#E44FA889CD257D23, darray-create(), self)
000F   0x013F48   00 00 00 00   Return              r0             Return set-symbol()
SYMBOL TABLE: 
0000   0x013F50    POINTER <set-symbol>
0001   0x013F58    SID <#E44FA889CD257D23>
0002   0x013F60    POINTER <darray-create>
0003   0x013F68    SID <self>
0004   0x013F70    INT <-1>
0000   0x014EF8   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <set-symbol>
0001   0x014F00   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#2005DE6CD0556E13>
0002   0x014F08   15 02 02 00   LookupPointer       r2, 2          r2 = ST[2] -> <darray-create>
0003   0x014F10   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
0004   0x014F18   3F 04 04 00   LoadStaticI32Imm    r4, 4          r4 = ST[4] -> <-1>
0005   0x014F20   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
0006   0x014F28   43 31 03 00   Move                r49, r3        r49 = r3 [self]
0007   0x014F30   43 32 04 00   Move                r50, r4        r50 = r4 [-1]
0008   0x014F38   43 33 05 00   Move                r51, r5        r51 = r5 [0]
0009   0x014F40   1C 02 02 03   CallFf              r2, r2, 3      r2 = darray-create(self, -1, 0)
000A   0x014F48   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
000B   0x014F50   43 31 01 00   Move                r49, r1        r49 = r1 [#2005DE6CD0556E13]
000C   0x014F58   43 32 02 00   Move                r50, r2        r50 = r2 [darray-create()]
000D   0x014F60   43 33 03 00   Move                r51, r3        r51 = r3 [self]
000E   0x014F68   1C 00 00 03   CallFf              r0, r0, 3      r0 = set-symbol(#2005DE6CD0556E13, darray-create(), self)
000F   0x014F70   00 00 00 00   Return              r0             Return set-symbol()
SYMBOL TABLE: 
0000   0x014F78    POINTER <set-symbol>
0001   0x014F80    SID <#2005DE6CD0556E13>
0002   0x014F88    POINTER <darray-create>
0003   0x014F90    SID <self>
0004   0x014F98    INT <-1>
0000   0x00FD30   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <#B96C7EEF7ACAB122>
0001   0x00FD38   2F 06 00 00   BranchIfNot         r0, 0006       IF NOT r0 [0x7ACAB122] => L_0
0002   0x00FD40   15 00 00 01   LookupPointer       r0, 0          r0 = ST[0] -> <#B96C7EEF7ACAB122>
0003   0x00FD48   5D 00 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0004   0x00FD50   3B 00 00 10   IAddImm             r0, r0, 16     r0 = r0 [2060103970] / 16 -> <2060103970>
0005   0x00FD58   4C 00 00 00   LoadU8              ???            UNKNOWN INSTRUCTION
L_0:
0006   0x00FD60   2F 0E 00 00   BranchIfNot         r0, 000E       IF NOT r0 [2060103970] => L_1
0007   0x00FD68   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <send-event>
0008   0x00FD70   4A 01 02 00   LoadStaticU64Imm    r1, 2          r1 = ST[2] -> <designer-menu-changed>
0009   0x00FD78   4A 02 03 00   LoadStaticU64Imm    r2, 3          r2 = ST[3] -> <self>
000A   0x00FD80   43 31 01 00   Move                r49, r1        r49 = r1 [designer-menu-changed]
000B   0x00FD88   43 32 02 00   Move                r50, r2        r50 = r2 [self]
000C   0x00FD90   1C 00 00 02   CallFf              r0, r0, 2      r0 = send-event(designer-menu-changed, self)
000D   0x00FD98   2D 0F 00 00   Branch              000F           => L_RETURN
L_1:
000E   0x00FDA0   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
000F   0x00FDA8   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x00FDB0    POINTER <#B96C7EEF7ACAB122>
0001   0x00FDB8    POINTER <send-event>
0002   0x00FDC0    SID <designer-menu-changed>
0003   0x00FDC8    SID <self>
         ON update
          TRACK main:
0000   0x01AF68   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <#E5FCFC6B95B3F669>
0001   0x01AF70   1B 00 00 00   Call                r0, r0, 0      r0 = #E5FCFC6B95B3F669()
0002   0x01AF78   00 00 00 00   Return              r0             Return #E5FCFC6B95B3F669()
SYMBOL TABLE: 
0000   0x01AF80    POINTER <#E5FCFC6B95B3F669>
0000   0x00D2B0   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
0001   0x00D2B8   15 01 00 00   LookupPointer       r1, 0          r1 = ST[0] -> <darray-count>
0002   0x00D2C0   4A 02 01 00   LoadStaticU64Imm    r2, 1          r2 = ST[1] -> <#88F409F4BF0F056A>
0003   0x00D2C8   43 31 02 00   Move                r49, r2        r49 = r2 [#88F409F4BF0F056A]
0004   0x00D2D0   1C 01 01 01   CallFf              r1, r1, 1      r1 = darray-count(#88F409F4BF0F056A)
0005   0x00D2D8   15 02 02 00   LookupPointer       r2, 2          r2 = ST[2] -> <begin-foreach>
0006   0x00D2E0   1C 02 02 00   CallFf              r2, r2, 0      r2 = begin-foreach()
L_11:
0007   0x00D2E8   43 02 00 00   Move                r2, r0         r2 = r0 [0]
0008   0x00D2F0   43 03 01 00   Move                r3, r1         r3 = r1 [darray-count()]
0009   0x00D2F8   20 02 02 03   ILessThan           r2, r2, r3     r2 = r2 [1] < r3 [1753163078]
000A   0x00D300   2F 5A 02 00   BranchIfNot         r2, 005A       IF NOT r2 [0x1] => L_0
000B   0x00D308   15 02 03 00   LookupPointer       r2, 3          r2 = ST[3] -> <darray-at>
000C   0x00D310   4A 03 01 00   LoadStaticU64Imm    r3, 1          r3 = ST[1] -> <#88F409F4BF0F056A>
000D   0x00D318   43 04 00 00   Move                r4, r0         r4 = r0 [0]
000E   0x00D320   43 31 03 00   Move                r49, r3        r49 = r3 [#88F409F4BF0F056A]
000F   0x00D328   43 32 04 00   Move                r50, r4        r50 = r4 [0]
0010   0x00D330   1C 02 02 02   CallFf              r2, r2, 2      r2 = darray-at(#88F409F4BF0F056A, 0)
0011   0x00D338   43 03 02 00   Move                r3, r2         r3 = r2 [darray-at()]
0012   0x00D340   2F 19 03 00   BranchIfNot         r3, 0019       IF NOT r3 [darray-at()] => L_1
0013   0x00D348   43 03 02 00   Move                r3, r2         r3 = r2 [darray-at()]
0014   0x00D350   5D 03 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0015   0x00D358   3B 03 03 0C   IAddImm             r3, r3, 12     r3 = r3 [-739117676] / 12 -> <-739117676>
0016   0x00D360   4E 03 03 00   LoadU16             ???            UNKNOWN INSTRUCTION
0017   0x00D368   0C 04 07 00   LoadU16Imm          r4, 7          r4 = 7
0018   0x00D370   1D 03 03 04   IEqual              r3, r3, r4     r3 = r3 [-739117824] == r4 [7]
L_1:
0019   0x00D378   2F 1E 03 00   BranchIfNot         r3, 001E       IF NOT r3 [0xD3F1F500] => L_2
001A   0x00D380   43 03 02 00   Move                r3, r2         r3 = r2 [darray-at()]
001B   0x00D388   5D 03 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
001C   0x00D390   51 03 03 00   LoadU64             r3, [r3]       r3 = [0x0 + 0x0]
001D   0x00D398   2D 39 00 00   Branch              0039           => L_3
L_2:
001E   0x00D3A0   43 03 02 00   Move                r3, r2         r3 = r2 [darray-at()]
001F   0x00D3A8   2F 26 03 00   BranchIfNot         r3, 0026       IF NOT r3 [darray-at()] => L_4
0020   0x00D3B0   43 03 02 00   Move                r3, r2         r3 = r2 [darray-at()]
0021   0x00D3B8   5D 03 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0022   0x00D3C0   3B 03 03 0C   IAddImm             r3, r3, 12     r3 = r3 [-739117676] / 12 -> <-739117676>
0023   0x00D3C8   4E 03 03 00   LoadU16             ???            UNKNOWN INSTRUCTION
0024   0x00D3D0   0C 04 05 00   LoadU16Imm          r4, 5          r4 = 5
0025   0x00D3D8   1D 03 03 04   IEqual              r3, r3, r4     r3 = r3 [-739117824] == r4 [5]
L_4:
0026   0x00D3E0   2F 2B 03 00   BranchIfNot         r3, 002B       IF NOT r3 [0xD3F1F500] => L_5
0027   0x00D3E8   43 03 02 00   Move                r3, r2         r3 = r2 [darray-at()]
0028   0x00D3F0   5D 03 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0029   0x00D3F8   51 03 03 00   LoadU64             r3, [r3]       r3 = [0x0 + 0x0]
002A   0x00D400   2D 39 00 00   Branch              0039           => L_3
L_5:
002B   0x00D408   43 03 02 00   Move                r3, r2         r3 = r2 [darray-at()]
002C   0x00D410   2F 33 03 00   BranchIfNot         r3, 0033       IF NOT r3 [darray-at()] => L_6
002D   0x00D418   43 03 02 00   Move                r3, r2         r3 = r2 [darray-at()]
002E   0x00D420   5D 03 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
002F   0x00D428   3B 03 03 0C   IAddImm             r3, r3, 12     r3 = r3 [-739117676] / 12 -> <-739117676>
0030   0x00D430   4E 03 03 00   LoadU16             ???            UNKNOWN INSTRUCTION
0031   0x00D438   0C 04 04 00   LoadU16Imm          r4, 4          r4 = 4
0032   0x00D440   1D 03 03 04   IEqual              r3, r3, r4     r3 = r3 [-739117824] == r4 [4]
L_6:
0033   0x00D448   2F 38 03 00   BranchIfNot         r3, 0038       IF NOT r3 [0xD3F1F500] => L_7
0034   0x00D450   43 03 02 00   Move                r3, r2         r3 = r2 [darray-at()]
0035   0x00D458   5D 03 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0036   0x00D460   51 03 03 00   LoadU64             r3, [r3]       r3 = [0x0 + 0x0]
0037   0x00D468   2D 39 00 00   Branch              0039           => L_3
L_7:
0038   0x00D470   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
L_3:
0039   0x00D478   43 02 03 00   Move                r2, r3         r2 = r3 [0]
003A   0x00D480   15 03 04 00   LookupPointer       r3, 4          r3 = ST[4] -> <npc-alive?>
003B   0x00D488   43 04 02 00   Move                r4, r2         r4 = r2 [0]
003C   0x00D490   43 31 04 00   Move                r49, r4        r49 = r4 [0]
003D   0x00D498   1C 03 03 01   CallFf              r3, r3, 1      r3 = npc-alive?(0)
003E   0x00D4A0   30 03 03 00   OpLogNot            r3, r3         r3 = !r3 -> <TRUE>
003F   0x00D4A8   2F 4C 03 00   BranchIfNot         r3, 004C       IF NOT r3 [0x2D93D544] => L_8
0040   0x00D4B0   15 03 05 00   LookupPointer       r3, 5          r3 = ST[5] -> <darray-contains?>
0041   0x00D4B8   4A 04 06 00   LoadStaticU64Imm    r4, 6          r4 = ST[6] -> <#9C27142D7E9F3555>
0042   0x00D4C0   15 05 07 00   LookupPointer       r5, 7          r5 = ST[7] -> <new-boxed-value>
0043   0x00D4C8   0C 06 07 00   LoadU16Imm          r6, 7          r6 = 7
0044   0x00D4D0   43 07 02 00   Move                r7, r2         r7 = r2 [0]
0045   0x00D4D8   43 31 06 00   Move                r49, r6        r49 = r6 [7]
0046   0x00D4E0   43 32 07 00   Move                r50, r7        r50 = r7 [0]
0047   0x00D4E8   1C 05 05 02   CallFf              r5, r5, 2      r5 = new-boxed-value(7, 0)
0048   0x00D4F0   43 31 04 00   Move                r49, r4        r49 = r4 [#9C27142D7E9F3555]
0049   0x00D4F8   43 32 05 00   Move                r50, r5        r50 = r5 [new-boxed-value()]
004A   0x00D500   1C 03 03 02   CallFf              r3, r3, 2      r3 = darray-contains?(#9C27142D7E9F3555, new-boxed-value())
004B   0x00D508   30 03 03 00   OpLogNot            r3, r3         r3 = !r3 -> <TRUE>
L_8:
004C   0x00D510   2F 52 03 00   BranchIfNot         r3, 0052       IF NOT r3 [0x8E92B5EA] => L_9
004D   0x00D518   15 03 08 00   LookupPointer       r3, 8          r3 = ST[8] -> <set-focusable-ignore/f>
004E   0x00D520   43 04 02 00   Move                r4, r2         r4 = r2 [0]
004F   0x00D528   43 31 04 00   Move                r49, r4        r49 = r4 [0]
0050   0x00D530   1C 03 03 01   CallFf              r3, r3, 1      r3 = set-focusable-ignore/f(0)
0051   0x00D538   2D 53 00 00   Branch              0053           => L_10
L_9:
0052   0x00D540   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
L_10:
0053   0x00D548   43 03 00 00   Move                r3, r0         r3 = r0 [0]
0054   0x00D550   0C 04 01 00   LoadU16Imm          r4, 1          r4 = 1
0055   0x00D558   01 03 03 04   IAdd                r3, r3, r4     1 = 0 + 1
0056   0x00D560   43 00 03 00   Move                r0, r3         r0 = r3 [1]
0057   0x00D568   43 03 00 00   Move                r3, r0         r3 = r0 [1]
0058   0x00D570   43 02 03 00   Move                r2, r3         r2 = r3 [1]
0059   0x00D578   2D 07 00 00   Branch              0007           => L_11
L_0:
005A   0x00D580   15 02 09 00   LookupPointer       r2, 9          r2 = ST[9] -> <end-foreach>
005B   0x00D588   1C 02 02 00   CallFf              r2, r2, 0      r2 = end-foreach()
005C   0x00D590   43 00 02 00   Move                r0, r2         r0 = r2 [end-foreach()]
005D   0x00D598   00 00 00 00   Return              r0             Return end-foreach()
SYMBOL TABLE: 
0000   0x00D5A0    POINTER <darray-count>
0001   0x00D5A8    SID <#88F409F4BF0F056A>
0002   0x00D5B0    POINTER <begin-foreach>
0003   0x00D5B8    POINTER <darray-at>
0004   0x00D5C0    POINTER <npc-alive?>
0005   0x00D5C8    POINTER <darray-contains?>
0006   0x00D5D0    SID <#9C27142D7E9F3555>
0007   0x00D5D8    POINTER <new-boxed-value>
0008   0x00D5E0    POINTER <set-focusable-ignore/f>
0009   0x00D5E8    POINTER <end-foreach>
0000   0x01AE80   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <set-int32>
0001   0x01AE88   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#A7826A8526845AFE>
0002   0x01AE90   15 02 02 00   LookupPointer       r2, 2          r2 = ST[2] -> <darray-count>
0003   0x01AE98   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <#9C27142D7E9F3555>
0004   0x01AEA0   43 31 03 00   Move                r49, r3        r49 = r3 [#9C27142D7E9F3555]
0005   0x01AEA8   1C 02 02 01   CallFf              r2, r2, 1      r2 = darray-count(#9C27142D7E9F3555)
0006   0x01AEB0   4A 03 04 00   LoadStaticU64Imm    r3, 4          r3 = ST[4] -> <self>
0007   0x01AEB8   43 31 01 00   Move                r49, r1        r49 = r1 [#A7826A8526845AFE]
0008   0x01AEC0   43 32 02 00   Move                r50, r2        r50 = r2 [darray-count()]
0009   0x01AEC8   43 33 03 00   Move                r51, r3        r51 = r3 [self]
000A   0x01AED0   1C 00 00 03   CallFf              r0, r0, 3      r0 = set-int32(#A7826A8526845AFE, darray-count(), self)
000B   0x01AED8   00 00 00 00   Return              r0             Return set-int32()
SYMBOL TABLE: 
0000   0x01AEE0    POINTER <set-int32>
0001   0x01AEE8    SID <#A7826A8526845AFE>
0002   0x01AEF0    POINTER <darray-count>
0003   0x01AEF8    SID <#9C27142D7E9F3555>
0004   0x01AF00    SID <self>
0000   0x00C460   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <timer-running?>
0001   0x00C468   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#A9297DB4F1A30CF7>
0002   0x00C470   4A 02 02 00   LoadStaticU64Imm    r2, 2          r2 = ST[2] -> <self>
0003   0x00C478   43 31 01 00   Move                r49, r1        r49 = r1 [#A9297DB4F1A30CF7]
0004   0x00C480   43 32 02 00   Move                r50, r2        r50 = r2 [self]
0005   0x00C488   1B 00 00 02   Call                r0, r0, 2      r0 = timer-running?(#A9297DB4F1A30CF7, self)
0006   0x00C490   2F A3 00 01   BranchIfNot         r0, 01A3       IF NOT r0 [timer-running?()] => L_0
0007   0x00C498   15 00 03 00   LookupPointer       r0, 3          r0 = ST[3] -> <npc-group-alive-count>
0008   0x00C4A0   4A 01 04 00   LoadStaticU64Imm    r1, 4          r1 = ST[4] -> <#88F409F4BF0F056A>
0009   0x00C4A8   43 31 01 00   Move                r49, r1        r49 = r1 [#88F409F4BF0F056A]
000A   0x00C4B0   1C 00 00 01   CallFf              r0, r0, 1      r0 = npc-group-alive-count(#88F409F4BF0F056A)
000B   0x00C4B8   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
000C   0x00C4C0   1E 00 00 01   IGreaterThan        r0, r0, r1     r0 = r0 [-143247359] > r1 [0]
000D   0x00C4C8   2F 8C 00 01   BranchIfNot         r0, 018C       IF NOT r0 [0xF7763801] => L_1
000E   0x00C4D0   41 00 05 00   LoadStaticPointerImmr0, 5          r0 = ST[5] -> <0xBF025EE0>
000F   0x00C4D8   15 01 06 00   LookupPointer       r1, 6          r1 = ST[6] -> <get-int32>
0010   0x00C4E0   4A 02 07 00   LoadStaticU64Imm    r2, 7          r2 = ST[7] -> <#0118A324CA34E676>
0011   0x00C4E8   4A 03 02 00   LoadStaticU64Imm    r3, 2          r3 = ST[2] -> <self>
0012   0x00C4F0   43 31 02 00   Move                r49, r2        r49 = r2 [#0118A324CA34E676]
0013   0x00C4F8   43 32 03 00   Move                r50, r3        r50 = r3 [self]
0014   0x00C500   1C 01 01 02   CallFf              r1, r1, 2      r1 = get-int32(#0118A324CA34E676, self)
0015   0x00C508   15 02 08 00   LookupPointer       r2, 8          r2 = ST[8] -> <fact-get-bool-safe>
0016   0x00C510   4A 03 09 00   LoadStaticU64Imm    r3, 9          r3 = ST[9] -> <player>
0017   0x00C518   4A 04 0A 00   LoadStaticU64Imm    r4, 10         r4 = ST[10] -> <accessibility-invisible-prone>
0018   0x00C520   43 31 03 00   Move                r49, r3        r49 = r3 [player]
0019   0x00C528   43 32 04 00   Move                r50, r4        r50 = r4 [accessibility-invisible-prone]
001A   0x00C530   1B 02 02 02   Call                r2, r2, 2      r2 = fact-get-bool-safe(player, accessibility-invisible-prone)
001B   0x00C538   43 03 01 00   Move                r3, r1         r3 = r1 [get-int32()]
001C   0x00C540   0C 04 01 00   LoadU16Imm          r4, 1          r4 = 1
001D   0x00C548   1F 03 03 04   IGreaterThanEqual   r3, r3, r4     r3 = r3 [-635293440] >= r4 [1]
001E   0x00C550   2F 22 03 00   BranchIfNot         r3, 0022       IF NOT r3 [0xDA223100] => L_2
001F   0x00C558   43 03 01 00   Move                r3, r1         r3 = r1 [get-int32()]
0020   0x00C560   0C 04 03 00   LoadU16Imm          r4, 3          r4 = 3
0021   0x00C568   21 03 03 04   ILessThanEqual      r3, r3, r4     r3 = r3 [-635293439] <= r4 [3]
L_2:
0022   0x00C570   2F 25 03 00   BranchIfNot         r3, 0025       IF NOT r3 [0xDA223101] => L_3
0023   0x00C578   0C 03 04 00   LoadU16Imm          r3, 4          r3 = 4
0024   0x00C580   2D 26 00 00   Branch              0026           => L_4
L_3:
0025   0x00C588   43 03 01 00   Move                r3, r1         r3 = r1 [get-int32()]
L_4:
0026   0x00C590   43 04 02 00   Move                r4, r2         r4 = r2 [fact-get-bool-safe()]
0027   0x00C598   30 04 04 00   OpLogNot            r4, r4         r4 = !r4 -> <TRUE>
0028   0x00C5A0   2F 2B 04 00   BranchIfNot         r4, 002B       IF NOT r4 [0x45C51F34] => L_5
0029   0x00C5A8   43 04 01 00   Move                r4, r1         r4 = r1 [get-int32()]
002A   0x00C5B0   2D 2C 00 00   Branch              002C           => L_6
L_5:
002B   0x00C5B8   43 04 03 00   Move                r4, r3         r4 = r3 [get-int32()]
L_6:
002C   0x00C5C0   15 05 0B 00   LookupPointer       r5, 11         r5 = ST[11] -> <set-boolean>
002D   0x00C5C8   4A 06 0C 00   LoadStaticU64Imm    r6, 12         r6 = ST[12] -> <#4776367E4365CE74>
002E   0x00C5D0   43 07 02 00   Move                r7, r2         r7 = r2 [fact-get-bool-safe()]
002F   0x00C5D8   4A 08 02 00   LoadStaticU64Imm    r8, 2          r8 = ST[2] -> <self>
0030   0x00C5E0   43 31 06 00   Move                r49, r6        r49 = r6 [#4776367E4365CE74]
0031   0x00C5E8   43 32 07 00   Move                r50, r7        r50 = r7 [fact-get-bool-safe()]
0032   0x00C5F0   43 33 08 00   Move                r51, r8        r51 = r8 [self]
0033   0x00C5F8   1C 05 05 03   CallFf              r5, r5, 3      r5 = set-boolean(#4776367E4365CE74, fact-get-bool-safe(), self)
0034   0x00C600   15 05 0D 00   LookupPointer       r5, 13         r5 = ST[13] -> <set-int32>
0035   0x00C608   4A 06 0E 00   LoadStaticU64Imm    r6, 14         r6 = ST[14] -> <#73ADFC94A6C6AC49>
0036   0x00C610   43 07 03 00   Move                r7, r3         r7 = r3 [get-int32()]
0037   0x00C618   4A 08 02 00   LoadStaticU64Imm    r8, 2          r8 = ST[2] -> <self>
0038   0x00C620   43 31 06 00   Move                r49, r6        r49 = r6 [#73ADFC94A6C6AC49]
0039   0x00C628   43 32 07 00   Move                r50, r7        r50 = r7 [get-int32()]
003A   0x00C630   43 33 08 00   Move                r51, r8        r51 = r8 [self]
003B   0x00C638   1C 05 05 03   CallFf              r5, r5, 3      r5 = set-int32(#73ADFC94A6C6AC49, get-int32(), self)
003C   0x00C640   15 05 0F 00   LookupPointer       r5, 15         r5 = ST[15] -> <*invalid-symbol*>
003D   0x00C648   3F 06 10 00   LoadStaticI32Imm    r6, 16         r6 = ST[16] -> <-1>
003E   0x00C650   15 07 11 00   LookupPointer       r7, 17         r7 = ST[17] -> <alloc-point>
003F   0x00C658   40 08 12 00   LoadStaticFloatImm  r8, 18         r8 = ST[18] -> <0.00>
0040   0x00C660   40 09 12 00   LoadStaticFloatImm  r9, 18         r9 = ST[18] -> <0.00>
0041   0x00C668   40 0A 12 00   LoadStaticFloatImm  r10, 18        r10 = ST[18] -> <0.00>
0042   0x00C670   0C 0B 00 00   LoadU16Imm          r11, 0         r11 = 0
0043   0x00C678   43 31 08 00   Move                r49, r8        r49 = r8 [0x0]
0044   0x00C680   43 32 09 00   Move                r50, r9        r50 = r9 [0x0]
0045   0x00C688   43 33 0A 00   Move                r51, r10       r51 = r10 [0x0]
0046   0x00C690   43 34 0B 00   Move                r52, r11       r52 = r11 [0]
0047   0x00C698   1C 07 07 04   CallFf              r7, r7, 4      r7 = alloc-point(0x0, 0x0, 0x0, 0)
0048   0x00C6A0   15 08 13 00   LookupPointer       r8, 19         r8 = ST[19] -> <get-boolean>
0049   0x00C6A8   4A 09 14 00   LoadStaticU64Imm    r9, 20         r9 = ST[20] -> <#D9DFB4F910DB3FD9>
004A   0x00C6B0   4A 0A 02 00   LoadStaticU64Imm    r10, 2         r10 = ST[2] -> <self>
004B   0x00C6B8   43 31 09 00   Move                r49, r9        r49 = r9 [#D9DFB4F910DB3FD9]
004C   0x00C6C0   43 32 0A 00   Move                r50, r10       r50 = r10 [self]
004D   0x00C6C8   1C 08 08 02   CallFf              r8, r8, 2      r8 = get-boolean(#D9DFB4F910DB3FD9, self)
004E   0x00C6D0   2F C8 08 00   BranchIfNot         r8, 00C8       IF NOT r8 [get-boolean()] => L_7
004F   0x00C6D8   0C 08 00 00   LoadU16Imm          r8, 0          r8 = 0
0050   0x00C6E0   15 09 15 00   LookupPointer       r9, 21         r9 = ST[21] -> <darray-count>
0051   0x00C6E8   4A 0A 04 00   LoadStaticU64Imm    r10, 4         r10 = ST[4] -> <#88F409F4BF0F056A>
0052   0x00C6F0   43 31 0A 00   Move                r49, r10       r49 = r10 [#88F409F4BF0F056A]
0053   0x00C6F8   1C 09 09 01   CallFf              r9, r9, 1      r9 = darray-count(#88F409F4BF0F056A)
0054   0x00C700   15 0A 16 00   LookupPointer       r10, 22        r10 = ST[22] -> <begin-foreach>
0055   0x00C708   1C 0A 0A 00   CallFf              r10, r10, 0    r10 = begin-foreach()
L_24:
0056   0x00C710   43 0A 08 00   Move                r10, r8        r10 = r8 [0]
0057   0x00C718   43 0B 09 00   Move                r11, r9        r11 = r9 [darray-count()]
0058   0x00C720   20 0A 0A 0B   ILessThan           r10, r10, r11  r10 = r10 [1] < r11 [1753163078]
0059   0x00C728   2F C4 0A 00   BranchIfNot         r10, 00C4      IF NOT r10 [0x1] => L_8
005A   0x00C730   15 0A 17 00   LookupPointer       r10, 23        r10 = ST[23] -> <darray-at>
005B   0x00C738   4A 0B 04 00   LoadStaticU64Imm    r11, 4         r11 = ST[4] -> <#88F409F4BF0F056A>
005C   0x00C740   43 0C 08 00   Move                r12, r8        r12 = r8 [0]
005D   0x00C748   43 31 0B 00   Move                r49, r11       r49 = r11 [#88F409F4BF0F056A]
005E   0x00C750   43 32 0C 00   Move                r50, r12       r50 = r12 [0]
005F   0x00C758   1C 0A 0A 02   CallFf              r10, r10, 2    r10 = darray-at(#88F409F4BF0F056A, 0)
0060   0x00C760   43 0B 0A 00   Move                r11, r10       r11 = r10 [darray-at()]
0061   0x00C768   2F 68 0B 00   BranchIfNot         r11, 0068      IF NOT r11 [darray-at()] => L_9
0062   0x00C770   43 0B 0A 00   Move                r11, r10       r11 = r10 [darray-at()]
0063   0x00C778   5D 0B 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0064   0x00C780   3B 0B 0B 0C   IAddImm             r11, r11, 12   r11 = r11 [-739117676] / 12 -> <-739117676>
0065   0x00C788   4E 0B 0B 00   LoadU16             ???            UNKNOWN INSTRUCTION
0066   0x00C790   0C 0C 07 00   LoadU16Imm          r12, 7         r12 = 7
0067   0x00C798   1D 0B 0B 0C   IEqual              r11, r11, r12  r11 = r11 [-739117824] == r12 [7]
L_9:
0068   0x00C7A0   2F 6D 0B 00   BranchIfNot         r11, 006D      IF NOT r11 [0xD3F1F500] => L_10
0069   0x00C7A8   43 0B 0A 00   Move                r11, r10       r11 = r10 [darray-at()]
006A   0x00C7B0   5D 0B 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
006B   0x00C7B8   51 0B 0B 00   LoadU64             r11, [r11]     r11 = [0x0 + 0x0]
006C   0x00C7C0   2D 88 00 00   Branch              0088           => L_11
L_10:
006D   0x00C7C8   43 0B 0A 00   Move                r11, r10       r11 = r10 [darray-at()]
006E   0x00C7D0   2F 75 0B 00   BranchIfNot         r11, 0075      IF NOT r11 [darray-at()] => L_12
006F   0x00C7D8   43 0B 0A 00   Move                r11, r10       r11 = r10 [darray-at()]
0070   0x00C7E0   5D 0B 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0071   0x00C7E8   3B 0B 0B 0C   IAddImm             r11, r11, 12   r11 = r11 [-739117676] / 12 -> <-739117676>
0072   0x00C7F0   4E 0B 0B 00   LoadU16             ???            UNKNOWN INSTRUCTION
0073   0x00C7F8   0C 0C 05 00   LoadU16Imm          r12, 5         r12 = 5
0074   0x00C800   1D 0B 0B 0C   IEqual              r11, r11, r12  r11 = r11 [-739117824] == r12 [5]
L_12:
0075   0x00C808   2F 7A 0B 00   BranchIfNot         r11, 007A      IF NOT r11 [0xD3F1F500] => L_13
0076   0x00C810   43 0B 0A 00   Move                r11, r10       r11 = r10 [darray-at()]
0077   0x00C818   5D 0B 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0078   0x00C820   51 0B 0B 00   LoadU64             r11, [r11]     r11 = [0x0 + 0x0]
0079   0x00C828   2D 88 00 00   Branch              0088           => L_11
L_13:
007A   0x00C830   43 0B 0A 00   Move                r11, r10       r11 = r10 [darray-at()]
007B   0x00C838   2F 82 0B 00   BranchIfNot         r11, 0082      IF NOT r11 [darray-at()] => L_14
007C   0x00C840   43 0B 0A 00   Move                r11, r10       r11 = r10 [darray-at()]
007D   0x00C848   5D 0B 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
007E   0x00C850   3B 0B 0B 0C   IAddImm             r11, r11, 12   r11 = r11 [-739117676] / 12 -> <-739117676>
007F   0x00C858   4E 0B 0B 00   LoadU16             ???            UNKNOWN INSTRUCTION
0080   0x00C860   0C 0C 04 00   LoadU16Imm          r12, 4         r12 = 4
0081   0x00C868   1D 0B 0B 0C   IEqual              r11, r11, r12  r11 = r11 [-739117824] == r12 [4]
L_14:
0082   0x00C870   2F 87 0B 00   BranchIfNot         r11, 0087      IF NOT r11 [0xD3F1F500] => L_15
0083   0x00C878   43 0B 0A 00   Move                r11, r10       r11 = r10 [darray-at()]
0084   0x00C880   5D 0B 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0085   0x00C888   51 0B 0B 00   LoadU64             r11, [r11]     r11 = [0x0 + 0x0]
0086   0x00C890   2D 88 00 00   Branch              0088           => L_11
L_15:
0087   0x00C898   0C 0B 00 00   LoadU16Imm          r11, 0         r11 = 0
L_11:
0088   0x00C8A0   43 0A 0B 00   Move                r10, r11       r10 = r11 [0]
0089   0x00C8A8   15 0B 18 00   LookupPointer       r11, 24        r11 = ST[24] -> <npc-alive?>
008A   0x00C8B0   43 0C 0A 00   Move                r12, r10       r12 = r10 [0]
008B   0x00C8B8   43 31 0C 00   Move                r49, r12       r49 = r12 [0]
008C   0x00C8C0   1C 0B 0B 01   CallFf              r11, r11, 1    r11 = npc-alive?(0)
008D   0x00C8C8   2F BC 0B 00   BranchIfNot         r11, 00BC      IF NOT r11 [npc-alive?()] => L_16
008E   0x00C8D0   43 0B 05 00   Move                r11, r5        r11 = r5 [0x8726A837]
008F   0x00C8D8   15 0C 0F 00   LookupPointer       r12, 15        r12 = ST[15] -> <*invalid-symbol*>
0090   0x00C8E0   1D 0B 0B 0C   IEqual              r11, r11, r12  r11 = r11 [-2027509759] == r12 [-2027509705]
0091   0x00C8E8   2F BA 0B 00   BranchIfNot         r11, 00BA      IF NOT r11 [0x8726A801] => L_17
0092   0x00C8F0   15 0B 19 00   LookupPointer       r11, 25        r11 = ST[25] -> <npc-get-awareness>
0093   0x00C8F8   43 0C 0A 00   Move                r12, r10       r12 = r10 [0]
0094   0x00C900   4A 0D 09 00   LoadStaticU64Imm    r13, 9         r13 = ST[9] -> <player>
0095   0x00C908   43 31 0C 00   Move                r49, r12       r49 = r12 [0]
0096   0x00C910   43 32 0D 00   Move                r50, r13       r50 = r13 [player]
0097   0x00C918   1C 0B 0B 02   CallFf              r11, r11, 2    r11 = npc-get-awareness(0, player)
0098   0x00C920   15 0C 1A 00   LookupPointer       r12, 26        r12 = ST[26] -> <npc-get-target-entity-object>
0099   0x00C928   43 0D 0A 00   Move                r13, r10       r13 = r10 [0]
009A   0x00C930   43 31 0D 00   Move                r49, r13       r49 = r13 [0]
009B   0x00C938   1C 0C 0C 01   CallFf              r12, r12, 1    r12 = npc-get-target-entity-object(0)
009C   0x00C940   15 0D 1B 00   LookupPointer       r13, 27        r13 = ST[27] -> <npc-get-target-entity-position>
009D   0x00C948   43 0E 0A 00   Move                r14, r10       r14 = r10 [0]
009E   0x00C950   43 31 0E 00   Move                r49, r14       r49 = r14 [0]
009F   0x00C958   1C 0D 0D 01   CallFf              r13, r13, 1    r13 = npc-get-target-entity-position(0)
00A0   0x00C960   43 0E 0C 00   Move                r14, r12       r14 = r12 [npc-get-target-entity-object()]
00A1   0x00C968   4A 0F 09 00   LoadStaticU64Imm    r15, 9         r15 = ST[9] -> <player>
00A2   0x00C970   1D 0E 0E 0F   IEqual              r14, r14, r15  r14 = r14 [-1219236096] == r15 [998160832]
00A3   0x00C978   2F A8 0E 00   BranchIfNot         r14, 00A8      IF NOT r14 [0xB753EF00] => L_18
00A4   0x00C980   15 0E 1C 00   LookupPointer       r14, 28        r14 = ST[28] -> <npc-can-broadcast-communication?>
00A5   0x00C988   43 0F 0A 00   Move                r15, r10       r15 = r10 [0]
00A6   0x00C990   43 31 0F 00   Move                r49, r15       r49 = r15 [0]
00A7   0x00C998   1C 0E 0E 01   CallFf              r14, r14, 1    r14 = npc-can-broadcast-communication?(0)
L_18:
00A8   0x00C9A0   2F AC 0E 00   BranchIfNot         r14, 00AC      IF NOT r14 [npc-can-broadcast-communication?()] => L_19
00A9   0x00C9A8   43 0E 0B 00   Move                r14, r11       r14 = r11 [npc-get-awareness()]
00AA   0x00C9B0   0C 0F 00 00   LoadU16Imm          r15, 0         r15 = 0
00AB   0x00C9B8   1E 0E 0E 0F   IGreaterThan        r14, r14, r15  r14 = r14 [658906624] > r15 [0]
L_19:
00AC   0x00C9C0   2F B7 0E 00   BranchIfNot         r14, 00B7      IF NOT r14 [0x27461E00] => L_20
00AD   0x00C9C8   43 0E 0A 00   Move                r14, r10       r14 = r10 [0]
00AE   0x00C9D0   43 05 0E 00   Move                r5, r14        r5 = r14 [0]
00AF   0x00C9D8   43 0E 05 00   Move                r14, r5        r14 = r5 [0]
00B0   0x00C9E0   43 0E 0B 00   Move                r14, r11       r14 = r11 [npc-get-awareness()]
00B1   0x00C9E8   43 06 0E 00   Move                r6, r14        r6 = r14 [npc-get-awareness()]
00B2   0x00C9F0   43 0E 06 00   Move                r14, r6        r14 = r6 [npc-get-awareness()]
00B3   0x00C9F8   43 0E 0D 00   Move                r14, r13       r14 = r13 [npc-get-target-entity-position()]
00B4   0x00CA00   43 07 0E 00   Move                r7, r14        r7 = r14 [npc-get-target-entity-position()]
00B5   0x00CA08   43 0E 07 00   Move                r14, r7        r14 = r7 [npc-get-target-entity-position()]
00B6   0x00CA10   2D B8 00 00   Branch              00B8           => L_21
L_20:
00B7   0x00CA18   0C 0E 00 00   LoadU16Imm          r14, 0         r14 = 0
L_21:
00B8   0x00CA20   43 0B 0E 00   Move                r11, r14       r11 = r14 [0]
00B9   0x00CA28   2D BB 00 00   Branch              00BB           => L_22
L_17:
00BA   0x00CA30   0C 0B 00 00   LoadU16Imm          r11, 0         r11 = 0
L_22:
00BB   0x00CA38   2D BD 00 00   Branch              00BD           => L_23
L_16:
00BC   0x00CA40   0C 0B 00 00   LoadU16Imm          r11, 0         r11 = 0
L_23:
00BD   0x00CA48   43 0B 08 00   Move                r11, r8        r11 = r8 [0]
00BE   0x00CA50   0C 0C 01 00   LoadU16Imm          r12, 1         r12 = 1
00BF   0x00CA58   01 0B 0B 0C   IAdd                r11, r11, r12  1 = 0 + 1
00C0   0x00CA60   43 08 0B 00   Move                r8, r11        r8 = r11 [1]
00C1   0x00CA68   43 0B 08 00   Move                r11, r8        r11 = r8 [1]
00C2   0x00CA70   43 0A 0B 00   Move                r10, r11       r10 = r11 [1]
00C3   0x00CA78   2D 56 00 00   Branch              0056           => L_24
L_8:
00C4   0x00CA80   15 0A 1D 00   LookupPointer       r10, 29        r10 = ST[29] -> <end-foreach>
00C5   0x00CA88   1C 0A 0A 00   CallFf              r10, r10, 0    r10 = end-foreach()
00C6   0x00CA90   43 08 0A 00   Move                r8, r10        r8 = r10 [end-foreach()]
00C7   0x00CA98   2D C9 00 00   Branch              00C9           => L_25
L_7:
00C8   0x00CAA0   0C 08 00 00   LoadU16Imm          r8, 0          r8 = 0
L_25:
00C9   0x00CAA8   0C 08 00 00   LoadU16Imm          r8, 0          r8 = 0
00CA   0x00CAB0   15 09 15 00   LookupPointer       r9, 21         r9 = ST[21] -> <darray-count>
00CB   0x00CAB8   4A 0A 04 00   LoadStaticU64Imm    r10, 4         r10 = ST[4] -> <#88F409F4BF0F056A>
00CC   0x00CAC0   43 31 0A 00   Move                r49, r10       r49 = r10 [#88F409F4BF0F056A]
00CD   0x00CAC8   1C 09 09 01   CallFf              r9, r9, 1      r9 = darray-count(#88F409F4BF0F056A)
00CE   0x00CAD0   15 0A 16 00   LookupPointer       r10, 22        r10 = ST[22] -> <begin-foreach>
00CF   0x00CAD8   1C 0A 0A 00   CallFf              r10, r10, 0    r10 = begin-foreach()
L_49:
00D0   0x00CAE0   43 0A 08 00   Move                r10, r8        r10 = r8 [0]
00D1   0x00CAE8   43 0B 09 00   Move                r11, r9        r11 = r9 [darray-count()]
00D2   0x00CAF0   20 0A 0A 0B   ILessThan           r10, r10, r11  r10 = r10 [1] < r11 [1753163078]
00D3   0x00CAF8   2F 81 0A 01   BranchIfNot         r10, 0181      IF NOT r10 [0x1] => L_26
00D4   0x00CB00   15 0A 17 00   LookupPointer       r10, 23        r10 = ST[23] -> <darray-at>
00D5   0x00CB08   4A 0B 04 00   LoadStaticU64Imm    r11, 4         r11 = ST[4] -> <#88F409F4BF0F056A>
00D6   0x00CB10   43 0C 08 00   Move                r12, r8        r12 = r8 [0]
00D7   0x00CB18   43 31 0B 00   Move                r49, r11       r49 = r11 [#88F409F4BF0F056A]
00D8   0x00CB20   43 32 0C 00   Move                r50, r12       r50 = r12 [0]
00D9   0x00CB28   1C 0A 0A 02   CallFf              r10, r10, 2    r10 = darray-at(#88F409F4BF0F056A, 0)
00DA   0x00CB30   43 0B 0A 00   Move                r11, r10       r11 = r10 [darray-at()]
00DB   0x00CB38   2F E2 0B 00   BranchIfNot         r11, 00E2      IF NOT r11 [darray-at()] => L_27
00DC   0x00CB40   43 0B 0A 00   Move                r11, r10       r11 = r10 [darray-at()]
00DD   0x00CB48   5D 0B 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00DE   0x00CB50   3B 0B 0B 0C   IAddImm             r11, r11, 12   r11 = r11 [-739117676] / 12 -> <-739117676>
00DF   0x00CB58   4E 0B 0B 00   LoadU16             ???            UNKNOWN INSTRUCTION
00E0   0x00CB60   0C 0C 07 00   LoadU16Imm          r12, 7         r12 = 7
00E1   0x00CB68   1D 0B 0B 0C   IEqual              r11, r11, r12  r11 = r11 [-739117824] == r12 [7]
L_27:
00E2   0x00CB70   2F E7 0B 00   BranchIfNot         r11, 00E7      IF NOT r11 [0xD3F1F500] => L_28
00E3   0x00CB78   43 0B 0A 00   Move                r11, r10       r11 = r10 [darray-at()]
00E4   0x00CB80   5D 0B 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00E5   0x00CB88   51 0B 0B 00   LoadU64             r11, [r11]     r11 = [0x0 + 0x0]
00E6   0x00CB90   2D 02 00 01   Branch              0102           => L_29
L_28:
00E7   0x00CB98   43 0B 0A 00   Move                r11, r10       r11 = r10 [darray-at()]
00E8   0x00CBA0   2F EF 0B 00   BranchIfNot         r11, 00EF      IF NOT r11 [darray-at()] => L_30
00E9   0x00CBA8   43 0B 0A 00   Move                r11, r10       r11 = r10 [darray-at()]
00EA   0x00CBB0   5D 0B 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00EB   0x00CBB8   3B 0B 0B 0C   IAddImm             r11, r11, 12   r11 = r11 [-739117676] / 12 -> <-739117676>
00EC   0x00CBC0   4E 0B 0B 00   LoadU16             ???            UNKNOWN INSTRUCTION
00ED   0x00CBC8   0C 0C 05 00   LoadU16Imm          r12, 5         r12 = 5
00EE   0x00CBD0   1D 0B 0B 0C   IEqual              r11, r11, r12  r11 = r11 [-739117824] == r12 [5]
L_30:
00EF   0x00CBD8   2F F4 0B 00   BranchIfNot         r11, 00F4      IF NOT r11 [0xD3F1F500] => L_31
00F0   0x00CBE0   43 0B 0A 00   Move                r11, r10       r11 = r10 [darray-at()]
00F1   0x00CBE8   5D 0B 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00F2   0x00CBF0   51 0B 0B 00   LoadU64             r11, [r11]     r11 = [0x0 + 0x0]
00F3   0x00CBF8   2D 02 00 01   Branch              0102           => L_29
L_31:
00F4   0x00CC00   43 0B 0A 00   Move                r11, r10       r11 = r10 [darray-at()]
00F5   0x00CC08   2F FC 0B 00   BranchIfNot         r11, 00FC      IF NOT r11 [darray-at()] => L_32
00F6   0x00CC10   43 0B 0A 00   Move                r11, r10       r11 = r10 [darray-at()]
00F7   0x00CC18   5D 0B 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00F8   0x00CC20   3B 0B 0B 0C   IAddImm             r11, r11, 12   r11 = r11 [-739117676] / 12 -> <-739117676>
00F9   0x00CC28   4E 0B 0B 00   LoadU16             ???            UNKNOWN INSTRUCTION
00FA   0x00CC30   0C 0C 04 00   LoadU16Imm          r12, 4         r12 = 4
00FB   0x00CC38   1D 0B 0B 0C   IEqual              r11, r11, r12  r11 = r11 [-739117824] == r12 [4]
L_32:
00FC   0x00CC40   2F 01 0B 01   BranchIfNot         r11, 0101      IF NOT r11 [0xD3F1F500] => L_33
00FD   0x00CC48   43 0B 0A 00   Move                r11, r10       r11 = r10 [darray-at()]
00FE   0x00CC50   5D 0B 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00FF   0x00CC58   51 0B 0B 00   LoadU64             r11, [r11]     r11 = [0x0 + 0x0]
0100   0x00CC60   2D 02 00 01   Branch              0102           => L_29
L_33:
0101   0x00CC68   0C 0B 00 00   LoadU16Imm          r11, 0         r11 = 0
L_29:
0102   0x00CC70   43 0A 0B 00   Move                r10, r11       r10 = r11 [0]
0103   0x00CC78   15 0B 18 00   LookupPointer       r11, 24        r11 = ST[24] -> <npc-alive?>
0104   0x00CC80   43 0C 0A 00   Move                r12, r10       r12 = r10 [0]
0105   0x00CC88   43 31 0C 00   Move                r49, r12       r49 = r12 [0]
0106   0x00CC90   1C 0B 0B 01   CallFf              r11, r11, 1    r11 = npc-alive?(0)
0107   0x00CC98   2F 79 0B 01   BranchIfNot         r11, 0179      IF NOT r11 [npc-alive?()] => L_34
0108   0x00CCA0   15 0B 13 00   LookupPointer       r11, 19        r11 = ST[19] -> <get-boolean>
0109   0x00CCA8   4A 0C 14 00   LoadStaticU64Imm    r12, 20        r12 = ST[20] -> <#D9DFB4F910DB3FD9>
010A   0x00CCB0   4A 0D 02 00   LoadStaticU64Imm    r13, 2         r13 = ST[2] -> <self>
010B   0x00CCB8   43 31 0C 00   Move                r49, r12       r49 = r12 [#D9DFB4F910DB3FD9]
010C   0x00CCC0   43 32 0D 00   Move                r50, r13       r50 = r13 [self]
010D   0x00CCC8   1C 0B 0B 02   CallFf              r11, r11, 2    r11 = get-boolean(#D9DFB4F910DB3FD9, self)
010E   0x00CCD0   2F 12 0B 01   BranchIfNot         r11, 0112      IF NOT r11 [get-boolean()] => L_35
010F   0x00CCD8   43 0B 05 00   Move                r11, r5        r11 = r5 [0]
0110   0x00CCE0   15 0C 0F 00   LookupPointer       r12, 15        r12 = ST[15] -> <*invalid-symbol*>
0111   0x00CCE8   5A 0B 0B 0C   INotEqual           ???            UNKNOWN INSTRUCTION
L_35:
0112   0x00CCF0   2F 56 0B 01   BranchIfNot         r11, 0156      IF NOT r11 [0] => L_36
0113   0x00CCF8   43 0B 05 00   Move                r11, r5        r11 = r5 [0]
0114   0x00CD00   43 0C 0A 00   Move                r12, r10       r12 = r10 [0]
0115   0x00CD08   5A 0B 0B 0C   INotEqual           ???            UNKNOWN INSTRUCTION
0116   0x00CD10   2F 22 0B 01   BranchIfNot         r11, 0122      IF NOT r11 [0] => L_37
0117   0x00CD18   15 0B 1E 00   LookupPointer       r11, 30        r11 = ST[30] -> <darray-contains?>
0118   0x00CD20   4A 0C 1F 00   LoadStaticU64Imm    r12, 31        r12 = ST[31] -> <#9C27142D7E9F3555>
0119   0x00CD28   15 0D 20 00   LookupPointer       r13, 32        r13 = ST[32] -> <new-boxed-value>
011A   0x00CD30   0C 0E 07 00   LoadU16Imm          r14, 7         r14 = 7
011B   0x00CD38   43 0F 0A 00   Move                r15, r10       r15 = r10 [0]
011C   0x00CD40   43 31 0E 00   Move                r49, r14       r49 = r14 [7]
011D   0x00CD48   43 32 0F 00   Move                r50, r15       r50 = r15 [0]
011E   0x00CD50   1C 0D 0D 02   CallFf              r13, r13, 2    r13 = new-boxed-value(7, 0)
011F   0x00CD58   43 31 0C 00   Move                r49, r12       r49 = r12 [#9C27142D7E9F3555]
0120   0x00CD60   43 32 0D 00   Move                r50, r13       r50 = r13 [new-boxed-value()]
0121   0x00CD68   1C 0B 0B 02   CallFf              r11, r11, 2    r11 = darray-contains?(#9C27142D7E9F3555, new-boxed-value())
L_37:
0122   0x00CD70   2F 45 0B 01   BranchIfNot         r11, 0145      IF NOT r11 [darray-contains?()] => L_38
0123   0x00CD78   43 0B 06 00   Move                r11, r6        r11 = r6 [npc-get-awareness()]
0124   0x00CD80   0C 0C 03 00   LoadU16Imm          r12, 3         r12 = 3
0125   0x00CD88   1D 0B 0B 0C   IEqual              r11, r11, r12  r11 = r11 [658906624] == r12 [3]
0126   0x00CD90   2F 36 0B 01   BranchIfNot         r11, 0136      IF NOT r11 [0x27461E00] => L_39
0127   0x00CD98   15 0B 21 00   LookupPointer       r11, 33        r11 = ST[33] -> <npc-make-aware-of-at>
0128   0x00CDA0   43 0C 0A 00   Move                r12, r10       r12 = r10 [0]
0129   0x00CDA8   4A 0D 09 00   LoadStaticU64Imm    r13, 9         r13 = ST[9] -> <player>
012A   0x00CDB0   43 0E 07 00   Move                r14, r7        r14 = r7 [npc-get-target-entity-position()]
012B   0x00CDB8   43 0F 06 00   Move                r15, r6        r15 = r6 [npc-get-awareness()]
012C   0x00CDC0   43 10 00 00   Move                r16, r0        r16 = r0 [0xBF025EE0]
012D   0x00CDC8   0C 11 00 00   LoadU16Imm          r17, 0         r17 = 0
012E   0x00CDD0   43 31 0C 00   Move                r49, r12       r49 = r12 [0]
012F   0x00CDD8   43 32 0D 00   Move                r50, r13       r50 = r13 [player]
0130   0x00CDE0   43 33 0E 00   Move                r51, r14       r51 = r14 [npc-get-target-entity-position()]
0131   0x00CDE8   43 34 0F 00   Move                r52, r15       r52 = r15 [npc-get-awareness()]
0132   0x00CDF0   43 35 10 00   Move                r53, r16       r53 = r16 [0xBF025EE0]
0133   0x00CDF8   43 36 11 00   Move                r54, r17       r54 = r17 [0]
0134   0x00CE00   1C 0B 0B 06   CallFf              r11, r11, 6    r11 = npc-make-aware-of-at(0, player, npc-get-target-entity-position(), npc-get-awareness(), 0xBF025EE0, 0)
0135   0x00CE08   2D 44 00 01   Branch              0144           => L_40
L_39:
0136   0x00CE10   15 0B 21 00   LookupPointer       r11, 33        r11 = ST[33] -> <npc-make-aware-of-at>
0137   0x00CE18   43 0C 0A 00   Move                r12, r10       r12 = r10 [0]
0138   0x00CE20   4A 0D 09 00   LoadStaticU64Imm    r13, 9         r13 = ST[9] -> <player>
0139   0x00CE28   43 0E 07 00   Move                r14, r7        r14 = r7 [npc-get-target-entity-position()]
013A   0x00CE30   43 0F 06 00   Move                r15, r6        r15 = r6 [npc-get-awareness()]
013B   0x00CE38   0C 10 00 00   LoadU16Imm          r16, 0         r16 = 0
013C   0x00CE40   0C 11 00 00   LoadU16Imm          r17, 0         r17 = 0
013D   0x00CE48   43 31 0C 00   Move                r49, r12       r49 = r12 [0]
013E   0x00CE50   43 32 0D 00   Move                r50, r13       r50 = r13 [player]
013F   0x00CE58   43 33 0E 00   Move                r51, r14       r51 = r14 [npc-get-target-entity-position()]
0140   0x00CE60   43 34 0F 00   Move                r52, r15       r52 = r15 [npc-get-awareness()]
0141   0x00CE68   43 35 10 00   Move                r53, r16       r53 = r16 [0]
0142   0x00CE70   43 36 11 00   Move                r54, r17       r54 = r17 [0]
0143   0x00CE78   1C 0B 0B 06   CallFf              r11, r11, 6    r11 = npc-make-aware-of-at(0, player, npc-get-target-entity-position(), npc-get-awareness(), 0, 0)
L_40:
0144   0x00CE80   2D 46 00 01   Branch              0146           => L_41
L_38:
0145   0x00CE88   0C 0B 00 00   LoadU16Imm          r11, 0         r11 = 0
L_41:
0146   0x00CE90   15 0B 00 00   LookupPointer       r11, 0         r11 = ST[0] -> <timer-running?>
0147   0x00CE98   4A 0C 01 00   LoadStaticU64Imm    r12, 1         r12 = ST[1] -> <#A9297DB4F1A30CF7>
0148   0x00CEA0   4A 0D 02 00   LoadStaticU64Imm    r13, 2         r13 = ST[2] -> <self>
0149   0x00CEA8   43 31 0C 00   Move                r49, r12       r49 = r12 [#A9297DB4F1A30CF7]
014A   0x00CEB0   43 32 0D 00   Move                r50, r13       r50 = r13 [self]
014B   0x00CEB8   1B 0B 0B 02   Call                r11, r11, 2    r11 = timer-running?(#A9297DB4F1A30CF7, self)
014C   0x00CEC0   2F 54 0B 01   BranchIfNot         r11, 0154      IF NOT r11 [timer-running?()] => L_42
014D   0x00CEC8   15 0B 22 00   LookupPointer       r11, 34        r11 = ST[34] -> <stop-timer>
014E   0x00CED0   4A 0C 01 00   LoadStaticU64Imm    r12, 1         r12 = ST[1] -> <#A9297DB4F1A30CF7>
014F   0x00CED8   4A 0D 02 00   LoadStaticU64Imm    r13, 2         r13 = ST[2] -> <self>
0150   0x00CEE0   43 31 0C 00   Move                r49, r12       r49 = r12 [#A9297DB4F1A30CF7]
0151   0x00CEE8   43 32 0D 00   Move                r50, r13       r50 = r13 [self]
0152   0x00CEF0   1B 0B 0B 02   Call                r11, r11, 2    r11 = stop-timer(#A9297DB4F1A30CF7, self)
0153   0x00CEF8   2D 55 00 01   Branch              0155           => L_43
L_42:
0154   0x00CF00   0C 0B 00 00   LoadU16Imm          r11, 0         r11 = 0
L_43:
0155   0x00CF08   2D 78 00 01   Branch              0178           => L_44
L_36:
0156   0x00CF10   15 0B 23 00   LookupPointer       r11, 35        r11 = ST[35] -> <#43DF4E5E85BFD47C>
0157   0x00CF18   43 0C 0A 00   Move                r12, r10       r12 = r10 [0]
0158   0x00CF20   43 0D 04 00   Move                r13, r4        r13 = r4 [get-int32()]
0159   0x00CF28   43 31 0C 00   Move                r49, r12       r49 = r12 [0]
015A   0x00CF30   43 32 0D 00   Move                r50, r13       r50 = r13 [get-int32()]
015B   0x00CF38   1B 0B 0B 02   Call                r11, r11, 2    r11 = #43DF4E5E85BFD47C(0, get-int32())
015C   0x00CF40   2F 77 0B 01   BranchIfNot         r11, 0177      IF NOT r11 [#43DF4E5E85BFD47C()] => L_45
015D   0x00CF48   43 0B 04 00   Move                r11, r4        r11 = r4 [get-int32()]
015E   0x00CF50   0C 0C 03 00   LoadU16Imm          r12, 3         r12 = 3
015F   0x00CF58   1D 0B 0B 0C   IEqual              r11, r11, r12  r11 = r11 [-635293440] == r12 [3]
0160   0x00CF60   2F 6C 0B 01   BranchIfNot         r11, 016C      IF NOT r11 [0xDA223100] => L_46
0161   0x00CF68   15 0B 24 00   LookupPointer       r11, 36        r11 = ST[36] -> <npc-make-aware-of>
0162   0x00CF70   43 0C 0A 00   Move                r12, r10       r12 = r10 [0]
0163   0x00CF78   4A 0D 09 00   LoadStaticU64Imm    r13, 9         r13 = ST[9] -> <player>
0164   0x00CF80   43 0E 04 00   Move                r14, r4        r14 = r4 [get-int32()]
0165   0x00CF88   43 0F 00 00   Move                r15, r0        r15 = r0 [0xBF025EE0]
0166   0x00CF90   43 31 0C 00   Move                r49, r12       r49 = r12 [0]
0167   0x00CF98   43 32 0D 00   Move                r50, r13       r50 = r13 [player]
0168   0x00CFA0   43 33 0E 00   Move                r51, r14       r51 = r14 [get-int32()]
0169   0x00CFA8   43 34 0F 00   Move                r52, r15       r52 = r15 [0xBF025EE0]
016A   0x00CFB0   1C 0B 0B 04   CallFf              r11, r11, 4    r11 = npc-make-aware-of(0, player, get-int32(), 0xBF025EE0)
016B   0x00CFB8   2D 76 00 01   Branch              0176           => L_47
L_46:
016C   0x00CFC0   15 0B 24 00   LookupPointer       r11, 36        r11 = ST[36] -> <npc-make-aware-of>
016D   0x00CFC8   43 0C 0A 00   Move                r12, r10       r12 = r10 [0]
016E   0x00CFD0   4A 0D 09 00   LoadStaticU64Imm    r13, 9         r13 = ST[9] -> <player>
016F   0x00CFD8   43 0E 04 00   Move                r14, r4        r14 = r4 [get-int32()]
0170   0x00CFE0   0C 0F 00 00   LoadU16Imm          r15, 0         r15 = 0
0171   0x00CFE8   43 31 0C 00   Move                r49, r12       r49 = r12 [0]
0172   0x00CFF0   43 32 0D 00   Move                r50, r13       r50 = r13 [player]
0173   0x00CFF8   43 33 0E 00   Move                r51, r14       r51 = r14 [get-int32()]
0174   0x00D000   43 34 0F 00   Move                r52, r15       r52 = r15 [0]
0175   0x00D008   1C 0B 0B 04   CallFf              r11, r11, 4    r11 = npc-make-aware-of(0, player, get-int32(), 0)
L_47:
0176   0x00D010   2D 78 00 01   Branch              0178           => L_44
L_45:
0177   0x00D018   0C 0B 00 00   LoadU16Imm          r11, 0         r11 = 0
L_44:
0178   0x00D020   2D 7A 00 01   Branch              017A           => L_48
L_34:
0179   0x00D028   0C 0B 00 00   LoadU16Imm          r11, 0         r11 = 0
L_48:
017A   0x00D030   43 0B 08 00   Move                r11, r8        r11 = r8 [0]
017B   0x00D038   0C 0C 01 00   LoadU16Imm          r12, 1         r12 = 1
017C   0x00D040   01 0B 0B 0C   IAdd                r11, r11, r12  1 = 0 + 1
017D   0x00D048   43 08 0B 00   Move                r8, r11        r8 = r11 [1]
017E   0x00D050   43 0B 08 00   Move                r11, r8        r11 = r8 [1]
017F   0x00D058   43 0A 0B 00   Move                r10, r11       r10 = r11 [1]
0180   0x00D060   2D D0 00 00   Branch              00D0           => L_49
L_26:
0181   0x00D068   15 0A 1D 00   LookupPointer       r10, 29        r10 = ST[29] -> <end-foreach>
0182   0x00D070   1C 0A 0A 00   CallFf              r10, r10, 0    r10 = end-foreach()
0183   0x00D078   43 08 0A 00   Move                r8, r10        r8 = r10 [end-foreach()]
0184   0x00D080   43 05 08 00   Move                r5, r8         r5 = r8 [end-foreach()]
0185   0x00D088   43 05 05 00   Move                r5, r5         r5 = r5 [end-foreach()]
0186   0x00D090   43 04 05 00   Move                r4, r5         r4 = r5 [end-foreach]
0187   0x00D098   43 03 04 00   Move                r3, r4         r3 = r4 [end-foreach]
0188   0x00D0A0   43 02 03 00   Move                r2, r3         r2 = r3 [end-foreach]
0189   0x00D0A8   43 01 02 00   Move                r1, r2         r1 = r2 [end-foreach]
018A   0x00D0B0   43 00 01 00   Move                r0, r1         r0 = r1 [end-foreach]
018B   0x00D0B8   2D A2 00 01   Branch              01A2           => L_50
L_1:
018C   0x00D0C0   15 00 0B 00   LookupPointer       r0, 11         r0 = ST[11] -> <set-boolean>
018D   0x00D0C8   4A 01 0C 00   LoadStaticU64Imm    r1, 12         r1 = ST[12] -> <#4776367E4365CE74>
018E   0x00D0D0   0C 02 00 00   LoadU16Imm          r2, 0          r2 = 0
018F   0x00D0D8   4A 03 02 00   LoadStaticU64Imm    r3, 2          r3 = ST[2] -> <self>
0190   0x00D0E0   43 31 01 00   Move                r49, r1        r49 = r1 [#4776367E4365CE74]
0191   0x00D0E8   43 32 02 00   Move                r50, r2        r50 = r2 [0]
0192   0x00D0F0   43 33 03 00   Move                r51, r3        r51 = r3 [self]
0193   0x00D0F8   1C 00 00 03   CallFf              r0, r0, 3      r0 = set-boolean(#4776367E4365CE74, 0, self)
0194   0x00D100   15 00 0D 00   LookupPointer       r0, 13         r0 = ST[13] -> <set-int32>
0195   0x00D108   4A 01 0E 00   LoadStaticU64Imm    r1, 14         r1 = ST[14] -> <#73ADFC94A6C6AC49>
0196   0x00D110   3F 02 10 00   LoadStaticI32Imm    r2, 16         r2 = ST[16] -> <-1>
0197   0x00D118   4A 03 02 00   LoadStaticU64Imm    r3, 2          r3 = ST[2] -> <self>
0198   0x00D120   43 31 01 00   Move                r49, r1        r49 = r1 [#73ADFC94A6C6AC49]
0199   0x00D128   43 32 02 00   Move                r50, r2        r50 = r2 [-1]
019A   0x00D130   43 33 03 00   Move                r51, r3        r51 = r3 [self]
019B   0x00D138   1C 00 00 03   CallFf              r0, r0, 3      r0 = set-int32(#73ADFC94A6C6AC49, -1, self)
019C   0x00D140   15 00 22 00   LookupPointer       r0, 34         r0 = ST[34] -> <stop-timer>
019D   0x00D148   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#A9297DB4F1A30CF7>
019E   0x00D150   4A 02 02 00   LoadStaticU64Imm    r2, 2          r2 = ST[2] -> <self>
019F   0x00D158   43 31 01 00   Move                r49, r1        r49 = r1 [#A9297DB4F1A30CF7]
01A0   0x00D160   43 32 02 00   Move                r50, r2        r50 = r2 [self]
01A1   0x00D168   1B 00 00 02   Call                r0, r0, 2      r0 = stop-timer(#A9297DB4F1A30CF7, self)
L_50:
01A2   0x00D170   2D A4 00 01   Branch              01A4           => L_RETURN
L_0:
01A3   0x00D178   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
01A4   0x00D180   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x00D188    POINTER <timer-running?>
0001   0x00D190    SID <#A9297DB4F1A30CF7>
0002   0x00D198    SID <self>
0003   0x00D1A0    POINTER <npc-group-alive-count>
0004   0x00D1A8    SID <#88F409F4BF0F056A>
0005   0x00D1B0    POINTER <#00000282BF025EE0>
0006   0x00D1B8    POINTER <get-int32>
0007   0x00D1C0    SID <#0118A324CA34E676>
0008   0x00D1C8    POINTER <fact-get-bool-safe>
0009   0x00D1D0    SID <player>
000A   0x00D1D8    SID <accessibility-invisible-prone>
000B   0x00D1E0    POINTER <set-boolean>
000C   0x00D1E8    SID <#4776367E4365CE74>
000D   0x00D1F0    POINTER <set-int32>
000E   0x00D1F8    SID <#73ADFC94A6C6AC49>
000F   0x00D200    POINTER <*invalid-symbol*>
0010   0x00D208    INT <-1>
0011   0x00D210    POINTER <alloc-point>
0012   0x00D218    FLOAT <0.000000>
0013   0x00D220    POINTER <get-boolean>
0014   0x00D228    SID <#D9DFB4F910DB3FD9>
0015   0x00D230    POINTER <darray-count>
0016   0x00D238    POINTER <begin-foreach>
0017   0x00D240    POINTER <darray-at>
0018   0x00D248    POINTER <npc-alive?>
0019   0x00D250    POINTER <npc-get-awareness>
001A   0x00D258    POINTER <npc-get-target-entity-object>
001B   0x00D260    POINTER <npc-get-target-entity-position>
001C   0x00D268    POINTER <npc-can-broadcast-communication?>
001D   0x00D270    POINTER <end-foreach>
001E   0x00D278    POINTER <darray-contains?>
001F   0x00D280    SID <#9C27142D7E9F3555>
0020   0x00D288    POINTER <new-boxed-value>
0021   0x00D290    POINTER <npc-make-aware-of-at>
0022   0x00D298    POINTER <stop-timer>
0023   0x00D2A0    POINTER <#43DF4E5E85BFD47C>
0024   0x00D2A8    POINTER <npc-make-aware-of>
0000   0x014060   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <#B96C7EEF7ACAB122>
0001   0x014068   2F 06 00 00   BranchIfNot         r0, 0006       IF NOT r0 [0x7ACAB122] => L_0
0002   0x014070   15 00 00 01   LookupPointer       r0, 0          r0 = ST[0] -> <#B96C7EEF7ACAB122>
0003   0x014078   5D 00 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0004   0x014080   3B 00 00 26   IAddImm             r0, r0, 38     r0 = r0 [251696688] / 38 -> <251696688>
0005   0x014088   4C 00 00 00   LoadU8              ???            UNKNOWN INSTRUCTION
L_0:
0006   0x014090   2F 0D 00 00   BranchIfNot         r0, 000D       IF NOT r0 [251696688] => L_1
0007   0x014098   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <get-boolean>
0008   0x0140A0   4A 01 02 00   LoadStaticU64Imm    r1, 2          r1 = ST[2] -> <#C682097AD6DD2276>
0009   0x0140A8   4A 02 03 00   LoadStaticU64Imm    r2, 3          r2 = ST[3] -> <self>
000A   0x0140B0   43 31 01 00   Move                r49, r1        r49 = r1 [#C682097AD6DD2276]
000B   0x0140B8   43 32 02 00   Move                r50, r2        r50 = r2 [self]
000C   0x0140C0   1C 00 00 02   CallFf              r0, r0, 2      r0 = get-boolean(#C682097AD6DD2276, self)
L_1:
000D   0x0140C8   2F 1B 00 00   BranchIfNot         r0, 001B       IF NOT r0 [get-boolean()] => L_2
000E   0x0140D0   15 00 04 00   LookupPointer       r0, 4          r0 = ST[4] -> <script-in-state?>
000F   0x0140D8   4A 01 03 00   LoadStaticU64Imm    r1, 3          r1 = ST[3] -> <self>
0010   0x0140E0   4A 02 05 00   LoadStaticU64Imm    r2, 5          r2 = ST[5] -> <ready-waiting>
0011   0x0140E8   43 31 01 00   Move                r49, r1        r49 = r1 [self]
0012   0x0140F0   43 32 02 00   Move                r50, r2        r50 = r2 [ready-waiting]
0013   0x0140F8   1B 00 00 02   Call                r0, r0, 2      r0 = script-in-state?(self, ready-waiting)
0014   0x014100   2E 1B 00 00   BranchIf            r0, 001B       IF r0 [script-in-state?()] => L_2
0015   0x014108   15 00 04 00   LookupPointer       r0, 4          r0 = ST[4] -> <script-in-state?>
0016   0x014110   4A 01 03 00   LoadStaticU64Imm    r1, 3          r1 = ST[3] -> <self>
0017   0x014118   4A 02 06 00   LoadStaticU64Imm    r2, 6          r2 = ST[6] -> <done>
0018   0x014120   43 31 01 00   Move                r49, r1        r49 = r1 [self]
0019   0x014128   43 32 02 00   Move                r50, r2        r50 = r2 [done]
001A   0x014130   1B 00 00 02   Call                r0, r0, 2      r0 = script-in-state?(self, done)
L_2:
001B   0x014138   2F 7D 00 00   BranchIfNot         r0, 007D       IF NOT r0 [script-in-state?()] => L_3
001C   0x014140   15 00 00 01   LookupPointer       r0, 0          r0 = ST[0] -> <#B96C7EEF7ACAB122>
001D   0x014148   5D 00 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
001E   0x014150   3B 00 00 25   IAddImm             r0, r0, 37     r0 = r0 [1595783182] / 37 -> <1595783182>
001F   0x014158   4C 00 00 00   LoadU8              ???            UNKNOWN INSTRUCTION
0020   0x014160   2F 71 00 00   BranchIfNot         r0, 0071       IF NOT r0 [1595783182] => L_4
0021   0x014168   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
0022   0x014170   15 01 07 00   LookupPointer       r1, 7          r1 = ST[7] -> <darray-count>
0023   0x014178   4A 02 08 00   LoadStaticU64Imm    r2, 8          r2 = ST[8] -> <#88F409F4BF0F056A>
0024   0x014180   43 31 02 00   Move                r49, r2        r49 = r2 [#88F409F4BF0F056A]
0025   0x014188   1C 01 01 01   CallFf              r1, r1, 1      r1 = darray-count(#88F409F4BF0F056A)
0026   0x014190   15 02 09 00   LookupPointer       r2, 9          r2 = ST[9] -> <begin-foreach>
0027   0x014198   1C 02 02 00   CallFf              r2, r2, 0      r2 = begin-foreach()
L_15:
0028   0x0141A0   43 02 00 00   Move                r2, r0         r2 = r0 [0]
0029   0x0141A8   43 03 01 00   Move                r3, r1         r3 = r1 [darray-count()]
002A   0x0141B0   20 02 02 03   ILessThan           r2, r2, r3     r2 = r2 [1] < r3 [1753163078]
002B   0x0141B8   2F 6D 02 00   BranchIfNot         r2, 006D       IF NOT r2 [0x1] => L_5
002C   0x0141C0   15 02 0A 00   LookupPointer       r2, 10         r2 = ST[10] -> <darray-at>
002D   0x0141C8   4A 03 08 00   LoadStaticU64Imm    r3, 8          r3 = ST[8] -> <#88F409F4BF0F056A>
002E   0x0141D0   43 04 00 00   Move                r4, r0         r4 = r0 [0]
002F   0x0141D8   43 31 03 00   Move                r49, r3        r49 = r3 [#88F409F4BF0F056A]
0030   0x0141E0   43 32 04 00   Move                r50, r4        r50 = r4 [0]
0031   0x0141E8   1C 02 02 02   CallFf              r2, r2, 2      r2 = darray-at(#88F409F4BF0F056A, 0)
0032   0x0141F0   43 03 02 00   Move                r3, r2         r3 = r2 [darray-at()]
0033   0x0141F8   2F 3A 03 00   BranchIfNot         r3, 003A       IF NOT r3 [darray-at()] => L_6
0034   0x014200   43 03 02 00   Move                r3, r2         r3 = r2 [darray-at()]
0035   0x014208   5D 03 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0036   0x014210   3B 03 03 0C   IAddImm             r3, r3, 12     r3 = r3 [-739117676] / 12 -> <-739117676>
0037   0x014218   4E 03 03 00   LoadU16             ???            UNKNOWN INSTRUCTION
0038   0x014220   0C 04 07 00   LoadU16Imm          r4, 7          r4 = 7
0039   0x014228   1D 03 03 04   IEqual              r3, r3, r4     r3 = r3 [-739117824] == r4 [7]
L_6:
003A   0x014230   2F 3F 03 00   BranchIfNot         r3, 003F       IF NOT r3 [0xD3F1F500] => L_7
003B   0x014238   43 03 02 00   Move                r3, r2         r3 = r2 [darray-at()]
003C   0x014240   5D 03 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
003D   0x014248   51 03 03 00   LoadU64             r3, [r3]       r3 = [0x0 + 0x0]
003E   0x014250   2D 5A 00 00   Branch              005A           => L_8
L_7:
003F   0x014258   43 03 02 00   Move                r3, r2         r3 = r2 [darray-at()]
0040   0x014260   2F 47 03 00   BranchIfNot         r3, 0047       IF NOT r3 [darray-at()] => L_9
0041   0x014268   43 03 02 00   Move                r3, r2         r3 = r2 [darray-at()]
0042   0x014270   5D 03 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0043   0x014278   3B 03 03 0C   IAddImm             r3, r3, 12     r3 = r3 [-739117676] / 12 -> <-739117676>
0044   0x014280   4E 03 03 00   LoadU16             ???            UNKNOWN INSTRUCTION
0045   0x014288   0C 04 05 00   LoadU16Imm          r4, 5          r4 = 5
0046   0x014290   1D 03 03 04   IEqual              r3, r3, r4     r3 = r3 [-739117824] == r4 [5]
L_9:
0047   0x014298   2F 4C 03 00   BranchIfNot         r3, 004C       IF NOT r3 [0xD3F1F500] => L_10
0048   0x0142A0   43 03 02 00   Move                r3, r2         r3 = r2 [darray-at()]
0049   0x0142A8   5D 03 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
004A   0x0142B0   51 03 03 00   LoadU64             r3, [r3]       r3 = [0x0 + 0x0]
004B   0x0142B8   2D 5A 00 00   Branch              005A           => L_8
L_10:
004C   0x0142C0   43 03 02 00   Move                r3, r2         r3 = r2 [darray-at()]
004D   0x0142C8   2F 54 03 00   BranchIfNot         r3, 0054       IF NOT r3 [darray-at()] => L_11
004E   0x0142D0   43 03 02 00   Move                r3, r2         r3 = r2 [darray-at()]
004F   0x0142D8   5D 03 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0050   0x0142E0   3B 03 03 0C   IAddImm             r3, r3, 12     r3 = r3 [-739117676] / 12 -> <-739117676>
0051   0x0142E8   4E 03 03 00   LoadU16             ???            UNKNOWN INSTRUCTION
0052   0x0142F0   0C 04 04 00   LoadU16Imm          r4, 4          r4 = 4
0053   0x0142F8   1D 03 03 04   IEqual              r3, r3, r4     r3 = r3 [-739117824] == r4 [4]
L_11:
0054   0x014300   2F 59 03 00   BranchIfNot         r3, 0059       IF NOT r3 [0xD3F1F500] => L_12
0055   0x014308   43 03 02 00   Move                r3, r2         r3 = r2 [darray-at()]
0056   0x014310   5D 03 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0057   0x014318   51 03 03 00   LoadU64             r3, [r3]       r3 = [0x0 + 0x0]
0058   0x014320   2D 5A 00 00   Branch              005A           => L_8
L_12:
0059   0x014328   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
L_8:
005A   0x014330   43 02 03 00   Move                r2, r3         r2 = r3 [0]
005B   0x014338   15 03 0B 00   LookupPointer       r3, 11         r3 = ST[11] -> <npc-alive?>
005C   0x014340   43 04 02 00   Move                r4, r2         r4 = r2 [0]
005D   0x014348   43 31 04 00   Move                r49, r4        r49 = r4 [0]
005E   0x014350   1C 03 03 01   CallFf              r3, r3, 1      r3 = npc-alive?(0)
005F   0x014358   2F 65 03 00   BranchIfNot         r3, 0065       IF NOT r3 [npc-alive?()] => L_13
0060   0x014360   15 03 0C 00   LookupPointer       r3, 12         r3 = ST[12] -> <kill-entity>
0061   0x014368   43 04 02 00   Move                r4, r2         r4 = r2 [0]
0062   0x014370   43 31 04 00   Move                r49, r4        r49 = r4 [0]
0063   0x014378   1C 03 03 01   CallFf              r3, r3, 1      r3 = kill-entity(0)
0064   0x014380   2D 66 00 00   Branch              0066           => L_14
L_13:
0065   0x014388   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
L_14:
0066   0x014390   43 03 00 00   Move                r3, r0         r3 = r0 [0]
0067   0x014398   0C 04 01 00   LoadU16Imm          r4, 1          r4 = 1
0068   0x0143A0   01 03 03 04   IAdd                r3, r3, r4     1 = 0 + 1
0069   0x0143A8   43 00 03 00   Move                r0, r3         r0 = r3 [1]
006A   0x0143B0   43 03 00 00   Move                r3, r0         r3 = r0 [1]
006B   0x0143B8   43 02 03 00   Move                r2, r3         r2 = r3 [1]
006C   0x0143C0   2D 28 00 00   Branch              0028           => L_15
L_5:
006D   0x0143C8   15 02 0D 00   LookupPointer       r2, 13         r2 = ST[13] -> <end-foreach>
006E   0x0143D0   1C 02 02 00   CallFf              r2, r2, 0      r2 = end-foreach()
006F   0x0143D8   43 00 02 00   Move                r0, r2         r0 = r2 [end-foreach()]
0070   0x0143E0   2D 72 00 00   Branch              0072           => L_16
L_4:
0071   0x0143E8   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_16:
0072   0x0143F0   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <#B96C7EEF7ACAB122>
0073   0x0143F8   3B 00 00 26   IAddImm             r0, r0, 38     r0 = r0 [251696688] / 38 -> <251696688>
0074   0x014400   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
0075   0x014408   53 00 00 01   StoreU8             ???            UNKNOWN INSTRUCTION
0076   0x014410   15 00 0E 00   LookupPointer       r0, 14         r0 = ST[14] -> <go>
0077   0x014418   4A 01 0F 00   LoadStaticU64Imm    r1, 15         r1 = ST[15] -> <select-wave-npcs>
0078   0x014420   0C 02 01 00   LoadU16Imm          r2, 1          r2 = 1
0079   0x014428   43 31 01 00   Move                r49, r1        r49 = r1 [select-wave-npcs]
007A   0x014430   43 32 02 00   Move                r50, r2        r50 = r2 [1]
007B   0x014438   1C 00 00 02   CallFf              r0, r0, 2      r0 = go(select-wave-npcs, 1)
007C   0x014440   2D 7E 00 00   Branch              007E           => L_RETURN
L_3:
007D   0x014448   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
007E   0x014450   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x014458    POINTER <#B96C7EEF7ACAB122>
0001   0x014460    POINTER <get-boolean>
0002   0x014468    SID <#C682097AD6DD2276>
0003   0x014470    SID <self>
0004   0x014478    POINTER <script-in-state?>
0005   0x014480    SID <ready-waiting>
0006   0x014488    SID <done>
0007   0x014490    POINTER <darray-count>
0008   0x014498    SID <#88F409F4BF0F056A>
0009   0x0144A0    POINTER <begin-foreach>
000A   0x0144A8    POINTER <darray-at>
000B   0x0144B0    POINTER <npc-alive?>
000C   0x0144B8    POINTER <kill-entity>
000D   0x0144C0    POINTER <end-foreach>
000E   0x0144C8    POINTER <go>
000F   0x0144D0    SID <select-wave-npcs>
         ON event designer-menu-changed
          TRACK main:
0000   0x00B4F8   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <#B96C7EEF7ACAB122>
0001   0x00B500   2F 06 00 00   BranchIfNot         r0, 0006       IF NOT r0 [0x7ACAB122] => L_0
0002   0x00B508   15 00 00 01   LookupPointer       r0, 0          r0 = ST[0] -> <#B96C7EEF7ACAB122>
0003   0x00B510   5D 00 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0004   0x00B518   3B 00 00 10   IAddImm             r0, r0, 16     r0 = r0 [2060103970] / 16 -> <2060103970>
0005   0x00B520   4C 00 00 00   LoadU8              ???            UNKNOWN INSTRUCTION
L_0:
0006   0x00B528   2F 0E 00 00   BranchIfNot         r0, 000E       IF NOT r0 [2060103970] => L_1
0007   0x00B530   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <#B96C7EEF7ACAB122>
0008   0x00B538   3B 00 00 10   IAddImm             r0, r0, 16     r0 = r0 [2060103970] / 16 -> <2060103970>
0009   0x00B540   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
000A   0x00B548   53 00 00 01   StoreU8             ???            UNKNOWN INSTRUCTION
000B   0x00B550   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <task-restart-from-continue>
000C   0x00B558   1C 00 00 00   CallFf              r0, r0, 0      r0 = task-restart-from-continue()
000D   0x00B560   2D 0F 00 00   Branch              000F           => L_RETURN
L_1:
000E   0x00B568   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
000F   0x00B570   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x00B578    POINTER <#B96C7EEF7ACAB122>
0001   0x00B580    POINTER <task-restart-from-continue>
         ON event #4BD8DC7CFB99D3AC
          TRACK main:
0000   0x00AFA0   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <event-arg-count>
0001   0x00AFA8   1C 00 00 00   CallFf              r0, r0, 0      r0 = event-arg-count()
0002   0x00AFB0   0C 01 02 00   LoadU16Imm          r1, 2          r1 = 2
0003   0x00AFB8   1D 00 00 01   IEqual              r0, r0, r1     r0 = r0 [-905882880] == r1 [2]
0004   0x00AFC0   2F 7A 00 00   BranchIfNot         r0, 007A       IF NOT r0 [0xCA015300] => L_0
0005   0x00AFC8   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <event-arg-int32>
0006   0x00AFD0   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
0007   0x00AFD8   43 31 01 00   Move                r49, r1        r49 = r1 [0]
0008   0x00AFE0   1C 00 00 01   CallFf              r0, r0, 1      r0 = event-arg-int32(0)
0009   0x00AFE8   15 01 02 00   LookupPointer       r1, 2          r1 = ST[2] -> <event-arg-float>
000A   0x00AFF0   0C 02 01 00   LoadU16Imm          r2, 1          r2 = 1
000B   0x00AFF8   43 31 02 00   Move                r49, r2        r49 = r2 [1]
000C   0x00B000   1C 01 01 01   CallFf              r1, r1, 1      r1 = event-arg-float(1)
000D   0x00B008   15 02 03 00   LookupPointer       r2, 3          r2 = ST[3] -> <is-final-build?>
000E   0x00B010   1C 02 02 00   CallFf              r2, r2, 0      r2 = is-final-build?()
000F   0x00B018   30 02 02 00   OpLogNot            r2, r2         r2 = !r2 -> <TRUE>
0010   0x00B020   2F 24 02 00   BranchIfNot         r2, 0024       IF NOT r2 [0x6620ACB7] => L_1
0011   0x00B028   15 02 04 00   LookupPointer       r2, 4          r2 = ST[4] -> <display>
0012   0x00B030   15 03 05 00   LookupPointer       r3, 5          r3 = ST[5] -> <#5445173390656D6D>
0013   0x00B038   41 04 06 00   LoadStaticPointerImmr4, 6          r4 = ST[6] -> <0xBF026BEB>
0014   0x00B040   41 05 07 00   LoadStaticPointerImmr5, 7          r5 = ST[7] -> <0xBF025EFC>
0015   0x00B048   41 06 08 00   LoadStaticPointerImmr6, 8          r6 = ST[8] -> <0xBF02600A>
0016   0x00B050   15 07 09 00   LookupPointer       r7, 9          r7 = ST[9] -> <#BC06CBDEAE8344C7>
0017   0x00B058   43 08 00 00   Move                r8, r0         r8 = r0 [event-arg-int32()]
0018   0x00B060   43 31 08 00   Move                r49, r8        r49 = r8 [event-arg-int32()]
0019   0x00B068   1B 07 07 01   Call                r7, r7, 1      r7 = #BC06CBDEAE8344C7(event-arg-int32())
001A   0x00B070   43 31 04 00   Move                r49, r4        r49 = r4 [0xBF026BEB]
001B   0x00B078   43 32 05 00   Move                r50, r5        r50 = r5 [0xBF025EFC]
001C   0x00B080   43 33 06 00   Move                r51, r6        r51 = r6 [0xBF02600A]
001D   0x00B088   43 34 07 00   Move                r52, r7        r52 = r7 [#BC06CBDEAE8344C7()]
001E   0x00B090   1C 03 03 04   CallFf              r3, r3, 4      r3 = #5445173390656D6D(0xBF026BEB, 0xBF025EFC, 0xBF02600A, #BC06CBDEAE8344C7())
001F   0x00B098   0C 04 13 00   LoadU16Imm          r4, 19         r4 = 19
0020   0x00B0A0   43 31 03 00   Move                r49, r3        r49 = r3 [#5445173390656D6D()]
0021   0x00B0A8   43 32 04 00   Move                r50, r4        r50 = r4 [19]
0022   0x00B0B0   1C 02 02 02   CallFf              r2, r2, 2      r2 = display(#5445173390656D6D(), 19)
0023   0x00B0B8   2D 25 00 00   Branch              0025           => L_2
L_1:
0024   0x00B0C0   0C 02 00 00   LoadU16Imm          r2, 0          r2 = 0
L_2:
0025   0x00B0C8   15 02 03 00   LookupPointer       r2, 3          r2 = ST[3] -> <is-final-build?>
0026   0x00B0D0   1C 02 02 00   CallFf              r2, r2, 0      r2 = is-final-build?()
0027   0x00B0D8   30 02 02 00   OpLogNot            r2, r2         r2 = !r2 -> <TRUE>
0028   0x00B0E0   2F 41 02 00   BranchIfNot         r2, 0041       IF NOT r2 [0x6620ACB7] => L_3
0029   0x00B0E8   15 02 04 00   LookupPointer       r2, 4          r2 = ST[4] -> <display>
002A   0x00B0F0   15 03 05 00   LookupPointer       r3, 5          r3 = ST[5] -> <#5445173390656D6D>
002B   0x00B0F8   41 04 0A 00   LoadStaticPointerImmr4, 10         r4 = ST[10] -> <0xBF026BB4>
002C   0x00B100   41 05 07 00   LoadStaticPointerImmr5, 7          r5 = ST[7] -> <0xBF025EFC>
002D   0x00B108   41 06 0B 00   LoadStaticPointerImmr6, 11         r6 = ST[11] -> <0xBF0271C2>
002E   0x00B110   43 07 01 00   Move                r7, r1         r7 = r1 [event-arg-float()]
002F   0x00B118   43 08 01 00   Move                r8, r1         r8 = r1 [event-arg-float()]
0030   0x00B120   40 09 0C 00   LoadStaticFloatImm  r9, 12         r9 = ST[12] -> <0.00>
0031   0x00B128   26 08 08 09   FLessThanEqual      r8, r8, r9     r8 = r8 [-0.000000] <= r9 [0.000000]
0032   0x00B130   2F 35 08 00   BranchIfNot         r8, 0035       IF NOT r8 [0xAF90CE01] => L_4
0033   0x00B138   41 08 0D 00   LoadStaticPointerImmr8, 13         r8 = ST[13] -> <0xBF027802>
0034   0x00B140   2D 36 00 00   Branch              0036           => L_5
L_4:
0035   0x00B148   41 08 07 00   LoadStaticPointerImmr8, 7          r8 = ST[7] -> <0xBF025EFC>
L_5:
0036   0x00B150   43 31 04 00   Move                r49, r4        r49 = r4 [0xBF026BB4]
0037   0x00B158   43 32 05 00   Move                r50, r5        r50 = r5 [0xBF025EFC]
0038   0x00B160   43 33 06 00   Move                r51, r6        r51 = r6 [0xBF0271C2]
0039   0x00B168   43 34 07 00   Move                r52, r7        r52 = r7 [event-arg-float()]
003A   0x00B170   43 35 08 00   Move                r53, r8        r53 = r8 [0xBF025EFC]
003B   0x00B178   1C 03 03 05   CallFf              r3, r3, 5      r3 = #5445173390656D6D(0xBF026BB4, 0xBF025EFC, 0xBF0271C2, event-arg-float(), 0xBF025EFC)
003C   0x00B180   0C 04 13 00   LoadU16Imm          r4, 19         r4 = 19
003D   0x00B188   43 31 03 00   Move                r49, r3        r49 = r3 [#5445173390656D6D()]
003E   0x00B190   43 32 04 00   Move                r50, r4        r50 = r4 [19]
003F   0x00B198   1C 02 02 02   CallFf              r2, r2, 2      r2 = display(#5445173390656D6D(), 19)
0040   0x00B1A0   2D 42 00 00   Branch              0042           => L_6
L_3:
0041   0x00B1A8   0C 02 00 00   LoadU16Imm          r2, 0          r2 = 0
L_6:
0042   0x00B1B0   15 02 03 00   LookupPointer       r2, 3          r2 = ST[3] -> <is-final-build?>
0043   0x00B1B8   1C 02 02 00   CallFf              r2, r2, 0      r2 = is-final-build?()
0044   0x00B1C0   30 02 02 00   OpLogNot            r2, r2         r2 = !r2 -> <TRUE>
0045   0x00B1C8   2F 5F 02 00   BranchIfNot         r2, 005F       IF NOT r2 [0x6620ACB7] => L_7
0046   0x00B1D0   15 02 04 00   LookupPointer       r2, 4          r2 = ST[4] -> <display>
0047   0x00B1D8   15 03 05 00   LookupPointer       r3, 5          r3 = ST[5] -> <#5445173390656D6D>
0048   0x00B1E0   41 04 06 00   LoadStaticPointerImmr4, 6          r4 = ST[6] -> <0xBF026BEB>
0049   0x00B1E8   41 05 07 00   LoadStaticPointerImmr5, 7          r5 = ST[7] -> <0xBF025EFC>
004A   0x00B1F0   41 06 0E 00   LoadStaticPointerImmr6, 14         r6 = ST[14] -> <0xBF0273AB>
004B   0x00B1F8   15 07 0F 00   LookupPointer       r7, 15         r7 = ST[15] -> <get-boolean>
004C   0x00B200   4A 08 10 00   LoadStaticU64Imm    r8, 16         r8 = ST[16] -> <#FA343BC04362318D>
004D   0x00B208   4A 09 11 00   LoadStaticU64Imm    r9, 17         r9 = ST[17] -> <self>
004E   0x00B210   43 31 08 00   Move                r49, r8        r49 = r8 [#FA343BC04362318D]
004F   0x00B218   43 32 09 00   Move                r50, r9        r50 = r9 [self]
0050   0x00B220   1C 07 07 02   CallFf              r7, r7, 2      r7 = get-boolean(#FA343BC04362318D, self)
0051   0x00B228   2F 54 07 00   BranchIfNot         r7, 0054       IF NOT r7 [get-boolean()] => L_8
0052   0x00B230   41 07 12 00   LoadStaticPointerImmr7, 18         r7 = ST[18] -> <0xBF027758>
0053   0x00B238   2D 55 00 00   Branch              0055           => L_9
L_8:
0054   0x00B240   41 07 13 00   LoadStaticPointerImmr7, 19         r7 = ST[19] -> <0xBF0274FE>
L_9:
0055   0x00B248   43 31 04 00   Move                r49, r4        r49 = r4 [0xBF026BEB]
0056   0x00B250   43 32 05 00   Move                r50, r5        r50 = r5 [0xBF025EFC]
0057   0x00B258   43 33 06 00   Move                r51, r6        r51 = r6 [0xBF0273AB]
0058   0x00B260   43 34 07 00   Move                r52, r7        r52 = r7 [0xBF0274FE]
0059   0x00B268   1C 03 03 04   CallFf              r3, r3, 4      r3 = #5445173390656D6D(0xBF026BEB, 0xBF025EFC, 0xBF0273AB, 0xBF0274FE)
005A   0x00B270   0C 04 13 00   LoadU16Imm          r4, 19         r4 = 19
005B   0x00B278   43 31 03 00   Move                r49, r3        r49 = r3 [#5445173390656D6D()]
005C   0x00B280   43 32 04 00   Move                r50, r4        r50 = r4 [19]
005D   0x00B288   1C 02 02 02   CallFf              r2, r2, 2      r2 = display(#5445173390656D6D(), 19)
005E   0x00B290   2D 60 00 00   Branch              0060           => L_10
L_7:
005F   0x00B298   0C 02 00 00   LoadU16Imm          r2, 0          r2 = 0
L_10:
0060   0x00B2A0   15 02 14 00   LookupPointer       r2, 20         r2 = ST[20] -> <set-int32>
0061   0x00B2A8   4A 03 15 00   LoadStaticU64Imm    r3, 21         r3 = ST[21] -> <#0118A324CA34E676>
0062   0x00B2B0   43 04 00 00   Move                r4, r0         r4 = r0 [event-arg-int32()]
0063   0x00B2B8   4A 05 11 00   LoadStaticU64Imm    r5, 17         r5 = ST[17] -> <self>
0064   0x00B2C0   43 31 03 00   Move                r49, r3        r49 = r3 [#0118A324CA34E676]
0065   0x00B2C8   43 32 04 00   Move                r50, r4        r50 = r4 [event-arg-int32()]
0066   0x00B2D0   43 33 05 00   Move                r51, r5        r51 = r5 [self]
0067   0x00B2D8   1C 02 02 03   CallFf              r2, r2, 3      r2 = set-int32(#0118A324CA34E676, event-arg-int32(), self)
0068   0x00B2E0   43 02 01 00   Move                r2, r1         r2 = r1 [event-arg-float()]
0069   0x00B2E8   40 03 0C 00   LoadStaticFloatImm  r3, 12         r3 = ST[12] -> <0.00>
006A   0x00B2F0   23 02 02 03   FGreaterThan        ???            UNKNOWN INSTRUCTION
006B   0x00B2F8   2F 77 02 00   BranchIfNot         r2, 0077       IF NOT r2 [event-arg-float] => L_11
006C   0x00B300   15 02 16 00   LookupPointer       r2, 22         r2 = ST[22] -> <start-timer>
006D   0x00B308   4A 03 17 00   LoadStaticU64Imm    r3, 23         r3 = ST[23] -> <#A9297DB4F1A30CF7>
006E   0x00B310   43 04 01 00   Move                r4, r1         r4 = r1 [event-arg-float()]
006F   0x00B318   4A 05 11 00   LoadStaticU64Imm    r5, 17         r5 = ST[17] -> <self>
0070   0x00B320   0C 06 01 00   LoadU16Imm          r6, 1          r6 = 1
0071   0x00B328   43 31 03 00   Move                r49, r3        r49 = r3 [#A9297DB4F1A30CF7]
0072   0x00B330   43 32 04 00   Move                r50, r4        r50 = r4 [event-arg-float()]
0073   0x00B338   43 33 05 00   Move                r51, r5        r51 = r5 [self]
0074   0x00B340   43 34 06 00   Move                r52, r6        r52 = r6 [1]
0075   0x00B348   1B 02 02 04   Call                r2, r2, 4      r2 = start-timer(#A9297DB4F1A30CF7, event-arg-float(), self, 1)
0076   0x00B350   2D 78 00 00   Branch              0078           => L_12
L_11:
0077   0x00B358   0C 02 00 00   LoadU16Imm          r2, 0          r2 = 0
L_12:
0078   0x00B360   43 00 02 00   Move                r0, r2         r0 = r2 [0]
0079   0x00B368   2D 8F 00 00   Branch              008F           => L_RETURN
L_0:
007A   0x00B370   15 00 03 00   LookupPointer       r0, 3          r0 = ST[3] -> <is-final-build?>
007B   0x00B378   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
007C   0x00B380   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
007D   0x00B388   2F 8A 00 00   BranchIfNot         r0, 008A       IF NOT r0 [0x6620ACB7] => L_14
007E   0x00B390   15 00 04 00   LookupPointer       r0, 4          r0 = ST[4] -> <display>
007F   0x00B398   15 01 05 00   LookupPointer       r1, 5          r1 = ST[5] -> <#5445173390656D6D>
0080   0x00B3A0   41 02 18 00   LoadStaticPointerImmr2, 24         r2 = ST[24] -> <0xBF0262C3>
0081   0x00B3A8   41 03 07 00   LoadStaticPointerImmr3, 7          r3 = ST[7] -> <0xBF025EFC>
0082   0x00B3B0   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF0262C3]
0083   0x00B3B8   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
0084   0x00B3C0   1C 01 01 02   CallFf              r1, r1, 2      r1 = #5445173390656D6D(0xBF0262C3, 0xBF025EFC)
0085   0x00B3C8   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
0086   0x00B3D0   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
0087   0x00B3D8   43 32 02 00   Move                r50, r2        r50 = r2 [19]
0088   0x00B3E0   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
0089   0x00B3E8   2D 8B 00 00   Branch              008B           => L_15
L_14:
008A   0x00B3F0   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_15:
008B   0x00B3F8   15 00 19 00   LookupPointer       r0, 25         r0 = ST[25] -> <display-error>
008C   0x00B400   41 01 1A 00   LoadStaticPointerImmr1, 26         r1 = ST[26] -> <0xBF02726F>
008D   0x00B408   43 31 01 00   Move                r49, r1        r49 = r1 [0xBF02726F]
008E   0x00B410   1C 00 00 01   CallFf              r0, r0, 1      r0 = display-error(0xBF02726F)
L_RETURN:
008F   0x00B418   00 00 00 00   Return              r0             Return display-error()
SYMBOL TABLE: 
0000   0x00B420    POINTER <event-arg-count>
0001   0x00B428    POINTER <event-arg-int32>
0002   0x00B430    POINTER <event-arg-float>
0003   0x00B438    POINTER <is-final-build?>
0004   0x00B440    POINTER <display>
0005   0x00B448    POINTER <#5445173390656D6D>
0006   0x00B450    POINTER <#00000282BF026BEB>
0007   0x00B458    POINTER <#00000282BF025EFC>
0008   0x00B460    POINTER <#00000282BF02600A>
0009   0x00B468    POINTER <#BC06CBDEAE8344C7>
000A   0x00B470    POINTER <#00000282BF026BB4>
000B   0x00B478    POINTER <#00000282BF0271C2>
000C   0x00B480    FLOAT <0.000000>
000D   0x00B488    POINTER <#00000282BF027802>
000E   0x00B490    POINTER <#00000282BF0273AB>
000F   0x00B498    POINTER <get-boolean>
0010   0x00B4A0    SID <#FA343BC04362318D>
0011   0x00B4A8    SID <self>
0012   0x00B4B0    POINTER <#00000282BF027758>
0013   0x00B4B8    POINTER <#00000282BF0274FE>
0014   0x00B4C0    POINTER <set-int32>
0015   0x00B4C8    SID <#0118A324CA34E676>
0016   0x00B4D0    POINTER <start-timer>
0017   0x00B4D8    SID <#A9297DB4F1A30CF7>
0018   0x00B4E0    POINTER <#00000282BF0262C3>
0019   0x00B4E8    POINTER <display-error>
001A   0x00B4F0    POINTER <#00000282BF02726F>
         ON event #A7B7DA8596ABDFC5
          TRACK main:
0000   0x014590   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <set-boolean>
0001   0x014598   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#503D45B686F0E282>
0002   0x0145A0   0C 02 01 00   LoadU16Imm          r2, 1          r2 = 1
0003   0x0145A8   4A 03 02 00   LoadStaticU64Imm    r3, 2          r3 = ST[2] -> <self>
0004   0x0145B0   43 31 01 00   Move                r49, r1        r49 = r1 [#503D45B686F0E282]
0005   0x0145B8   43 32 02 00   Move                r50, r2        r50 = r2 [1]
0006   0x0145C0   43 33 03 00   Move                r51, r3        r51 = r3 [self]
0007   0x0145C8   1C 00 00 03   CallFf              r0, r0, 3      r0 = set-boolean(#503D45B686F0E282, 1, self)
0008   0x0145D0   00 00 00 00   Return              r0             Return set-boolean()
SYMBOL TABLE: 
0000   0x0145D8    POINTER <set-boolean>
0001   0x0145E0    SID <#503D45B686F0E282>
0002   0x0145E8    SID <self>
0000   0x017750   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <npc-set-global-combat-params>
0001   0x017758   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#F949F0CAB8B6795F>
0002   0x017760   43 31 01 00   Move                r49, r1        r49 = r1 [#F949F0CAB8B6795F]
0003   0x017768   1C 00 00 01   CallFf              r0, r0, 1      r0 = npc-set-global-combat-params(#F949F0CAB8B6795F)
0004   0x017770   00 00 00 00   Return              r0             Return npc-set-global-combat-params()
SYMBOL TABLE: 
0000   0x017778    POINTER <npc-set-global-combat-params>
0001   0x017780    SID <#F949F0CAB8B6795F>
         ON event #10404744E4E8060D
          TRACK main:
0000   0x00FF20   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <npc-set-global-combat-params>
0001   0x00FF28   15 01 01 00   LookupPointer       r1, 1          r1 = ST[1] -> <get-symbol>
0002   0x00FF30   4A 02 02 00   LoadStaticU64Imm    r2, 2          r2 = ST[2] -> <#F1186475D251E396>
0003   0x00FF38   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
0004   0x00FF40   43 31 02 00   Move                r49, r2        r49 = r2 [#F1186475D251E396]
0005   0x00FF48   43 32 03 00   Move                r50, r3        r50 = r3 [self]
0006   0x00FF50   1C 01 01 02   CallFf              r1, r1, 2      r1 = get-symbol(#F1186475D251E396, self)
0007   0x00FF58   43 31 01 00   Move                r49, r1        r49 = r1 [get-symbol()]
0008   0x00FF60   1C 00 00 01   CallFf              r0, r0, 1      r0 = npc-set-global-combat-params(get-symbol())
0009   0x00FF68   00 00 00 00   Return              r0             Return npc-set-global-combat-params()
SYMBOL TABLE: 
0000   0x00FF70    POINTER <npc-set-global-combat-params>
0001   0x00FF78    POINTER <get-symbol>
0002   0x00FF80    SID <#F1186475D251E396>
0003   0x00FF88    SID <self>
0000   0x01AAA0   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <#C52976BF40B634F3>
0001   0x01AAA8   15 01 01 00   LookupPointer       r1, 1          r1 = ST[1] -> <get-int32>
0002   0x01AAB0   4A 02 02 00   LoadStaticU64Imm    r2, 2          r2 = ST[2] -> <#4046927F0EB6E142>
0003   0x01AAB8   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
0004   0x01AAC0   43 31 02 00   Move                r49, r2        r49 = r2 [#4046927F0EB6E142]
0005   0x01AAC8   43 32 03 00   Move                r50, r3        r50 = r3 [self]
0006   0x01AAD0   1C 01 01 02   CallFf              r1, r1, 2      r1 = get-int32(#4046927F0EB6E142, self)
0007   0x01AAD8   43 31 01 00   Move                r49, r1        r49 = r1 [get-int32()]
0008   0x01AAE0   1C 00 00 01   CallFf              r0, r0, 1      r0 = #C52976BF40B634F3(get-int32())
0009   0x01AAE8   00 00 00 00   Return              r0             Return #C52976BF40B634F3()
SYMBOL TABLE: 
0000   0x01AAF0    POINTER <#C52976BF40B634F3>
0001   0x01AAF8    POINTER <get-int32>
0002   0x01AB00    SID <#4046927F0EB6E142>
0003   0x01AB08    SID <self>
0000   0x0158B0   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <set-boolean>
0001   0x0158B8   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#503D45B686F0E282>
0002   0x0158C0   0C 02 00 00   LoadU16Imm          r2, 0          r2 = 0
0003   0x0158C8   4A 03 02 00   LoadStaticU64Imm    r3, 2          r3 = ST[2] -> <self>
0004   0x0158D0   43 31 01 00   Move                r49, r1        r49 = r1 [#503D45B686F0E282]
0005   0x0158D8   43 32 02 00   Move                r50, r2        r50 = r2 [0]
0006   0x0158E0   43 33 03 00   Move                r51, r3        r51 = r3 [self]
0007   0x0158E8   1C 00 00 03   CallFf              r0, r0, 3      r0 = set-boolean(#503D45B686F0E282, 0, self)
0008   0x0158F0   00 00 00 00   Return              r0             Return set-boolean()
SYMBOL TABLE: 
0000   0x0158F8    POINTER <set-boolean>
0001   0x015900    SID <#503D45B686F0E282>
0002   0x015908    SID <self>
         ON event spawn-next-wave
          TRACK main:
0000   0x00ADC0   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <is-final-build?>
0001   0x00ADC8   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0002   0x00ADD0   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0003   0x00ADD8   2F 10 00 00   BranchIfNot         r0, 0010       IF NOT r0 [0x6620ACB7] => L_0
0004   0x00ADE0   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <display>
0005   0x00ADE8   15 01 02 00   LookupPointer       r1, 2          r1 = ST[2] -> <#5445173390656D6D>
0006   0x00ADF0   41 02 03 00   LoadStaticPointerImmr2, 3          r2 = ST[3] -> <0xBF026515>
0007   0x00ADF8   41 03 04 00   LoadStaticPointerImmr3, 4          r3 = ST[4] -> <0xBF025EFC>
0008   0x00AE00   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF026515]
0009   0x00AE08   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
000A   0x00AE10   1C 01 01 02   CallFf              r1, r1, 2      r1 = #5445173390656D6D(0xBF026515, 0xBF025EFC)
000B   0x00AE18   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
000C   0x00AE20   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
000D   0x00AE28   43 32 02 00   Move                r50, r2        r50 = r2 [19]
000E   0x00AE30   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
000F   0x00AE38   2D 11 00 00   Branch              0011           => L_RETURN
L_0:
0010   0x00AE40   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
0011   0x00AE48   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x00AE50    POINTER <is-final-build?>
0001   0x00AE58    POINTER <display>
0002   0x00AE60    POINTER <#5445173390656D6D>
0003   0x00AE68    POINTER <#00000282BF026515>
0004   0x00AE70    POINTER <#00000282BF025EFC>
0000   0x01EC40   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <set-boolean>
0001   0x01EC48   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#BE1B99861A282419>
0002   0x01EC50   0C 02 00 00   LoadU16Imm          r2, 0          r2 = 0
0003   0x01EC58   4A 03 02 00   LoadStaticU64Imm    r3, 2          r3 = ST[2] -> <self>
0004   0x01EC60   43 31 01 00   Move                r49, r1        r49 = r1 [#BE1B99861A282419]
0005   0x01EC68   43 32 02 00   Move                r50, r2        r50 = r2 [0]
0006   0x01EC70   43 33 03 00   Move                r51, r3        r51 = r3 [self]
0007   0x01EC78   1C 00 00 03   CallFf              r0, r0, 3      r0 = set-boolean(#BE1B99861A282419, 0, self)
0008   0x01EC80   00 00 00 00   Return              r0             Return set-boolean()
SYMBOL TABLE: 
0000   0x01EC88    POINTER <set-boolean>
0001   0x01EC90    SID <#BE1B99861A282419>
0002   0x01EC98    SID <self>
         ON event #12CB05E09D8103F2
          TRACK main:
0000   0x0144D8   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <is-final-build?>
0001   0x0144E0   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0002   0x0144E8   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0003   0x0144F0   2F 10 00 00   BranchIfNot         r0, 0010       IF NOT r0 [0x6620ACB7] => L_0
0004   0x0144F8   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <display>
0005   0x014500   15 01 02 00   LookupPointer       r1, 2          r1 = ST[2] -> <#5445173390656D6D>
0006   0x014508   41 02 03 00   LoadStaticPointerImmr2, 3          r2 = ST[3] -> <0xBF0264E4>
0007   0x014510   41 03 04 00   LoadStaticPointerImmr3, 4          r3 = ST[4] -> <0xBF025EFC>
0008   0x014518   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF0264E4]
0009   0x014520   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
000A   0x014528   1C 01 01 02   CallFf              r1, r1, 2      r1 = #5445173390656D6D(0xBF0264E4, 0xBF025EFC)
000B   0x014530   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
000C   0x014538   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
000D   0x014540   43 32 02 00   Move                r50, r2        r50 = r2 [19]
000E   0x014548   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
000F   0x014550   2D 11 00 00   Branch              0011           => L_RETURN
L_0:
0010   0x014558   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
0011   0x014560   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x014568    POINTER <is-final-build?>
0001   0x014570    POINTER <display>
0002   0x014578    POINTER <#5445173390656D6D>
0003   0x014580    POINTER <#00000282BF0264E4>
0004   0x014588    POINTER <#00000282BF025EFC>
0000   0x0192E8   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <darray-count>
0001   0x0192F0   15 01 01 00   LookupPointer       r1, 1          r1 = ST[1] -> <get-symbol>
0002   0x0192F8   4A 02 02 00   LoadStaticU64Imm    r2, 2          r2 = ST[2] -> <#AE606DDB7F18D76F>
0003   0x019300   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
0004   0x019308   43 31 02 00   Move                r49, r2        r49 = r2 [#AE606DDB7F18D76F]
0005   0x019310   43 32 03 00   Move                r50, r3        r50 = r3 [self]
0006   0x019318   1C 01 01 02   CallFf              r1, r1, 2      r1 = get-symbol(#AE606DDB7F18D76F, self)
0007   0x019320   43 31 01 00   Move                r49, r1        r49 = r1 [get-symbol()]
0008   0x019328   1C 00 00 01   CallFf              r0, r0, 1      r0 = darray-count(get-symbol())
0009   0x019330   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
000A   0x019338   1D 00 00 01   IEqual              r0, r0, r1     r0 = r0 [1753163008] == r1 [0]
000B   0x019340   2F 1E 00 00   BranchIfNot         r0, 001E       IF NOT r0 [0x687F2500] => L_0
000C   0x019348   15 00 04 00   LookupPointer       r0, 4          r0 = ST[4] -> <is-final-build?>
000D   0x019350   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
000E   0x019358   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
000F   0x019360   2F 1C 00 00   BranchIfNot         r0, 001C       IF NOT r0 [0x6620ACB7] => L_1
0010   0x019368   15 00 05 00   LookupPointer       r0, 5          r0 = ST[5] -> <display>
0011   0x019370   15 01 06 00   LookupPointer       r1, 6          r1 = ST[6] -> <#5445173390656D6D>
0012   0x019378   41 02 07 00   LoadStaticPointerImmr2, 7          r2 = ST[7] -> <0xBF026115>
0013   0x019380   41 03 08 00   LoadStaticPointerImmr3, 8          r3 = ST[8] -> <0xBF025EFC>
0014   0x019388   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF026115]
0015   0x019390   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
0016   0x019398   1C 01 01 02   CallFf              r1, r1, 2      r1 = #5445173390656D6D(0xBF026115, 0xBF025EFC)
0017   0x0193A0   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
0018   0x0193A8   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
0019   0x0193B0   43 32 02 00   Move                r50, r2        r50 = r2 [19]
001A   0x0193B8   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
001B   0x0193C0   2D 1D 00 00   Branch              001D           => L_2
L_1:
001C   0x0193C8   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_2:
001D   0x0193D0   2D 26 00 00   Branch              0026           => L_RETURN
L_0:
001E   0x0193D8   15 00 09 00   LookupPointer       r0, 9          r0 = ST[9] -> <set-boolean>
001F   0x0193E0   4A 01 0A 00   LoadStaticU64Imm    r1, 10         r1 = ST[10] -> <#031D4F1C6B501E2B>
0020   0x0193E8   0C 02 00 00   LoadU16Imm          r2, 0          r2 = 0
0021   0x0193F0   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
0022   0x0193F8   43 31 01 00   Move                r49, r1        r49 = r1 [#031D4F1C6B501E2B]
0023   0x019400   43 32 02 00   Move                r50, r2        r50 = r2 [0]
0024   0x019408   43 33 03 00   Move                r51, r3        r51 = r3 [self]
0025   0x019410   1C 00 00 03   CallFf              r0, r0, 3      r0 = set-boolean(#031D4F1C6B501E2B, 0, self)
L_RETURN:
0026   0x019418   00 00 00 00   Return              r0             Return set-boolean()
SYMBOL TABLE: 
0000   0x019420    POINTER <darray-count>
0001   0x019428    POINTER <get-symbol>
0002   0x019430    SID <#AE606DDB7F18D76F>
0003   0x019438    SID <self>
0004   0x019440    POINTER <is-final-build?>
0005   0x019448    POINTER <display>
0006   0x019450    POINTER <#5445173390656D6D>
0007   0x019458    POINTER <#00000282BF026115>
0008   0x019460    POINTER <#00000282BF025EFC>
0009   0x019468    POINTER <set-boolean>
000A   0x019470    SID <#031D4F1C6B501E2B>
         ON event #41BF7ED9363E5B7E
          TRACK main:
0000   0x01AF08   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <set-boolean>
0001   0x01AF10   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#41BF7ED9363E5B7E>
0002   0x01AF18   0C 02 01 00   LoadU16Imm          r2, 1          r2 = 1
0003   0x01AF20   4A 03 02 00   LoadStaticU64Imm    r3, 2          r3 = ST[2] -> <self>
0004   0x01AF28   43 31 01 00   Move                r49, r1        r49 = r1 [#41BF7ED9363E5B7E]
0005   0x01AF30   43 32 02 00   Move                r50, r2        r50 = r2 [1]
0006   0x01AF38   43 33 03 00   Move                r51, r3        r51 = r3 [self]
0007   0x01AF40   1C 00 00 03   CallFf              r0, r0, 3      r0 = set-boolean(#41BF7ED9363E5B7E, 1, self)
0008   0x01AF48   00 00 00 00   Return              r0             Return set-boolean()
SYMBOL TABLE: 
0000   0x01AF50    POINTER <set-boolean>
0001   0x01AF58    SID <#41BF7ED9363E5B7E>
0002   0x01AF60    SID <self>
      STATE task-check:
         ON start
          TRACK main:
0000   0x01AC48   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <is-final-build?>
0001   0x01AC50   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0002   0x01AC58   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0003   0x01AC60   2F 0E 00 00   BranchIfNot         r0, 000E       IF NOT r0 [0x6620ACB7] => L_0
0004   0x01AC68   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <display>
0005   0x01AC70   15 01 02 00   LookupPointer       r1, 2          r1 = ST[2] -> <#5445173390656D6D>
0006   0x01AC78   41 02 03 00   LoadStaticPointerImmr2, 3          r2 = ST[3] -> <0xBF027172>
0007   0x01AC80   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF027172]
0008   0x01AC88   1C 01 01 01   CallFf              r1, r1, 1      r1 = #5445173390656D6D(0xBF027172)
0009   0x01AC90   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
000A   0x01AC98   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
000B   0x01ACA0   43 32 02 00   Move                r50, r2        r50 = r2 [19]
000C   0x01ACA8   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
000D   0x01ACB0   2D 0F 00 00   Branch              000F           => L_RETURN
L_0:
000E   0x01ACB8   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
000F   0x01ACC0   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x01ACC8    POINTER <is-final-build?>
0001   0x01ACD0    POINTER <display>
0002   0x01ACD8    POINTER <#5445173390656D6D>
0003   0x01ACE0    POINTER <#00000282BF027172>
0000   0x0195D0   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <task-get-current-symbol>
0001   0x0195D8   1C 00 00 00   CallFf              r0, r0, 0      r0 = task-get-current-symbol()
0002   0x0195E0   15 01 01 00   LookupPointer       r1, 1          r1 = ST[1] -> <hash-lookup>
0003   0x0195E8   15 02 02 00   LookupPointer       r2, 2          r2 = ST[2] -> <#A33FEB662FEAAB48>
0004   0x0195F0   43 03 00 00   Move                r3, r0         r3 = r0 [task-get-current-symbol()]
0005   0x0195F8   43 31 02 00   Move                r49, r2        r49 = r2 [0x2FEAAB48]
0006   0x019600   43 32 03 00   Move                r50, r3        r50 = r3 [task-get-current-symbol()]
0007   0x019608   1C 01 01 02   CallFf              r1, r1, 2      r1 = hash-lookup(0x2FEAAB48, task-get-current-symbol())
0008   0x019610   43 02 01 00   Move                r2, r1         r2 = r1 [hash-lookup()]
0009   0x019618   43 03 02 00   Move                r3, r2         r3 = r2 [hash-lookup()]
000A   0x019620   0C 04 00 00   LoadU16Imm          r4, 0          r4 = 0
000B   0x019628   1D 03 03 04   IEqual              r3, r3, r4     r3 = r3 [-1795405312] == r4 [0]
000C   0x019630   30 03 03 00   OpLogNot            r3, r3         r3 = !r3 -> <TRUE>
000D   0x019638   2F 76 03 00   BranchIfNot         r3, 0076       IF NOT r3 [0x94FC4A01] => L_0
000E   0x019640   15 03 03 00   LookupPointer       r3, 3          r3 = ST[3] -> <is-final-build?>
000F   0x019648   1C 03 03 00   CallFf              r3, r3, 0      r3 = is-final-build?()
0010   0x019650   30 03 03 00   OpLogNot            r3, r3         r3 = !r3 -> <TRUE>
0011   0x019658   2F 1E 03 00   BranchIfNot         r3, 001E       IF NOT r3 [0x6620ACB7] => L_1
0012   0x019660   15 03 04 00   LookupPointer       r3, 4          r3 = ST[4] -> <display>
0013   0x019668   15 04 05 00   LookupPointer       r4, 5          r4 = ST[5] -> <#5445173390656D6D>
0014   0x019670   41 05 06 00   LoadStaticPointerImmr5, 6          r5 = ST[6] -> <0xBF026B4A>
0015   0x019678   41 06 07 00   LoadStaticPointerImmr6, 7          r6 = ST[7] -> <0xBF025EFC>
0016   0x019680   43 31 05 00   Move                r49, r5        r49 = r5 [0xBF026B4A]
0017   0x019688   43 32 06 00   Move                r50, r6        r50 = r6 [0xBF025EFC]
0018   0x019690   1C 04 04 02   CallFf              r4, r4, 2      r4 = #5445173390656D6D(0xBF026B4A, 0xBF025EFC)
0019   0x019698   0C 05 13 00   LoadU16Imm          r5, 19         r5 = 19
001A   0x0196A0   43 31 04 00   Move                r49, r4        r49 = r4 [#5445173390656D6D()]
001B   0x0196A8   43 32 05 00   Move                r50, r5        r50 = r5 [19]
001C   0x0196B0   1C 03 03 02   CallFf              r3, r3, 2      r3 = display(#5445173390656D6D(), 19)
001D   0x0196B8   2D 1F 00 00   Branch              001F           => L_2
L_1:
001E   0x0196C0   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
L_2:
001F   0x0196C8   15 03 08 00   LookupPointer       r3, 8          r3 = ST[8] -> <set-symbol>
0020   0x0196D0   4A 04 09 00   LoadStaticU64Imm    r4, 9          r4 = ST[9] -> <current-task>
0021   0x0196D8   43 05 00 00   Move                r5, r0         r5 = r0 [task-get-current-symbol()]
0022   0x0196E0   4A 06 0A 00   LoadStaticU64Imm    r6, 10         r6 = ST[10] -> <self>
0023   0x0196E8   43 31 04 00   Move                r49, r4        r49 = r4 [current-task]
0024   0x0196F0   43 32 05 00   Move                r50, r5        r50 = r5 [task-get-current-symbol()]
0025   0x0196F8   43 33 06 00   Move                r51, r6        r51 = r6 [self]
0026   0x019700   1C 03 03 03   CallFf              r3, r3, 3      r3 = set-symbol(current-task, task-get-current-symbol(), self)
0027   0x019708   15 03 08 00   LookupPointer       r3, 8          r3 = ST[8] -> <set-symbol>
0028   0x019710   4A 04 0B 00   LoadStaticU64Imm    r4, 11         r4 = ST[11] -> <#220FDE5797DE75AE>
0029   0x019718   43 05 02 00   Move                r5, r2         r5 = r2 [hash-lookup()]
002A   0x019720   4A 06 0A 00   LoadStaticU64Imm    r6, 10         r6 = ST[10] -> <self>
002B   0x019728   43 31 04 00   Move                r49, r4        r49 = r4 [#220FDE5797DE75AE]
002C   0x019730   43 32 05 00   Move                r50, r5        r50 = r5 [hash-lookup()]
002D   0x019738   43 33 06 00   Move                r51, r6        r51 = r6 [self]
002E   0x019740   1C 03 03 03   CallFf              r3, r3, 3      r3 = set-symbol(#220FDE5797DE75AE, hash-lookup(), self)
002F   0x019748   15 03 08 00   LookupPointer       r3, 8          r3 = ST[8] -> <set-symbol>
0030   0x019750   4A 04 0C 00   LoadStaticU64Imm    r4, 12         r4 = ST[12] -> <#355CB666FED58A80>
0031   0x019758   43 05 02 00   Move                r5, r2         r5 = r2 [hash-lookup()]
0032   0x019760   5D 05 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0033   0x019768   3B 05 05 18   IAddImm             r5, r5, 24     r5 = r5 [-1795405222] / 24 -> <-1795405222>
0034   0x019770   0F 05 05 00   LoadPointer         r5, [r5]       r5 = [0x0 + 0x0]
0035   0x019778   4A 06 0A 00   LoadStaticU64Imm    r6, 10         r6 = ST[10] -> <self>
0036   0x019780   43 31 04 00   Move                r49, r4        r49 = r4 [#355CB666FED58A80]
0037   0x019788   43 32 05 00   Move                r50, r5        r50 = r5 [0x0]
0038   0x019790   43 33 06 00   Move                r51, r6        r51 = r6 [self]
0039   0x019798   1C 03 03 03   CallFf              r3, r3, 3      r3 = set-symbol(#355CB666FED58A80, 0x0, self)
003A   0x0197A0   15 03 03 00   LookupPointer       r3, 3          r3 = ST[3] -> <is-final-build?>
003B   0x0197A8   1C 03 03 00   CallFf              r3, r3, 0      r3 = is-final-build?()
003C   0x0197B0   30 03 03 00   OpLogNot            r3, r3         r3 = !r3 -> <TRUE>
003D   0x0197B8   2F 51 03 00   BranchIfNot         r3, 0051       IF NOT r3 [0x6620ACB7] => L_3
003E   0x0197C0   15 03 04 00   LookupPointer       r3, 4          r3 = ST[4] -> <display>
003F   0x0197C8   15 04 05 00   LookupPointer       r4, 5          r4 = ST[5] -> <#5445173390656D6D>
0040   0x0197D0   41 05 0D 00   LoadStaticPointerImmr5, 13         r5 = ST[13] -> <0xBF026BEB>
0041   0x0197D8   41 06 07 00   LoadStaticPointerImmr6, 7          r6 = ST[7] -> <0xBF025EFC>
0042   0x0197E0   41 07 0E 00   LoadStaticPointerImmr7, 14         r7 = ST[14] -> <0xBF027645>
0043   0x0197E8   15 08 0F 00   LookupPointer       r8, 15         r8 = ST[15] -> <string-debug>
0044   0x0197F0   43 09 00 00   Move                r9, r0         r9 = r0 [task-get-current-symbol()]
0045   0x0197F8   43 31 09 00   Move                r49, r9        r49 = r9 [task-get-current-symbol()]
0046   0x019800   1C 08 08 01   CallFf              r8, r8, 1      r8 = string-debug(task-get-current-symbol())
0047   0x019808   43 31 05 00   Move                r49, r5        r49 = r5 [0xBF026BEB]
0048   0x019810   43 32 06 00   Move                r50, r6        r50 = r6 [0xBF025EFC]
0049   0x019818   43 33 07 00   Move                r51, r7        r51 = r7 [0xBF027645]
004A   0x019820   43 34 08 00   Move                r52, r8        r52 = r8 [string-debug()]
004B   0x019828   1C 04 04 04   CallFf              r4, r4, 4      r4 = #5445173390656D6D(0xBF026BEB, 0xBF025EFC, 0xBF027645, string-debug())
004C   0x019830   0C 05 13 00   LoadU16Imm          r5, 19         r5 = 19
004D   0x019838   43 31 04 00   Move                r49, r4        r49 = r4 [#5445173390656D6D()]
004E   0x019840   43 32 05 00   Move                r50, r5        r50 = r5 [19]
004F   0x019848   1C 03 03 02   CallFf              r3, r3, 2      r3 = display(#5445173390656D6D(), 19)
0050   0x019850   2D 52 00 00   Branch              0052           => L_4
L_3:
0051   0x019858   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
L_4:
0052   0x019860   15 03 03 00   LookupPointer       r3, 3          r3 = ST[3] -> <is-final-build?>
0053   0x019868   1C 03 03 00   CallFf              r3, r3, 0      r3 = is-final-build?()
0054   0x019870   30 03 03 00   OpLogNot            r3, r3         r3 = !r3 -> <TRUE>
0055   0x019878   2F 6E 03 00   BranchIfNot         r3, 006E       IF NOT r3 [0x6620ACB7] => L_5
0056   0x019880   15 03 04 00   LookupPointer       r3, 4          r3 = ST[4] -> <display>
0057   0x019888   15 04 05 00   LookupPointer       r4, 5          r4 = ST[5] -> <#5445173390656D6D>
0058   0x019890   41 05 0D 00   LoadStaticPointerImmr5, 13         r5 = ST[13] -> <0xBF026BEB>
0059   0x019898   41 06 07 00   LoadStaticPointerImmr6, 7          r6 = ST[7] -> <0xBF025EFC>
005A   0x0198A0   41 07 10 00   LoadStaticPointerImmr7, 16         r7 = ST[16] -> <0xBF0274A7>
005B   0x0198A8   15 08 11 00   LookupPointer       r8, 17         r8 = ST[17] -> <#D14395D282B18D18>
005C   0x0198B0   15 09 12 00   LookupPointer       r9, 18         r9 = ST[18] -> <get-symbol>
005D   0x0198B8   4A 0A 0C 00   LoadStaticU64Imm    r10, 12        r10 = ST[12] -> <#355CB666FED58A80>
005E   0x0198C0   4A 0B 0A 00   LoadStaticU64Imm    r11, 10        r11 = ST[10] -> <self>
005F   0x0198C8   43 31 0A 00   Move                r49, r10       r49 = r10 [#355CB666FED58A80]
0060   0x0198D0   43 32 0B 00   Move                r50, r11       r50 = r11 [self]
0061   0x0198D8   1C 09 09 02   CallFf              r9, r9, 2      r9 = get-symbol(#355CB666FED58A80, self)
0062   0x0198E0   43 31 09 00   Move                r49, r9        r49 = r9 [get-symbol()]
0063   0x0198E8   1B 08 08 01   Call                r8, r8, 1      r8 = #D14395D282B18D18(get-symbol())
0064   0x0198F0   43 31 05 00   Move                r49, r5        r49 = r5 [0xBF026BEB]
0065   0x0198F8   43 32 06 00   Move                r50, r6        r50 = r6 [0xBF025EFC]
0066   0x019900   43 33 07 00   Move                r51, r7        r51 = r7 [0xBF0274A7]
0067   0x019908   43 34 08 00   Move                r52, r8        r52 = r8 [#D14395D282B18D18()]
0068   0x019910   1C 04 04 04   CallFf              r4, r4, 4      r4 = #5445173390656D6D(0xBF026BEB, 0xBF025EFC, 0xBF0274A7, #D14395D282B18D18())
0069   0x019918   0C 05 13 00   LoadU16Imm          r5, 19         r5 = 19
006A   0x019920   43 31 04 00   Move                r49, r4        r49 = r4 [#5445173390656D6D()]
006B   0x019928   43 32 05 00   Move                r50, r5        r50 = r5 [19]
006C   0x019930   1C 03 03 02   CallFf              r3, r3, 2      r3 = display(#5445173390656D6D(), 19)
006D   0x019938   2D 6F 00 00   Branch              006F           => L_6
L_5:
006E   0x019940   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
L_6:
006F   0x019948   15 03 13 00   LookupPointer       r3, 19         r3 = ST[19] -> <go>
0070   0x019950   4A 04 14 00   LoadStaticU64Imm    r4, 20         r4 = ST[20] -> <setup-encounter-intensity>
0071   0x019958   0C 05 01 00   LoadU16Imm          r5, 1          r5 = 1
0072   0x019960   43 31 04 00   Move                r49, r4        r49 = r4 [setup-encounter-intensity]
0073   0x019968   43 32 05 00   Move                r50, r5        r50 = r5 [1]
0074   0x019970   1C 03 03 02   CallFf              r3, r3, 2      r3 = go(setup-encounter-intensity, 1)
0075   0x019978   2D A5 00 00   Branch              00A5           => L_7
L_0:
0076   0x019980   15 03 03 00   LookupPointer       r3, 3          r3 = ST[3] -> <is-final-build?>
0077   0x019988   1C 03 03 00   CallFf              r3, r3, 0      r3 = is-final-build?()
0078   0x019990   30 03 03 00   OpLogNot            r3, r3         r3 = !r3 -> <TRUE>
0079   0x019998   2F 86 03 00   BranchIfNot         r3, 0086       IF NOT r3 [0x6620ACB7] => L_8
007A   0x0199A0   15 03 04 00   LookupPointer       r3, 4          r3 = ST[4] -> <display>
007B   0x0199A8   15 04 05 00   LookupPointer       r4, 5          r4 = ST[5] -> <#5445173390656D6D>
007C   0x0199B0   41 05 15 00   LoadStaticPointerImmr5, 21         r5 = ST[21] -> <0xBF02616C>
007D   0x0199B8   41 06 07 00   LoadStaticPointerImmr6, 7          r6 = ST[7] -> <0xBF025EFC>
007E   0x0199C0   43 31 05 00   Move                r49, r5        r49 = r5 [0xBF02616C]
007F   0x0199C8   43 32 06 00   Move                r50, r6        r50 = r6 [0xBF025EFC]
0080   0x0199D0   1C 04 04 02   CallFf              r4, r4, 2      r4 = #5445173390656D6D(0xBF02616C, 0xBF025EFC)
0081   0x0199D8   0C 05 13 00   LoadU16Imm          r5, 19         r5 = 19
0082   0x0199E0   43 31 04 00   Move                r49, r4        r49 = r4 [#5445173390656D6D()]
0083   0x0199E8   43 32 05 00   Move                r50, r5        r50 = r5 [19]
0084   0x0199F0   1C 03 03 02   CallFf              r3, r3, 2      r3 = display(#5445173390656D6D(), 19)
0085   0x0199F8   2D 87 00 00   Branch              0087           => L_9
L_8:
0086   0x019A00   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
L_9:
0087   0x019A08   15 03 03 00   LookupPointer       r3, 3          r3 = ST[3] -> <is-final-build?>
0088   0x019A10   1C 03 03 00   CallFf              r3, r3, 0      r3 = is-final-build?()
0089   0x019A18   30 03 03 00   OpLogNot            r3, r3         r3 = !r3 -> <TRUE>
008A   0x019A20   2F 9E 03 00   BranchIfNot         r3, 009E       IF NOT r3 [0x6620ACB7] => L_10
008B   0x019A28   15 03 04 00   LookupPointer       r3, 4          r3 = ST[4] -> <display>
008C   0x019A30   15 04 05 00   LookupPointer       r4, 5          r4 = ST[5] -> <#5445173390656D6D>
008D   0x019A38   41 05 0D 00   LoadStaticPointerImmr5, 13         r5 = ST[13] -> <0xBF026BEB>
008E   0x019A40   41 06 07 00   LoadStaticPointerImmr6, 7          r6 = ST[7] -> <0xBF025EFC>
008F   0x019A48   41 07 0E 00   LoadStaticPointerImmr7, 14         r7 = ST[14] -> <0xBF027645>
0090   0x019A50   15 08 0F 00   LookupPointer       r8, 15         r8 = ST[15] -> <string-debug>
0091   0x019A58   43 09 00 00   Move                r9, r0         r9 = r0 [task-get-current-symbol]
0092   0x019A60   43 31 09 00   Move                r49, r9        r49 = r9 [task-get-current-symbol]
0093   0x019A68   1C 08 08 01   CallFf              r8, r8, 1      r8 = string-debug(task-get-current-symbol)
0094   0x019A70   43 31 05 00   Move                r49, r5        r49 = r5 [0xBF026BEB]
0095   0x019A78   43 32 06 00   Move                r50, r6        r50 = r6 [0xBF025EFC]
0096   0x019A80   43 33 07 00   Move                r51, r7        r51 = r7 [0xBF027645]
0097   0x019A88   43 34 08 00   Move                r52, r8        r52 = r8 [string-debug()]
0098   0x019A90   1C 04 04 04   CallFf              r4, r4, 4      r4 = #5445173390656D6D(0xBF026BEB, 0xBF025EFC, 0xBF027645, string-debug())
0099   0x019A98   0C 05 13 00   LoadU16Imm          r5, 19         r5 = 19
009A   0x019AA0   43 31 04 00   Move                r49, r4        r49 = r4 [#5445173390656D6D()]
009B   0x019AA8   43 32 05 00   Move                r50, r5        r50 = r5 [19]
009C   0x019AB0   1C 03 03 02   CallFf              r3, r3, 2      r3 = display(#5445173390656D6D(), 19)
009D   0x019AB8   2D 9F 00 00   Branch              009F           => L_11
L_10:
009E   0x019AC0   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
L_11:
009F   0x019AC8   15 03 13 00   LookupPointer       r3, 19         r3 = ST[19] -> <go>
00A0   0x019AD0   4A 04 16 00   LoadStaticU64Imm    r4, 22         r4 = ST[22] -> <done>
00A1   0x019AD8   0C 05 01 00   LoadU16Imm          r5, 1          r5 = 1
00A2   0x019AE0   43 31 04 00   Move                r49, r4        r49 = r4 [done]
00A3   0x019AE8   43 32 05 00   Move                r50, r5        r50 = r5 [1]
00A4   0x019AF0   1C 03 03 02   CallFf              r3, r3, 2      r3 = go(done, 1)
L_7:
00A5   0x019AF8   43 03 03 00   Move                r3, r3         r3 = r3 [go()]
00A6   0x019B00   43 02 03 00   Move                r2, r3         r2 = r3 [go]
00A7   0x019B08   43 01 02 00   Move                r1, r2         r1 = r2 [go]
00A8   0x019B10   43 00 01 00   Move                r0, r1         r0 = r1 [go]
00A9   0x019B18   00 00 00 00   Return              r0             Return go
SYMBOL TABLE: 
0000   0x019B20    POINTER <task-get-current-symbol>
0001   0x019B28    POINTER <hash-lookup>
0002   0x019B30    POINTER <#A33FEB662FEAAB48>
0003   0x019B38    POINTER <is-final-build?>
0004   0x019B40    POINTER <display>
0005   0x019B48    POINTER <#5445173390656D6D>
0006   0x019B50    POINTER <#00000282BF026B4A>
0007   0x019B58    POINTER <#00000282BF025EFC>
0008   0x019B60    POINTER <set-symbol>
0009   0x019B68    SID <current-task>
000A   0x019B70    SID <self>
000B   0x019B78    SID <#220FDE5797DE75AE>
000C   0x019B80    SID <#355CB666FED58A80>
000D   0x019B88    POINTER <#00000282BF026BEB>
000E   0x019B90    POINTER <#00000282BF027645>
000F   0x019B98    POINTER <string-debug>
0010   0x019BA0    POINTER <#00000282BF0274A7>
0011   0x019BA8    POINTER <#D14395D282B18D18>
0012   0x019BB0    POINTER <get-symbol>
0013   0x019BB8    POINTER <go>
0014   0x019BC0    SID <setup-encounter-intensity>
0015   0x019BC8    POINTER <#00000282BF02616C>
0016   0x019BD0    SID <done>
      STATE setup-encounter-intensity:
         ON start
          TRACK main:
0000   0x011E18   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <is-final-build?>
0001   0x011E20   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0002   0x011E28   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0003   0x011E30   2F 0E 00 00   BranchIfNot         r0, 000E       IF NOT r0 [0x6620ACB7] => L_0
0004   0x011E38   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <display>
0005   0x011E40   15 01 02 00   LookupPointer       r1, 2          r1 = ST[2] -> <#5445173390656D6D>
0006   0x011E48   41 02 03 00   LoadStaticPointerImmr2, 3          r2 = ST[3] -> <0xBF027110>
0007   0x011E50   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF027110]
0008   0x011E58   1C 01 01 01   CallFf              r1, r1, 1      r1 = #5445173390656D6D(0xBF027110)
0009   0x011E60   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
000A   0x011E68   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
000B   0x011E70   43 32 02 00   Move                r50, r2        r50 = r2 [19]
000C   0x011E78   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
000D   0x011E80   2D 0F 00 00   Branch              000F           => L_RETURN
L_0:
000E   0x011E88   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
000F   0x011E90   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x011E98    POINTER <is-final-build?>
0001   0x011EA0    POINTER <display>
0002   0x011EA8    POINTER <#5445173390656D6D>
0003   0x011EB0    POINTER <#00000282BF027110>
0000   0x00BBA0   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <#B96C7EEF7ACAB122>
0001   0x00BBA8   2F 08 00 00   BranchIfNot         r0, 0008       IF NOT r0 [0x7ACAB122] => L_0
0002   0x00BBB0   15 00 00 01   LookupPointer       r0, 0          r0 = ST[0] -> <#B96C7EEF7ACAB122>
0003   0x00BBB8   5D 00 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0004   0x00BBC0   3B 00 00 18   IAddImm             r0, r0, 24     r0 = r0 [628448204] / 24 -> <628448204>
0005   0x00BBC8   4F 00 00 00   LoadI32             ???            UNKNOWN INSTRUCTION
0006   0x00BBD0   3F 01 01 00   LoadStaticI32Imm    r1, 1          r1 = ST[1] -> <-1>
0007   0x00BBD8   1E 00 00 01   IGreaterThan        r0, r0, r1     r0 = r0 [628448001] > r1 [-1]
L_0:
0008   0x00BBE0   2F 5D 00 00   BranchIfNot         r0, 005D       IF NOT r0 [0x25755B01] => L_1
0009   0x00BBE8   15 00 02 00   LookupPointer       r0, 2          r0 = ST[2] -> <set-int32>
000A   0x00BBF0   4A 01 03 00   LoadStaticU64Imm    r1, 3          r1 = ST[3] -> <#CEF93DF859F605EA>
000B   0x00BBF8   15 02 00 01   LookupPointer       r2, 0          r2 = ST[0] -> <#B96C7EEF7ACAB122>
000C   0x00BC00   5D 02 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
000D   0x00BC08   3B 02 02 18   IAddImm             r2, r2, 24     r2 = r2 [628448204] / 24 -> <628448204>
000E   0x00BC10   4F 02 02 00   LoadI32             ???            UNKNOWN INSTRUCTION
000F   0x00BC18   4A 03 04 00   LoadStaticU64Imm    r3, 4          r3 = ST[4] -> <self>
0010   0x00BC20   43 31 01 00   Move                r49, r1        r49 = r1 [#CEF93DF859F605EA]
0011   0x00BC28   43 32 02 00   Move                r50, r2        r50 = r2 [628448204]
0012   0x00BC30   43 33 03 00   Move                r51, r3        r51 = r3 [self]
0013   0x00BC38   1C 00 00 03   CallFf              r0, r0, 3      r0 = set-int32(#CEF93DF859F605EA, 628448204, self)
0014   0x00BC40   15 00 02 00   LookupPointer       r0, 2          r0 = ST[2] -> <set-int32>
0015   0x00BC48   4A 01 03 00   LoadStaticU64Imm    r1, 3          r1 = ST[3] -> <#CEF93DF859F605EA>
0016   0x00BC50   15 02 05 00   LookupPointer       r2, 5          r2 = ST[5] -> <get-int32>
0017   0x00BC58   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <#CEF93DF859F605EA>
0018   0x00BC60   4A 04 04 00   LoadStaticU64Imm    r4, 4          r4 = ST[4] -> <self>
0019   0x00BC68   43 31 03 00   Move                r49, r3        r49 = r3 [#CEF93DF859F605EA]
001A   0x00BC70   43 32 04 00   Move                r50, r4        r50 = r4 [self]
001B   0x00BC78   1C 02 02 02   CallFf              r2, r2, 2      r2 = get-int32(#CEF93DF859F605EA, self)
001C   0x00BC80   0C 03 01 00   LoadU16Imm          r3, 1          r3 = 1
001D   0x00BC88   1E 02 02 03   IGreaterThan        r2, r2, r3     r2 = r2 [-635293440] > r3 [1]
001E   0x00BC90   2F 26 02 00   BranchIfNot         r2, 0026       IF NOT r2 [0xDA223100] => L_2
001F   0x00BC98   15 02 05 00   LookupPointer       r2, 5          r2 = ST[5] -> <get-int32>
0020   0x00BCA0   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <#CEF93DF859F605EA>
0021   0x00BCA8   4A 04 04 00   LoadStaticU64Imm    r4, 4          r4 = ST[4] -> <self>
0022   0x00BCB0   43 31 03 00   Move                r49, r3        r49 = r3 [#CEF93DF859F605EA]
0023   0x00BCB8   43 32 04 00   Move                r50, r4        r50 = r4 [self]
0024   0x00BCC0   1C 02 02 02   CallFf              r2, r2, 2      r2 = get-int32(#CEF93DF859F605EA, self)
0025   0x00BCC8   2D 27 00 00   Branch              0027           => L_3
L_2:
0026   0x00BCD0   0C 02 01 00   LoadU16Imm          r2, 1          r2 = 1
L_3:
0027   0x00BCD8   0C 03 06 00   LoadU16Imm          r3, 6          r3 = 6
0028   0x00BCE0   20 02 02 03   ILessThan           r2, r2, r3     r2 = r2 [1] < r3 [6]
0029   0x00BCE8   2F 3C 02 00   BranchIfNot         r2, 003C       IF NOT r2 [0x1] => L_4
002A   0x00BCF0   15 02 05 00   LookupPointer       r2, 5          r2 = ST[5] -> <get-int32>
002B   0x00BCF8   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <#CEF93DF859F605EA>
002C   0x00BD00   4A 04 04 00   LoadStaticU64Imm    r4, 4          r4 = ST[4] -> <self>
002D   0x00BD08   43 31 03 00   Move                r49, r3        r49 = r3 [#CEF93DF859F605EA]
002E   0x00BD10   43 32 04 00   Move                r50, r4        r50 = r4 [self]
002F   0x00BD18   1C 02 02 02   CallFf              r2, r2, 2      r2 = get-int32(#CEF93DF859F605EA, self)
0030   0x00BD20   0C 03 01 00   LoadU16Imm          r3, 1          r3 = 1
0031   0x00BD28   1E 02 02 03   IGreaterThan        r2, r2, r3     r2 = r2 [-635293440] > r3 [1]
0032   0x00BD30   2F 3A 02 00   BranchIfNot         r2, 003A       IF NOT r2 [0xDA223100] => L_5
0033   0x00BD38   15 02 05 00   LookupPointer       r2, 5          r2 = ST[5] -> <get-int32>
0034   0x00BD40   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <#CEF93DF859F605EA>
0035   0x00BD48   4A 04 04 00   LoadStaticU64Imm    r4, 4          r4 = ST[4] -> <self>
0036   0x00BD50   43 31 03 00   Move                r49, r3        r49 = r3 [#CEF93DF859F605EA]
0037   0x00BD58   43 32 04 00   Move                r50, r4        r50 = r4 [self]
0038   0x00BD60   1C 02 02 02   CallFf              r2, r2, 2      r2 = get-int32(#CEF93DF859F605EA, self)
0039   0x00BD68   2D 3B 00 00   Branch              003B           => L_6
L_5:
003A   0x00BD70   0C 02 01 00   LoadU16Imm          r2, 1          r2 = 1
L_6:
003B   0x00BD78   2D 3D 00 00   Branch              003D           => L_7
L_4:
003C   0x00BD80   0C 02 06 00   LoadU16Imm          r2, 6          r2 = 6
L_7:
003D   0x00BD88   4A 03 04 00   LoadStaticU64Imm    r3, 4          r3 = ST[4] -> <self>
003E   0x00BD90   43 31 01 00   Move                r49, r1        r49 = r1 [#CEF93DF859F605EA]
003F   0x00BD98   43 32 02 00   Move                r50, r2        r50 = r2 [6]
0040   0x00BDA0   43 33 03 00   Move                r51, r3        r51 = r3 [self]
0041   0x00BDA8   1C 00 00 03   CallFf              r0, r0, 3      r0 = set-int32(#CEF93DF859F605EA, 6, self)
0042   0x00BDB0   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <#B96C7EEF7ACAB122>
0043   0x00BDB8   3B 00 00 18   IAddImm             r0, r0, 24     r0 = r0 [628448204] / 24 -> <628448204>
0044   0x00BDC0   15 01 05 00   LookupPointer       r1, 5          r1 = ST[5] -> <get-int32>
0045   0x00BDC8   4A 02 03 00   LoadStaticU64Imm    r2, 3          r2 = ST[3] -> <#CEF93DF859F605EA>
0046   0x00BDD0   4A 03 04 00   LoadStaticU64Imm    r3, 4          r3 = ST[4] -> <self>
0047   0x00BDD8   43 31 02 00   Move                r49, r2        r49 = r2 [#CEF93DF859F605EA]
0048   0x00BDE0   43 32 03 00   Move                r50, r3        r50 = r3 [self]
0049   0x00BDE8   1C 01 01 02   CallFf              r1, r1, 2      r1 = get-int32(#CEF93DF859F605EA, self)
004A   0x00BDF0   56 00 00 01   StoreI32            ???            UNKNOWN INSTRUCTION
004B   0x00BDF8   15 00 06 00   LookupPointer       r0, 6          r0 = ST[6] -> <is-final-build?>
004C   0x00BE00   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
004D   0x00BE08   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
004E   0x00BE10   2F 5B 00 00   BranchIfNot         r0, 005B       IF NOT r0 [0x6620ACB7] => L_8
004F   0x00BE18   15 00 07 00   LookupPointer       r0, 7          r0 = ST[7] -> <display>
0050   0x00BE20   15 01 08 00   LookupPointer       r1, 8          r1 = ST[8] -> <#5445173390656D6D>
0051   0x00BE28   41 02 09 00   LoadStaticPointerImmr2, 9          r2 = ST[9] -> <0xBF0261A5>
0052   0x00BE30   41 03 0A 00   LoadStaticPointerImmr3, 10         r3 = ST[10] -> <0xBF025EFC>
0053   0x00BE38   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF0261A5]
0054   0x00BE40   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
0055   0x00BE48   1C 01 01 02   CallFf              r1, r1, 2      r1 = #5445173390656D6D(0xBF0261A5, 0xBF025EFC)
0056   0x00BE50   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
0057   0x00BE58   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
0058   0x00BE60   43 32 02 00   Move                r50, r2        r50 = r2 [19]
0059   0x00BE68   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
005A   0x00BE70   2D 5C 00 00   Branch              005C           => L_9
L_8:
005B   0x00BE78   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_9:
005C   0x00BE80   2D C4 00 00   Branch              00C4           => L_RETURN
L_1:
005D   0x00BE88   15 00 0B 00   LookupPointer       r0, 11         r0 = ST[11] -> <get-symbol>
005E   0x00BE90   4A 01 0C 00   LoadStaticU64Imm    r1, 12         r1 = ST[12] -> <current-task>
005F   0x00BE98   4A 02 04 00   LoadStaticU64Imm    r2, 4          r2 = ST[4] -> <self>
0060   0x00BEA0   43 31 01 00   Move                r49, r1        r49 = r1 [current-task]
0061   0x00BEA8   43 32 02 00   Move                r50, r2        r50 = r2 [self]
0062   0x00BEB0   1C 00 00 02   CallFf              r0, r0, 2      r0 = get-symbol(current-task, self)
0063   0x00BEB8   15 01 0B 00   LookupPointer       r1, 11         r1 = ST[11] -> <get-symbol>
0064   0x00BEC0   4A 02 0C 00   LoadStaticU64Imm    r2, 12         r2 = ST[12] -> <current-task>
0065   0x00BEC8   4A 03 0D 00   LoadStaticU64Imm    r3, 13         r3 = ST[13] -> <ss-wave-manager-level-set-loader-1>
0066   0x00BED0   43 31 02 00   Move                r49, r2        r49 = r2 [current-task]
0067   0x00BED8   43 32 03 00   Move                r50, r3        r50 = r3 [ss-wave-manager-level-set-loader-1]
0068   0x00BEE0   1C 01 01 02   CallFf              r1, r1, 2      r1 = get-symbol(current-task, ss-wave-manager-level-set-loader-1)
0069   0x00BEE8   1D 00 00 01   IEqual              r0, r0, r1     r0 = r0 [1774822657] == r1 [1774822854]
006A   0x00BEF0   2F 71 00 00   BranchIfNot         r0, 0071       IF NOT r0 [0x69C9A501] => L_11
006B   0x00BEF8   15 00 0E 00   LookupPointer       r0, 14         r0 = ST[14] -> <get-boolean>
006C   0x00BF00   4A 01 0F 00   LoadStaticU64Imm    r1, 15         r1 = ST[15] -> <#B0E4DDF4A79D13AC>
006D   0x00BF08   4A 02 0D 00   LoadStaticU64Imm    r2, 13         r2 = ST[13] -> <ss-wave-manager-level-set-loader-1>
006E   0x00BF10   43 31 01 00   Move                r49, r1        r49 = r1 [#B0E4DDF4A79D13AC]
006F   0x00BF18   43 32 02 00   Move                r50, r2        r50 = r2 [ss-wave-manager-level-set-loader-1]
0070   0x00BF20   1C 00 00 02   CallFf              r0, r0, 2      r0 = get-boolean(#B0E4DDF4A79D13AC, ss-wave-manager-level-set-loader-1)
L_11:
0071   0x00BF28   2F B3 00 00   BranchIfNot         r0, 00B3       IF NOT r0 [get-boolean()] => L_12
0072   0x00BF30   15 00 10 00   LookupPointer       r0, 16         r0 = ST[16] -> <set-svar>
0073   0x00BF38   4A 01 11 00   LoadStaticU64Imm    r1, 17         r1 = ST[17] -> <#F241E2677130BCDD>
0074   0x00BF40   0C 02 01 00   LoadU16Imm          r2, 1          r2 = 1
0075   0x00BF48   15 03 12 00   LookupPointer       r3, 18         r3 = ST[18] -> <#D0C36F5FBEE9A664>
0076   0x00BF50   1B 03 03 00   Call                r3, r3, 0      r3 = #D0C36F5FBEE9A664()
0077   0x00BF58   01 02 02 03   IAdd                r2, r2, r3     -1091983771 = 1 + #D0C36F5FBEE9A664()
0078   0x00BF60   43 31 01 00   Move                r49, r1        r49 = r1 [#F241E2677130BCDD]
0079   0x00BF68   43 32 02 00   Move                r50, r2        r50 = r2 [-1091983771]
007A   0x00BF70   1B 00 00 02   Call                r0, r0, 2      r0 = set-svar(#F241E2677130BCDD, -1091983771)
007B   0x00BF78   15 00 02 00   LookupPointer       r0, 2          r0 = ST[2] -> <set-int32>
007C   0x00BF80   4A 01 03 00   LoadStaticU64Imm    r1, 3          r1 = ST[3] -> <#CEF93DF859F605EA>
007D   0x00BF88   15 02 13 00   LookupPointer       r2, 19         r2 = ST[19] -> <get-svar>
007E   0x00BF90   4A 03 11 00   LoadStaticU64Imm    r3, 17         r3 = ST[17] -> <#F241E2677130BCDD>
007F   0x00BF98   43 31 03 00   Move                r49, r3        r49 = r3 [#F241E2677130BCDD]
0080   0x00BFA0   1B 02 02 01   Call                r2, r2, 1      r2 = get-svar(#F241E2677130BCDD)
0081   0x00BFA8   0C 03 01 00   LoadU16Imm          r3, 1          r3 = 1
0082   0x00BFB0   1E 02 02 03   IGreaterThan        r2, r2, r3     r2 = r2 [-547918080] > r3 [1]
0083   0x00BFB8   2F 89 02 00   BranchIfNot         r2, 0089       IF NOT r2 [0xDF576F00] => L_13
0084   0x00BFC0   15 02 13 00   LookupPointer       r2, 19         r2 = ST[19] -> <get-svar>
0085   0x00BFC8   4A 03 11 00   LoadStaticU64Imm    r3, 17         r3 = ST[17] -> <#F241E2677130BCDD>
0086   0x00BFD0   43 31 03 00   Move                r49, r3        r49 = r3 [#F241E2677130BCDD]
0087   0x00BFD8   1B 02 02 01   Call                r2, r2, 1      r2 = get-svar(#F241E2677130BCDD)
0088   0x00BFE0   2D 8A 00 00   Branch              008A           => L_14
L_13:
0089   0x00BFE8   0C 02 01 00   LoadU16Imm          r2, 1          r2 = 1
L_14:
008A   0x00BFF0   0C 03 06 00   LoadU16Imm          r3, 6          r3 = 6
008B   0x00BFF8   20 02 02 03   ILessThan           r2, r2, r3     r2 = r2 [1] < r3 [6]
008C   0x00C000   2F 9B 02 00   BranchIfNot         r2, 009B       IF NOT r2 [0x1] => L_15
008D   0x00C008   15 02 13 00   LookupPointer       r2, 19         r2 = ST[19] -> <get-svar>
008E   0x00C010   4A 03 11 00   LoadStaticU64Imm    r3, 17         r3 = ST[17] -> <#F241E2677130BCDD>
008F   0x00C018   43 31 03 00   Move                r49, r3        r49 = r3 [#F241E2677130BCDD]
0090   0x00C020   1B 02 02 01   Call                r2, r2, 1      r2 = get-svar(#F241E2677130BCDD)
0091   0x00C028   0C 03 01 00   LoadU16Imm          r3, 1          r3 = 1
0092   0x00C030   1E 02 02 03   IGreaterThan        r2, r2, r3     r2 = r2 [-547918080] > r3 [1]
0093   0x00C038   2F 99 02 00   BranchIfNot         r2, 0099       IF NOT r2 [0xDF576F00] => L_16
0094   0x00C040   15 02 13 00   LookupPointer       r2, 19         r2 = ST[19] -> <get-svar>
0095   0x00C048   4A 03 11 00   LoadStaticU64Imm    r3, 17         r3 = ST[17] -> <#F241E2677130BCDD>
0096   0x00C050   43 31 03 00   Move                r49, r3        r49 = r3 [#F241E2677130BCDD]
0097   0x00C058   1B 02 02 01   Call                r2, r2, 1      r2 = get-svar(#F241E2677130BCDD)
0098   0x00C060   2D 9A 00 00   Branch              009A           => L_17
L_16:
0099   0x00C068   0C 02 01 00   LoadU16Imm          r2, 1          r2 = 1
L_17:
009A   0x00C070   2D 9C 00 00   Branch              009C           => L_18
L_15:
009B   0x00C078   0C 02 06 00   LoadU16Imm          r2, 6          r2 = 6
L_18:
009C   0x00C080   4A 03 04 00   LoadStaticU64Imm    r3, 4          r3 = ST[4] -> <self>
009D   0x00C088   43 31 01 00   Move                r49, r1        r49 = r1 [#CEF93DF859F605EA]
009E   0x00C090   43 32 02 00   Move                r50, r2        r50 = r2 [6]
009F   0x00C098   43 33 03 00   Move                r51, r3        r51 = r3 [self]
00A0   0x00C0A0   1C 00 00 03   CallFf              r0, r0, 3      r0 = set-int32(#CEF93DF859F605EA, 6, self)
00A1   0x00C0A8   15 00 06 00   LookupPointer       r0, 6          r0 = ST[6] -> <is-final-build?>
00A2   0x00C0B0   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
00A3   0x00C0B8   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
00A4   0x00C0C0   2F B1 00 00   BranchIfNot         r0, 00B1       IF NOT r0 [0x6620ACB7] => L_19
00A5   0x00C0C8   15 00 07 00   LookupPointer       r0, 7          r0 = ST[7] -> <display>
00A6   0x00C0D0   15 01 08 00   LookupPointer       r1, 8          r1 = ST[8] -> <#5445173390656D6D>
00A7   0x00C0D8   41 02 14 00   LoadStaticPointerImmr2, 20         r2 = ST[20] -> <0xBF026449>
00A8   0x00C0E0   41 03 0A 00   LoadStaticPointerImmr3, 10         r3 = ST[10] -> <0xBF025EFC>
00A9   0x00C0E8   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF026449]
00AA   0x00C0F0   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
00AB   0x00C0F8   1C 01 01 02   CallFf              r1, r1, 2      r1 = #5445173390656D6D(0xBF026449, 0xBF025EFC)
00AC   0x00C100   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
00AD   0x00C108   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
00AE   0x00C110   43 32 02 00   Move                r50, r2        r50 = r2 [19]
00AF   0x00C118   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
00B0   0x00C120   2D B2 00 00   Branch              00B2           => L_20
L_19:
00B1   0x00C128   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_20:
00B2   0x00C130   2D C4 00 00   Branch              00C4           => L_RETURN
L_12:
00B3   0x00C138   15 00 06 00   LookupPointer       r0, 6          r0 = ST[6] -> <is-final-build?>
00B4   0x00C140   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
00B5   0x00C148   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
00B6   0x00C150   2F C3 00 00   BranchIfNot         r0, 00C3       IF NOT r0 [0x6620ACB7] => L_21
00B7   0x00C158   15 00 07 00   LookupPointer       r0, 7          r0 = ST[7] -> <display>
00B8   0x00C160   15 01 08 00   LookupPointer       r1, 8          r1 = ST[8] -> <#5445173390656D6D>
00B9   0x00C168   41 02 15 00   LoadStaticPointerImmr2, 21         r2 = ST[21] -> <0xBF0261D2>
00BA   0x00C170   41 03 0A 00   LoadStaticPointerImmr3, 10         r3 = ST[10] -> <0xBF025EFC>
00BB   0x00C178   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF0261D2]
00BC   0x00C180   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
00BD   0x00C188   1C 01 01 02   CallFf              r1, r1, 2      r1 = #5445173390656D6D(0xBF0261D2, 0xBF025EFC)
00BE   0x00C190   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
00BF   0x00C198   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
00C0   0x00C1A0   43 32 02 00   Move                r50, r2        r50 = r2 [19]
00C1   0x00C1A8   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
00C2   0x00C1B0   2D C4 00 00   Branch              00C4           => L_RETURN
L_21:
00C3   0x00C1B8   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
00C4   0x00C1C0   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x00C1C8    POINTER <#B96C7EEF7ACAB122>
0001   0x00C1D0    INT <-1>
0002   0x00C1D8    POINTER <set-int32>
0003   0x00C1E0    SID <#CEF93DF859F605EA>
0004   0x00C1E8    SID <self>
0005   0x00C1F0    POINTER <get-int32>
0006   0x00C1F8    POINTER <is-final-build?>
0007   0x00C200    POINTER <display>
0008   0x00C208    POINTER <#5445173390656D6D>
0009   0x00C210    POINTER <#00000282BF0261A5>
000A   0x00C218    POINTER <#00000282BF025EFC>
000B   0x00C220    POINTER <get-symbol>
000C   0x00C228    SID <current-task>
000D   0x00C230    SID <ss-wave-manager-level-set-loader-1>
000E   0x00C238    POINTER <get-boolean>
000F   0x00C240    SID <#B0E4DDF4A79D13AC>
0010   0x00C248    POINTER <set-svar>
0011   0x00C250    SID <#F241E2677130BCDD>
0012   0x00C258    POINTER <#D0C36F5FBEE9A664>
0013   0x00C260    POINTER <get-svar>
0014   0x00C268    POINTER <#00000282BF026449>
0015   0x00C270    POINTER <#00000282BF0261D2>
0000   0x00C278   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <is-final-build?>
0001   0x00C280   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0002   0x00C288   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0003   0x00C290   2F 19 00 00   BranchIfNot         r0, 0019       IF NOT r0 [0x6620ACB7] => L_0
0004   0x00C298   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <display>
0005   0x00C2A0   15 01 02 00   LookupPointer       r1, 2          r1 = ST[2] -> <#5445173390656D6D>
0006   0x00C2A8   41 02 03 00   LoadStaticPointerImmr2, 3          r2 = ST[3] -> <0xBF026BD4>
0007   0x00C2B0   41 03 04 00   LoadStaticPointerImmr3, 4          r3 = ST[4] -> <0xBF025EFC>
0008   0x00C2B8   41 04 05 00   LoadStaticPointerImmr4, 5          r4 = ST[5] -> <0xBF0271CB>
0009   0x00C2C0   15 05 06 00   LookupPointer       r5, 6          r5 = ST[6] -> <get-int32>
000A   0x00C2C8   4A 06 07 00   LoadStaticU64Imm    r6, 7          r6 = ST[7] -> <#CEF93DF859F605EA>
000B   0x00C2D0   4A 07 08 00   LoadStaticU64Imm    r7, 8          r7 = ST[8] -> <self>
000C   0x00C2D8   43 31 06 00   Move                r49, r6        r49 = r6 [#CEF93DF859F605EA]
000D   0x00C2E0   43 32 07 00   Move                r50, r7        r50 = r7 [self]
000E   0x00C2E8   1C 05 05 02   CallFf              r5, r5, 2      r5 = get-int32(#CEF93DF859F605EA, self)
000F   0x00C2F0   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF026BD4]
0010   0x00C2F8   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
0011   0x00C300   43 33 04 00   Move                r51, r4        r51 = r4 [0xBF0271CB]
0012   0x00C308   43 34 05 00   Move                r52, r5        r52 = r5 [get-int32()]
0013   0x00C310   1C 01 01 04   CallFf              r1, r1, 4      r1 = #5445173390656D6D(0xBF026BD4, 0xBF025EFC, 0xBF0271CB, get-int32())
0014   0x00C318   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
0015   0x00C320   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
0016   0x00C328   43 32 02 00   Move                r50, r2        r50 = r2 [19]
0017   0x00C330   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
0018   0x00C338   2D 1A 00 00   Branch              001A           => L_RETURN
L_0:
0019   0x00C340   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
001A   0x00C348   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x00C350    POINTER <is-final-build?>
0001   0x00C358    POINTER <display>
0002   0x00C360    POINTER <#5445173390656D6D>
0003   0x00C368    POINTER <#00000282BF026BD4>
0004   0x00C370    POINTER <#00000282BF025EFC>
0005   0x00C378    POINTER <#00000282BF0271CB>
0006   0x00C380    POINTER <get-int32>
0007   0x00C388    SID <#CEF93DF859F605EA>
0008   0x00C390    SID <self>
0000   0x01EC20   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <wait-one-frame>
0001   0x01EC28   1C 00 00 00   CallFf              r0, r0, 0      r0 = wait-one-frame()
0002   0x01EC30   00 00 00 00   Return              r0             Return wait-one-frame()
SYMBOL TABLE: 
0000   0x01EC38    POINTER <wait-one-frame>
0000   0x01EBD8   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <go>
0001   0x01EBE0   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <select-wave-composition>
0002   0x01EBE8   0C 02 01 00   LoadU16Imm          r2, 1          r2 = 1
0003   0x01EBF0   43 31 01 00   Move                r49, r1        r49 = r1 [select-wave-composition]
0004   0x01EBF8   43 32 02 00   Move                r50, r2        r50 = r2 [1]
0005   0x01EC00   1C 00 00 02   CallFf              r0, r0, 2      r0 = go(select-wave-composition, 1)
0006   0x01EC08   00 00 00 00   Return              r0             Return go()
SYMBOL TABLE: 
0000   0x01EC10    POINTER <go>
0001   0x01EC18    SID <select-wave-composition>
      STATE select-wave-composition:
         ON start
          TRACK main:
0000   0x019DC8   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <is-final-build?>
0001   0x019DD0   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0002   0x019DD8   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0003   0x019DE0   2F 0E 00 00   BranchIfNot         r0, 000E       IF NOT r0 [0x6620ACB7] => L_0
0004   0x019DE8   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <display>
0005   0x019DF0   15 01 02 00   LookupPointer       r1, 2          r1 = ST[2] -> <#5445173390656D6D>
0006   0x019DF8   41 02 03 00   LoadStaticPointerImmr2, 3          r2 = ST[3] -> <0xBF027089>
0007   0x019E00   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF027089]
0008   0x019E08   1C 01 01 01   CallFf              r1, r1, 1      r1 = #5445173390656D6D(0xBF027089)
0009   0x019E10   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
000A   0x019E18   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
000B   0x019E20   43 32 02 00   Move                r50, r2        r50 = r2 [19]
000C   0x019E28   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
000D   0x019E30   2D 0F 00 00   Branch              000F           => L_RETURN
L_0:
000E   0x019E38   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
000F   0x019E40   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x019E48    POINTER <is-final-build?>
0001   0x019E50    POINTER <display>
0002   0x019E58    POINTER <#5445173390656D6D>
0003   0x019E60    POINTER <#00000282BF027089>
0000   0x009EA8   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <task-get-current-node-id>
0001   0x009EB0   1C 00 00 00   CallFf              r0, r0, 0      r0 = task-get-current-node-id()
0002   0x009EB8   15 01 01 00   LookupPointer       r1, 1          r1 = ST[1] -> <task-get-current-subnode-id>
0003   0x009EC0   1C 01 01 00   CallFf              r1, r1, 0      r1 = task-get-current-subnode-id()
0004   0x009EC8   15 02 02 00   LookupPointer       r2, 2          r2 = ST[2] -> <#4C4AE611CC6CD157>
0005   0x009ED0   43 03 00 00   Move                r3, r0         r3 = r0 [task-get-current-node-id()]
0006   0x009ED8   43 04 01 00   Move                r4, r1         r4 = r1 [task-get-current-subnode-id()]
0007   0x009EE0   43 31 03 00   Move                r49, r3        r49 = r3 [task-get-current-node-id()]
0008   0x009EE8   43 32 04 00   Move                r50, r4        r50 = r4 [task-get-current-subnode-id()]
0009   0x009EF0   1B 02 02 02   Call                r2, r2, 2      r2 = #4C4AE611CC6CD157(task-get-current-node-id(), task-get-current-subnode-id())
000A   0x009EF8   43 03 02 00   Move                r3, r2         r3 = r2 [#4C4AE611CC6CD157()]
000B   0x009F00   0C 04 00 00   LoadU16Imm          r4, 0          r4 = 0
000C   0x009F08   1E 03 03 04   IGreaterThan        r3, r3, r4     r3 = r3 [-865283839] > r4 [0]
000D   0x009F10   2F 2E 03 00   BranchIfNot         r3, 002E       IF NOT r3 [0xCC6CD101] => L_0
000E   0x009F18   15 03 03 00   LookupPointer       r3, 3          r3 = ST[3] -> <rogue-set-prng-category-seed>
000F   0x009F20   4A 04 04 00   LoadStaticU64Imm    r4, 4          r4 = ST[4] -> <#7DD172077595EB73>
0010   0x009F28   43 05 02 00   Move                r5, r2         r5 = r2 [#4C4AE611CC6CD157()]
0011   0x009F30   43 31 04 00   Move                r49, r4        r49 = r4 [#7DD172077595EB73]
0012   0x009F38   43 32 05 00   Move                r50, r5        r50 = r5 [#4C4AE611CC6CD157()]
0013   0x009F40   1C 03 03 02   CallFf              r3, r3, 2      r3 = rogue-set-prng-category-seed(#7DD172077595EB73, #4C4AE611CC6CD157())
0014   0x009F48   15 03 03 00   LookupPointer       r3, 3          r3 = ST[3] -> <rogue-set-prng-category-seed>
0015   0x009F50   4A 04 05 00   LoadStaticU64Imm    r4, 5          r4 = ST[5] -> <#58F7DA31EC454A91>
0016   0x009F58   43 05 02 00   Move                r5, r2         r5 = r2 [#4C4AE611CC6CD157()]
0017   0x009F60   43 31 04 00   Move                r49, r4        r49 = r4 [#58F7DA31EC454A91]
0018   0x009F68   43 32 05 00   Move                r50, r5        r50 = r5 [#4C4AE611CC6CD157()]
0019   0x009F70   1C 03 03 02   CallFf              r3, r3, 2      r3 = rogue-set-prng-category-seed(#58F7DA31EC454A91, #4C4AE611CC6CD157())
001A   0x009F78   15 03 06 00   LookupPointer       r3, 6          r3 = ST[6] -> <is-final-build?>
001B   0x009F80   1C 03 03 00   CallFf              r3, r3, 0      r3 = is-final-build?()
001C   0x009F88   30 03 03 00   OpLogNot            r3, r3         r3 = !r3 -> <TRUE>
001D   0x009F90   2F 2C 03 00   BranchIfNot         r3, 002C       IF NOT r3 [0x6620ACB7] => L_1
001E   0x009F98   15 03 07 00   LookupPointer       r3, 7          r3 = ST[7] -> <display>
001F   0x009FA0   15 04 08 00   LookupPointer       r4, 8          r4 = ST[8] -> <#5445173390656D6D>
0020   0x009FA8   41 05 09 00   LoadStaticPointerImmr5, 9          r5 = ST[9] -> <0xBF0260C1>
0021   0x009FB0   41 06 0A 00   LoadStaticPointerImmr6, 10         r6 = ST[10] -> <0xBF025EFC>
0022   0x009FB8   41 07 0B 00   LoadStaticPointerImmr7, 11         r7 = ST[11] -> <0xBF026019>
0023   0x009FC0   43 31 05 00   Move                r49, r5        r49 = r5 [0xBF0260C1]
0024   0x009FC8   43 32 06 00   Move                r50, r6        r50 = r6 [0xBF025EFC]
0025   0x009FD0   43 33 07 00   Move                r51, r7        r51 = r7 [0xBF026019]
0026   0x009FD8   1C 04 04 03   CallFf              r4, r4, 3      r4 = #5445173390656D6D(0xBF0260C1, 0xBF025EFC, 0xBF026019)
0027   0x009FE0   0C 05 13 00   LoadU16Imm          r5, 19         r5 = 19
0028   0x009FE8   43 31 04 00   Move                r49, r4        r49 = r4 [#5445173390656D6D()]
0029   0x009FF0   43 32 05 00   Move                r50, r5        r50 = r5 [19]
002A   0x009FF8   1C 03 03 02   CallFf              r3, r3, 2      r3 = display(#5445173390656D6D(), 19)
002B   0x00A000   2D 2D 00 00   Branch              002D           => L_2
L_1:
002C   0x00A008   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
L_2:
002D   0x00A010   2D 41 00 00   Branch              0041           => L_3
L_0:
002E   0x00A018   15 03 06 00   LookupPointer       r3, 6          r3 = ST[6] -> <is-final-build?>
002F   0x00A020   1C 03 03 00   CallFf              r3, r3, 0      r3 = is-final-build?()
0030   0x00A028   30 03 03 00   OpLogNot            r3, r3         r3 = !r3 -> <TRUE>
0031   0x00A030   2F 40 03 00   BranchIfNot         r3, 0040       IF NOT r3 [0x6620ACB7] => L_4
0032   0x00A038   15 03 07 00   LookupPointer       r3, 7          r3 = ST[7] -> <display>
0033   0x00A040   15 04 08 00   LookupPointer       r4, 8          r4 = ST[8] -> <#5445173390656D6D>
0034   0x00A048   41 05 09 00   LoadStaticPointerImmr5, 9          r5 = ST[9] -> <0xBF0260C1>
0035   0x00A050   41 06 0A 00   LoadStaticPointerImmr6, 10         r6 = ST[10] -> <0xBF025EFC>
0036   0x00A058   41 07 0C 00   LoadStaticPointerImmr7, 12         r7 = ST[12] -> <0xBF027575>
0037   0x00A060   43 31 05 00   Move                r49, r5        r49 = r5 [0xBF0260C1]
0038   0x00A068   43 32 06 00   Move                r50, r6        r50 = r6 [0xBF025EFC]
0039   0x00A070   43 33 07 00   Move                r51, r7        r51 = r7 [0xBF027575]
003A   0x00A078   1C 04 04 03   CallFf              r4, r4, 3      r4 = #5445173390656D6D(0xBF0260C1, 0xBF025EFC, 0xBF027575)
003B   0x00A080   0C 05 13 00   LoadU16Imm          r5, 19         r5 = 19
003C   0x00A088   43 31 04 00   Move                r49, r4        r49 = r4 [#5445173390656D6D()]
003D   0x00A090   43 32 05 00   Move                r50, r5        r50 = r5 [19]
003E   0x00A098   1C 03 03 02   CallFf              r3, r3, 2      r3 = display(#5445173390656D6D(), 19)
003F   0x00A0A0   2D 41 00 00   Branch              0041           => L_3
L_4:
0040   0x00A0A8   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
L_3:
0041   0x00A0B0   15 03 06 00   LookupPointer       r3, 6          r3 = ST[6] -> <is-final-build?>
0042   0x00A0B8   1C 03 03 00   CallFf              r3, r3, 0      r3 = is-final-build?()
0043   0x00A0C0   30 03 03 00   OpLogNot            r3, r3         r3 = !r3 -> <TRUE>
0044   0x00A0C8   2F 55 03 00   BranchIfNot         r3, 0055       IF NOT r3 [0x6620ACB7] => L_5
0045   0x00A0D0   15 03 07 00   LookupPointer       r3, 7          r3 = ST[7] -> <display>
0046   0x00A0D8   15 04 08 00   LookupPointer       r4, 8          r4 = ST[8] -> <#5445173390656D6D>
0047   0x00A0E0   41 05 0D 00   LoadStaticPointerImmr5, 13         r5 = ST[13] -> <0xBF026C35>
0048   0x00A0E8   41 06 0A 00   LoadStaticPointerImmr6, 10         r6 = ST[10] -> <0xBF025EFC>
0049   0x00A0F0   41 07 0E 00   LoadStaticPointerImmr7, 14         r7 = ST[14] -> <0xBF0271DF>
004A   0x00A0F8   43 08 02 00   Move                r8, r2         r8 = r2 [#4C4AE611CC6CD157()]
004B   0x00A100   43 31 05 00   Move                r49, r5        r49 = r5 [0xBF026C35]
004C   0x00A108   43 32 06 00   Move                r50, r6        r50 = r6 [0xBF025EFC]
004D   0x00A110   43 33 07 00   Move                r51, r7        r51 = r7 [0xBF0271DF]
004E   0x00A118   43 34 08 00   Move                r52, r8        r52 = r8 [#4C4AE611CC6CD157()]
004F   0x00A120   1C 04 04 04   CallFf              r4, r4, 4      r4 = #5445173390656D6D(0xBF026C35, 0xBF025EFC, 0xBF0271DF, #4C4AE611CC6CD157())
0050   0x00A128   0C 05 13 00   LoadU16Imm          r5, 19         r5 = 19
0051   0x00A130   43 31 04 00   Move                r49, r4        r49 = r4 [#5445173390656D6D()]
0052   0x00A138   43 32 05 00   Move                r50, r5        r50 = r5 [19]
0053   0x00A140   1C 03 03 02   CallFf              r3, r3, 2      r3 = display(#5445173390656D6D(), 19)
0054   0x00A148   2D 56 00 00   Branch              0056           => L_6
L_5:
0055   0x00A150   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
L_6:
0056   0x00A158   43 03 03 00   Move                r3, r3         r3 = r3 [0]
0057   0x00A160   43 02 03 00   Move                r2, r3         r2 = r3 [0]
0058   0x00A168   43 01 02 00   Move                r1, r2         r1 = r2 [0]
0059   0x00A170   43 00 01 00   Move                r0, r1         r0 = r1 [0]
005A   0x00A178   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x00A180    POINTER <task-get-current-node-id>
0001   0x00A188    POINTER <task-get-current-subnode-id>
0002   0x00A190    POINTER <#4C4AE611CC6CD157>
0003   0x00A198    POINTER <rogue-set-prng-category-seed>
0004   0x00A1A0    SID <#7DD172077595EB73>
0005   0x00A1A8    SID <#58F7DA31EC454A91>
0006   0x00A1B0    POINTER <is-final-build?>
0007   0x00A1B8    POINTER <display>
0008   0x00A1C0    POINTER <#5445173390656D6D>
0009   0x00A1C8    POINTER <#00000282BF0260C1>
000A   0x00A1D0    POINTER <#00000282BF025EFC>
000B   0x00A1D8    POINTER <#00000282BF026019>
000C   0x00A1E0    POINTER <#00000282BF027575>
000D   0x00A1E8    POINTER <#00000282BF026C35>
000E   0x00A1F0    POINTER <#00000282BF0271DF>
0000   0x01B9D8   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <get-symbol>
0001   0x01B9E0   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#220FDE5797DE75AE>
0002   0x01B9E8   4A 02 02 00   LoadStaticU64Imm    r2, 2          r2 = ST[2] -> <self>
0003   0x01B9F0   43 31 01 00   Move                r49, r1        r49 = r1 [#220FDE5797DE75AE]
0004   0x01B9F8   43 32 02 00   Move                r50, r2        r50 = r2 [self]
0005   0x01BA00   1C 00 00 02   CallFf              r0, r0, 2      r0 = get-symbol(#220FDE5797DE75AE, self)
0006   0x01BA08   43 01 00 00   Move                r1, r0         r1 = r0 [get-symbol()]
0007   0x01BA10   5D 01 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0008   0x01BA18   0F 01 01 00   LoadPointer         r1, [r1]       r1 = [0x0 + 0x0]
0009   0x01BA20   43 02 00 00   Move                r2, r0         r2 = r0 [get-symbol()]
000A   0x01BA28   5D 02 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
000B   0x01BA30   3B 02 02 08   IAddImm             r2, r2, 8      r2 = r2 [1774822854] / 8 -> <1774822854>
000C   0x01BA38   0F 02 02 00   LoadPointer         r2, [r2]       r2 = [0x0 + 0x0]
000D   0x01BA40   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
000E   0x01BA48   0C 04 00 00   LoadU16Imm          r4, 0          r4 = 0
000F   0x01BA50   43 05 01 00   Move                r5, r1         r5 = r1 [0x0]
0010   0x01BA58   2F 18 05 00   BranchIfNot         r5, 0018       IF NOT r5 [0x0] => L_0
0011   0x01BA60   15 05 03 00   LookupPointer       r5, 3          r5 = ST[3] -> <get-boolean>
0012   0x01BA68   4A 06 04 00   LoadStaticU64Imm    r6, 4          r6 = ST[4] -> <#E13DA8B7F1BF181B>
0013   0x01BA70   4A 07 05 00   LoadStaticU64Imm    r7, 5          r7 = ST[5] -> <ss-wave-manager-level-set-loader-1>
0014   0x01BA78   43 31 06 00   Move                r49, r6        r49 = r6 [#E13DA8B7F1BF181B]
0015   0x01BA80   43 32 07 00   Move                r50, r7        r50 = r7 [ss-wave-manager-level-set-loader-1]
0016   0x01BA88   1C 05 05 02   CallFf              r5, r5, 2      r5 = get-boolean(#E13DA8B7F1BF181B, ss-wave-manager-level-set-loader-1)
0017   0x01BA90   30 05 05 00   OpLogNot            r5, r5         r5 = !r5 -> <TRUE>
L_0:
0018   0x01BA98   2F 38 05 00   BranchIfNot         r5, 0038       IF NOT r5 [0xFC4C4D87] => L_1
0019   0x01BAA0   15 05 06 00   LookupPointer       r5, 6          r5 = ST[6] -> <is-final-build?>
001A   0x01BAA8   1C 05 05 00   CallFf              r5, r5, 0      r5 = is-final-build?()
001B   0x01BAB0   30 05 05 00   OpLogNot            r5, r5         r5 = !r5 -> <TRUE>
001C   0x01BAB8   2F 29 05 00   BranchIfNot         r5, 0029       IF NOT r5 [0x6620ACB7] => L_2
001D   0x01BAC0   15 05 07 00   LookupPointer       r5, 7          r5 = ST[7] -> <display>
001E   0x01BAC8   15 06 08 00   LookupPointer       r6, 8          r6 = ST[8] -> <#5445173390656D6D>
001F   0x01BAD0   41 07 09 00   LoadStaticPointerImmr7, 9          r7 = ST[9] -> <0xBF02675A>
0020   0x01BAD8   41 08 0A 00   LoadStaticPointerImmr8, 10         r8 = ST[10] -> <0xBF025EFC>
0021   0x01BAE0   43 31 07 00   Move                r49, r7        r49 = r7 [0xBF02675A]
0022   0x01BAE8   43 32 08 00   Move                r50, r8        r50 = r8 [0xBF025EFC]
0023   0x01BAF0   1C 06 06 02   CallFf              r6, r6, 2      r6 = #5445173390656D6D(0xBF02675A, 0xBF025EFC)
0024   0x01BAF8   0C 07 13 00   LoadU16Imm          r7, 19         r7 = 19
0025   0x01BB00   43 31 06 00   Move                r49, r6        r49 = r6 [#5445173390656D6D()]
0026   0x01BB08   43 32 07 00   Move                r50, r7        r50 = r7 [19]
0027   0x01BB10   1C 05 05 02   CallFf              r5, r5, 2      r5 = display(#5445173390656D6D(), 19)
0028   0x01BB18   2D 2A 00 00   Branch              002A           => L_3
L_2:
0029   0x01BB20   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
L_3:
002A   0x01BB28   43 05 01 00   Move                r5, r1         r5 = r1 [0x0]
002B   0x01BB30   43 03 05 00   Move                r3, r5         r3 = r5 [0x0]
002C   0x01BB38   43 05 03 00   Move                r5, r3         r5 = r3 [0x0]
002D   0x01BB40   43 05 01 00   Move                r5, r1         r5 = r1 [0x0]
002E   0x01BB48   5D 05 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
002F   0x01BB50   3B 05 05 28   IAddImm             r5, r5, 40     r5 = r5 [0] / 40 -> <0>
0030   0x01BB58   0F 05 05 00   LoadPointer         r5, [r5]       r5 = [0x0 + 0x0]
0031   0x01BB60   0F 05 05 00   LoadPointer         r5, [r5]       r5 = [0x0 + 0x0]
0032   0x01BB68   0C 06 00 00   LoadU16Imm          r6, 0          r6 = 0
0033   0x01BB70   3D 06 06 28   IMulImm             r6, r6, 40     r6 = r6 [0] / 40 -> <0>
0034   0x01BB78   01 05 05 06   IAdd                r5, r5, r6     0x0 = 0x0 + 0
0035   0x01BB80   43 04 05 00   Move                r4, r5         r4 = r5 [0x0]
0036   0x01BB88   43 05 04 00   Move                r5, r4         r5 = r4 [0x0]
0037   0x01BB90   2D D9 00 01   Branch              01D9           => L_4
L_1:
0038   0x01BB98   43 05 02 00   Move                r5, r2         r5 = r2 [0x0]
0039   0x01BBA0   2F B0 05 01   BranchIfNot         r5, 01B0       IF NOT r5 [0x0] => L_5
003A   0x01BBA8   15 05 0B 00   LookupPointer       r5, 11         r5 = ST[11] -> <get-svar>
003B   0x01BBB0   4A 06 0C 00   LoadStaticU64Imm    r6, 12         r6 = ST[12] -> <#B588F9BE19063DAC>
003C   0x01BBB8   43 31 06 00   Move                r49, r6        r49 = r6 [#B588F9BE19063DAC]
003D   0x01BBC0   1B 05 05 01   Call                r5, r5, 1      r5 = get-svar(#B588F9BE19063DAC)
003E   0x01BBC8   15 06 0D 00   LookupPointer       r6, 13         r6 = ST[13] -> <darray-create>
003F   0x01BBD0   4A 07 02 00   LoadStaticU64Imm    r7, 2          r7 = ST[2] -> <self>
0040   0x01BBD8   3F 08 0E 00   LoadStaticI32Imm    r8, 14         r8 = ST[14] -> <-1>
0041   0x01BBE0   0C 09 00 00   LoadU16Imm          r9, 0          r9 = 0
0042   0x01BBE8   43 31 07 00   Move                r49, r7        r49 = r7 [self]
0043   0x01BBF0   43 32 08 00   Move                r50, r8        r50 = r8 [-1]
0044   0x01BBF8   43 33 09 00   Move                r51, r9        r51 = r9 [0]
0045   0x01BC00   1C 06 06 03   CallFf              r6, r6, 3      r6 = darray-create(self, -1, 0)
0046   0x01BC08   15 07 06 00   LookupPointer       r7, 6          r7 = ST[6] -> <is-final-build?>
0047   0x01BC10   1C 07 07 00   CallFf              r7, r7, 0      r7 = is-final-build?()
0048   0x01BC18   30 07 07 00   OpLogNot            r7, r7         r7 = !r7 -> <TRUE>
0049   0x01BC20   2F 56 07 00   BranchIfNot         r7, 0056       IF NOT r7 [0x6620ACB7] => L_6
004A   0x01BC28   15 07 07 00   LookupPointer       r7, 7          r7 = ST[7] -> <display>
004B   0x01BC30   15 08 08 00   LookupPointer       r8, 8          r8 = ST[8] -> <#5445173390656D6D>
004C   0x01BC38   41 09 0F 00   LoadStaticPointerImmr9, 15         r9 = ST[15] -> <0xBF026782>
004D   0x01BC40   41 0A 0A 00   LoadStaticPointerImmr10, 10        r10 = ST[10] -> <0xBF025EFC>
004E   0x01BC48   43 31 09 00   Move                r49, r9        r49 = r9 [0xBF026782]
004F   0x01BC50   43 32 0A 00   Move                r50, r10       r50 = r10 [0xBF025EFC]
0050   0x01BC58   1C 08 08 02   CallFf              r8, r8, 2      r8 = #5445173390656D6D(0xBF026782, 0xBF025EFC)
0051   0x01BC60   0C 09 13 00   LoadU16Imm          r9, 19         r9 = 19
0052   0x01BC68   43 31 08 00   Move                r49, r8        r49 = r8 [#5445173390656D6D()]
0053   0x01BC70   43 32 09 00   Move                r50, r9        r50 = r9 [19]
0054   0x01BC78   1C 07 07 02   CallFf              r7, r7, 2      r7 = display(#5445173390656D6D(), 19)
0055   0x01BC80   2D 57 00 00   Branch              0057           => L_7
L_6:
0056   0x01BC88   0C 07 00 00   LoadU16Imm          r7, 0          r7 = 0
L_7:
0057   0x01BC90   15 07 06 00   LookupPointer       r7, 6          r7 = ST[6] -> <is-final-build?>
0058   0x01BC98   1C 07 07 00   CallFf              r7, r7, 0      r7 = is-final-build?()
0059   0x01BCA0   30 07 07 00   OpLogNot            r7, r7         r7 = !r7 -> <TRUE>
005A   0x01BCA8   2F 6E 07 00   BranchIfNot         r7, 006E       IF NOT r7 [0x6620ACB7] => L_8
005B   0x01BCB0   15 07 07 00   LookupPointer       r7, 7          r7 = ST[7] -> <display>
005C   0x01BCB8   15 08 08 00   LookupPointer       r8, 8          r8 = ST[8] -> <#5445173390656D6D>
005D   0x01BCC0   41 09 10 00   LoadStaticPointerImmr9, 16         r9 = ST[16] -> <0xBF0260AD>
005E   0x01BCC8   41 0A 0A 00   LoadStaticPointerImmr10, 10        r10 = ST[10] -> <0xBF025EFC>
005F   0x01BCD0   15 0B 11 00   LookupPointer       r11, 17        r11 = ST[17] -> <string-debug>
0060   0x01BCD8   43 0C 02 00   Move                r12, r2        r12 = r2 [0x0]
0061   0x01BCE0   5D 0C 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0062   0x01BCE8   51 0C 0C 00   LoadU64             r12, [r12]     r12 = [0x0 + 0x0]
0063   0x01BCF0   43 31 0C 00   Move                r49, r12       r49 = r12 [0]
0064   0x01BCF8   1C 0B 0B 01   CallFf              r11, r11, 1    r11 = string-debug(0)
0065   0x01BD00   43 31 09 00   Move                r49, r9        r49 = r9 [0xBF0260AD]
0066   0x01BD08   43 32 0A 00   Move                r50, r10       r50 = r10 [0xBF025EFC]
0067   0x01BD10   43 33 0B 00   Move                r51, r11       r51 = r11 [string-debug()]
0068   0x01BD18   1C 08 08 03   CallFf              r8, r8, 3      r8 = #5445173390656D6D(0xBF0260AD, 0xBF025EFC, string-debug())
0069   0x01BD20   0C 09 13 00   LoadU16Imm          r9, 19         r9 = 19
006A   0x01BD28   43 31 08 00   Move                r49, r8        r49 = r8 [#5445173390656D6D()]
006B   0x01BD30   43 32 09 00   Move                r50, r9        r50 = r9 [19]
006C   0x01BD38   1C 07 07 02   CallFf              r7, r7, 2      r7 = display(#5445173390656D6D(), 19)
006D   0x01BD40   2D 6F 00 00   Branch              006F           => L_9
L_8:
006E   0x01BD48   0C 07 00 00   LoadU16Imm          r7, 0          r7 = 0
L_9:
006F   0x01BD50   15 07 06 00   LookupPointer       r7, 6          r7 = ST[6] -> <is-final-build?>
0070   0x01BD58   1C 07 07 00   CallFf              r7, r7, 0      r7 = is-final-build?()
0071   0x01BD60   30 07 07 00   OpLogNot            r7, r7         r7 = !r7 -> <TRUE>
0072   0x01BD68   2F 84 07 00   BranchIfNot         r7, 0084       IF NOT r7 [0x6620ACB7] => L_10
0073   0x01BD70   15 07 07 00   LookupPointer       r7, 7          r7 = ST[7] -> <display>
0074   0x01BD78   15 08 08 00   LookupPointer       r8, 8          r8 = ST[8] -> <#5445173390656D6D>
0075   0x01BD80   41 09 12 00   LoadStaticPointerImmr9, 18         r9 = ST[18] -> <0xBF0263B8>
0076   0x01BD88   41 0A 0A 00   LoadStaticPointerImmr10, 10        r10 = ST[10] -> <0xBF025EFC>
0077   0x01BD90   15 0B 13 00   LookupPointer       r11, 19        r11 = ST[19] -> <#C57EE0A64537AE8F>
0078   0x01BD98   43 0C 05 00   Move                r12, r5        r12 = r5 [get-svar()]
0079   0x01BDA0   43 31 0C 00   Move                r49, r12       r49 = r12 [get-svar()]
007A   0x01BDA8   1B 0B 0B 01   Call                r11, r11, 1    r11 = #C57EE0A64537AE8F(get-svar())
007B   0x01BDB0   43 31 09 00   Move                r49, r9        r49 = r9 [0xBF0263B8]
007C   0x01BDB8   43 32 0A 00   Move                r50, r10       r50 = r10 [0xBF025EFC]
007D   0x01BDC0   43 33 0B 00   Move                r51, r11       r51 = r11 [#C57EE0A64537AE8F()]
007E   0x01BDC8   1C 08 08 03   CallFf              r8, r8, 3      r8 = #5445173390656D6D(0xBF0263B8, 0xBF025EFC, #C57EE0A64537AE8F())
007F   0x01BDD0   0C 09 13 00   LoadU16Imm          r9, 19         r9 = 19
0080   0x01BDD8   43 31 08 00   Move                r49, r8        r49 = r8 [#5445173390656D6D()]
0081   0x01BDE0   43 32 09 00   Move                r50, r9        r50 = r9 [19]
0082   0x01BDE8   1C 07 07 02   CallFf              r7, r7, 2      r7 = display(#5445173390656D6D(), 19)
0083   0x01BDF0   2D 85 00 00   Branch              0085           => L_11
L_10:
0084   0x01BDF8   0C 07 00 00   LoadU16Imm          r7, 0          r7 = 0
L_11:
0085   0x01BE00   43 07 02 00   Move                r7, r2         r7 = r2 [0x0]
0086   0x01BE08   2F D6 07 00   BranchIfNot         r7, 00D6       IF NOT r7 [0x0] => L_12
0087   0x01BE10   0C 07 00 00   LoadU16Imm          r7, 0          r7 = 0
L_18:
0088   0x01BE18   43 08 07 00   Move                r8, r7         r8 = r7 [0]
0089   0x01BE20   43 09 02 00   Move                r9, r2         r9 = r2 [0x0]
008A   0x01BE28   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
008B   0x01BE30   3B 09 09 28   IAddImm             r9, r9, 40     r9 = r9 [0] / 40 -> <0>
008C   0x01BE38   0F 09 09 00   LoadPointer         r9, [r9]       r9 = [0x0 + 0x0]
008D   0x01BE40   0C 0A 08 00   LoadU16Imm          r10, 8         r10 = 8
008E   0x01BE48   01 09 09 0A   IAdd                r9, r9, r10    0x0 = 0x0 + 8
008F   0x01BE50   4F 09 09 00   LoadI32             ???            UNKNOWN INSTRUCTION
0090   0x01BE58   20 08 08 09   ILessThan           r8, r8, r9     r8 = r8 [0] < r9 [0]
0091   0x01BE60   2F D4 08 00   BranchIfNot         r8, 00D4       IF NOT r8 [0x0] => L_13
0092   0x01BE68   43 08 02 00   Move                r8, r2         r8 = r2 [0x0]
0093   0x01BE70   5D 08 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0094   0x01BE78   3B 08 08 28   IAddImm             r8, r8, 40     r8 = r8 [0] / 40 -> <0>
0095   0x01BE80   0F 08 08 00   LoadPointer         r8, [r8]       r8 = [0x0 + 0x0]
0096   0x01BE88   0F 08 08 00   LoadPointer         r8, [r8]       r8 = [0x0 + 0x0]
0097   0x01BE90   43 09 07 00   Move                r9, r7         r9 = r7 [0]
0098   0x01BE98   3D 09 09 28   IMulImm             r9, r9, 40     r9 = r9 [0] / 40 -> <0>
0099   0x01BEA0   01 08 08 09   IAdd                r8, r8, r9     0x0 = 0x0 + 0
009A   0x01BEA8   43 09 08 00   Move                r9, r8         r9 = r8 [0x0]
009B   0x01BEB0   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
009C   0x01BEB8   3B 09 09 08   IAddImm             r9, r9, 8      r9 = r9 [0] / 8 -> <0>
009D   0x01BEC0   4F 09 09 00   LoadI32             ???            UNKNOWN INSTRUCTION
009E   0x01BEC8   43 0A 05 00   Move                r10, r5        r10 = r5 [get-svar()]
009F   0x01BED0   43 0B 09 00   Move                r11, r9        r11 = r9 [0]
00A0   0x01BED8   1D 0A 0A 0B   IEqual              r10, r10, r11  r10 = r10 [-547918080] == r11 [0]
00A1   0x01BEE0   2F B0 0A 00   BranchIfNot         r10, 00B0      IF NOT r10 [0xDF576F00] => L_14
00A2   0x01BEE8   15 0A 14 00   LookupPointer       r10, 20        r10 = ST[20] -> <darray-append>
00A3   0x01BEF0   43 0B 06 00   Move                r11, r6        r11 = r6 [darray-create()]
00A4   0x01BEF8   15 0C 15 00   LookupPointer       r12, 21        r12 = ST[21] -> <new-boxed-value>
00A5   0x01BF00   0C 0D 02 00   LoadU16Imm          r13, 2         r13 = 2
00A6   0x01BF08   43 0E 07 00   Move                r14, r7        r14 = r7 [0]
00A7   0x01BF10   43 31 0D 00   Move                r49, r13       r49 = r13 [2]
00A8   0x01BF18   43 32 0E 00   Move                r50, r14       r50 = r14 [0]
00A9   0x01BF20   1C 0C 0C 02   CallFf              r12, r12, 2    r12 = new-boxed-value(2, 0)
00AA   0x01BF28   0C 0D 00 00   LoadU16Imm          r13, 0         r13 = 0
00AB   0x01BF30   43 31 0B 00   Move                r49, r11       r49 = r11 [darray-create()]
00AC   0x01BF38   43 32 0C 00   Move                r50, r12       r50 = r12 [new-boxed-value()]
00AD   0x01BF40   43 33 0D 00   Move                r51, r13       r51 = r13 [0]
00AE   0x01BF48   1C 0A 0A 03   CallFf              r10, r10, 3    r10 = darray-append(darray-create(), new-boxed-value(), 0)
00AF   0x01BF50   2D B1 00 00   Branch              00B1           => L_15
L_14:
00B0   0x01BF58   0C 0A 00 00   LoadU16Imm          r10, 0         r10 = 0
L_15:
00B1   0x01BF60   15 0A 06 00   LookupPointer       r10, 6         r10 = ST[6] -> <is-final-build?>
00B2   0x01BF68   1C 0A 0A 00   CallFf              r10, r10, 0    r10 = is-final-build?()
00B3   0x01BF70   30 0A 0A 00   OpLogNot            r10, r10       r10 = !r10 -> <TRUE>
00B4   0x01BF78   2F CA 0A 00   BranchIfNot         r10, 00CA      IF NOT r10 [0x6620ACB7] => L_16
00B5   0x01BF80   15 0A 07 00   LookupPointer       r10, 7         r10 = ST[7] -> <display>
00B6   0x01BF88   15 0B 08 00   LookupPointer       r11, 8         r11 = ST[8] -> <#5445173390656D6D>
00B7   0x01BF90   41 0C 16 00   LoadStaticPointerImmr12, 22        r12 = ST[22] -> <0xBF026CE4>
00B8   0x01BF98   41 0D 0A 00   LoadStaticPointerImmr13, 10        r13 = ST[10] -> <0xBF025EFC>
00B9   0x01BFA0   43 0E 07 00   Move                r14, r7        r14 = r7 [0]
00BA   0x01BFA8   15 0F 11 00   LookupPointer       r15, 17        r15 = ST[17] -> <string-debug>
00BB   0x01BFB0   43 10 08 00   Move                r16, r8        r16 = r8 [0x0]
00BC   0x01BFB8   5D 10 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00BD   0x01BFC0   51 10 10 00   LoadU64             r16, [r16]     r16 = [0x0 + 0x0]
00BE   0x01BFC8   43 31 10 00   Move                r49, r16       r49 = r16 [0]
00BF   0x01BFD0   1C 0F 0F 01   CallFf              r15, r15, 1    r15 = string-debug(0)
00C0   0x01BFD8   43 31 0C 00   Move                r49, r12       r49 = r12 [0xBF026CE4]
00C1   0x01BFE0   43 32 0D 00   Move                r50, r13       r50 = r13 [0xBF025EFC]
00C2   0x01BFE8   43 33 0E 00   Move                r51, r14       r51 = r14 [0]
00C3   0x01BFF0   43 34 0F 00   Move                r52, r15       r52 = r15 [string-debug()]
00C4   0x01BFF8   1C 0B 0B 04   CallFf              r11, r11, 4    r11 = #5445173390656D6D(0xBF026CE4, 0xBF025EFC, 0, string-debug())
00C5   0x01C000   0C 0C 13 00   LoadU16Imm          r12, 19        r12 = 19
00C6   0x01C008   43 31 0B 00   Move                r49, r11       r49 = r11 [#5445173390656D6D()]
00C7   0x01C010   43 32 0C 00   Move                r50, r12       r50 = r12 [19]
00C8   0x01C018   1C 0A 0A 02   CallFf              r10, r10, 2    r10 = display(#5445173390656D6D(), 19)
00C9   0x01C020   2D CB 00 00   Branch              00CB           => L_17
L_16:
00CA   0x01C028   0C 0A 00 00   LoadU16Imm          r10, 0         r10 = 0
L_17:
00CB   0x01C030   43 0A 0A 00   Move                r10, r10       r10 = r10 [0]
00CC   0x01C038   43 09 0A 00   Move                r9, r10        r9 = r10 [0]
00CD   0x01C040   43 08 09 00   Move                r8, r9         r8 = r9 [0]
00CE   0x01C048   43 08 07 00   Move                r8, r7         r8 = r7 [0]
00CF   0x01C050   0C 09 01 00   LoadU16Imm          r9, 1          r9 = 1
00D0   0x01C058   01 08 08 09   IAdd                r8, r8, r9     1 = 0 + 1
00D1   0x01C060   43 07 08 00   Move                r7, r8         r7 = r8 [1]
00D2   0x01C068   43 08 07 00   Move                r8, r7         r8 = r7 [1]
00D3   0x01C070   2D 88 00 00   Branch              0088           => L_18
L_13:
00D4   0x01C078   43 07 08 00   Move                r7, r8         r7 = r8 [1]
00D5   0x01C080   2D D7 00 00   Branch              00D7           => L_19
L_12:
00D6   0x01C088   0C 07 00 00   LoadU16Imm          r7, 0          r7 = 0
L_19:
00D7   0x01C090   15 07 17 00   LookupPointer       r7, 23         r7 = ST[23] -> <darray-count>
00D8   0x01C098   43 08 06 00   Move                r8, r6         r8 = r6 [darray-create()]
00D9   0x01C0A0   43 31 08 00   Move                r49, r8        r49 = r8 [darray-create()]
00DA   0x01C0A8   1C 07 07 01   CallFf              r7, r7, 1      r7 = darray-count(darray-create())
00DB   0x01C0B0   0C 08 00 00   LoadU16Imm          r8, 0          r8 = 0
00DC   0x01C0B8   1D 07 07 08   IEqual              r7, r7, r8     r7 = r7 [1753163008] == r8 [0]
00DD   0x01C0C0   30 07 07 00   OpLogNot            r7, r7         r7 = !r7 -> <TRUE>
00DE   0x01C0C8   2F 84 07 01   BranchIfNot         r7, 0184       IF NOT r7 [0x687F2501] => L_20
00DF   0x01C0D0   15 07 18 00   LookupPointer       r7, 24         r7 = ST[24] -> <rogue-get-next-random-number-for-category>
00E0   0x01C0D8   4A 08 19 00   LoadStaticU64Imm    r8, 25         r8 = ST[25] -> <#D960300736CC6C1D>
00E1   0x01C0E0   0C 09 00 00   LoadU16Imm          r9, 0          r9 = 0
00E2   0x01C0E8   43 31 08 00   Move                r49, r8        r49 = r8 [#D960300736CC6C1D]
00E3   0x01C0F0   43 32 09 00   Move                r50, r9        r50 = r9 [0]
00E4   0x01C0F8   1C 07 07 02   CallFf              r7, r7, 2      r7 = rogue-get-next-random-number-for-category(#D960300736CC6C1D, 0)
00E5   0x01C100   15 08 1A 00   LookupPointer       r8, 26         r8 = ST[26] -> <mod-int32>
00E6   0x01C108   43 09 07 00   Move                r9, r7         r9 = r7 [rogue-get-next-random-number-for-category()]
00E7   0x01C110   15 0A 17 00   LookupPointer       r10, 23        r10 = ST[23] -> <darray-count>
00E8   0x01C118   43 0B 06 00   Move                r11, r6        r11 = r6 [darray-create()]
00E9   0x01C120   43 31 0B 00   Move                r49, r11       r49 = r11 [darray-create()]
00EA   0x01C128   1C 0A 0A 01   CallFf              r10, r10, 1    r10 = darray-count(darray-create())
00EB   0x01C130   43 31 09 00   Move                r49, r9        r49 = r9 [rogue-get-next-random-number-for-category()]
00EC   0x01C138   43 32 0A 00   Move                r50, r10       r50 = r10 [darray-count()]
00ED   0x01C140   1B 08 08 02   Call                r8, r8, 2      r8 = mod-int32(rogue-get-next-random-number-for-category(), darray-count())
00EE   0x01C148   15 09 1B 00   LookupPointer       r9, 27         r9 = ST[27] -> <darray-at>
00EF   0x01C150   43 0A 06 00   Move                r10, r6        r10 = r6 [darray-create()]
00F0   0x01C158   43 0B 08 00   Move                r11, r8        r11 = r8 [mod-int32()]
00F1   0x01C160   43 31 0A 00   Move                r49, r10       r49 = r10 [darray-create()]
00F2   0x01C168   43 32 0B 00   Move                r50, r11       r50 = r11 [mod-int32()]
00F3   0x01C170   1C 09 09 02   CallFf              r9, r9, 2      r9 = darray-at(darray-create(), mod-int32())
00F4   0x01C178   43 0A 09 00   Move                r10, r9        r10 = r9 [darray-at()]
00F5   0x01C180   2F FC 0A 00   BranchIfNot         r10, 00FC      IF NOT r10 [darray-at()] => L_21
00F6   0x01C188   43 0A 09 00   Move                r10, r9        r10 = r9 [darray-at()]
00F7   0x01C190   5D 0A 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00F8   0x01C198   3B 0A 0A 0C   IAddImm             r10, r10, 12   r10 = r10 [-739117676] / 12 -> <-739117676>
00F9   0x01C1A0   4E 0A 0A 00   LoadU16             ???            UNKNOWN INSTRUCTION
00FA   0x01C1A8   0C 0B 01 00   LoadU16Imm          r11, 1         r11 = 1
00FB   0x01C1B0   1D 0A 0A 0B   IEqual              r10, r10, r11  r10 = r10 [-739117824] == r11 [1]
L_21:
00FC   0x01C1B8   2F 01 0A 01   BranchIfNot         r10, 0101      IF NOT r10 [0xD3F1F500] => L_22
00FD   0x01C1C0   43 0A 09 00   Move                r10, r9        r10 = r9 [darray-at()]
00FE   0x01C1C8   5D 0A 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00FF   0x01C1D0   4C 0A 0A 00   LoadU8              ???            UNKNOWN INSTRUCTION
0100   0x01C1D8   2D 44 00 01   Branch              0144           => L_23
L_22:
0101   0x01C1E0   43 0A 09 00   Move                r10, r9        r10 = r9 [darray-at()]
0102   0x01C1E8   2F 09 0A 01   BranchIfNot         r10, 0109      IF NOT r10 [darray-at()] => L_24
0103   0x01C1F0   43 0A 09 00   Move                r10, r9        r10 = r9 [darray-at]
0104   0x01C1F8   5D 0A 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0105   0x01C200   3B 0A 0A 0C   IAddImm             r10, r10, 12   r10 = r10 [-739117676] / 12 -> <-739117676>
0106   0x01C208   4E 0A 0A 00   LoadU16             ???            UNKNOWN INSTRUCTION
0107   0x01C210   0C 0B 02 00   LoadU16Imm          r11, 2         r11 = 2
0108   0x01C218   1D 0A 0A 0B   IEqual              r10, r10, r11  r10 = r10 [-739117824] == r11 [2]
L_24:
0109   0x01C220   2F 0E 0A 01   BranchIfNot         r10, 010E      IF NOT r10 [0xD3F1F500] => L_25
010A   0x01C228   43 0A 09 00   Move                r10, r9        r10 = r9 [darray-at]
010B   0x01C230   5D 0A 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
010C   0x01C238   4F 0A 0A 00   LoadI32             ???            UNKNOWN INSTRUCTION
010D   0x01C240   2D 44 00 01   Branch              0144           => L_23
L_25:
010E   0x01C248   43 0A 09 00   Move                r10, r9        r10 = r9 [darray-at]
010F   0x01C250   2F 16 0A 01   BranchIfNot         r10, 0116      IF NOT r10 [darray-at] => L_26
0110   0x01C258   43 0A 09 00   Move                r10, r9        r10 = r9 [darray-at]
0111   0x01C260   5D 0A 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0112   0x01C268   3B 0A 0A 0C   IAddImm             r10, r10, 12   r10 = r10 [-739117676] / 12 -> <-739117676>
0113   0x01C270   4E 0A 0A 00   LoadU16             ???            UNKNOWN INSTRUCTION
0114   0x01C278   0C 0B 03 00   LoadU16Imm          r11, 3         r11 = 3
0115   0x01C280   1D 0A 0A 0B   IEqual              r10, r10, r11  r10 = r10 [-739117824] == r11 [3]
L_26:
0116   0x01C288   2F 1B 0A 01   BranchIfNot         r10, 011B      IF NOT r10 [0xD3F1F500] => L_27
0117   0x01C290   43 0A 09 00   Move                r10, r9        r10 = r9 [darray-at]
0118   0x01C298   5D 0A 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0119   0x01C2A0   0D 0A 0A 00   LoadU32             r10, [r10]     r10 = [0x0 + 0x0]
011A   0x01C2A8   2D 44 00 01   Branch              0144           => L_23
L_27:
011B   0x01C2B0   43 0A 09 00   Move                r10, r9        r10 = r9 [darray-at]
011C   0x01C2B8   2F 23 0A 01   BranchIfNot         r10, 0123      IF NOT r10 [darray-at] => L_28
011D   0x01C2C0   43 0A 09 00   Move                r10, r9        r10 = r9 [darray-at]
011E   0x01C2C8   5D 0A 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
011F   0x01C2D0   3B 0A 0A 0C   IAddImm             r10, r10, 12   r10 = r10 [-739117676] / 12 -> <-739117676>
0120   0x01C2D8   4E 0A 0A 00   LoadU16             ???            UNKNOWN INSTRUCTION
0121   0x01C2E0   0C 0B 04 00   LoadU16Imm          r11, 4         r11 = 4
0122   0x01C2E8   1D 0A 0A 0B   IEqual              r10, r10, r11  r10 = r10 [-739117824] == r11 [4]
L_28:
0123   0x01C2F0   2F 28 0A 01   BranchIfNot         r10, 0128      IF NOT r10 [0xD3F1F500] => L_29
0124   0x01C2F8   43 0A 09 00   Move                r10, r9        r10 = r9 [darray-at]
0125   0x01C300   5D 0A 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0126   0x01C308   50 0A 0A 00   LoadI64             r10, [r10]     r10 = [0x0 + 0x0]
0127   0x01C310   2D 44 00 01   Branch              0144           => L_23
L_29:
0128   0x01C318   43 0A 09 00   Move                r10, r9        r10 = r9 [darray-at]
0129   0x01C320   2F 30 0A 01   BranchIfNot         r10, 0130      IF NOT r10 [darray-at] => L_30
012A   0x01C328   43 0A 09 00   Move                r10, r9        r10 = r9 [darray-at]
012B   0x01C330   5D 0A 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
012C   0x01C338   3B 0A 0A 0C   IAddImm             r10, r10, 12   r10 = r10 [-739117676] / 12 -> <-739117676>
012D   0x01C340   4E 0A 0A 00   LoadU16             ???            UNKNOWN INSTRUCTION
012E   0x01C348   0C 0B 05 00   LoadU16Imm          r11, 5         r11 = 5
012F   0x01C350   1D 0A 0A 0B   IEqual              r10, r10, r11  r10 = r10 [-739117824] == r11 [5]
L_30:
0130   0x01C358   2F 35 0A 01   BranchIfNot         r10, 0135      IF NOT r10 [0xD3F1F500] => L_31
0131   0x01C360   43 0A 09 00   Move                r10, r9        r10 = r9 [darray-at]
0132   0x01C368   5D 0A 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0133   0x01C370   51 0A 0A 00   LoadU64             r10, [r10]     r10 = [0x0 + 0x0]
0134   0x01C378   2D 44 00 01   Branch              0144           => L_23
L_31:
0135   0x01C380   43 0A 09 00   Move                r10, r9        r10 = r9 [darray-at]
0136   0x01C388   2F 3D 0A 01   BranchIfNot         r10, 013D      IF NOT r10 [darray-at] => L_32
0137   0x01C390   43 0A 09 00   Move                r10, r9        r10 = r9 [darray-at]
0138   0x01C398   5D 0A 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0139   0x01C3A0   3B 0A 0A 0C   IAddImm             r10, r10, 12   r10 = r10 [-739117676] / 12 -> <-739117676>
013A   0x01C3A8   4E 0A 0A 00   LoadU16             ???            UNKNOWN INSTRUCTION
013B   0x01C3B0   0C 0B 06 00   LoadU16Imm          r11, 6         r11 = 6
013C   0x01C3B8   1D 0A 0A 0B   IEqual              r10, r10, r11  r10 = r10 [-739117824] == r11 [6]
L_32:
013D   0x01C3C0   2F 43 0A 01   BranchIfNot         r10, 0143      IF NOT r10 [0xD3F1F500] => L_33
013E   0x01C3C8   43 0A 09 00   Move                r10, r9        r10 = r9 [darray-at]
013F   0x01C3D0   5D 0A 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0140   0x01C3D8   0E 0A 0A 00   LoadFloat           r10, [r10]     r10 = [0x0 + 0x0]
0141   0x01C3E0   19 0A 0A 00   CastInteger         r10, r10       r10 = int(r10) -> <0.000000> => <0>
0142   0x01C3E8   2D 44 00 01   Branch              0144           => L_23
L_33:
0143   0x01C3F0   0C 0A 00 00   LoadU16Imm          r10, 0         r10 = 0
L_23:
0144   0x01C3F8   43 09 0A 00   Move                r9, r10        r9 = r10 [0]
0145   0x01C400   43 0A 02 00   Move                r10, r2        r10 = r2 [0x0]
0146   0x01C408   5D 0A 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0147   0x01C410   3B 0A 0A 28   IAddImm             r10, r10, 40   r10 = r10 [0] / 40 -> <0>
0148   0x01C418   0F 0A 0A 00   LoadPointer         r10, [r10]     r10 = [0x0 + 0x0]
0149   0x01C420   0F 0A 0A 00   LoadPointer         r10, [r10]     r10 = [0x0 + 0x0]
014A   0x01C428   43 0B 09 00   Move                r11, r9        r11 = r9 [0]
014B   0x01C430   3D 0B 0B 28   IMulImm             r11, r11, 40   r11 = r11 [0] / 40 -> <0>
014C   0x01C438   01 0A 0A 0B   IAdd                r10, r10, r11  0x0 = 0x0 + 0
014D   0x01C440   15 0B 06 00   LookupPointer       r11, 6         r11 = ST[6] -> <is-final-build?>
014E   0x01C448   1C 0B 0B 00   CallFf              r11, r11, 0    r11 = is-final-build?()
014F   0x01C450   30 0B 0B 00   OpLogNot            r11, r11       r11 = !r11 -> <TRUE>
0150   0x01C458   2F 5D 0B 01   BranchIfNot         r11, 015D      IF NOT r11 [0x6620ACB7] => L_34
0151   0x01C460   15 0B 07 00   LookupPointer       r11, 7         r11 = ST[7] -> <display>
0152   0x01C468   15 0C 08 00   LookupPointer       r12, 8         r12 = ST[8] -> <#5445173390656D6D>
0153   0x01C470   41 0D 1C 00   LoadStaticPointerImmr13, 28        r13 = ST[28] -> <0xBF0266A3>
0154   0x01C478   41 0E 0A 00   LoadStaticPointerImmr14, 10        r14 = ST[10] -> <0xBF025EFC>
0155   0x01C480   43 31 0D 00   Move                r49, r13       r49 = r13 [0xBF0266A3]
0156   0x01C488   43 32 0E 00   Move                r50, r14       r50 = r14 [0xBF025EFC]
0157   0x01C490   1C 0C 0C 02   CallFf              r12, r12, 2    r12 = #5445173390656D6D(0xBF0266A3, 0xBF025EFC)
0158   0x01C498   0C 0D 13 00   LoadU16Imm          r13, 19        r13 = 19
0159   0x01C4A0   43 31 0C 00   Move                r49, r12       r49 = r12 [#5445173390656D6D()]
015A   0x01C4A8   43 32 0D 00   Move                r50, r13       r50 = r13 [19]
015B   0x01C4B0   1C 0B 0B 02   CallFf              r11, r11, 2    r11 = display(#5445173390656D6D(), 19)
015C   0x01C4B8   2D 5E 00 01   Branch              015E           => L_35
L_34:
015D   0x01C4C0   0C 0B 00 00   LoadU16Imm          r11, 0         r11 = 0
L_35:
015E   0x01C4C8   15 0B 06 00   LookupPointer       r11, 6         r11 = ST[6] -> <is-final-build?>
015F   0x01C4D0   1C 0B 0B 00   CallFf              r11, r11, 0    r11 = is-final-build?()
0160   0x01C4D8   30 0B 0B 00   OpLogNot            r11, r11       r11 = !r11 -> <TRUE>
0161   0x01C4E0   2F 77 0B 01   BranchIfNot         r11, 0177      IF NOT r11 [0x6620ACB7] => L_36
0162   0x01C4E8   15 0B 07 00   LookupPointer       r11, 7         r11 = ST[7] -> <display>
0163   0x01C4F0   15 0C 08 00   LookupPointer       r12, 8         r12 = ST[8] -> <#5445173390656D6D>
0164   0x01C4F8   41 0D 16 00   LoadStaticPointerImmr13, 22        r13 = ST[22] -> <0xBF026CE4>
0165   0x01C500   41 0E 0A 00   LoadStaticPointerImmr14, 10        r14 = ST[10] -> <0xBF025EFC>
0166   0x01C508   43 0F 08 00   Move                r15, r8        r15 = r8 [mod-int32()]
0167   0x01C510   15 10 11 00   LookupPointer       r16, 17        r16 = ST[17] -> <string-debug>
0168   0x01C518   43 11 0A 00   Move                r17, r10       r17 = r10 [0x0]
0169   0x01C520   5D 11 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
016A   0x01C528   51 11 11 00   LoadU64             r17, [r17]     r17 = [0x0 + 0x0]
016B   0x01C530   43 31 11 00   Move                r49, r17       r49 = r17 [0]
016C   0x01C538   1C 10 10 01   CallFf              r16, r16, 1    r16 = string-debug(0)
016D   0x01C540   43 31 0D 00   Move                r49, r13       r49 = r13 [0xBF026CE4]
016E   0x01C548   43 32 0E 00   Move                r50, r14       r50 = r14 [0xBF025EFC]
016F   0x01C550   43 33 0F 00   Move                r51, r15       r51 = r15 [mod-int32()]
0170   0x01C558   43 34 10 00   Move                r52, r16       r52 = r16 [string-debug()]
0171   0x01C560   1C 0C 0C 04   CallFf              r12, r12, 4    r12 = #5445173390656D6D(0xBF026CE4, 0xBF025EFC, mod-int32(), string-debug())
0172   0x01C568   0C 0D 13 00   LoadU16Imm          r13, 19        r13 = 19
0173   0x01C570   43 31 0C 00   Move                r49, r12       r49 = r12 [#5445173390656D6D()]
0174   0x01C578   43 32 0D 00   Move                r50, r13       r50 = r13 [19]
0175   0x01C580   1C 0B 0B 02   CallFf              r11, r11, 2    r11 = display(#5445173390656D6D(), 19)
0176   0x01C588   2D 78 00 01   Branch              0178           => L_37
L_36:
0177   0x01C590   0C 0B 00 00   LoadU16Imm          r11, 0         r11 = 0
L_37:
0178   0x01C598   43 0B 02 00   Move                r11, r2        r11 = r2 [0x0]
0179   0x01C5A0   43 03 0B 00   Move                r3, r11        r3 = r11 [0x0]
017A   0x01C5A8   43 0B 03 00   Move                r11, r3        r11 = r3 [0x0]
017B   0x01C5B0   43 0B 0A 00   Move                r11, r10       r11 = r10 [0x0]
017C   0x01C5B8   43 04 0B 00   Move                r4, r11        r4 = r11 [0x0]
017D   0x01C5C0   43 0B 04 00   Move                r11, r4        r11 = r4 [0x0]
017E   0x01C5C8   43 0B 0B 00   Move                r11, r11       r11 = r11 [0x0]
017F   0x01C5D0   43 0A 0B 00   Move                r10, r11       r10 = r11 [0x0]
0180   0x01C5D8   43 09 0A 00   Move                r9, r10        r9 = r10 [0x0]
0181   0x01C5E0   43 08 09 00   Move                r8, r9         r8 = r9 [0x0]
0182   0x01C5E8   43 07 08 00   Move                r7, r8         r7 = r8 [0x0]
0183   0x01C5F0   2D AA 00 01   Branch              01AA           => L_38
L_20:
0184   0x01C5F8   15 07 06 00   LookupPointer       r7, 6          r7 = ST[6] -> <is-final-build?>
0185   0x01C600   1C 07 07 00   CallFf              r7, r7, 0      r7 = is-final-build?()
0186   0x01C608   30 07 07 00   OpLogNot            r7, r7         r7 = !r7 -> <TRUE>
0187   0x01C610   2F 9A 07 01   BranchIfNot         r7, 019A       IF NOT r7 [0x6620ACB7] => L_39
0188   0x01C618   15 07 07 00   LookupPointer       r7, 7          r7 = ST[7] -> <display>
0189   0x01C620   15 08 08 00   LookupPointer       r8, 8          r8 = ST[8] -> <#5445173390656D6D>
018A   0x01C628   41 09 1D 00   LoadStaticPointerImmr9, 29         r9 = ST[29] -> <0xBF02634F>
018B   0x01C630   15 0A 13 00   LookupPointer       r10, 19        r10 = ST[19] -> <#C57EE0A64537AE8F>
018C   0x01C638   15 0B 0B 00   LookupPointer       r11, 11        r11 = ST[11] -> <get-svar>
018D   0x01C640   4A 0C 0C 00   LoadStaticU64Imm    r12, 12        r12 = ST[12] -> <#B588F9BE19063DAC>
018E   0x01C648   43 31 0C 00   Move                r49, r12       r49 = r12 [#B588F9BE19063DAC]
018F   0x01C650   1B 0B 0B 01   Call                r11, r11, 1    r11 = get-svar(#B588F9BE19063DAC)
0190   0x01C658   43 31 0B 00   Move                r49, r11       r49 = r11 [get-svar()]
0191   0x01C660   1B 0A 0A 01   Call                r10, r10, 1    r10 = #C57EE0A64537AE8F(get-svar())
0192   0x01C668   43 31 09 00   Move                r49, r9        r49 = r9 [0xBF02634F]
0193   0x01C670   43 32 0A 00   Move                r50, r10       r50 = r10 [#C57EE0A64537AE8F()]
0194   0x01C678   1C 08 08 02   CallFf              r8, r8, 2      r8 = #5445173390656D6D(0xBF02634F, #C57EE0A64537AE8F())
0195   0x01C680   0C 09 13 00   LoadU16Imm          r9, 19         r9 = 19
0196   0x01C688   43 31 08 00   Move                r49, r8        r49 = r8 [#5445173390656D6D()]
0197   0x01C690   43 32 09 00   Move                r50, r9        r50 = r9 [19]
0198   0x01C698   1C 07 07 02   CallFf              r7, r7, 2      r7 = display(#5445173390656D6D(), 19)
0199   0x01C6A0   2D 9B 00 01   Branch              019B           => L_40
L_39:
019A   0x01C6A8   0C 07 00 00   LoadU16Imm          r7, 0          r7 = 0
L_40:
019B   0x01C6B0   15 07 1E 00   LookupPointer       r7, 30         r7 = ST[30] -> <display-error>
019C   0x01C6B8   15 08 08 00   LookupPointer       r8, 8          r8 = ST[8] -> <#5445173390656D6D>
019D   0x01C6C0   41 09 1F 00   LoadStaticPointerImmr9, 31         r9 = ST[31] -> <0xBF0272AA>
019E   0x01C6C8   15 0A 13 00   LookupPointer       r10, 19        r10 = ST[19] -> <#C57EE0A64537AE8F>
019F   0x01C6D0   15 0B 0B 00   LookupPointer       r11, 11        r11 = ST[11] -> <get-svar>
01A0   0x01C6D8   4A 0C 0C 00   LoadStaticU64Imm    r12, 12        r12 = ST[12] -> <#B588F9BE19063DAC>
01A1   0x01C6E0   43 31 0C 00   Move                r49, r12       r49 = r12 [#B588F9BE19063DAC]
01A2   0x01C6E8   1B 0B 0B 01   Call                r11, r11, 1    r11 = get-svar(#B588F9BE19063DAC)
01A3   0x01C6F0   43 31 0B 00   Move                r49, r11       r49 = r11 [get-svar()]
01A4   0x01C6F8   1B 0A 0A 01   Call                r10, r10, 1    r10 = #C57EE0A64537AE8F(get-svar())
01A5   0x01C700   43 31 09 00   Move                r49, r9        r49 = r9 [0xBF0272AA]
01A6   0x01C708   43 32 0A 00   Move                r50, r10       r50 = r10 [#C57EE0A64537AE8F()]
01A7   0x01C710   1C 08 08 02   CallFf              r8, r8, 2      r8 = #5445173390656D6D(0xBF0272AA, #C57EE0A64537AE8F())
01A8   0x01C718   43 31 08 00   Move                r49, r8        r49 = r8 [#5445173390656D6D()]
01A9   0x01C720   1C 07 07 01   CallFf              r7, r7, 1      r7 = display-error(#5445173390656D6D())
L_38:
01AA   0x01C728   15 07 20 00   LookupPointer       r7, 32         r7 = ST[32] -> <darray-destroy>
01AB   0x01C730   43 08 06 00   Move                r8, r6         r8 = r6 [darray-create()]
01AC   0x01C738   43 31 08 00   Move                r49, r8        r49 = r8 [darray-create()]
01AD   0x01C740   1C 07 07 01   CallFf              r7, r7, 1      r7 = darray-destroy(darray-create())
01AE   0x01C748   43 05 07 00   Move                r5, r7         r5 = r7 [darray-destroy()]
01AF   0x01C750   2D D9 00 01   Branch              01D9           => L_4
L_5:
01B0   0x01C758   43 05 01 00   Move                r5, r1         r5 = r1 [0x0]
01B1   0x01C760   2F B8 05 01   BranchIfNot         r5, 01B8       IF NOT r5 [0x0] => L_41
01B2   0x01C768   15 05 03 00   LookupPointer       r5, 3          r5 = ST[3] -> <get-boolean>
01B3   0x01C770   4A 06 04 00   LoadStaticU64Imm    r6, 4          r6 = ST[4] -> <#E13DA8B7F1BF181B>
01B4   0x01C778   4A 07 05 00   LoadStaticU64Imm    r7, 5          r7 = ST[5] -> <ss-wave-manager-level-set-loader-1>
01B5   0x01C780   43 31 06 00   Move                r49, r6        r49 = r6 [#E13DA8B7F1BF181B]
01B6   0x01C788   43 32 07 00   Move                r50, r7        r50 = r7 [ss-wave-manager-level-set-loader-1]
01B7   0x01C790   1C 05 05 02   CallFf              r5, r5, 2      r5 = get-boolean(#E13DA8B7F1BF181B, ss-wave-manager-level-set-loader-1)
L_41:
01B8   0x01C798   2F D8 05 01   BranchIfNot         r5, 01D8       IF NOT r5 [get-boolean()] => L_42
01B9   0x01C7A0   15 05 06 00   LookupPointer       r5, 6          r5 = ST[6] -> <is-final-build?>
01BA   0x01C7A8   1C 05 05 00   CallFf              r5, r5, 0      r5 = is-final-build?()
01BB   0x01C7B0   30 05 05 00   OpLogNot            r5, r5         r5 = !r5 -> <TRUE>
01BC   0x01C7B8   2F C9 05 01   BranchIfNot         r5, 01C9       IF NOT r5 [0x6620ACB7] => L_43
01BD   0x01C7C0   15 05 07 00   LookupPointer       r5, 7          r5 = ST[7] -> <display>
01BE   0x01C7C8   15 06 08 00   LookupPointer       r6, 8          r6 = ST[8] -> <#5445173390656D6D>
01BF   0x01C7D0   41 07 09 00   LoadStaticPointerImmr7, 9          r7 = ST[9] -> <0xBF02675A>
01C0   0x01C7D8   41 08 0A 00   LoadStaticPointerImmr8, 10         r8 = ST[10] -> <0xBF025EFC>
01C1   0x01C7E0   43 31 07 00   Move                r49, r7        r49 = r7 [0xBF02675A]
01C2   0x01C7E8   43 32 08 00   Move                r50, r8        r50 = r8 [0xBF025EFC]
01C3   0x01C7F0   1C 06 06 02   CallFf              r6, r6, 2      r6 = #5445173390656D6D(0xBF02675A, 0xBF025EFC)
01C4   0x01C7F8   0C 07 13 00   LoadU16Imm          r7, 19         r7 = 19
01C5   0x01C800   43 31 06 00   Move                r49, r6        r49 = r6 [#5445173390656D6D()]
01C6   0x01C808   43 32 07 00   Move                r50, r7        r50 = r7 [19]
01C7   0x01C810   1C 05 05 02   CallFf              r5, r5, 2      r5 = display(#5445173390656D6D(), 19)
01C8   0x01C818   2D CA 00 01   Branch              01CA           => L_44
L_43:
01C9   0x01C820   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
L_44:
01CA   0x01C828   43 05 01 00   Move                r5, r1         r5 = r1 [0x0]
01CB   0x01C830   43 03 05 00   Move                r3, r5         r3 = r5 [0x0]
01CC   0x01C838   43 05 03 00   Move                r5, r3         r5 = r3 [0x0]
01CD   0x01C840   43 05 01 00   Move                r5, r1         r5 = r1 [0x0]
01CE   0x01C848   5D 05 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
01CF   0x01C850   3B 05 05 28   IAddImm             r5, r5, 40     r5 = r5 [0] / 40 -> <0>
01D0   0x01C858   0F 05 05 00   LoadPointer         r5, [r5]       r5 = [0x0 + 0x0]
01D1   0x01C860   0F 05 05 00   LoadPointer         r5, [r5]       r5 = [0x0 + 0x0]
01D2   0x01C868   0C 06 00 00   LoadU16Imm          r6, 0          r6 = 0
01D3   0x01C870   3D 06 06 28   IMulImm             r6, r6, 40     r6 = r6 [0] / 40 -> <0>
01D4   0x01C878   01 05 05 06   IAdd                r5, r5, r6     0x0 = 0x0 + 0
01D5   0x01C880   43 04 05 00   Move                r4, r5         r4 = r5 [0x0]
01D6   0x01C888   43 05 04 00   Move                r5, r4         r5 = r4 [0x0]
01D7   0x01C890   2D D9 00 01   Branch              01D9           => L_4
L_42:
01D8   0x01C898   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
L_4:
01D9   0x01C8A0   43 05 03 00   Move                r5, r3         r5 = r3 [0x0]
01DA   0x01C8A8   2F 76 05 03   BranchIfNot         r5, 0376       IF NOT r5 [0x0] => L_45
01DB   0x01C8B0   15 05 06 00   LookupPointer       r5, 6          r5 = ST[6] -> <is-final-build?>
01DC   0x01C8B8   1C 05 05 00   CallFf              r5, r5, 0      r5 = is-final-build?()
01DD   0x01C8C0   30 05 05 00   OpLogNot            r5, r5         r5 = !r5 -> <TRUE>
01DE   0x01C8C8   2F EB 05 01   BranchIfNot         r5, 01EB       IF NOT r5 [0x6620ACB7] => L_46
01DF   0x01C8D0   15 05 07 00   LookupPointer       r5, 7          r5 = ST[7] -> <display>
01E0   0x01C8D8   15 06 08 00   LookupPointer       r6, 8          r6 = ST[8] -> <#5445173390656D6D>
01E1   0x01C8E0   41 07 21 00   LoadStaticPointerImmr7, 33         r7 = ST[33] -> <0xBF026B76>
01E2   0x01C8E8   41 08 0A 00   LoadStaticPointerImmr8, 10         r8 = ST[10] -> <0xBF025EFC>
01E3   0x01C8F0   43 31 07 00   Move                r49, r7        r49 = r7 [0xBF026B76]
01E4   0x01C8F8   43 32 08 00   Move                r50, r8        r50 = r8 [0xBF025EFC]
01E5   0x01C900   1C 06 06 02   CallFf              r6, r6, 2      r6 = #5445173390656D6D(0xBF026B76, 0xBF025EFC)
01E6   0x01C908   0C 07 13 00   LoadU16Imm          r7, 19         r7 = 19
01E7   0x01C910   43 31 06 00   Move                r49, r6        r49 = r6 [#5445173390656D6D()]
01E8   0x01C918   43 32 07 00   Move                r50, r7        r50 = r7 [19]
01E9   0x01C920   1C 05 05 02   CallFf              r5, r5, 2      r5 = display(#5445173390656D6D(), 19)
01EA   0x01C928   2D EC 00 01   Branch              01EC           => L_47
L_46:
01EB   0x01C930   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
L_47:
01EC   0x01C938   15 05 22 00   LookupPointer       r5, 34         r5 = ST[34] -> <set-symbol>
01ED   0x01C940   4A 06 23 00   LoadStaticU64Imm    r6, 35         r6 = ST[35] -> <#CD9D116CF6E5DE86>
01EE   0x01C948   43 07 03 00   Move                r7, r3         r7 = r3 [0x0]
01EF   0x01C950   4A 08 02 00   LoadStaticU64Imm    r8, 2          r8 = ST[2] -> <self>
01F0   0x01C958   43 31 06 00   Move                r49, r6        r49 = r6 [#CD9D116CF6E5DE86]
01F1   0x01C960   43 32 07 00   Move                r50, r7        r50 = r7 [0x0]
01F2   0x01C968   43 33 08 00   Move                r51, r8        r51 = r8 [self]
01F3   0x01C970   1C 05 05 03   CallFf              r5, r5, 3      r5 = set-symbol(#CD9D116CF6E5DE86, 0x0, self)
01F4   0x01C978   15 05 22 00   LookupPointer       r5, 34         r5 = ST[34] -> <set-symbol>
01F5   0x01C980   4A 06 24 00   LoadStaticU64Imm    r6, 36         r6 = ST[36] -> <#7E358C581E146817>
01F6   0x01C988   43 07 03 00   Move                r7, r3         r7 = r3 [0x0]
01F7   0x01C990   5D 07 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
01F8   0x01C998   51 07 07 00   LoadU64             r7, [r7]       r7 = [0x0 + 0x0]
01F9   0x01C9A0   4A 08 02 00   LoadStaticU64Imm    r8, 2          r8 = ST[2] -> <self>
01FA   0x01C9A8   43 31 06 00   Move                r49, r6        r49 = r6 [#7E358C581E146817]
01FB   0x01C9B0   43 32 07 00   Move                r50, r7        r50 = r7 [0]
01FC   0x01C9B8   43 33 08 00   Move                r51, r8        r51 = r8 [self]
01FD   0x01C9C0   1C 05 05 03   CallFf              r5, r5, 3      r5 = set-symbol(#7E358C581E146817, 0, self)
01FE   0x01C9C8   15 05 25 00   LookupPointer       r5, 37         r5 = ST[37] -> <set-int32>
01FF   0x01C9D0   4A 06 26 00   LoadStaticU64Imm    r6, 38         r6 = ST[38] -> <num-waves>
0200   0x01C9D8   43 07 03 00   Move                r7, r3         r7 = r3 [0x0]
0201   0x01C9E0   5D 07 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0202   0x01C9E8   3B 07 07 0C   IAddImm             r7, r7, 12     r7 = r7 [0] / 12 -> <0>
0203   0x01C9F0   4F 07 07 00   LoadI32             ???            UNKNOWN INSTRUCTION
0204   0x01C9F8   4A 08 02 00   LoadStaticU64Imm    r8, 2          r8 = ST[2] -> <self>
0205   0x01CA00   43 31 06 00   Move                r49, r6        r49 = r6 [num-waves]
0206   0x01CA08   43 32 07 00   Move                r50, r7        r50 = r7 [0]
0207   0x01CA10   43 33 08 00   Move                r51, r8        r51 = r8 [self]
0208   0x01CA18   1C 05 05 03   CallFf              r5, r5, 3      r5 = set-int32(num-waves, 0, self)
0209   0x01CA20   15 05 27 00   LookupPointer       r5, 39         r5 = ST[39] -> <set-boolean>
020A   0x01CA28   4A 06 28 00   LoadStaticU64Imm    r6, 40         r6 = ST[40] -> <#5F89BCA42A4FC333>
020B   0x01CA30   43 07 03 00   Move                r7, r3         r7 = r3 [0x0]
020C   0x01CA38   5D 07 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
020D   0x01CA40   3B 07 07 11   IAddImm             r7, r7, 17     r7 = r7 [0] / 17 -> <0>
020E   0x01CA48   4C 07 07 00   LoadU8              ???            UNKNOWN INSTRUCTION
020F   0x01CA50   4A 08 02 00   LoadStaticU64Imm    r8, 2          r8 = ST[2] -> <self>
0210   0x01CA58   43 31 06 00   Move                r49, r6        r49 = r6 [#5F89BCA42A4FC333]
0211   0x01CA60   43 32 07 00   Move                r50, r7        r50 = r7 [0]
0212   0x01CA68   43 33 08 00   Move                r51, r8        r51 = r8 [self]
0213   0x01CA70   1C 05 05 03   CallFf              r5, r5, 3      r5 = set-boolean(#5F89BCA42A4FC333, 0, self)
0214   0x01CA78   15 05 27 00   LookupPointer       r5, 39         r5 = ST[39] -> <set-boolean>
0215   0x01CA80   4A 06 29 00   LoadStaticU64Imm    r6, 41         r6 = ST[41] -> <#FB027CA453EDDE5B>
0216   0x01CA88   15 07 2A 00   LookupPointer       r7, 42         r7 = ST[42] -> <#B96C7EEF7ACAB122>
0217   0x01CA90   2F 1C 07 02   BranchIfNot         r7, 021C       IF NOT r7 [0x7ACAB122] => L_48
0218   0x01CA98   15 07 2A 01   LookupPointer       r7, 42         r7 = ST[42] -> <#B96C7EEF7ACAB122>
0219   0x01CAA0   5D 07 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
021A   0x01CAA8   3B 07 07 11   IAddImm             r7, r7, 17     r7 = r7 [-971637651] / 17 -> <-971637651>
021B   0x01CAB0   4C 07 07 00   LoadU8              ???            UNKNOWN INSTRUCTION
L_48:
021C   0x01CAB8   2F 1F 07 02   BranchIfNot         r7, 021F       IF NOT r7 [-971637651] => L_49
021D   0x01CAC0   0C 07 01 00   LoadU16Imm          r7, 1          r7 = 1
021E   0x01CAC8   2D 23 00 02   Branch              0223           => L_50
L_49:
021F   0x01CAD0   43 07 03 00   Move                r7, r3         r7 = r3 [0x0]
0220   0x01CAD8   5D 07 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0221   0x01CAE0   3B 07 07 10   IAddImm             r7, r7, 16     r7 = r7 [0] / 16 -> <0>
0222   0x01CAE8   4C 07 07 00   LoadU8              ???            UNKNOWN INSTRUCTION
L_50:
0223   0x01CAF0   4A 08 02 00   LoadStaticU64Imm    r8, 2          r8 = ST[2] -> <self>
0224   0x01CAF8   43 31 06 00   Move                r49, r6        r49 = r6 [#FB027CA453EDDE5B]
0225   0x01CB00   43 32 07 00   Move                r50, r7        r50 = r7 [0]
0226   0x01CB08   43 33 08 00   Move                r51, r8        r51 = r8 [self]
0227   0x01CB10   1C 05 05 03   CallFf              r5, r5, 3      r5 = set-boolean(#FB027CA453EDDE5B, 0, self)
0228   0x01CB18   15 05 25 00   LookupPointer       r5, 37         r5 = ST[37] -> <set-int32>
0229   0x01CB20   4A 06 2B 00   LoadStaticU64Imm    r6, 43         r6 = ST[43] -> <#5389CC70A44E7358>
022A   0x01CB28   43 07 03 00   Move                r7, r3         r7 = r3 [0x0]
022B   0x01CB30   5D 07 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
022C   0x01CB38   3B 07 07 08   IAddImm             r7, r7, 8      r7 = r7 [0] / 8 -> <0>
022D   0x01CB40   4F 07 07 00   LoadI32             ???            UNKNOWN INSTRUCTION
022E   0x01CB48   4A 08 02 00   LoadStaticU64Imm    r8, 2          r8 = ST[2] -> <self>
022F   0x01CB50   43 31 06 00   Move                r49, r6        r49 = r6 [#5389CC70A44E7358]
0230   0x01CB58   43 32 07 00   Move                r50, r7        r50 = r7 [0]
0231   0x01CB60   43 33 08 00   Move                r51, r8        r51 = r8 [self]
0232   0x01CB68   1C 05 05 03   CallFf              r5, r5, 3      r5 = set-int32(#5389CC70A44E7358, 0, self)
0233   0x01CB70   15 05 27 00   LookupPointer       r5, 39         r5 = ST[39] -> <set-boolean>
0234   0x01CB78   4A 06 2C 00   LoadStaticU64Imm    r6, 44         r6 = ST[44] -> <#1FD0D5BACF6C26B1>
0235   0x01CB80   43 07 03 00   Move                r7, r3         r7 = r3 [0x0]
0236   0x01CB88   5D 07 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0237   0x01CB90   3B 07 07 12   IAddImm             r7, r7, 18     r7 = r7 [0] / 18 -> <0>
0238   0x01CB98   4C 07 07 00   LoadU8              ???            UNKNOWN INSTRUCTION
0239   0x01CBA0   4A 08 02 00   LoadStaticU64Imm    r8, 2          r8 = ST[2] -> <self>
023A   0x01CBA8   43 31 06 00   Move                r49, r6        r49 = r6 [#1FD0D5BACF6C26B1]
023B   0x01CBB0   43 32 07 00   Move                r50, r7        r50 = r7 [0]
023C   0x01CBB8   43 33 08 00   Move                r51, r8        r51 = r8 [self]
023D   0x01CBC0   1C 05 05 03   CallFf              r5, r5, 3      r5 = set-boolean(#1FD0D5BACF6C26B1, 0, self)
023E   0x01CBC8   15 05 22 00   LookupPointer       r5, 34         r5 = ST[34] -> <set-symbol>
023F   0x01CBD0   4A 06 2D 00   LoadStaticU64Imm    r6, 45         r6 = ST[45] -> <#CD5807AC5F281201>
0240   0x01CBD8   43 07 03 00   Move                r7, r3         r7 = r3 [0x0]
0241   0x01CBE0   5D 07 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0242   0x01CBE8   3B 07 07 20   IAddImm             r7, r7, 32     r7 = r7 [0] / 32 -> <0>
0243   0x01CBF0   51 07 07 00   LoadU64             r7, [r7]       r7 = [0x0 + 0x0]
0244   0x01CBF8   4A 08 02 00   LoadStaticU64Imm    r8, 2          r8 = ST[2] -> <self>
0245   0x01CC00   43 31 06 00   Move                r49, r6        r49 = r6 [#CD5807AC5F281201]
0246   0x01CC08   43 32 07 00   Move                r50, r7        r50 = r7 [0]
0247   0x01CC10   43 33 08 00   Move                r51, r8        r51 = r8 [self]
0248   0x01CC18   1C 05 05 03   CallFf              r5, r5, 3      r5 = set-symbol(#CD5807AC5F281201, 0, self)
0249   0x01CC20   15 05 22 00   LookupPointer       r5, 34         r5 = ST[34] -> <set-symbol>
024A   0x01CC28   4A 06 2E 00   LoadStaticU64Imm    r6, 46         r6 = ST[46] -> <#F4BB1A242FE97D63>
024B   0x01CC30   43 07 03 00   Move                r7, r3         r7 = r3 [0x0]
024C   0x01CC38   5D 07 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
024D   0x01CC40   3B 07 07 18   IAddImm             r7, r7, 24     r7 = r7 [0] / 24 -> <0>
024E   0x01CC48   0F 07 07 00   LoadPointer         r7, [r7]       r7 = [0x0 + 0x0]
024F   0x01CC50   4A 08 02 00   LoadStaticU64Imm    r8, 2          r8 = ST[2] -> <self>
0250   0x01CC58   43 31 06 00   Move                r49, r6        r49 = r6 [#F4BB1A242FE97D63]
0251   0x01CC60   43 32 07 00   Move                r50, r7        r50 = r7 [0x0]
0252   0x01CC68   43 33 08 00   Move                r51, r8        r51 = r8 [self]
0253   0x01CC70   1C 05 05 03   CallFf              r5, r5, 3      r5 = set-symbol(#F4BB1A242FE97D63, 0x0, self)
0254   0x01CC78   15 05 03 00   LookupPointer       r5, 3          r5 = ST[3] -> <get-boolean>
0255   0x01CC80   4A 06 29 00   LoadStaticU64Imm    r6, 41         r6 = ST[41] -> <#FB027CA453EDDE5B>
0256   0x01CC88   4A 07 02 00   LoadStaticU64Imm    r7, 2          r7 = ST[2] -> <self>
0257   0x01CC90   43 31 06 00   Move                r49, r6        r49 = r6 [#FB027CA453EDDE5B]
0258   0x01CC98   43 32 07 00   Move                r50, r7        r50 = r7 [self]
0259   0x01CCA0   1C 05 05 02   CallFf              r5, r5, 2      r5 = get-boolean(#FB027CA453EDDE5B, self)
025A   0x01CCA8   2F 64 05 02   BranchIfNot         r5, 0264       IF NOT r5 [get-boolean()] => L_51
025B   0x01CCB0   15 05 25 00   LookupPointer       r5, 37         r5 = ST[37] -> <set-int32>
025C   0x01CCB8   4A 06 26 00   LoadStaticU64Imm    r6, 38         r6 = ST[38] -> <num-waves>
025D   0x01CCC0   3F 07 2F 00   LoadStaticI32Imm    r7, 47         r7 = ST[47] -> <999999999>
025E   0x01CCC8   4A 08 02 00   LoadStaticU64Imm    r8, 2          r8 = ST[2] -> <self>
025F   0x01CCD0   43 31 06 00   Move                r49, r6        r49 = r6 [num-waves]
0260   0x01CCD8   43 32 07 00   Move                r50, r7        r50 = r7 [999999999]
0261   0x01CCE0   43 33 08 00   Move                r51, r8        r51 = r8 [self]
0262   0x01CCE8   1C 05 05 03   CallFf              r5, r5, 3      r5 = set-int32(num-waves, 999999999, self)
0263   0x01CCF0   2D 65 00 02   Branch              0265           => L_52
L_51:
0264   0x01CCF8   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
L_52:
0265   0x01CD00   15 05 06 00   LookupPointer       r5, 6          r5 = ST[6] -> <is-final-build?>
0266   0x01CD08   1C 05 05 00   CallFf              r5, r5, 0      r5 = is-final-build?()
0267   0x01CD10   30 05 05 00   OpLogNot            r5, r5         r5 = !r5 -> <TRUE>
0268   0x01CD18   2F 81 05 02   BranchIfNot         r5, 0281       IF NOT r5 [0x6620ACB7] => L_53
0269   0x01CD20   15 05 07 00   LookupPointer       r5, 7          r5 = ST[7] -> <display>
026A   0x01CD28   15 06 08 00   LookupPointer       r6, 8          r6 = ST[8] -> <#5445173390656D6D>
026B   0x01CD30   41 07 30 00   LoadStaticPointerImmr7, 48         r7 = ST[48] -> <0xBF026BEB>
026C   0x01CD38   41 08 0A 00   LoadStaticPointerImmr8, 10         r8 = ST[10] -> <0xBF025EFC>
026D   0x01CD40   41 09 31 00   LoadStaticPointerImmr9, 49         r9 = ST[49] -> <0xBF027424>
026E   0x01CD48   15 0A 11 00   LookupPointer       r10, 17        r10 = ST[17] -> <string-debug>
026F   0x01CD50   15 0B 00 00   LookupPointer       r11, 0         r11 = ST[0] -> <get-symbol>
0270   0x01CD58   4A 0C 24 00   LoadStaticU64Imm    r12, 36        r12 = ST[36] -> <#7E358C581E146817>
0271   0x01CD60   4A 0D 02 00   LoadStaticU64Imm    r13, 2         r13 = ST[2] -> <self>
0272   0x01CD68   43 31 0C 00   Move                r49, r12       r49 = r12 [#7E358C581E146817]
0273   0x01CD70   43 32 0D 00   Move                r50, r13       r50 = r13 [self]
0274   0x01CD78   1C 0B 0B 02   CallFf              r11, r11, 2    r11 = get-symbol(#7E358C581E146817, self)
0275   0x01CD80   43 31 0B 00   Move                r49, r11       r49 = r11 [get-symbol()]
0276   0x01CD88   1C 0A 0A 01   CallFf              r10, r10, 1    r10 = string-debug(get-symbol())
0277   0x01CD90   43 31 07 00   Move                r49, r7        r49 = r7 [0xBF026BEB]
0278   0x01CD98   43 32 08 00   Move                r50, r8        r50 = r8 [0xBF025EFC]
0279   0x01CDA0   43 33 09 00   Move                r51, r9        r51 = r9 [0xBF027424]
027A   0x01CDA8   43 34 0A 00   Move                r52, r10       r52 = r10 [string-debug()]
027B   0x01CDB0   1C 06 06 04   CallFf              r6, r6, 4      r6 = #5445173390656D6D(0xBF026BEB, 0xBF025EFC, 0xBF027424, string-debug())
027C   0x01CDB8   0C 07 13 00   LoadU16Imm          r7, 19         r7 = 19
027D   0x01CDC0   43 31 06 00   Move                r49, r6        r49 = r6 [#5445173390656D6D()]
027E   0x01CDC8   43 32 07 00   Move                r50, r7        r50 = r7 [19]
027F   0x01CDD0   1C 05 05 02   CallFf              r5, r5, 2      r5 = display(#5445173390656D6D(), 19)
0280   0x01CDD8   2D 82 00 02   Branch              0282           => L_54
L_53:
0281   0x01CDE0   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
L_54:
0282   0x01CDE8   15 05 06 00   LookupPointer       r5, 6          r5 = ST[6] -> <is-final-build?>
0283   0x01CDF0   1C 05 05 00   CallFf              r5, r5, 0      r5 = is-final-build?()
0284   0x01CDF8   30 05 05 00   OpLogNot            r5, r5         r5 = !r5 -> <TRUE>
0285   0x01CE00   2F 9B 05 02   BranchIfNot         r5, 029B       IF NOT r5 [0x6620ACB7] => L_55
0286   0x01CE08   15 05 07 00   LookupPointer       r5, 7          r5 = ST[7] -> <display>
0287   0x01CE10   15 06 08 00   LookupPointer       r6, 8          r6 = ST[8] -> <#5445173390656D6D>
0288   0x01CE18   41 07 32 00   LoadStaticPointerImmr7, 50         r7 = ST[50] -> <0xBF026BD4>
0289   0x01CE20   41 08 0A 00   LoadStaticPointerImmr8, 10         r8 = ST[10] -> <0xBF025EFC>
028A   0x01CE28   41 09 33 00   LoadStaticPointerImmr9, 51         r9 = ST[51] -> <0xBF0274E0>
028B   0x01CE30   15 0A 34 00   LookupPointer       r10, 52        r10 = ST[52] -> <get-int32>
028C   0x01CE38   4A 0B 26 00   LoadStaticU64Imm    r11, 38        r11 = ST[38] -> <num-waves>
028D   0x01CE40   4A 0C 02 00   LoadStaticU64Imm    r12, 2         r12 = ST[2] -> <self>
028E   0x01CE48   43 31 0B 00   Move                r49, r11       r49 = r11 [num-waves]
028F   0x01CE50   43 32 0C 00   Move                r50, r12       r50 = r12 [self]
0290   0x01CE58   1C 0A 0A 02   CallFf              r10, r10, 2    r10 = get-int32(num-waves, self)
0291   0x01CE60   43 31 07 00   Move                r49, r7        r49 = r7 [0xBF026BD4]
0292   0x01CE68   43 32 08 00   Move                r50, r8        r50 = r8 [0xBF025EFC]
0293   0x01CE70   43 33 09 00   Move                r51, r9        r51 = r9 [0xBF0274E0]
0294   0x01CE78   43 34 0A 00   Move                r52, r10       r52 = r10 [get-int32()]
0295   0x01CE80   1C 06 06 04   CallFf              r6, r6, 4      r6 = #5445173390656D6D(0xBF026BD4, 0xBF025EFC, 0xBF0274E0, get-int32())
0296   0x01CE88   0C 07 13 00   LoadU16Imm          r7, 19         r7 = 19
0297   0x01CE90   43 31 06 00   Move                r49, r6        r49 = r6 [#5445173390656D6D()]
0298   0x01CE98   43 32 07 00   Move                r50, r7        r50 = r7 [19]
0299   0x01CEA0   1C 05 05 02   CallFf              r5, r5, 2      r5 = display(#5445173390656D6D(), 19)
029A   0x01CEA8   2D 9C 00 02   Branch              029C           => L_56
L_55:
029B   0x01CEB0   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
L_56:
029C   0x01CEB8   15 05 06 00   LookupPointer       r5, 6          r5 = ST[6] -> <is-final-build?>
029D   0x01CEC0   1C 05 05 00   CallFf              r5, r5, 0      r5 = is-final-build?()
029E   0x01CEC8   30 05 05 00   OpLogNot            r5, r5         r5 = !r5 -> <TRUE>
029F   0x01CED0   2F B9 05 02   BranchIfNot         r5, 02B9       IF NOT r5 [0x6620ACB7] => L_57
02A0   0x01CED8   15 05 07 00   LookupPointer       r5, 7          r5 = ST[7] -> <display>
02A1   0x01CEE0   15 06 08 00   LookupPointer       r6, 8          r6 = ST[8] -> <#5445173390656D6D>
02A2   0x01CEE8   41 07 30 00   LoadStaticPointerImmr7, 48         r7 = ST[48] -> <0xBF026BEB>
02A3   0x01CEF0   41 08 0A 00   LoadStaticPointerImmr8, 10         r8 = ST[10] -> <0xBF025EFC>
02A4   0x01CEF8   41 09 35 00   LoadStaticPointerImmr9, 53         r9 = ST[53] -> <0xBF02752F>
02A5   0x01CF00   15 0A 03 00   LookupPointer       r10, 3         r10 = ST[3] -> <get-boolean>
02A6   0x01CF08   4A 0B 28 00   LoadStaticU64Imm    r11, 40        r11 = ST[40] -> <#5F89BCA42A4FC333>
02A7   0x01CF10   4A 0C 02 00   LoadStaticU64Imm    r12, 2         r12 = ST[2] -> <self>
02A8   0x01CF18   43 31 0B 00   Move                r49, r11       r49 = r11 [#5F89BCA42A4FC333]
02A9   0x01CF20   43 32 0C 00   Move                r50, r12       r50 = r12 [self]
02AA   0x01CF28   1C 0A 0A 02   CallFf              r10, r10, 2    r10 = get-boolean(#5F89BCA42A4FC333, self)
02AB   0x01CF30   2F AE 0A 02   BranchIfNot         r10, 02AE      IF NOT r10 [get-boolean()] => L_58
02AC   0x01CF38   41 0A 36 00   LoadStaticPointerImmr10, 54        r10 = ST[54] -> <0xBF027502>
02AD   0x01CF40   2D AF 00 02   Branch              02AF           => L_59
L_58:
02AE   0x01CF48   41 0A 37 00   LoadStaticPointerImmr10, 55        r10 = ST[55] -> <0xBF0274FE>
L_59:
02AF   0x01CF50   43 31 07 00   Move                r49, r7        r49 = r7 [0xBF026BEB]
02B0   0x01CF58   43 32 08 00   Move                r50, r8        r50 = r8 [0xBF025EFC]
02B1   0x01CF60   43 33 09 00   Move                r51, r9        r51 = r9 [0xBF02752F]
02B2   0x01CF68   43 34 0A 00   Move                r52, r10       r52 = r10 [0xBF0274FE]
02B3   0x01CF70   1C 06 06 04   CallFf              r6, r6, 4      r6 = #5445173390656D6D(0xBF026BEB, 0xBF025EFC, 0xBF02752F, 0xBF0274FE)
02B4   0x01CF78   0C 07 13 00   LoadU16Imm          r7, 19         r7 = 19
02B5   0x01CF80   43 31 06 00   Move                r49, r6        r49 = r6 [#5445173390656D6D()]
02B6   0x01CF88   43 32 07 00   Move                r50, r7        r50 = r7 [19]
02B7   0x01CF90   1C 05 05 02   CallFf              r5, r5, 2      r5 = display(#5445173390656D6D(), 19)
02B8   0x01CF98   2D BA 00 02   Branch              02BA           => L_60
L_57:
02B9   0x01CFA0   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
L_60:
02BA   0x01CFA8   15 05 06 00   LookupPointer       r5, 6          r5 = ST[6] -> <is-final-build?>
02BB   0x01CFB0   1C 05 05 00   CallFf              r5, r5, 0      r5 = is-final-build?()
02BC   0x01CFB8   30 05 05 00   OpLogNot            r5, r5         r5 = !r5 -> <TRUE>
02BD   0x01CFC0   2F E2 05 02   BranchIfNot         r5, 02E2       IF NOT r5 [0x6620ACB7] => L_61
02BE   0x01CFC8   15 05 07 00   LookupPointer       r5, 7          r5 = ST[7] -> <display>
02BF   0x01CFD0   15 06 08 00   LookupPointer       r6, 8          r6 = ST[8] -> <#5445173390656D6D>
02C0   0x01CFD8   41 07 38 00   LoadStaticPointerImmr7, 56         r7 = ST[56] -> <0xBF026C02>
02C1   0x01CFE0   41 08 0A 00   LoadStaticPointerImmr8, 10         r8 = ST[10] -> <0xBF025EFC>
02C2   0x01CFE8   41 09 39 00   LoadStaticPointerImmr9, 57         r9 = ST[57] -> <0xBF027208>
02C3   0x01CFF0   15 0A 03 00   LookupPointer       r10, 3         r10 = ST[3] -> <get-boolean>
02C4   0x01CFF8   4A 0B 29 00   LoadStaticU64Imm    r11, 41        r11 = ST[41] -> <#FB027CA453EDDE5B>
02C5   0x01D000   4A 0C 02 00   LoadStaticU64Imm    r12, 2         r12 = ST[2] -> <self>
02C6   0x01D008   43 31 0B 00   Move                r49, r11       r49 = r11 [#FB027CA453EDDE5B]
02C7   0x01D010   43 32 0C 00   Move                r50, r12       r50 = r12 [self]
02C8   0x01D018   1C 0A 0A 02   CallFf              r10, r10, 2    r10 = get-boolean(#FB027CA453EDDE5B, self)
02C9   0x01D020   2F CC 0A 02   BranchIfNot         r10, 02CC      IF NOT r10 [get-boolean()] => L_62
02CA   0x01D028   41 0A 3A 00   LoadStaticPointerImmr10, 58        r10 = ST[58] -> <0xBF0274FB>
02CB   0x01D030   2D CD 00 02   Branch              02CD           => L_63
L_62:
02CC   0x01D038   41 0A 37 00   LoadStaticPointerImmr10, 55        r10 = ST[55] -> <0xBF0274FE>
L_63:
02CD   0x01D040   15 0B 2A 00   LookupPointer       r11, 42        r11 = ST[42] -> <#B96C7EEF7ACAB122>
02CE   0x01D048   2F D3 0B 02   BranchIfNot         r11, 02D3      IF NOT r11 [0x7ACAB122] => L_64
02CF   0x01D050   15 0B 2A 01   LookupPointer       r11, 42        r11 = ST[42] -> <#B96C7EEF7ACAB122>
02D0   0x01D058   5D 0B 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
02D1   0x01D060   3B 0B 0B 11   IAddImm             r11, r11, 17   r11 = r11 [-971637651] / 17 -> <-971637651>
02D2   0x01D068   4C 0B 0B 00   LoadU8              ???            UNKNOWN INSTRUCTION
L_64:
02D3   0x01D070   2F D6 0B 02   BranchIfNot         r11, 02D6      IF NOT r11 [-971637651] => L_65
02D4   0x01D078   41 0B 3B 00   LoadStaticPointerImmr11, 59        r11 = ST[59] -> <0xBF025F32>
02D5   0x01D080   2D D7 00 02   Branch              02D7           => L_66
L_65:
02D6   0x01D088   41 0B 0A 00   LoadStaticPointerImmr11, 10        r11 = ST[10] -> <0xBF025EFC>
L_66:
02D7   0x01D090   43 31 07 00   Move                r49, r7        r49 = r7 [0xBF026C02]
02D8   0x01D098   43 32 08 00   Move                r50, r8        r50 = r8 [0xBF025EFC]
02D9   0x01D0A0   43 33 09 00   Move                r51, r9        r51 = r9 [0xBF027208]
02DA   0x01D0A8   43 34 0A 00   Move                r52, r10       r52 = r10 [0xBF0274FE]
02DB   0x01D0B0   43 35 0B 00   Move                r53, r11       r53 = r11 [0xBF025EFC]
02DC   0x01D0B8   1C 06 06 05   CallFf              r6, r6, 5      r6 = #5445173390656D6D(0xBF026C02, 0xBF025EFC, 0xBF027208, 0xBF0274FE, 0xBF025EFC)
02DD   0x01D0C0   0C 07 13 00   LoadU16Imm          r7, 19         r7 = 19
02DE   0x01D0C8   43 31 06 00   Move                r49, r6        r49 = r6 [#5445173390656D6D()]
02DF   0x01D0D0   43 32 07 00   Move                r50, r7        r50 = r7 [19]
02E0   0x01D0D8   1C 05 05 02   CallFf              r5, r5, 2      r5 = display(#5445173390656D6D(), 19)
02E1   0x01D0E0   2D E3 00 02   Branch              02E3           => L_67
L_61:
02E2   0x01D0E8   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
L_67:
02E3   0x01D0F0   15 05 06 00   LookupPointer       r5, 6          r5 = ST[6] -> <is-final-build?>
02E4   0x01D0F8   1C 05 05 00   CallFf              r5, r5, 0      r5 = is-final-build?()
02E5   0x01D100   30 05 05 00   OpLogNot            r5, r5         r5 = !r5 -> <TRUE>
02E6   0x01D108   2F 0C 05 03   BranchIfNot         r5, 030C       IF NOT r5 [0x6620ACB7] => L_68
02E7   0x01D110   15 05 07 00   LookupPointer       r5, 7          r5 = ST[7] -> <display>
02E8   0x01D118   15 06 08 00   LookupPointer       r6, 8          r6 = ST[8] -> <#5445173390656D6D>
02E9   0x01D120   41 07 30 00   LoadStaticPointerImmr7, 48         r7 = ST[48] -> <0xBF026BEB>
02EA   0x01D128   41 08 0A 00   LoadStaticPointerImmr8, 10         r8 = ST[10] -> <0xBF025EFC>
02EB   0x01D130   41 09 3C 00   LoadStaticPointerImmr9, 60         r9 = ST[60] -> <0xBF027335>
02EC   0x01D138   15 0A 34 00   LookupPointer       r10, 52        r10 = ST[52] -> <get-int32>
02ED   0x01D140   4A 0B 2B 00   LoadStaticU64Imm    r11, 43        r11 = ST[43] -> <#5389CC70A44E7358>
02EE   0x01D148   4A 0C 02 00   LoadStaticU64Imm    r12, 2         r12 = ST[2] -> <self>
02EF   0x01D150   43 31 0B 00   Move                r49, r11       r49 = r11 [#5389CC70A44E7358]
02F0   0x01D158   43 32 0C 00   Move                r50, r12       r50 = r12 [self]
02F1   0x01D160   1C 0A 0A 02   CallFf              r10, r10, 2    r10 = get-int32(#5389CC70A44E7358, self)
02F2   0x01D168   0C 0B 00 00   LoadU16Imm          r11, 0         r11 = 0
02F3   0x01D170   1F 0A 0A 0B   IGreaterThanEqual   r10, r10, r11  r10 = r10 [-635293440] >= r11 [0]
02F4   0x01D178   2F 01 0A 03   BranchIfNot         r10, 0301      IF NOT r10 [0xDA223100] => L_69
02F5   0x01D180   15 0A 08 00   LookupPointer       r10, 8         r10 = ST[8] -> <#5445173390656D6D>
02F6   0x01D188   41 0B 3D 00   LoadStaticPointerImmr11, 61        r11 = ST[61] -> <0xBF025F04>
02F7   0x01D190   15 0C 34 00   LookupPointer       r12, 52        r12 = ST[52] -> <get-int32>
02F8   0x01D198   4A 0D 2B 00   LoadStaticU64Imm    r13, 43        r13 = ST[43] -> <#5389CC70A44E7358>
02F9   0x01D1A0   4A 0E 02 00   LoadStaticU64Imm    r14, 2         r14 = ST[2] -> <self>
02FA   0x01D1A8   43 31 0D 00   Move                r49, r13       r49 = r13 [#5389CC70A44E7358]
02FB   0x01D1B0   43 32 0E 00   Move                r50, r14       r50 = r14 [self]
02FC   0x01D1B8   1C 0C 0C 02   CallFf              r12, r12, 2    r12 = get-int32(#5389CC70A44E7358, self)
02FD   0x01D1C0   43 31 0B 00   Move                r49, r11       r49 = r11 [0xBF025F04]
02FE   0x01D1C8   43 32 0C 00   Move                r50, r12       r50 = r12 [get-int32()]
02FF   0x01D1D0   1C 0A 0A 02   CallFf              r10, r10, 2    r10 = #5445173390656D6D(0xBF025F04, get-int32())
0300   0x01D1D8   2D 02 00 03   Branch              0302           => L_70
L_69:
0301   0x01D1E0   41 0A 3E 00   LoadStaticPointerImmr10, 62        r10 = ST[62] -> <0xBF02748C>
L_70:
0302   0x01D1E8   43 31 07 00   Move                r49, r7        r49 = r7 [0xBF026BEB]
0303   0x01D1F0   43 32 08 00   Move                r50, r8        r50 = r8 [0xBF025EFC]
0304   0x01D1F8   43 33 09 00   Move                r51, r9        r51 = r9 [0xBF027335]
0305   0x01D200   43 34 0A 00   Move                r52, r10       r52 = r10 [0xBF02748C]
0306   0x01D208   1C 06 06 04   CallFf              r6, r6, 4      r6 = #5445173390656D6D(0xBF026BEB, 0xBF025EFC, 0xBF027335, 0xBF02748C)
0307   0x01D210   0C 07 13 00   LoadU16Imm          r7, 19         r7 = 19
0308   0x01D218   43 31 06 00   Move                r49, r6        r49 = r6 [#5445173390656D6D()]
0309   0x01D220   43 32 07 00   Move                r50, r7        r50 = r7 [19]
030A   0x01D228   1C 05 05 02   CallFf              r5, r5, 2      r5 = display(#5445173390656D6D(), 19)
030B   0x01D230   2D 0D 00 03   Branch              030D           => L_71
L_68:
030C   0x01D238   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
L_71:
030D   0x01D240   15 05 06 00   LookupPointer       r5, 6          r5 = ST[6] -> <is-final-build?>
030E   0x01D248   1C 05 05 00   CallFf              r5, r5, 0      r5 = is-final-build?()
030F   0x01D250   30 05 05 00   OpLogNot            r5, r5         r5 = !r5 -> <TRUE>
0310   0x01D258   2F 2A 05 03   BranchIfNot         r5, 032A       IF NOT r5 [0x6620ACB7] => L_72
0311   0x01D260   15 05 07 00   LookupPointer       r5, 7          r5 = ST[7] -> <display>
0312   0x01D268   15 06 08 00   LookupPointer       r6, 8          r6 = ST[8] -> <#5445173390656D6D>
0313   0x01D270   41 07 30 00   LoadStaticPointerImmr7, 48         r7 = ST[48] -> <0xBF026BEB>
0314   0x01D278   41 08 0A 00   LoadStaticPointerImmr8, 10         r8 = ST[10] -> <0xBF025EFC>
0315   0x01D280   41 09 3F 00   LoadStaticPointerImmr9, 63         r9 = ST[63] -> <0xBF02742C>
0316   0x01D288   15 0A 03 00   LookupPointer       r10, 3         r10 = ST[3] -> <get-boolean>
0317   0x01D290   4A 0B 2C 00   LoadStaticU64Imm    r11, 44        r11 = ST[44] -> <#1FD0D5BACF6C26B1>
0318   0x01D298   4A 0C 02 00   LoadStaticU64Imm    r12, 2         r12 = ST[2] -> <self>
0319   0x01D2A0   43 31 0B 00   Move                r49, r11       r49 = r11 [#1FD0D5BACF6C26B1]
031A   0x01D2A8   43 32 0C 00   Move                r50, r12       r50 = r12 [self]
031B   0x01D2B0   1C 0A 0A 02   CallFf              r10, r10, 2    r10 = get-boolean(#1FD0D5BACF6C26B1, self)
031C   0x01D2B8   2F 1F 0A 03   BranchIfNot         r10, 031F      IF NOT r10 [get-boolean()] => L_73
031D   0x01D2C0   41 0A 36 00   LoadStaticPointerImmr10, 54        r10 = ST[54] -> <0xBF027502>
031E   0x01D2C8   2D 20 00 03   Branch              0320           => L_74
L_73:
031F   0x01D2D0   41 0A 37 00   LoadStaticPointerImmr10, 55        r10 = ST[55] -> <0xBF0274FE>
L_74:
0320   0x01D2D8   43 31 07 00   Move                r49, r7        r49 = r7 [0xBF026BEB]
0321   0x01D2E0   43 32 08 00   Move                r50, r8        r50 = r8 [0xBF025EFC]
0322   0x01D2E8   43 33 09 00   Move                r51, r9        r51 = r9 [0xBF02742C]
0323   0x01D2F0   43 34 0A 00   Move                r52, r10       r52 = r10 [0xBF0274FE]
0324   0x01D2F8   1C 06 06 04   CallFf              r6, r6, 4      r6 = #5445173390656D6D(0xBF026BEB, 0xBF025EFC, 0xBF02742C, 0xBF0274FE)
0325   0x01D300   0C 07 13 00   LoadU16Imm          r7, 19         r7 = 19
0326   0x01D308   43 31 06 00   Move                r49, r6        r49 = r6 [#5445173390656D6D()]
0327   0x01D310   43 32 07 00   Move                r50, r7        r50 = r7 [19]
0328   0x01D318   1C 05 05 02   CallFf              r5, r5, 2      r5 = display(#5445173390656D6D(), 19)
0329   0x01D320   2D 2B 00 03   Branch              032B           => L_75
L_72:
032A   0x01D328   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
L_75:
032B   0x01D330   15 05 06 00   LookupPointer       r5, 6          r5 = ST[6] -> <is-final-build?>
032C   0x01D338   1C 05 05 00   CallFf              r5, r5, 0      r5 = is-final-build?()
032D   0x01D340   30 05 05 00   OpLogNot            r5, r5         r5 = !r5 -> <TRUE>
032E   0x01D348   2F 53 05 03   BranchIfNot         r5, 0353       IF NOT r5 [0x6620ACB7] => L_76
032F   0x01D350   15 05 07 00   LookupPointer       r5, 7          r5 = ST[7] -> <display>
0330   0x01D358   15 06 08 00   LookupPointer       r6, 8          r6 = ST[8] -> <#5445173390656D6D>
0331   0x01D360   41 07 30 00   LoadStaticPointerImmr7, 48         r7 = ST[48] -> <0xBF026BEB>
0332   0x01D368   41 08 0A 00   LoadStaticPointerImmr8, 10         r8 = ST[10] -> <0xBF025EFC>
0333   0x01D370   41 09 40 00   LoadStaticPointerImmr9, 64         r9 = ST[64] -> <0xBF026041>
0334   0x01D378   15 0A 00 00   LookupPointer       r10, 0         r10 = ST[0] -> <get-symbol>
0335   0x01D380   4A 0B 2D 00   LoadStaticU64Imm    r11, 45        r11 = ST[45] -> <#CD5807AC5F281201>
0336   0x01D388   4A 0C 02 00   LoadStaticU64Imm    r12, 2         r12 = ST[2] -> <self>
0337   0x01D390   43 31 0B 00   Move                r49, r11       r49 = r11 [#CD5807AC5F281201]
0338   0x01D398   43 32 0C 00   Move                r50, r12       r50 = r12 [self]
0339   0x01D3A0   1C 0A 0A 02   CallFf              r10, r10, 2    r10 = get-symbol(#CD5807AC5F281201, self)
033A   0x01D3A8   0C 0B 00 00   LoadU16Imm          r11, 0         r11 = 0
033B   0x01D3B0   1D 0A 0A 0B   IEqual              r10, r10, r11  r10 = r10 [1774822656] == r11 [0]
033C   0x01D3B8   30 0A 0A 00   OpLogNot            r10, r10       r10 = !r10 -> <TRUE>
033D   0x01D3C0   2F 48 0A 03   BranchIfNot         r10, 0348      IF NOT r10 [0x69C9A501] => L_77
033E   0x01D3C8   15 0A 11 00   LookupPointer       r10, 17        r10 = ST[17] -> <string-debug>
033F   0x01D3D0   15 0B 00 00   LookupPointer       r11, 0         r11 = ST[0] -> <get-symbol>
0340   0x01D3D8   4A 0C 2D 00   LoadStaticU64Imm    r12, 45        r12 = ST[45] -> <#CD5807AC5F281201>
0341   0x01D3E0   4A 0D 02 00   LoadStaticU64Imm    r13, 2         r13 = ST[2] -> <self>
0342   0x01D3E8   43 31 0C 00   Move                r49, r12       r49 = r12 [#CD5807AC5F281201]
0343   0x01D3F0   43 32 0D 00   Move                r50, r13       r50 = r13 [self]
0344   0x01D3F8   1C 0B 0B 02   CallFf              r11, r11, 2    r11 = get-symbol(#CD5807AC5F281201, self)
0345   0x01D400   43 31 0B 00   Move                r49, r11       r49 = r11 [get-symbol()]
0346   0x01D408   1C 0A 0A 01   CallFf              r10, r10, 1    r10 = string-debug(get-symbol())
0347   0x01D410   2D 49 00 03   Branch              0349           => L_78
L_77:
0348   0x01D418   41 0A 3E 00   LoadStaticPointerImmr10, 62        r10 = ST[62] -> <0xBF02748C>
L_78:
0349   0x01D420   43 31 07 00   Move                r49, r7        r49 = r7 [0xBF026BEB]
034A   0x01D428   43 32 08 00   Move                r50, r8        r50 = r8 [0xBF025EFC]
034B   0x01D430   43 33 09 00   Move                r51, r9        r51 = r9 [0xBF026041]
034C   0x01D438   43 34 0A 00   Move                r52, r10       r52 = r10 [0xBF02748C]
034D   0x01D440   1C 06 06 04   CallFf              r6, r6, 4      r6 = #5445173390656D6D(0xBF026BEB, 0xBF025EFC, 0xBF026041, 0xBF02748C)
034E   0x01D448   0C 07 13 00   LoadU16Imm          r7, 19         r7 = 19
034F   0x01D450   43 31 06 00   Move                r49, r6        r49 = r6 [#5445173390656D6D()]
0350   0x01D458   43 32 07 00   Move                r50, r7        r50 = r7 [19]
0351   0x01D460   1C 05 05 02   CallFf              r5, r5, 2      r5 = display(#5445173390656D6D(), 19)
0352   0x01D468   2D 54 00 03   Branch              0354           => L_79
L_76:
0353   0x01D470   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
L_79:
0354   0x01D478   15 05 06 00   LookupPointer       r5, 6          r5 = ST[6] -> <is-final-build?>
0355   0x01D480   1C 05 05 00   CallFf              r5, r5, 0      r5 = is-final-build?()
0356   0x01D488   30 05 05 00   OpLogNot            r5, r5         r5 = !r5 -> <TRUE>
0357   0x01D490   2F 74 05 03   BranchIfNot         r5, 0374       IF NOT r5 [0x6620ACB7] => L_80
0358   0x01D498   15 05 07 00   LookupPointer       r5, 7          r5 = ST[7] -> <display>
0359   0x01D4A0   15 06 08 00   LookupPointer       r6, 8          r6 = ST[8] -> <#5445173390656D6D>
035A   0x01D4A8   41 07 30 00   LoadStaticPointerImmr7, 48         r7 = ST[48] -> <0xBF026BEB>
035B   0x01D4B0   41 08 0A 00   LoadStaticPointerImmr8, 10         r8 = ST[10] -> <0xBF025EFC>
035C   0x01D4B8   41 09 41 00   LoadStaticPointerImmr9, 65         r9 = ST[65] -> <0xBF0275AC>
035D   0x01D4C0   15 0A 00 00   LookupPointer       r10, 0         r10 = ST[0] -> <get-symbol>
035E   0x01D4C8   4A 0B 2E 00   LoadStaticU64Imm    r11, 46        r11 = ST[46] -> <#F4BB1A242FE97D63>
035F   0x01D4D0   4A 0C 02 00   LoadStaticU64Imm    r12, 2         r12 = ST[2] -> <self>
0360   0x01D4D8   43 31 0B 00   Move                r49, r11       r49 = r11 [#F4BB1A242FE97D63]
0361   0x01D4E0   43 32 0C 00   Move                r50, r12       r50 = r12 [self]
0362   0x01D4E8   1C 0A 0A 02   CallFf              r10, r10, 2    r10 = get-symbol(#F4BB1A242FE97D63, self)
0363   0x01D4F0   0C 0B 00 00   LoadU16Imm          r11, 0         r11 = 0
0364   0x01D4F8   1D 0A 0A 0B   IEqual              r10, r10, r11  r10 = r10 [1774822656] == r11 [0]
0365   0x01D500   30 0A 0A 00   OpLogNot            r10, r10       r10 = !r10 -> <TRUE>
0366   0x01D508   2F 69 0A 03   BranchIfNot         r10, 0369      IF NOT r10 [0x69C9A501] => L_81
0367   0x01D510   41 0A 42 00   LoadStaticPointerImmr10, 66        r10 = ST[66] -> <0xBF027754>
0368   0x01D518   2D 6A 00 03   Branch              036A           => L_82
L_81:
0369   0x01D520   41 0A 3E 00   LoadStaticPointerImmr10, 62        r10 = ST[62] -> <0xBF02748C>
L_82:
036A   0x01D528   43 31 07 00   Move                r49, r7        r49 = r7 [0xBF026BEB]
036B   0x01D530   43 32 08 00   Move                r50, r8        r50 = r8 [0xBF025EFC]
036C   0x01D538   43 33 09 00   Move                r51, r9        r51 = r9 [0xBF0275AC]
036D   0x01D540   43 34 0A 00   Move                r52, r10       r52 = r10 [0xBF02748C]
036E   0x01D548   1C 06 06 04   CallFf              r6, r6, 4      r6 = #5445173390656D6D(0xBF026BEB, 0xBF025EFC, 0xBF0275AC, 0xBF02748C)
036F   0x01D550   0C 07 13 00   LoadU16Imm          r7, 19         r7 = 19
0370   0x01D558   43 31 06 00   Move                r49, r6        r49 = r6 [#5445173390656D6D()]
0371   0x01D560   43 32 07 00   Move                r50, r7        r50 = r7 [19]
0372   0x01D568   1C 05 05 02   CallFf              r5, r5, 2      r5 = display(#5445173390656D6D(), 19)
0373   0x01D570   2D 75 00 03   Branch              0375           => L_83
L_80:
0374   0x01D578   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
L_83:
0375   0x01D580   2D 8D 00 03   Branch              038D           => L_84
L_45:
0376   0x01D588   15 05 06 00   LookupPointer       r5, 6          r5 = ST[6] -> <is-final-build?>
0377   0x01D590   1C 05 05 00   CallFf              r5, r5, 0      r5 = is-final-build?()
0378   0x01D598   30 05 05 00   OpLogNot            r5, r5         r5 = !r5 -> <TRUE>
0379   0x01D5A0   2F 86 05 03   BranchIfNot         r5, 0386       IF NOT r5 [0x6620ACB7] => L_85
037A   0x01D5A8   15 05 07 00   LookupPointer       r5, 7          r5 = ST[7] -> <display>
037B   0x01D5B0   15 06 08 00   LookupPointer       r6, 8          r6 = ST[8] -> <#5445173390656D6D>
037C   0x01D5B8   41 07 43 00   LoadStaticPointerImmr7, 67         r7 = ST[67] -> <0xBF02649D>
037D   0x01D5C0   41 08 0A 00   LoadStaticPointerImmr8, 10         r8 = ST[10] -> <0xBF025EFC>
037E   0x01D5C8   43 31 07 00   Move                r49, r7        r49 = r7 [0xBF02649D]
037F   0x01D5D0   43 32 08 00   Move                r50, r8        r50 = r8 [0xBF025EFC]
0380   0x01D5D8   1C 06 06 02   CallFf              r6, r6, 2      r6 = #5445173390656D6D(0xBF02649D, 0xBF025EFC)
0381   0x01D5E0   0C 07 13 00   LoadU16Imm          r7, 19         r7 = 19
0382   0x01D5E8   43 31 06 00   Move                r49, r6        r49 = r6 [#5445173390656D6D()]
0383   0x01D5F0   43 32 07 00   Move                r50, r7        r50 = r7 [19]
0384   0x01D5F8   1C 05 05 02   CallFf              r5, r5, 2      r5 = display(#5445173390656D6D(), 19)
0385   0x01D600   2D 87 00 03   Branch              0387           => L_86
L_85:
0386   0x01D608   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
L_86:
0387   0x01D610   15 05 44 00   LookupPointer       r5, 68         r5 = ST[68] -> <go>
0388   0x01D618   4A 06 45 00   LoadStaticU64Imm    r6, 69         r6 = ST[69] -> <done>
0389   0x01D620   0C 07 01 00   LoadU16Imm          r7, 1          r7 = 1
038A   0x01D628   43 31 06 00   Move                r49, r6        r49 = r6 [done]
038B   0x01D630   43 32 07 00   Move                r50, r7        r50 = r7 [1]
038C   0x01D638   1C 05 05 02   CallFf              r5, r5, 2      r5 = go(done, 1)
L_84:
038D   0x01D640   43 05 04 00   Move                r5, r4         r5 = r4 [0x0]
038E   0x01D648   2F 57 05 04   BranchIfNot         r5, 0457       IF NOT r5 [0x0] => L_87
038F   0x01D650   15 05 06 00   LookupPointer       r5, 6          r5 = ST[6] -> <is-final-build?>
0390   0x01D658   1C 05 05 00   CallFf              r5, r5, 0      r5 = is-final-build?()
0391   0x01D660   30 05 05 00   OpLogNot            r5, r5         r5 = !r5 -> <TRUE>
0392   0x01D668   2F 9F 05 03   BranchIfNot         r5, 039F       IF NOT r5 [0x6620ACB7] => L_88
0393   0x01D670   15 05 07 00   LookupPointer       r5, 7          r5 = ST[7] -> <display>
0394   0x01D678   15 06 08 00   LookupPointer       r6, 8          r6 = ST[8] -> <#5445173390656D6D>
0395   0x01D680   41 07 46 00   LoadStaticPointerImmr7, 70         r7 = ST[70] -> <0xBF026B25>
0396   0x01D688   41 08 0A 00   LoadStaticPointerImmr8, 10         r8 = ST[10] -> <0xBF025EFC>
0397   0x01D690   43 31 07 00   Move                r49, r7        r49 = r7 [0xBF026B25]
0398   0x01D698   43 32 08 00   Move                r50, r8        r50 = r8 [0xBF025EFC]
0399   0x01D6A0   1C 06 06 02   CallFf              r6, r6, 2      r6 = #5445173390656D6D(0xBF026B25, 0xBF025EFC)
039A   0x01D6A8   0C 07 13 00   LoadU16Imm          r7, 19         r7 = 19
039B   0x01D6B0   43 31 06 00   Move                r49, r6        r49 = r6 [#5445173390656D6D()]
039C   0x01D6B8   43 32 07 00   Move                r50, r7        r50 = r7 [19]
039D   0x01D6C0   1C 05 05 02   CallFf              r5, r5, 2      r5 = display(#5445173390656D6D(), 19)
039E   0x01D6C8   2D A0 00 03   Branch              03A0           => L_89
L_88:
039F   0x01D6D0   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
L_89:
03A0   0x01D6D8   15 05 22 00   LookupPointer       r5, 34         r5 = ST[34] -> <set-symbol>
03A1   0x01D6E0   4A 06 47 00   LoadStaticU64Imm    r6, 71         r6 = ST[71] -> <#8BE9BBBC87A08374>
03A2   0x01D6E8   43 07 04 00   Move                r7, r4         r7 = r4 [0x0]
03A3   0x01D6F0   4A 08 02 00   LoadStaticU64Imm    r8, 2          r8 = ST[2] -> <self>
03A4   0x01D6F8   43 31 06 00   Move                r49, r6        r49 = r6 [#8BE9BBBC87A08374]
03A5   0x01D700   43 32 07 00   Move                r50, r7        r50 = r7 [0x0]
03A6   0x01D708   43 33 08 00   Move                r51, r8        r51 = r8 [self]
03A7   0x01D710   1C 05 05 03   CallFf              r5, r5, 3      r5 = set-symbol(#8BE9BBBC87A08374, 0x0, self)
03A8   0x01D718   15 05 22 00   LookupPointer       r5, 34         r5 = ST[34] -> <set-symbol>
03A9   0x01D720   4A 06 48 00   LoadStaticU64Imm    r6, 72         r6 = ST[72] -> <#7F25A075B1A9E239>
03AA   0x01D728   43 07 04 00   Move                r7, r4         r7 = r4 [0x0]
03AB   0x01D730   5D 07 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
03AC   0x01D738   51 07 07 00   LoadU64             r7, [r7]       r7 = [0x0 + 0x0]
03AD   0x01D740   4A 08 02 00   LoadStaticU64Imm    r8, 2          r8 = ST[2] -> <self>
03AE   0x01D748   43 31 06 00   Move                r49, r6        r49 = r6 [#7F25A075B1A9E239]
03AF   0x01D750   43 32 07 00   Move                r50, r7        r50 = r7 [0]
03B0   0x01D758   43 33 08 00   Move                r51, r8        r51 = r8 [self]
03B1   0x01D760   1C 05 05 03   CallFf              r5, r5, 3      r5 = set-symbol(#7F25A075B1A9E239, 0, self)
03B2   0x01D768   15 05 25 00   LookupPointer       r5, 37         r5 = ST[37] -> <set-int32>
03B3   0x01D770   4A 06 49 00   LoadStaticU64Imm    r6, 73         r6 = ST[73] -> <#30BFAD05B9FB096E>
03B4   0x01D778   43 07 04 00   Move                r7, r4         r7 = r4 [0x0]
03B5   0x01D780   5D 07 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
03B6   0x01D788   3B 07 07 08   IAddImm             r7, r7, 8      r7 = r7 [0] / 8 -> <0>
03B7   0x01D790   4F 07 07 00   LoadI32             ???            UNKNOWN INSTRUCTION
03B8   0x01D798   4A 08 02 00   LoadStaticU64Imm    r8, 2          r8 = ST[2] -> <self>
03B9   0x01D7A0   43 31 06 00   Move                r49, r6        r49 = r6 [#30BFAD05B9FB096E]
03BA   0x01D7A8   43 32 07 00   Move                r50, r7        r50 = r7 [0]
03BB   0x01D7B0   43 33 08 00   Move                r51, r8        r51 = r8 [self]
03BC   0x01D7B8   1C 05 05 03   CallFf              r5, r5, 3      r5 = set-int32(#30BFAD05B9FB096E, 0, self)
03BD   0x01D7C0   15 05 22 00   LookupPointer       r5, 34         r5 = ST[34] -> <set-symbol>
03BE   0x01D7C8   4A 06 4A 00   LoadStaticU64Imm    r6, 74         r6 = ST[74] -> <#FB88BDBA9A4B5DAA>
03BF   0x01D7D0   43 07 04 00   Move                r7, r4         r7 = r4 [0x0]
03C0   0x01D7D8   5D 07 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
03C1   0x01D7E0   3B 07 07 10   IAddImm             r7, r7, 16     r7 = r7 [0] / 16 -> <0>
03C2   0x01D7E8   0F 07 07 00   LoadPointer         r7, [r7]       r7 = [0x0 + 0x0]
03C3   0x01D7F0   4A 08 02 00   LoadStaticU64Imm    r8, 2          r8 = ST[2] -> <self>
03C4   0x01D7F8   43 31 06 00   Move                r49, r6        r49 = r6 [#FB88BDBA9A4B5DAA]
03C5   0x01D800   43 32 07 00   Move                r50, r7        r50 = r7 [0x0]
03C6   0x01D808   43 33 08 00   Move                r51, r8        r51 = r8 [self]
03C7   0x01D810   1C 05 05 03   CallFf              r5, r5, 3      r5 = set-symbol(#FB88BDBA9A4B5DAA, 0x0, self)
03C8   0x01D818   15 05 22 00   LookupPointer       r5, 34         r5 = ST[34] -> <set-symbol>
03C9   0x01D820   4A 06 4B 00   LoadStaticU64Imm    r6, 75         r6 = ST[75] -> <global-combat-params>
03CA   0x01D828   43 07 04 00   Move                r7, r4         r7 = r4 [0x0]
03CB   0x01D830   5D 07 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
03CC   0x01D838   3B 07 07 18   IAddImm             r7, r7, 24     r7 = r7 [0] / 24 -> <0>
03CD   0x01D840   51 07 07 00   LoadU64             r7, [r7]       r7 = [0x0 + 0x0]
03CE   0x01D848   4A 08 02 00   LoadStaticU64Imm    r8, 2          r8 = ST[2] -> <self>
03CF   0x01D850   43 31 06 00   Move                r49, r6        r49 = r6 [global-combat-params]
03D0   0x01D858   43 32 07 00   Move                r50, r7        r50 = r7 [0]
03D1   0x01D860   43 33 08 00   Move                r51, r8        r51 = r8 [self]
03D2   0x01D868   1C 05 05 03   CallFf              r5, r5, 3      r5 = set-symbol(global-combat-params, 0, self)
03D3   0x01D870   15 05 22 00   LookupPointer       r5, 34         r5 = ST[34] -> <set-symbol>
03D4   0x01D878   4A 06 4C 00   LoadStaticU64Imm    r6, 76         r6 = ST[76] -> <#84335FAD5E97BB40>
03D5   0x01D880   43 07 04 00   Move                r7, r4         r7 = r4 [0x0]
03D6   0x01D888   5D 07 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
03D7   0x01D890   3B 07 07 20   IAddImm             r7, r7, 32     r7 = r7 [0] / 32 -> <0>
03D8   0x01D898   0F 07 07 00   LoadPointer         r7, [r7]       r7 = [0x0 + 0x0]
03D9   0x01D8A0   4A 08 02 00   LoadStaticU64Imm    r8, 2          r8 = ST[2] -> <self>
03DA   0x01D8A8   43 31 06 00   Move                r49, r6        r49 = r6 [#84335FAD5E97BB40]
03DB   0x01D8B0   43 32 07 00   Move                r50, r7        r50 = r7 [0x0]
03DC   0x01D8B8   43 33 08 00   Move                r51, r8        r51 = r8 [self]
03DD   0x01D8C0   1C 05 05 03   CallFf              r5, r5, 3      r5 = set-symbol(#84335FAD5E97BB40, 0x0, self)
03DE   0x01D8C8   15 05 06 00   LookupPointer       r5, 6          r5 = ST[6] -> <is-final-build?>
03DF   0x01D8D0   1C 05 05 00   CallFf              r5, r5, 0      r5 = is-final-build?()
03E0   0x01D8D8   30 05 05 00   OpLogNot            r5, r5         r5 = !r5 -> <TRUE>
03E1   0x01D8E0   2F FA 05 03   BranchIfNot         r5, 03FA       IF NOT r5 [0x6620ACB7] => L_90
03E2   0x01D8E8   15 05 07 00   LookupPointer       r5, 7          r5 = ST[7] -> <display>
03E3   0x01D8F0   15 06 08 00   LookupPointer       r6, 8          r6 = ST[8] -> <#5445173390656D6D>
03E4   0x01D8F8   41 07 30 00   LoadStaticPointerImmr7, 48         r7 = ST[48] -> <0xBF026BEB>
03E5   0x01D900   41 08 0A 00   LoadStaticPointerImmr8, 10         r8 = ST[10] -> <0xBF025EFC>
03E6   0x01D908   41 09 4D 00   LoadStaticPointerImmr9, 77         r9 = ST[77] -> <0xBF0272A2>
03E7   0x01D910   15 0A 13 00   LookupPointer       r10, 19        r10 = ST[19] -> <#C57EE0A64537AE8F>
03E8   0x01D918   15 0B 34 00   LookupPointer       r11, 52        r11 = ST[52] -> <get-int32>
03E9   0x01D920   4A 0C 49 00   LoadStaticU64Imm    r12, 73        r12 = ST[73] -> <#30BFAD05B9FB096E>
03EA   0x01D928   4A 0D 02 00   LoadStaticU64Imm    r13, 2         r13 = ST[2] -> <self>
03EB   0x01D930   43 31 0C 00   Move                r49, r12       r49 = r12 [#30BFAD05B9FB096E]
03EC   0x01D938   43 32 0D 00   Move                r50, r13       r50 = r13 [self]
03ED   0x01D940   1C 0B 0B 02   CallFf              r11, r11, 2    r11 = get-int32(#30BFAD05B9FB096E, self)
03EE   0x01D948   43 31 0B 00   Move                r49, r11       r49 = r11 [get-int32()]
03EF   0x01D950   1B 0A 0A 01   Call                r10, r10, 1    r10 = #C57EE0A64537AE8F(get-int32())
03F0   0x01D958   43 31 07 00   Move                r49, r7        r49 = r7 [0xBF026BEB]
03F1   0x01D960   43 32 08 00   Move                r50, r8        r50 = r8 [0xBF025EFC]
03F2   0x01D968   43 33 09 00   Move                r51, r9        r51 = r9 [0xBF0272A2]
03F3   0x01D970   43 34 0A 00   Move                r52, r10       r52 = r10 [#C57EE0A64537AE8F()]
03F4   0x01D978   1C 06 06 04   CallFf              r6, r6, 4      r6 = #5445173390656D6D(0xBF026BEB, 0xBF025EFC, 0xBF0272A2, #C57EE0A64537AE8F())
03F5   0x01D980   0C 07 13 00   LoadU16Imm          r7, 19         r7 = 19
03F6   0x01D988   43 31 06 00   Move                r49, r6        r49 = r6 [#5445173390656D6D()]
03F7   0x01D990   43 32 07 00   Move                r50, r7        r50 = r7 [19]
03F8   0x01D998   1C 05 05 02   CallFf              r5, r5, 2      r5 = display(#5445173390656D6D(), 19)
03F9   0x01D9A0   2D FB 00 03   Branch              03FB           => L_91
L_90:
03FA   0x01D9A8   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
L_91:
03FB   0x01D9B0   15 05 06 00   LookupPointer       r5, 6          r5 = ST[6] -> <is-final-build?>
03FC   0x01D9B8   1C 05 05 00   CallFf              r5, r5, 0      r5 = is-final-build?()
03FD   0x01D9C0   30 05 05 00   OpLogNot            r5, r5         r5 = !r5 -> <TRUE>
03FE   0x01D9C8   2F 17 05 04   BranchIfNot         r5, 0417       IF NOT r5 [0x6620ACB7] => L_92
03FF   0x01D9D0   15 05 07 00   LookupPointer       r5, 7          r5 = ST[7] -> <display>
0400   0x01D9D8   15 06 08 00   LookupPointer       r6, 8          r6 = ST[8] -> <#5445173390656D6D>
0401   0x01D9E0   41 07 30 00   LoadStaticPointerImmr7, 48         r7 = ST[48] -> <0xBF026BEB>
0402   0x01D9E8   41 08 0A 00   LoadStaticPointerImmr8, 10         r8 = ST[10] -> <0xBF025EFC>
0403   0x01D9F0   41 09 31 00   LoadStaticPointerImmr9, 49         r9 = ST[49] -> <0xBF027424>
0404   0x01D9F8   15 0A 11 00   LookupPointer       r10, 17        r10 = ST[17] -> <string-debug>
0405   0x01DA00   15 0B 00 00   LookupPointer       r11, 0         r11 = ST[0] -> <get-symbol>
0406   0x01DA08   4A 0C 48 00   LoadStaticU64Imm    r12, 72        r12 = ST[72] -> <#7F25A075B1A9E239>
0407   0x01DA10   4A 0D 02 00   LoadStaticU64Imm    r13, 2         r13 = ST[2] -> <self>
0408   0x01DA18   43 31 0C 00   Move                r49, r12       r49 = r12 [#7F25A075B1A9E239]
0409   0x01DA20   43 32 0D 00   Move                r50, r13       r50 = r13 [self]
040A   0x01DA28   1C 0B 0B 02   CallFf              r11, r11, 2    r11 = get-symbol(#7F25A075B1A9E239, self)
040B   0x01DA30   43 31 0B 00   Move                r49, r11       r49 = r11 [get-symbol()]
040C   0x01DA38   1C 0A 0A 01   CallFf              r10, r10, 1    r10 = string-debug(get-symbol())
040D   0x01DA40   43 31 07 00   Move                r49, r7        r49 = r7 [0xBF026BEB]
040E   0x01DA48   43 32 08 00   Move                r50, r8        r50 = r8 [0xBF025EFC]
040F   0x01DA50   43 33 09 00   Move                r51, r9        r51 = r9 [0xBF027424]
0410   0x01DA58   43 34 0A 00   Move                r52, r10       r52 = r10 [string-debug()]
0411   0x01DA60   1C 06 06 04   CallFf              r6, r6, 4      r6 = #5445173390656D6D(0xBF026BEB, 0xBF025EFC, 0xBF027424, string-debug())
0412   0x01DA68   0C 07 13 00   LoadU16Imm          r7, 19         r7 = 19
0413   0x01DA70   43 31 06 00   Move                r49, r6        r49 = r6 [#5445173390656D6D()]
0414   0x01DA78   43 32 07 00   Move                r50, r7        r50 = r7 [19]
0415   0x01DA80   1C 05 05 02   CallFf              r5, r5, 2      r5 = display(#5445173390656D6D(), 19)
0416   0x01DA88   2D 18 00 04   Branch              0418           => L_93
L_92:
0417   0x01DA90   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
L_93:
0418   0x01DA98   15 05 06 00   LookupPointer       r5, 6          r5 = ST[6] -> <is-final-build?>
0419   0x01DAA0   1C 05 05 00   CallFf              r5, r5, 0      r5 = is-final-build?()
041A   0x01DAA8   30 05 05 00   OpLogNot            r5, r5         r5 = !r5 -> <TRUE>
041B   0x01DAB0   2F 34 05 04   BranchIfNot         r5, 0434       IF NOT r5 [0x6620ACB7] => L_94
041C   0x01DAB8   15 05 07 00   LookupPointer       r5, 7          r5 = ST[7] -> <display>
041D   0x01DAC0   15 06 08 00   LookupPointer       r6, 8          r6 = ST[8] -> <#5445173390656D6D>
041E   0x01DAC8   41 07 30 00   LoadStaticPointerImmr7, 48         r7 = ST[48] -> <0xBF026BEB>
041F   0x01DAD0   41 08 0A 00   LoadStaticPointerImmr8, 10         r8 = ST[10] -> <0xBF025EFC>
0420   0x01DAD8   41 09 4E 00   LoadStaticPointerImmr9, 78         r9 = ST[78] -> <0xBF026057>
0421   0x01DAE0   15 0A 11 00   LookupPointer       r10, 17        r10 = ST[17] -> <string-debug>
0422   0x01DAE8   15 0B 00 00   LookupPointer       r11, 0         r11 = ST[0] -> <get-symbol>
0423   0x01DAF0   4A 0C 4B 00   LoadStaticU64Imm    r12, 75        r12 = ST[75] -> <global-combat-params>
0424   0x01DAF8   4A 0D 02 00   LoadStaticU64Imm    r13, 2         r13 = ST[2] -> <self>
0425   0x01DB00   43 31 0C 00   Move                r49, r12       r49 = r12 [global-combat-params]
0426   0x01DB08   43 32 0D 00   Move                r50, r13       r50 = r13 [self]
0427   0x01DB10   1C 0B 0B 02   CallFf              r11, r11, 2    r11 = get-symbol(global-combat-params, self)
0428   0x01DB18   43 31 0B 00   Move                r49, r11       r49 = r11 [get-symbol()]
0429   0x01DB20   1C 0A 0A 01   CallFf              r10, r10, 1    r10 = string-debug(get-symbol())
042A   0x01DB28   43 31 07 00   Move                r49, r7        r49 = r7 [0xBF026BEB]
042B   0x01DB30   43 32 08 00   Move                r50, r8        r50 = r8 [0xBF025EFC]
042C   0x01DB38   43 33 09 00   Move                r51, r9        r51 = r9 [0xBF026057]
042D   0x01DB40   43 34 0A 00   Move                r52, r10       r52 = r10 [string-debug()]
042E   0x01DB48   1C 06 06 04   CallFf              r6, r6, 4      r6 = #5445173390656D6D(0xBF026BEB, 0xBF025EFC, 0xBF026057, string-debug())
042F   0x01DB50   0C 07 13 00   LoadU16Imm          r7, 19         r7 = 19
0430   0x01DB58   43 31 06 00   Move                r49, r6        r49 = r6 [#5445173390656D6D()]
0431   0x01DB60   43 32 07 00   Move                r50, r7        r50 = r7 [19]
0432   0x01DB68   1C 05 05 02   CallFf              r5, r5, 2      r5 = display(#5445173390656D6D(), 19)
0433   0x01DB70   2D 35 00 04   Branch              0435           => L_95
L_94:
0434   0x01DB78   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
L_95:
0435   0x01DB80   15 05 06 00   LookupPointer       r5, 6          r5 = ST[6] -> <is-final-build?>
0436   0x01DB88   1C 05 05 00   CallFf              r5, r5, 0      r5 = is-final-build?()
0437   0x01DB90   30 05 05 00   OpLogNot            r5, r5         r5 = !r5 -> <TRUE>
0438   0x01DB98   2F 55 05 04   BranchIfNot         r5, 0455       IF NOT r5 [0x6620ACB7] => L_96
0439   0x01DBA0   15 05 07 00   LookupPointer       r5, 7          r5 = ST[7] -> <display>
043A   0x01DBA8   15 06 08 00   LookupPointer       r6, 8          r6 = ST[8] -> <#5445173390656D6D>
043B   0x01DBB0   41 07 30 00   LoadStaticPointerImmr7, 48         r7 = ST[48] -> <0xBF026BEB>
043C   0x01DBB8   41 08 0A 00   LoadStaticPointerImmr8, 10         r8 = ST[10] -> <0xBF025EFC>
043D   0x01DBC0   41 09 4F 00   LoadStaticPointerImmr9, 79         r9 = ST[79] -> <0xBF02759F>
043E   0x01DBC8   15 0A 00 00   LookupPointer       r10, 0         r10 = ST[0] -> <get-symbol>
043F   0x01DBD0   4A 0B 4A 00   LoadStaticU64Imm    r11, 74        r11 = ST[74] -> <#FB88BDBA9A4B5DAA>
0440   0x01DBD8   4A 0C 02 00   LoadStaticU64Imm    r12, 2         r12 = ST[2] -> <self>
0441   0x01DBE0   43 31 0B 00   Move                r49, r11       r49 = r11 [#FB88BDBA9A4B5DAA]
0442   0x01DBE8   43 32 0C 00   Move                r50, r12       r50 = r12 [self]
0443   0x01DBF0   1C 0A 0A 02   CallFf              r10, r10, 2    r10 = get-symbol(#FB88BDBA9A4B5DAA, self)
0444   0x01DBF8   0C 0B 00 00   LoadU16Imm          r11, 0         r11 = 0
0445   0x01DC00   1D 0A 0A 0B   IEqual              r10, r10, r11  r10 = r10 [1774822656] == r11 [0]
0446   0x01DC08   30 0A 0A 00   OpLogNot            r10, r10       r10 = !r10 -> <TRUE>
0447   0x01DC10   2F 4A 0A 04   BranchIfNot         r10, 044A      IF NOT r10 [0x69C9A501] => L_97
0448   0x01DC18   41 0A 50 00   LoadStaticPointerImmr10, 80        r10 = ST[80] -> <0xBF027526>
0449   0x01DC20   2D 4B 00 04   Branch              044B           => L_98
L_97:
044A   0x01DC28   41 0A 3E 00   LoadStaticPointerImmr10, 62        r10 = ST[62] -> <0xBF02748C>
L_98:
044B   0x01DC30   43 31 07 00   Move                r49, r7        r49 = r7 [0xBF026BEB]
044C   0x01DC38   43 32 08 00   Move                r50, r8        r50 = r8 [0xBF025EFC]
044D   0x01DC40   43 33 09 00   Move                r51, r9        r51 = r9 [0xBF02759F]
044E   0x01DC48   43 34 0A 00   Move                r52, r10       r52 = r10 [0xBF02748C]
044F   0x01DC50   1C 06 06 04   CallFf              r6, r6, 4      r6 = #5445173390656D6D(0xBF026BEB, 0xBF025EFC, 0xBF02759F, 0xBF02748C)
0450   0x01DC58   0C 07 13 00   LoadU16Imm          r7, 19         r7 = 19
0451   0x01DC60   43 31 06 00   Move                r49, r6        r49 = r6 [#5445173390656D6D()]
0452   0x01DC68   43 32 07 00   Move                r50, r7        r50 = r7 [19]
0453   0x01DC70   1C 05 05 02   CallFf              r5, r5, 2      r5 = display(#5445173390656D6D(), 19)
0454   0x01DC78   2D 56 00 04   Branch              0456           => L_99
L_96:
0455   0x01DC80   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
L_99:
0456   0x01DC88   2D 6E 00 04   Branch              046E           => L_100
L_87:
0457   0x01DC90   15 05 06 00   LookupPointer       r5, 6          r5 = ST[6] -> <is-final-build?>
0458   0x01DC98   1C 05 05 00   CallFf              r5, r5, 0      r5 = is-final-build?()
0459   0x01DCA0   30 05 05 00   OpLogNot            r5, r5         r5 = !r5 -> <TRUE>
045A   0x01DCA8   2F 67 05 04   BranchIfNot         r5, 0467       IF NOT r5 [0x6620ACB7] => L_101
045B   0x01DCB0   15 05 07 00   LookupPointer       r5, 7          r5 = ST[7] -> <display>
045C   0x01DCB8   15 06 08 00   LookupPointer       r6, 8          r6 = ST[8] -> <#5445173390656D6D>
045D   0x01DCC0   41 07 51 00   LoadStaticPointerImmr7, 81         r7 = ST[81] -> <0xBF026477>
045E   0x01DCC8   41 08 0A 00   LoadStaticPointerImmr8, 10         r8 = ST[10] -> <0xBF025EFC>
045F   0x01DCD0   43 31 07 00   Move                r49, r7        r49 = r7 [0xBF026477]
0460   0x01DCD8   43 32 08 00   Move                r50, r8        r50 = r8 [0xBF025EFC]
0461   0x01DCE0   1C 06 06 02   CallFf              r6, r6, 2      r6 = #5445173390656D6D(0xBF026477, 0xBF025EFC)
0462   0x01DCE8   0C 07 13 00   LoadU16Imm          r7, 19         r7 = 19
0463   0x01DCF0   43 31 06 00   Move                r49, r6        r49 = r6 [#5445173390656D6D()]
0464   0x01DCF8   43 32 07 00   Move                r50, r7        r50 = r7 [19]
0465   0x01DD00   1C 05 05 02   CallFf              r5, r5, 2      r5 = display(#5445173390656D6D(), 19)
0466   0x01DD08   2D 68 00 04   Branch              0468           => L_102
L_101:
0467   0x01DD10   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
L_102:
0468   0x01DD18   15 05 44 00   LookupPointer       r5, 68         r5 = ST[68] -> <go>
0469   0x01DD20   4A 06 45 00   LoadStaticU64Imm    r6, 69         r6 = ST[69] -> <done>
046A   0x01DD28   0C 07 01 00   LoadU16Imm          r7, 1          r7 = 1
046B   0x01DD30   43 31 06 00   Move                r49, r6        r49 = r6 [done]
046C   0x01DD38   43 32 07 00   Move                r50, r7        r50 = r7 [1]
046D   0x01DD40   1C 05 05 02   CallFf              r5, r5, 2      r5 = go(done, 1)
L_100:
046E   0x01DD48   15 05 52 00   LookupPointer       r5, 82         r5 = ST[82] -> <darray-clear>
046F   0x01DD50   4A 06 53 00   LoadStaticU64Imm    r6, 83         r6 = ST[83] -> <#88F409F4BF0F056A>
0470   0x01DD58   43 31 06 00   Move                r49, r6        r49 = r6 [#88F409F4BF0F056A]
0471   0x01DD60   1C 05 05 01   CallFf              r5, r5, 1      r5 = darray-clear(#88F409F4BF0F056A)
0472   0x01DD68   15 05 52 00   LookupPointer       r5, 82         r5 = ST[82] -> <darray-clear>
0473   0x01DD70   4A 06 54 00   LoadStaticU64Imm    r6, 84         r6 = ST[84] -> <#9C27142D7E9F3555>
0474   0x01DD78   43 31 06 00   Move                r49, r6        r49 = r6 [#9C27142D7E9F3555]
0475   0x01DD80   1C 05 05 01   CallFf              r5, r5, 1      r5 = darray-clear(#9C27142D7E9F3555)
0476   0x01DD88   43 05 04 00   Move                r5, r4         r5 = r4 [0x0]
0477   0x01DD90   5D 05 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0478   0x01DD98   3B 05 05 20   IAddImm             r5, r5, 32     r5 = r5 [0] / 32 -> <0>
0479   0x01DDA0   0F 05 05 00   LoadPointer         r5, [r5]       r5 = [0x0 + 0x0]
047A   0x01DDA8   3F 06 0E 00   LoadStaticI32Imm    r6, 14         r6 = ST[14] -> <-1>
047B   0x01DDB0   0C 07 00 00   LoadU16Imm          r7, 0          r7 = 0
L_107:
047C   0x01DDB8   43 08 07 00   Move                r8, r7         r8 = r7 [0]
047D   0x01DDC0   43 09 05 00   Move                r9, r5         r9 = r5 [0x0]
047E   0x01DDC8   0C 0A 08 00   LoadU16Imm          r10, 8         r10 = 8
047F   0x01DDD0   01 09 09 0A   IAdd                r9, r9, r10    0x0 = 0x0 + 8
0480   0x01DDD8   4F 09 09 00   LoadI32             ???            UNKNOWN INSTRUCTION
0481   0x01DDE0   20 08 08 09   ILessThan           r8, r8, r9     r8 = r8 [0] < r9 [0]
0482   0x01DDE8   2F 9D 08 04   BranchIfNot         r8, 049D       IF NOT r8 [0x0] => L_103
0483   0x01DDF0   43 08 06 00   Move                r8, r6         r8 = r6 [-1]
0484   0x01DDF8   3F 09 0E 00   LoadStaticI32Imm    r9, 14         r9 = ST[14] -> <-1>
0485   0x01DE00   1D 08 08 09   IEqual              r8, r8, r9     r8 = r8 [-256] == r9 [-1]
0486   0x01DE08   2F 91 08 04   BranchIfNot         r8, 0491       IF NOT r8 [0xFFFFFF00] => L_104
0487   0x01DE10   15 08 55 00   LookupPointer       r8, 85         r8 = ST[85] -> <#8A8D5C923D5DDB3B>
0488   0x01DE18   1B 08 08 00   Call                r8, r8, 0      r8 = #8A8D5C923D5DDB3B()
0489   0x01DE20   43 09 05 00   Move                r9, r5         r9 = r5 [0x0]
048A   0x01DE28   0F 09 09 00   LoadPointer         r9, [r9]       r9 = [0x0 + 0x0]
048B   0x01DE30   43 0A 07 00   Move                r10, r7        r10 = r7 [0]
048C   0x01DE38   3D 0A 0A 18   IMulImm             r10, r10, 24   r10 = r10 [0] / 24 -> <0>
048D   0x01DE40   01 09 09 0A   IAdd                r9, r9, r10    0x0 = 0x0 + 0
048E   0x01DE48   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
048F   0x01DE50   4F 09 09 00   LoadI32             ???            UNKNOWN INSTRUCTION
0490   0x01DE58   1D 08 08 09   IEqual              r8, r8, r9     r8 = r8 [1029561088] == r9 [0]
L_104:
0491   0x01DE60   2F 96 08 04   BranchIfNot         r8, 0496       IF NOT r8 [0x3D5DDB00] => L_105
0492   0x01DE68   43 08 07 00   Move                r8, r7         r8 = r7 [0]
0493   0x01DE70   43 06 08 00   Move                r6, r8         r6 = r8 [0]
0494   0x01DE78   43 08 06 00   Move                r8, r6         r8 = r6 [0]
0495   0x01DE80   2D 97 00 04   Branch              0497           => L_106
L_105:
0496   0x01DE88   0C 08 00 00   LoadU16Imm          r8, 0          r8 = 0
L_106:
0497   0x01DE90   43 08 07 00   Move                r8, r7         r8 = r7 [0]
0498   0x01DE98   0C 09 01 00   LoadU16Imm          r9, 1          r9 = 1
0499   0x01DEA0   01 08 08 09   IAdd                r8, r8, r9     1 = 0 + 1
049A   0x01DEA8   43 07 08 00   Move                r7, r8         r7 = r8 [1]
049B   0x01DEB0   43 08 07 00   Move                r8, r7         r8 = r7 [1]
049C   0x01DEB8   2D 7C 00 04   Branch              047C           => L_107
L_103:
049D   0x01DEC0   43 07 08 00   Move                r7, r8         r7 = r8 [1]
049E   0x01DEC8   15 07 25 00   LookupPointer       r7, 37         r7 = ST[37] -> <set-int32>
049F   0x01DED0   4A 08 56 00   LoadStaticU64Imm    r8, 86         r8 = ST[86] -> <#A2DAF2B622A5ECFD>
04A0   0x01DED8   43 09 06 00   Move                r9, r6         r9 = r6 [0]
04A1   0x01DEE0   4A 0A 02 00   LoadStaticU64Imm    r10, 2         r10 = ST[2] -> <self>
04A2   0x01DEE8   43 31 08 00   Move                r49, r8        r49 = r8 [#A2DAF2B622A5ECFD]
04A3   0x01DEF0   43 32 09 00   Move                r50, r9        r50 = r9 [0]
04A4   0x01DEF8   43 33 0A 00   Move                r51, r10       r51 = r10 [self]
04A5   0x01DF00   1C 07 07 03   CallFf              r7, r7, 3      r7 = set-int32(#A2DAF2B622A5ECFD, 0, self)
04A6   0x01DF08   43 07 06 00   Move                r7, r6         r7 = r6 [0]
04A7   0x01DF10   0C 08 00 00   LoadU16Imm          r8, 0          r8 = 0
04A8   0x01DF18   1F 07 07 08   IGreaterThanEqual   r7, r7, r8     r7 = r7 [1] >= r8 [0]
04A9   0x01DF20   2F 40 07 05   BranchIfNot         r7, 0540       IF NOT r7 [0x1] => L_108
04AA   0x01DF28   43 07 05 00   Move                r7, r5         r7 = r5 [0x0]
04AB   0x01DF30   0F 07 07 00   LoadPointer         r7, [r7]       r7 = [0x0 + 0x0]
04AC   0x01DF38   43 08 06 00   Move                r8, r6         r8 = r6 [0]
04AD   0x01DF40   3D 08 08 18   IMulImm             r8, r8, 24     r8 = r8 [0] / 24 -> <0>
04AE   0x01DF48   01 07 07 08   IAdd                r7, r7, r8     0x0 = 0x0 + 0
04AF   0x01DF50   43 08 07 00   Move                r8, r7         r8 = r7 [0x0]
04B0   0x01DF58   5D 08 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
04B1   0x01DF60   3B 08 08 08   IAddImm             r8, r8, 8      r8 = r8 [0] / 8 -> <0>
04B2   0x01DF68   0F 08 08 00   LoadPointer         r8, [r8]       r8 = [0x0 + 0x0]
04B3   0x01DF70   43 09 07 00   Move                r9, r7         r9 = r7 [0x0]
04B4   0x01DF78   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
04B5   0x01DF80   3B 09 09 10   IAddImm             r9, r9, 16     r9 = r9 [0] / 16 -> <0>
04B6   0x01DF88   0F 09 09 00   LoadPointer         r9, [r9]       r9 = [0x0 + 0x0]
04B7   0x01DF90   15 0A 57 00   LookupPointer       r10, 87        r10 = ST[87] -> <#FED5328A0676BCED>
04B8   0x01DF98   1C 0A 0A 00   CallFf              r10, r10, 0    r10 = #FED5328A0676BCED()
04B9   0x01DFA0   0C 0B 00 00   LoadU16Imm          r11, 0         r11 = 0
L_115:
04BA   0x01DFA8   43 0C 0B 00   Move                r12, r11       r12 = r11 [0]
04BB   0x01DFB0   43 0D 08 00   Move                r13, r8        r13 = r8 [0x0]
04BC   0x01DFB8   0C 0E 08 00   LoadU16Imm          r14, 8         r14 = 8
04BD   0x01DFC0   01 0D 0D 0E   IAdd                r13, r13, r14  0x0 = 0x0 + 8
04BE   0x01DFC8   4F 0D 0D 00   LoadI32             ???            UNKNOWN INSTRUCTION
04BF   0x01DFD0   20 0C 0C 0D   ILessThan           r12, r12, r13  r12 = r12 [0] < r13 [0]
04C0   0x01DFD8   2F 02 0C 05   BranchIfNot         r12, 0502      IF NOT r12 [0x0] => L_109
04C1   0x01DFE0   0C 0C 01 00   LoadU16Imm          r12, 1         r12 = 1
04C2   0x01DFE8   43 0D 08 00   Move                r13, r8        r13 = r8 [0x0]
04C3   0x01DFF0   0F 0D 0D 00   LoadPointer         r13, [r13]     r13 = [0x0 + 0x0]
04C4   0x01DFF8   43 0E 0B 00   Move                r14, r11       r14 = r11 [0]
04C5   0x01E000   3D 0E 0E 08   IMulImm             r14, r14, 8    r14 = r14 [0] / 8 -> <0>
04C6   0x01E008   01 0D 0D 0E   IAdd                r13, r13, r14  0x0 = 0x0 + 0
04C7   0x01E010   43 0E 0A 00   Move                r14, r10       r14 = r10 [#FED5328A0676BCED()]
04C8   0x01E018   2F CD 0E 04   BranchIfNot         r14, 04CD      IF NOT r14 [#FED5328A0676BCED()] => L_110
04C9   0x01E020   15 0E 58 00   LookupPointer       r14, 88        r14 = ST[88] -> <#1C323EA9CAACC757>
04CA   0x01E028   43 0F 0D 00   Move                r15, r13       r15 = r13 [0x0]
04CB   0x01E030   43 31 0F 00   Move                r49, r15       r49 = r15 [0x0]
04CC   0x01E038   1B 0E 0E 01   Call                r14, r14, 1    r14 = #1C323EA9CAACC757(0x0)
L_110:
04CD   0x01E040   2F D2 0E 04   BranchIfNot         r14, 04D2      IF NOT r14 [#1C323EA9CAACC757()] => L_111
04CE   0x01E048   0C 0E 00 00   LoadU16Imm          r14, 0         r14 = 0
04CF   0x01E050   43 0C 0E 00   Move                r12, r14       r12 = r14 [0]
04D0   0x01E058   43 0E 0C 00   Move                r14, r12       r14 = r12 [0]
04D1   0x01E060   2D D3 00 04   Branch              04D3           => L_112
L_111:
04D2   0x01E068   0C 0E 00 00   LoadU16Imm          r14, 0         r14 = 0
L_112:
04D3   0x01E070   43 0E 0C 00   Move                r14, r12       r14 = r12 [0]
04D4   0x01E078   2F FA 0E 04   BranchIfNot         r14, 04FA      IF NOT r14 [0] => L_113
04D5   0x01E080   15 0E 14 00   LookupPointer       r14, 20        r14 = ST[20] -> <darray-append>
04D6   0x01E088   15 0F 00 00   LookupPointer       r15, 0         r15 = ST[0] -> <get-symbol>
04D7   0x01E090   4A 10 59 00   LoadStaticU64Imm    r16, 89        r16 = ST[89] -> <#3CD186F47CCAE6B1>
04D8   0x01E098   4A 11 02 00   LoadStaticU64Imm    r17, 2         r17 = ST[2] -> <self>
04D9   0x01E0A0   43 31 10 00   Move                r49, r16       r49 = r16 [#3CD186F47CCAE6B1]
04DA   0x01E0A8   43 32 11 00   Move                r50, r17       r50 = r17 [self]
04DB   0x01E0B0   1C 0F 0F 02   CallFf              r15, r15, 2    r15 = get-symbol(#3CD186F47CCAE6B1, self)
04DC   0x01E0B8   15 10 15 00   LookupPointer       r16, 21        r16 = ST[21] -> <new-boxed-value>
04DD   0x01E0C0   0C 11 02 00   LoadU16Imm          r17, 2         r17 = 2
04DE   0x01E0C8   43 12 0B 00   Move                r18, r11       r18 = r11 [0]
04DF   0x01E0D0   43 31 11 00   Move                r49, r17       r49 = r17 [2]
04E0   0x01E0D8   43 32 12 00   Move                r50, r18       r50 = r18 [0]
04E1   0x01E0E0   1C 10 10 02   CallFf              r16, r16, 2    r16 = new-boxed-value(2, 0)
04E2   0x01E0E8   0C 11 00 00   LoadU16Imm          r17, 0         r17 = 0
04E3   0x01E0F0   43 31 0F 00   Move                r49, r15       r49 = r15 [get-symbol()]
04E4   0x01E0F8   43 32 10 00   Move                r50, r16       r50 = r16 [new-boxed-value()]
04E5   0x01E100   43 33 11 00   Move                r51, r17       r51 = r17 [0]
04E6   0x01E108   1C 0E 0E 03   CallFf              r14, r14, 3    r14 = darray-append(get-symbol(), new-boxed-value(), 0)
04E7   0x01E110   15 0E 14 00   LookupPointer       r14, 20        r14 = ST[20] -> <darray-append>
04E8   0x01E118   15 0F 00 00   LookupPointer       r15, 0         r15 = ST[0] -> <get-symbol>
04E9   0x01E120   4A 10 5A 00   LoadStaticU64Imm    r16, 90        r16 = ST[90] -> <#FDC4C8C377BAE464>
04EA   0x01E128   4A 11 02 00   LoadStaticU64Imm    r17, 2         r17 = ST[2] -> <self>
04EB   0x01E130   43 31 10 00   Move                r49, r16       r49 = r16 [#FDC4C8C377BAE464]
04EC   0x01E138   43 32 11 00   Move                r50, r17       r50 = r17 [self]
04ED   0x01E140   1C 0F 0F 02   CallFf              r15, r15, 2    r15 = get-symbol(#FDC4C8C377BAE464, self)
04EE   0x01E148   15 10 15 00   LookupPointer       r16, 21        r16 = ST[21] -> <new-boxed-value>
04EF   0x01E150   0C 11 02 00   LoadU16Imm          r17, 2         r17 = 2
04F0   0x01E158   43 12 0B 00   Move                r18, r11       r18 = r11 [0]
04F1   0x01E160   43 31 11 00   Move                r49, r17       r49 = r17 [2]
04F2   0x01E168   43 32 12 00   Move                r50, r18       r50 = r18 [0]
04F3   0x01E170   1C 10 10 02   CallFf              r16, r16, 2    r16 = new-boxed-value(2, 0)
04F4   0x01E178   0C 11 00 00   LoadU16Imm          r17, 0         r17 = 0
04F5   0x01E180   43 31 0F 00   Move                r49, r15       r49 = r15 [get-symbol()]
04F6   0x01E188   43 32 10 00   Move                r50, r16       r50 = r16 [new-boxed-value()]
04F7   0x01E190   43 33 11 00   Move                r51, r17       r51 = r17 [0]
04F8   0x01E198   1C 0E 0E 03   CallFf              r14, r14, 3    r14 = darray-append(get-symbol(), new-boxed-value(), 0)
04F9   0x01E1A0   2D FB 00 04   Branch              04FB           => L_114
L_113:
04FA   0x01E1A8   0C 0E 00 00   LoadU16Imm          r14, 0         r14 = 0
L_114:
04FB   0x01E1B0   43 0C 0E 00   Move                r12, r14       r12 = r14 [0]
04FC   0x01E1B8   43 0C 0B 00   Move                r12, r11       r12 = r11 [0]
04FD   0x01E1C0   0C 0D 01 00   LoadU16Imm          r13, 1         r13 = 1
04FE   0x01E1C8   01 0C 0C 0D   IAdd                r12, r12, r13  1 = 0 + 1
04FF   0x01E1D0   43 0B 0C 00   Move                r11, r12       r11 = r12 [1]
0500   0x01E1D8   43 0C 0B 00   Move                r12, r11       r12 = r11 [1]
0501   0x01E1E0   2D BA 00 04   Branch              04BA           => L_115
L_109:
0502   0x01E1E8   43 0B 0C 00   Move                r11, r12       r11 = r12 [1]
0503   0x01E1F0   43 0B 09 00   Move                r11, r9        r11 = r9 [0x0]
0504   0x01E1F8   2F 39 0B 05   BranchIfNot         r11, 0539      IF NOT r11 [0x0] => L_116
0505   0x01E200   0C 0B 00 00   LoadU16Imm          r11, 0         r11 = 0
L_118:
0506   0x01E208   43 0C 0B 00   Move                r12, r11       r12 = r11 [0]
0507   0x01E210   43 0D 09 00   Move                r13, r9        r13 = r9 [0x0]
0508   0x01E218   0C 0E 08 00   LoadU16Imm          r14, 8         r14 = 8
0509   0x01E220   01 0D 0D 0E   IAdd                r13, r13, r14  0x0 = 0x0 + 8
050A   0x01E228   4F 0D 0D 00   LoadI32             ???            UNKNOWN INSTRUCTION
050B   0x01E230   20 0C 0C 0D   ILessThan           r12, r12, r13  r12 = r12 [0] < r13 [0]
050C   0x01E238   2F 37 0C 05   BranchIfNot         r12, 0537      IF NOT r12 [0x0] => L_117
050D   0x01E240   15 0C 14 00   LookupPointer       r12, 20        r12 = ST[20] -> <darray-append>
050E   0x01E248   15 0D 00 00   LookupPointer       r13, 0         r13 = ST[0] -> <get-symbol>
050F   0x01E250   4A 0E 5B 00   LoadStaticU64Imm    r14, 91        r14 = ST[91] -> <#AE606DDB7F18D76F>
0510   0x01E258   4A 0F 02 00   LoadStaticU64Imm    r15, 2         r15 = ST[2] -> <self>
0511   0x01E260   43 31 0E 00   Move                r49, r14       r49 = r14 [#AE606DDB7F18D76F]
0512   0x01E268   43 32 0F 00   Move                r50, r15       r50 = r15 [self]
0513   0x01E270   1C 0D 0D 02   CallFf              r13, r13, 2    r13 = get-symbol(#AE606DDB7F18D76F, self)
0514   0x01E278   15 0E 15 00   LookupPointer       r14, 21        r14 = ST[21] -> <new-boxed-value>
0515   0x01E280   0C 0F 02 00   LoadU16Imm          r15, 2         r15 = 2
0516   0x01E288   43 10 0B 00   Move                r16, r11       r16 = r11 [0]
0517   0x01E290   43 31 0F 00   Move                r49, r15       r49 = r15 [2]
0518   0x01E298   43 32 10 00   Move                r50, r16       r50 = r16 [0]
0519   0x01E2A0   1C 0E 0E 02   CallFf              r14, r14, 2    r14 = new-boxed-value(2, 0)
051A   0x01E2A8   0C 0F 00 00   LoadU16Imm          r15, 0         r15 = 0
051B   0x01E2B0   43 31 0D 00   Move                r49, r13       r49 = r13 [get-symbol()]
051C   0x01E2B8   43 32 0E 00   Move                r50, r14       r50 = r14 [new-boxed-value()]
051D   0x01E2C0   43 33 0F 00   Move                r51, r15       r51 = r15 [0]
051E   0x01E2C8   1C 0C 0C 03   CallFf              r12, r12, 3    r12 = darray-append(get-symbol(), new-boxed-value(), 0)
051F   0x01E2D0   15 0C 14 00   LookupPointer       r12, 20        r12 = ST[20] -> <darray-append>
0520   0x01E2D8   15 0D 00 00   LookupPointer       r13, 0         r13 = ST[0] -> <get-symbol>
0521   0x01E2E0   4A 0E 5C 00   LoadStaticU64Imm    r14, 92        r14 = ST[92] -> <#F14ED4EDE9DDEA26>
0522   0x01E2E8   4A 0F 02 00   LoadStaticU64Imm    r15, 2         r15 = ST[2] -> <self>
0523   0x01E2F0   43 31 0E 00   Move                r49, r14       r49 = r14 [#F14ED4EDE9DDEA26]
0524   0x01E2F8   43 32 0F 00   Move                r50, r15       r50 = r15 [self]
0525   0x01E300   1C 0D 0D 02   CallFf              r13, r13, 2    r13 = get-symbol(#F14ED4EDE9DDEA26, self)
0526   0x01E308   15 0E 15 00   LookupPointer       r14, 21        r14 = ST[21] -> <new-boxed-value>
0527   0x01E310   0C 0F 02 00   LoadU16Imm          r15, 2         r15 = 2
0528   0x01E318   43 10 0B 00   Move                r16, r11       r16 = r11 [0]
0529   0x01E320   43 31 0F 00   Move                r49, r15       r49 = r15 [2]
052A   0x01E328   43 32 10 00   Move                r50, r16       r50 = r16 [0]
052B   0x01E330   1C 0E 0E 02   CallFf              r14, r14, 2    r14 = new-boxed-value(2, 0)
052C   0x01E338   0C 0F 00 00   LoadU16Imm          r15, 0         r15 = 0
052D   0x01E340   43 31 0D 00   Move                r49, r13       r49 = r13 [get-symbol()]
052E   0x01E348   43 32 0E 00   Move                r50, r14       r50 = r14 [new-boxed-value()]
052F   0x01E350   43 33 0F 00   Move                r51, r15       r51 = r15 [0]
0530   0x01E358   1C 0C 0C 03   CallFf              r12, r12, 3    r12 = darray-append(get-symbol(), new-boxed-value(), 0)
0531   0x01E360   43 0C 0B 00   Move                r12, r11       r12 = r11 [0]
0532   0x01E368   0C 0D 01 00   LoadU16Imm          r13, 1         r13 = 1
0533   0x01E370   01 0C 0C 0D   IAdd                r12, r12, r13  1 = 0 + 1
0534   0x01E378   43 0B 0C 00   Move                r11, r12       r11 = r12 [1]
0535   0x01E380   43 0C 0B 00   Move                r12, r11       r12 = r11 [1]
0536   0x01E388   2D 06 00 05   Branch              0506           => L_118
L_117:
0537   0x01E390   43 0B 0C 00   Move                r11, r12       r11 = r12 [1]
0538   0x01E398   2D 3A 00 05   Branch              053A           => L_119
L_116:
0539   0x01E3A0   0C 0B 00 00   LoadU16Imm          r11, 0         r11 = 0
L_119:
053A   0x01E3A8   43 0B 0B 00   Move                r11, r11       r11 = r11 [0]
053B   0x01E3B0   43 0A 0B 00   Move                r10, r11       r10 = r11 [0]
053C   0x01E3B8   43 09 0A 00   Move                r9, r10        r9 = r10 [0]
053D   0x01E3C0   43 08 09 00   Move                r8, r9         r8 = r9 [0]
053E   0x01E3C8   43 07 08 00   Move                r7, r8         r7 = r8 [0]
053F   0x01E3D0   2D 41 00 05   Branch              0541           => L_120
L_108:
0540   0x01E3D8   0C 07 00 00   LoadU16Imm          r7, 0          r7 = 0
L_120:
0541   0x01E3E0   43 05 07 00   Move                r5, r7         r5 = r7 [0]
0542   0x01E3E8   15 05 5D 00   LookupPointer       r5, 93         r5 = ST[93] -> <wait-one-frame>
0543   0x01E3F0   1C 05 05 00   CallFf              r5, r5, 0      r5 = wait-one-frame()
0544   0x01E3F8   15 05 44 00   LookupPointer       r5, 68         r5 = ST[68] -> <go>
0545   0x01E400   4A 06 5E 00   LoadStaticU64Imm    r6, 94         r6 = ST[94] -> <setup-spawn-config>
0546   0x01E408   0C 07 01 00   LoadU16Imm          r7, 1          r7 = 1
0547   0x01E410   43 31 06 00   Move                r49, r6        r49 = r6 [setup-spawn-config]
0548   0x01E418   43 32 07 00   Move                r50, r7        r50 = r7 [1]
0549   0x01E420   1C 05 05 02   CallFf              r5, r5, 2      r5 = go(setup-spawn-config, 1)
054A   0x01E428   43 05 05 00   Move                r5, r5         r5 = r5 [go()]
054B   0x01E430   43 04 05 00   Move                r4, r5         r4 = r5 [go]
054C   0x01E438   43 03 04 00   Move                r3, r4         r3 = r4 [go]
054D   0x01E440   43 02 03 00   Move                r2, r3         r2 = r3 [go]
054E   0x01E448   43 01 02 00   Move                r1, r2         r1 = r2 [go]
054F   0x01E450   43 00 01 00   Move                r0, r1         r0 = r1 [go]
0550   0x01E458   00 00 00 00   Return              r0             Return go
SYMBOL TABLE: 
0000   0x01E460    POINTER <get-symbol>
0001   0x01E468    SID <#220FDE5797DE75AE>
0002   0x01E470    SID <self>
0003   0x01E478    POINTER <get-boolean>
0004   0x01E480    SID <#E13DA8B7F1BF181B>
0005   0x01E488    SID <ss-wave-manager-level-set-loader-1>
0006   0x01E490    POINTER <is-final-build?>
0007   0x01E498    POINTER <display>
0008   0x01E4A0    POINTER <#5445173390656D6D>
0009   0x01E4A8    POINTER <#00000282BF02675A>
000A   0x01E4B0    POINTER <#00000282BF025EFC>
000B   0x01E4B8    POINTER <get-svar>
000C   0x01E4C0    SID <#B588F9BE19063DAC>
000D   0x01E4C8    POINTER <darray-create>
000E   0x01E4D0    INT <-1>
000F   0x01E4D8    POINTER <#00000282BF026782>
0010   0x01E4E0    POINTER <#00000282BF0260AD>
0011   0x01E4E8    POINTER <string-debug>
0012   0x01E4F0    POINTER <#00000282BF0263B8>
0013   0x01E4F8    POINTER <#C57EE0A64537AE8F>
0014   0x01E500    POINTER <darray-append>
0015   0x01E508    POINTER <new-boxed-value>
0016   0x01E510    POINTER <#00000282BF026CE4>
0017   0x01E518    POINTER <darray-count>
0018   0x01E520    POINTER <rogue-get-next-random-number-for-category>
0019   0x01E528    SID <#D960300736CC6C1D>
001A   0x01E530    POINTER <mod-int32>
001B   0x01E538    POINTER <darray-at>
001C   0x01E540    POINTER <#00000282BF0266A3>
001D   0x01E548    POINTER <#00000282BF02634F>
001E   0x01E550    POINTER <display-error>
001F   0x01E558    POINTER <#00000282BF0272AA>
0020   0x01E560    POINTER <darray-destroy>
0021   0x01E568    POINTER <#00000282BF026B76>
0022   0x01E570    POINTER <set-symbol>
0023   0x01E578    SID <#CD9D116CF6E5DE86>
0024   0x01E580    SID <#7E358C581E146817>
0025   0x01E588    POINTER <set-int32>
0026   0x01E590    SID <num-waves>
0027   0x01E598    POINTER <set-boolean>
0028   0x01E5A0    SID <#5F89BCA42A4FC333>
0029   0x01E5A8    SID <#FB027CA453EDDE5B>
002A   0x01E5B0    POINTER <#B96C7EEF7ACAB122>
002B   0x01E5B8    SID <#5389CC70A44E7358>
002C   0x01E5C0    SID <#1FD0D5BACF6C26B1>
002D   0x01E5C8    SID <#CD5807AC5F281201>
002E   0x01E5D0    SID <#F4BB1A242FE97D63>
002F   0x01E5D8    INT <999999999>
0030   0x01E5E0    POINTER <#00000282BF026BEB>
0031   0x01E5E8    POINTER <#00000282BF027424>
0032   0x01E5F0    POINTER <#00000282BF026BD4>
0033   0x01E5F8    POINTER <#00000282BF0274E0>
0034   0x01E600    POINTER <get-int32>
0035   0x01E608    POINTER <#00000282BF02752F>
0036   0x01E610    POINTER <#00000282BF027502>
0037   0x01E618    POINTER <#00000282BF0274FE>
0038   0x01E620    POINTER <#00000282BF026C02>
0039   0x01E628    POINTER <#00000282BF027208>
003A   0x01E630    POINTER <#00000282BF0274FB>
003B   0x01E638    POINTER <#00000282BF025F32>
003C   0x01E640    POINTER <#00000282BF027335>
003D   0x01E648    POINTER <#00000282BF025F04>
003E   0x01E650    POINTER <#00000282BF02748C>
003F   0x01E658    POINTER <#00000282BF02742C>
0040   0x01E660    POINTER <#00000282BF026041>
0041   0x01E668    POINTER <#00000282BF0275AC>
0042   0x01E670    POINTER <#00000282BF027754>
0043   0x01E678    POINTER <#00000282BF02649D>
0044   0x01E680    POINTER <go>
0045   0x01E688    SID <done>
0046   0x01E690    POINTER <#00000282BF026B25>
0047   0x01E698    SID <#8BE9BBBC87A08374>
0048   0x01E6A0    SID <#7F25A075B1A9E239>
0049   0x01E6A8    SID <#30BFAD05B9FB096E>
004A   0x01E6B0    SID <#FB88BDBA9A4B5DAA>
004B   0x01E6B8    SID <global-combat-params>
004C   0x01E6C0    SID <#84335FAD5E97BB40>
004D   0x01E6C8    POINTER <#00000282BF0272A2>
004E   0x01E6D0    POINTER <#00000282BF026057>
004F   0x01E6D8    POINTER <#00000282BF02759F>
0050   0x01E6E0    POINTER <#00000282BF027526>
0051   0x01E6E8    POINTER <#00000282BF026477>
0052   0x01E6F0    POINTER <darray-clear>
0053   0x01E6F8    SID <#88F409F4BF0F056A>
0054   0x01E700    SID <#9C27142D7E9F3555>
0055   0x01E708    POINTER <#8A8D5C923D5DDB3B>
0056   0x01E710    SID <#A2DAF2B622A5ECFD>
0057   0x01E718    POINTER <#FED5328A0676BCED>
0058   0x01E720    POINTER <#1C323EA9CAACC757>
0059   0x01E728    SID <#3CD186F47CCAE6B1>
005A   0x01E730    SID <#FDC4C8C377BAE464>
005B   0x01E738    SID <#AE606DDB7F18D76F>
005C   0x01E740    SID <#F14ED4EDE9DDEA26>
005D   0x01E748    POINTER <wait-one-frame>
005E   0x01E750    SID <setup-spawn-config>
      STATE setup-spawn-config:
         ON start
          TRACK main:
0000   0x00A1F8   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <is-final-build?>
0001   0x00A200   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0002   0x00A208   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0003   0x00A210   2F 0E 00 00   BranchIfNot         r0, 000E       IF NOT r0 [0x6620ACB7] => L_0
0004   0x00A218   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <display>
0005   0x00A220   15 01 02 00   LookupPointer       r1, 2          r1 = ST[2] -> <#5445173390656D6D>
0006   0x00A228   41 02 03 00   LoadStaticPointerImmr2, 3          r2 = ST[3] -> <0xBF027138>
0007   0x00A230   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF027138]
0008   0x00A238   1C 01 01 01   CallFf              r1, r1, 1      r1 = #5445173390656D6D(0xBF027138)
0009   0x00A240   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
000A   0x00A248   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
000B   0x00A250   43 32 02 00   Move                r50, r2        r50 = r2 [19]
000C   0x00A258   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
000D   0x00A260   2D 0F 00 00   Branch              000F           => L_RETURN
L_0:
000E   0x00A268   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
000F   0x00A270   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x00A278    POINTER <is-final-build?>
0001   0x00A280    POINTER <display>
0002   0x00A288    POINTER <#5445173390656D6D>
0003   0x00A290    POINTER <#00000282BF027138>
0000   0x018F88   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <is-final-build?>
0001   0x018F90   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0002   0x018F98   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0003   0x018FA0   2F 1E 00 00   BranchIfNot         r0, 001E       IF NOT r0 [0x6620ACB7] => L_0
0004   0x018FA8   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <display>
0005   0x018FB0   15 01 02 00   LookupPointer       r1, 2          r1 = ST[2] -> <#5445173390656D6D>
0006   0x018FB8   41 02 03 00   LoadStaticPointerImmr2, 3          r2 = ST[3] -> <0xBF02699B>
0007   0x018FC0   41 03 04 00   LoadStaticPointerImmr3, 4          r3 = ST[4] -> <0xBF025EFC>
0008   0x018FC8   15 04 05 00   LookupPointer       r4, 5          r4 = ST[5] -> <get-symbol>
0009   0x018FD0   4A 05 06 00   LoadStaticU64Imm    r5, 6          r5 = ST[6] -> <#F4BB1A242FE97D63>
000A   0x018FD8   4A 06 07 00   LoadStaticU64Imm    r6, 7          r6 = ST[7] -> <self>
000B   0x018FE0   43 31 05 00   Move                r49, r5        r49 = r5 [#F4BB1A242FE97D63]
000C   0x018FE8   43 32 06 00   Move                r50, r6        r50 = r6 [self]
000D   0x018FF0   1C 04 04 02   CallFf              r4, r4, 2      r4 = get-symbol(#F4BB1A242FE97D63, self)
000E   0x018FF8   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
000F   0x019000   1D 04 04 05   IEqual              r4, r4, r5     r4 = r4 [1774822656] == r5 [0]
0010   0x019008   30 04 04 00   OpLogNot            r4, r4         r4 = !r4 -> <TRUE>
0011   0x019010   2F 14 04 00   BranchIfNot         r4, 0014       IF NOT r4 [0x69C9A501] => L_1
0012   0x019018   41 04 08 00   LoadStaticPointerImmr4, 8          r4 = ST[8] -> <0xBF027C2E>
0013   0x019020   2D 15 00 00   Branch              0015           => L_2
L_1:
0014   0x019028   41 04 09 00   LoadStaticPointerImmr4, 9          r4 = ST[9] -> <0xBF027BFE>
L_2:
0015   0x019030   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF02699B]
0016   0x019038   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
0017   0x019040   43 33 04 00   Move                r51, r4        r51 = r4 [0xBF027BFE]
0018   0x019048   1C 01 01 03   CallFf              r1, r1, 3      r1 = #5445173390656D6D(0xBF02699B, 0xBF025EFC, 0xBF027BFE)
0019   0x019050   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
001A   0x019058   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
001B   0x019060   43 32 02 00   Move                r50, r2        r50 = r2 [19]
001C   0x019068   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
001D   0x019070   2D 1F 00 00   Branch              001F           => L_RETURN
L_0:
001E   0x019078   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
001F   0x019080   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x019088    POINTER <is-final-build?>
0001   0x019090    POINTER <display>
0002   0x019098    POINTER <#5445173390656D6D>
0003   0x0190A0    POINTER <#00000282BF02699B>
0004   0x0190A8    POINTER <#00000282BF025EFC>
0005   0x0190B0    POINTER <get-symbol>
0006   0x0190B8    SID <#F4BB1A242FE97D63>
0007   0x0190C0    SID <self>
0008   0x0190C8    POINTER <#00000282BF027C2E>
0009   0x0190D0    POINTER <#00000282BF027BFE>
0000   0x00FF90   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <#B97D31F760DB0E8E>
0001   0x00FF98   1B 00 00 00   Call                r0, r0, 0      r0 = #B97D31F760DB0E8E()
0002   0x00FFA0   00 00 00 00   Return              r0             Return #B97D31F760DB0E8E()
SYMBOL TABLE: 
0000   0x00FFA8    POINTER <#B97D31F760DB0E8E>
0000   0x0156A8   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <#608356039B1FD9FD>
0001   0x0156B0   1B 00 00 00   Call                r0, r0, 0      r0 = #608356039B1FD9FD()
0002   0x0156B8   00 00 00 00   Return              r0             Return #608356039B1FD9FD()
SYMBOL TABLE: 
0000   0x0156C0    POINTER <#608356039B1FD9FD>
0000   0x01E758   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <#A238C0593743A3AE>
0001   0x01E760   1B 00 00 00   Call                r0, r0, 0      r0 = #A238C0593743A3AE()
0002   0x01E768   15 01 01 00   LookupPointer       r1, 1          r1 = ST[1] -> <set-symbol>
0003   0x01E770   4A 02 02 00   LoadStaticU64Imm    r2, 2          r2 = ST[2] -> <#28D1CA76BD462D70>
0004   0x01E778   43 03 00 00   Move                r3, r0         r3 = r0 [#A238C0593743A3AE()]
0005   0x01E780   5D 03 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0006   0x01E788   51 03 03 00   LoadU64             r3, [r3]       r3 = [0x0 + 0x0]
0007   0x01E790   4A 04 03 00   LoadStaticU64Imm    r4, 3          r4 = ST[3] -> <self>
0008   0x01E798   43 31 02 00   Move                r49, r2        r49 = r2 [#28D1CA76BD462D70]
0009   0x01E7A0   43 32 03 00   Move                r50, r3        r50 = r3 [0]
000A   0x01E7A8   43 33 04 00   Move                r51, r4        r51 = r4 [self]
000B   0x01E7B0   1C 01 01 03   CallFf              r1, r1, 3      r1 = set-symbol(#28D1CA76BD462D70, 0, self)
000C   0x01E7B8   15 01 01 00   LookupPointer       r1, 1          r1 = ST[1] -> <set-symbol>
000D   0x01E7C0   4A 02 04 00   LoadStaticU64Imm    r2, 4          r2 = ST[4] -> <#77621D191B920833>
000E   0x01E7C8   43 03 00 00   Move                r3, r0         r3 = r0 [#A238C0593743A3AE()]
000F   0x01E7D0   5D 03 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0010   0x01E7D8   3B 03 03 08   IAddImm             r3, r3, 8      r3 = r3 [927179694] / 8 -> <927179694>
0011   0x01E7E0   51 03 03 00   LoadU64             r3, [r3]       r3 = [0x0 + 0x0]
0012   0x01E7E8   4A 04 03 00   LoadStaticU64Imm    r4, 3          r4 = ST[3] -> <self>
0013   0x01E7F0   43 31 02 00   Move                r49, r2        r49 = r2 [#77621D191B920833]
0014   0x01E7F8   43 32 03 00   Move                r50, r3        r50 = r3 [0]
0015   0x01E800   43 33 04 00   Move                r51, r4        r51 = r4 [self]
0016   0x01E808   1C 01 01 03   CallFf              r1, r1, 3      r1 = set-symbol(#77621D191B920833, 0, self)
0017   0x01E810   15 01 05 00   LookupPointer       r1, 5          r1 = ST[5] -> <set-boolean>
0018   0x01E818   4A 02 06 00   LoadStaticU64Imm    r2, 6          r2 = ST[6] -> <#32E94EADDED8F01D>
0019   0x01E820   43 03 00 00   Move                r3, r0         r3 = r0 [#A238C0593743A3AE()]
001A   0x01E828   5D 03 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
001B   0x01E830   3B 03 03 10   IAddImm             r3, r3, 16     r3 = r3 [927179694] / 16 -> <927179694>
001C   0x01E838   4C 03 03 00   LoadU8              ???            UNKNOWN INSTRUCTION
001D   0x01E840   4A 04 03 00   LoadStaticU64Imm    r4, 3          r4 = ST[3] -> <self>
001E   0x01E848   43 31 02 00   Move                r49, r2        r49 = r2 [#32E94EADDED8F01D]
001F   0x01E850   43 32 03 00   Move                r50, r3        r50 = r3 [927179694]
0020   0x01E858   43 33 04 00   Move                r51, r4        r51 = r4 [self]
0021   0x01E860   1C 01 01 03   CallFf              r1, r1, 3      r1 = set-boolean(#32E94EADDED8F01D, 927179694, self)
0022   0x01E868   15 01 07 00   LookupPointer       r1, 7          r1 = ST[7] -> <set-int32>
0023   0x01E870   4A 02 08 00   LoadStaticU64Imm    r2, 8          r2 = ST[8] -> <#0676F87AA7DD009C>
0024   0x01E878   43 03 00 00   Move                r3, r0         r3 = r0 [#A238C0593743A3AE()]
0025   0x01E880   5D 03 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0026   0x01E888   3B 03 03 18   IAddImm             r3, r3, 24     r3 = r3 [927179694] / 24 -> <927179694>
0027   0x01E890   4F 03 03 00   LoadI32             ???            UNKNOWN INSTRUCTION
0028   0x01E898   4A 04 03 00   LoadStaticU64Imm    r4, 3          r4 = ST[3] -> <self>
0029   0x01E8A0   43 31 02 00   Move                r49, r2        r49 = r2 [#0676F87AA7DD009C]
002A   0x01E8A8   43 32 03 00   Move                r50, r3        r50 = r3 [927179694]
002B   0x01E8B0   43 33 04 00   Move                r51, r4        r51 = r4 [self]
002C   0x01E8B8   1C 01 01 03   CallFf              r1, r1, 3      r1 = set-int32(#0676F87AA7DD009C, 927179694, self)
002D   0x01E8C0   15 01 07 00   LookupPointer       r1, 7          r1 = ST[7] -> <set-int32>
002E   0x01E8C8   4A 02 09 00   LoadStaticU64Imm    r2, 9          r2 = ST[9] -> <#928E23508A42DAF2>
002F   0x01E8D0   43 03 00 00   Move                r3, r0         r3 = r0 [#A238C0593743A3AE()]
0030   0x01E8D8   5D 03 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0031   0x01E8E0   3B 03 03 14   IAddImm             r3, r3, 20     r3 = r3 [-790807224] / 20 -> <-790807224>
0032   0x01E8E8   4F 03 03 00   LoadI32             ???            UNKNOWN INSTRUCTION
0033   0x01E8F0   4A 04 03 00   LoadStaticU64Imm    r4, 3          r4 = ST[3] -> <self>
0034   0x01E8F8   43 31 02 00   Move                r49, r2        r49 = r2 [#928E23508A42DAF2]
0035   0x01E900   43 32 03 00   Move                r50, r3        r50 = r3 [-790807224]
0036   0x01E908   43 33 04 00   Move                r51, r4        r51 = r4 [self]
0037   0x01E910   1C 01 01 03   CallFf              r1, r1, 3      r1 = set-int32(#928E23508A42DAF2, -790807224, self)
0038   0x01E918   15 01 07 00   LookupPointer       r1, 7          r1 = ST[7] -> <set-int32>
0039   0x01E920   4A 02 0A 00   LoadStaticU64Imm    r2, 10         r2 = ST[10] -> <#B779DF53A01D4CD9>
003A   0x01E928   43 03 00 00   Move                r3, r0         r3 = r0 [#A238C0593743A3AE()]
003B   0x01E930   5D 03 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
003C   0x01E938   3B 03 03 1C   IAddImm             r3, r3, 28     r3 = r3 [-1527087332] / 28 -> <-1527087332>
003D   0x01E940   4F 03 03 00   LoadI32             ???            UNKNOWN INSTRUCTION
003E   0x01E948   4A 04 03 00   LoadStaticU64Imm    r4, 3          r4 = ST[3] -> <self>
003F   0x01E950   43 31 02 00   Move                r49, r2        r49 = r2 [#B779DF53A01D4CD9]
0040   0x01E958   43 32 03 00   Move                r50, r3        r50 = r3 [-1527087332]
0041   0x01E960   43 33 04 00   Move                r51, r4        r51 = r4 [self]
0042   0x01E968   1C 01 01 03   CallFf              r1, r1, 3      r1 = set-int32(#B779DF53A01D4CD9, -1527087332, self)
0043   0x01E970   15 01 0B 00   LookupPointer       r1, 11         r1 = ST[11] -> <set-float>
0044   0x01E978   4A 02 0C 00   LoadStaticU64Imm    r2, 12         r2 = ST[12] -> <#648F7E10342158ED>
0045   0x01E980   43 03 00 00   Move                r3, r0         r3 = r0 [#A238C0593743A3AE()]
0046   0x01E988   5D 03 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0047   0x01E990   3B 03 03 20   IAddImm             r3, r3, 32     r3 = r3 [927179694] / 32 -> <927179694>
0048   0x01E998   0E 03 03 00   LoadFloat           r3, [r3]       r3 = [0x0 + 0x0]
0049   0x01E9A0   4A 04 03 00   LoadStaticU64Imm    r4, 3          r4 = ST[3] -> <self>
004A   0x01E9A8   43 31 02 00   Move                r49, r2        r49 = r2 [#648F7E10342158ED]
004B   0x01E9B0   43 32 03 00   Move                r50, r3        r50 = r3 [0x0]
004C   0x01E9B8   43 33 04 00   Move                r51, r4        r51 = r4 [self]
004D   0x01E9C0   1C 01 01 03   CallFf              r1, r1, 3      r1 = set-float(#648F7E10342158ED, 0x0, self)
004E   0x01E9C8   15 01 05 00   LookupPointer       r1, 5          r1 = ST[5] -> <set-boolean>
004F   0x01E9D0   4A 02 0D 00   LoadStaticU64Imm    r2, 13         r2 = ST[13] -> <#FA343BC04362318D>
0050   0x01E9D8   43 03 00 00   Move                r3, r0         r3 = r0 [#A238C0593743A3AE()]
0051   0x01E9E0   5D 03 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0052   0x01E9E8   3B 03 03 24   IAddImm             r3, r3, 36     r3 = r3 [-1458913248] / 36 -> <-1458913248>
0053   0x01E9F0   4C 03 03 00   LoadU8              ???            UNKNOWN INSTRUCTION
0054   0x01E9F8   4A 04 03 00   LoadStaticU64Imm    r4, 3          r4 = ST[3] -> <self>
0055   0x01EA00   43 31 02 00   Move                r49, r2        r49 = r2 [#FA343BC04362318D]
0056   0x01EA08   43 32 03 00   Move                r50, r3        r50 = r3 [-1458913248]
0057   0x01EA10   43 33 04 00   Move                r51, r4        r51 = r4 [self]
0058   0x01EA18   1C 01 01 03   CallFf              r1, r1, 3      r1 = set-boolean(#FA343BC04362318D, -1458913248, self)
0059   0x01EA20   43 00 01 00   Move                r0, r1         r0 = r1 [set-boolean()]
005A   0x01EA28   00 00 00 00   Return              r0             Return set-boolean()
SYMBOL TABLE: 
0000   0x01EA30    POINTER <#A238C0593743A3AE>
0001   0x01EA38    POINTER <set-symbol>
0002   0x01EA40    SID <#28D1CA76BD462D70>
0003   0x01EA48    SID <self>
0004   0x01EA50    SID <#77621D191B920833>
0005   0x01EA58    POINTER <set-boolean>
0006   0x01EA60    SID <#32E94EADDED8F01D>
0007   0x01EA68    POINTER <set-int32>
0008   0x01EA70    SID <#0676F87AA7DD009C>
0009   0x01EA78    SID <#928E23508A42DAF2>
000A   0x01EA80    SID <#B779DF53A01D4CD9>
000B   0x01EA88    POINTER <set-float>
000C   0x01EA90    SID <#648F7E10342158ED>
000D   0x01EA98    SID <#FA343BC04362318D>
0000   0x00A298   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <#03065977E96463A2>
0001   0x00A2A0   15 01 01 00   LookupPointer       r1, 1          r1 = ST[1] -> <get-svar>
0002   0x00A2A8   4A 02 02 00   LoadStaticU64Imm    r2, 2          r2 = ST[2] -> <#47CB08FCD5FE82DB>
0003   0x00A2B0   43 31 02 00   Move                r49, r2        r49 = r2 [#47CB08FCD5FE82DB]
0004   0x00A2B8   1B 01 01 01   Call                r1, r1, 1      r1 = get-svar(#47CB08FCD5FE82DB)
0005   0x00A2C0   43 31 01 00   Move                r49, r1        r49 = r1 [get-svar()]
0006   0x00A2C8   1B 00 00 01   Call                r0, r0, 1      r0 = #03065977E96463A2(get-svar())
0007   0x00A2D0   43 01 00 00   Move                r1, r0         r1 = r0 [#03065977E96463A2()]
0008   0x00A2D8   2F 0F 01 00   BranchIfNot         r1, 000F       IF NOT r1 [#03065977E96463A2()] => L_0
0009   0x00A2E0   15 01 03 00   LookupPointer       r1, 3          r1 = ST[3] -> <get-boolean>
000A   0x00A2E8   4A 02 04 00   LoadStaticU64Imm    r2, 4          r2 = ST[4] -> <#B0E4DDF4A79D13AC>
000B   0x00A2F0   4A 03 05 00   LoadStaticU64Imm    r3, 5          r3 = ST[5] -> <ss-wave-manager-level-set-loader-1>
000C   0x00A2F8   43 31 02 00   Move                r49, r2        r49 = r2 [#B0E4DDF4A79D13AC]
000D   0x00A300   43 32 03 00   Move                r50, r3        r50 = r3 [ss-wave-manager-level-set-loader-1]
000E   0x00A308   1C 01 01 02   CallFf              r1, r1, 2      r1 = get-boolean(#B0E4DDF4A79D13AC, ss-wave-manager-level-set-loader-1)
L_0:
000F   0x00A310   2F 4C 01 00   BranchIfNot         r1, 004C       IF NOT r1 [get-boolean()] => L_1
0010   0x00A318   43 01 00 00   Move                r1, r0         r1 = r0 [#03065977E96463A2()]
0011   0x00A320   5D 01 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0012   0x00A328   50 01 01 00   LoadI64             r1, [r1]       r1 = [0x0 + 0x0]
0013   0x00A330   43 02 00 00   Move                r2, r0         r2 = r0 [#03065977E96463A2()]
0014   0x00A338   5D 02 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0015   0x00A340   3B 02 02 20   IAddImm             r2, r2, 32     r2 = r2 [-379296862] / 32 -> <-379296862>
0016   0x00A348   4C 02 02 00   LoadU8              ???            UNKNOWN INSTRUCTION
0017   0x00A350   43 03 00 00   Move                r3, r0         r3 = r0 [#03065977E96463A2()]
0018   0x00A358   5D 03 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0019   0x00A360   3B 03 03 21   IAddImm             r3, r3, 33     r3 = r3 [-379296862] / 33 -> <-379296862>
001A   0x00A368   4C 03 03 00   LoadU8              ???            UNKNOWN INSTRUCTION
001B   0x00A370   15 04 06 00   LookupPointer       r4, 6          r4 = ST[6] -> <set-boolean>
001C   0x00A378   4A 05 07 00   LoadStaticU64Imm    r5, 7          r5 = ST[7] -> <#32E94EADDED8F01D>
001D   0x00A380   43 06 02 00   Move                r6, r2         r6 = r2 [-379296862]
001E   0x00A388   4A 07 08 00   LoadStaticU64Imm    r7, 8          r7 = ST[8] -> <self>
001F   0x00A390   43 31 05 00   Move                r49, r5        r49 = r5 [#32E94EADDED8F01D]
0020   0x00A398   43 32 06 00   Move                r50, r6        r50 = r6 [-379296862]
0021   0x00A3A0   43 33 07 00   Move                r51, r7        r51 = r7 [self]
0022   0x00A3A8   1C 04 04 03   CallFf              r4, r4, 3      r4 = set-boolean(#32E94EADDED8F01D, -379296862, self)
0023   0x00A3B0   43 04 03 00   Move                r4, r3         r4 = r3 [-379296862]
0024   0x00A3B8   2F 36 04 00   BranchIfNot         r4, 0036       IF NOT r4 [-379296862] => L_2
0025   0x00A3C0   15 04 09 00   LookupPointer       r4, 9          r4 = ST[9] -> <set-int32>
0026   0x00A3C8   4A 05 0A 00   LoadStaticU64Imm    r5, 10         r5 = ST[10] -> <#0676F87AA7DD009C>
0027   0x00A3D0   0C 06 00 00   LoadU16Imm          r6, 0          r6 = 0
0028   0x00A3D8   4A 07 08 00   LoadStaticU64Imm    r7, 8          r7 = ST[8] -> <self>
0029   0x00A3E0   43 31 05 00   Move                r49, r5        r49 = r5 [#0676F87AA7DD009C]
002A   0x00A3E8   43 32 06 00   Move                r50, r6        r50 = r6 [0]
002B   0x00A3F0   43 33 07 00   Move                r51, r7        r51 = r7 [self]
002C   0x00A3F8   1C 04 04 03   CallFf              r4, r4, 3      r4 = set-int32(#0676F87AA7DD009C, 0, self)
002D   0x00A400   15 04 09 00   LookupPointer       r4, 9          r4 = ST[9] -> <set-int32>
002E   0x00A408   4A 05 0B 00   LoadStaticU64Imm    r5, 11         r5 = ST[11] -> <#928E23508A42DAF2>
002F   0x00A410   0C 06 00 00   LoadU16Imm          r6, 0          r6 = 0
0030   0x00A418   4A 07 08 00   LoadStaticU64Imm    r7, 8          r7 = ST[8] -> <self>
0031   0x00A420   43 31 05 00   Move                r49, r5        r49 = r5 [#928E23508A42DAF2]
0032   0x00A428   43 32 06 00   Move                r50, r6        r50 = r6 [0]
0033   0x00A430   43 33 07 00   Move                r51, r7        r51 = r7 [self]
0034   0x00A438   1C 04 04 03   CallFf              r4, r4, 3      r4 = set-int32(#928E23508A42DAF2, 0, self)
0035   0x00A440   2D 37 00 00   Branch              0037           => L_3
L_2:
0036   0x00A448   0C 04 00 00   LoadU16Imm          r4, 0          r4 = 0
L_3:
0037   0x00A450   15 04 0C 00   LookupPointer       r4, 12         r4 = ST[12] -> <is-final-build?>
0038   0x00A458   1C 04 04 00   CallFf              r4, r4, 0      r4 = is-final-build?()
0039   0x00A460   30 04 04 00   OpLogNot            r4, r4         r4 = !r4 -> <TRUE>
003A   0x00A468   2F 49 04 00   BranchIfNot         r4, 0049       IF NOT r4 [0x6620ACB7] => L_4
003B   0x00A470   15 04 0D 00   LookupPointer       r4, 13         r4 = ST[13] -> <display>
003C   0x00A478   15 05 0E 00   LookupPointer       r5, 14         r5 = ST[14] -> <#5445173390656D6D>
003D   0x00A480   41 06 0F 00   LoadStaticPointerImmr6, 15         r6 = ST[15] -> <0xBF0260D0>
003E   0x00A488   41 07 10 00   LoadStaticPointerImmr7, 16         r7 = ST[16] -> <0xBF025EFC>
003F   0x00A490   43 08 01 00   Move                r8, r1         r8 = r1 [0]
0040   0x00A498   43 31 06 00   Move                r49, r6        r49 = r6 [0xBF0260D0]
0041   0x00A4A0   43 32 07 00   Move                r50, r7        r50 = r7 [0xBF025EFC]
0042   0x00A4A8   43 33 08 00   Move                r51, r8        r51 = r8 [0]
0043   0x00A4B0   1C 05 05 03   CallFf              r5, r5, 3      r5 = #5445173390656D6D(0xBF0260D0, 0xBF025EFC, 0)
0044   0x00A4B8   0C 06 13 00   LoadU16Imm          r6, 19         r6 = 19
0045   0x00A4C0   43 31 05 00   Move                r49, r5        r49 = r5 [#5445173390656D6D()]
0046   0x00A4C8   43 32 06 00   Move                r50, r6        r50 = r6 [19]
0047   0x00A4D0   1C 04 04 02   CallFf              r4, r4, 2      r4 = display(#5445173390656D6D(), 19)
0048   0x00A4D8   2D 4A 00 00   Branch              004A           => L_5
L_4:
0049   0x00A4E0   0C 04 00 00   LoadU16Imm          r4, 0          r4 = 0
L_5:
004A   0x00A4E8   43 01 04 00   Move                r1, r4         r1 = r4 [0]
004B   0x00A4F0   2D 4D 00 00   Branch              004D           => L_6
L_1:
004C   0x00A4F8   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
L_6:
004D   0x00A500   43 00 01 00   Move                r0, r1         r0 = r1 [0]
004E   0x00A508   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x00A510    POINTER <#03065977E96463A2>
0001   0x00A518    POINTER <get-svar>
0002   0x00A520    SID <#47CB08FCD5FE82DB>
0003   0x00A528    POINTER <get-boolean>
0004   0x00A530    SID <#B0E4DDF4A79D13AC>
0005   0x00A538    SID <ss-wave-manager-level-set-loader-1>
0006   0x00A540    POINTER <set-boolean>
0007   0x00A548    SID <#32E94EADDED8F01D>
0008   0x00A550    SID <self>
0009   0x00A558    POINTER <set-int32>
000A   0x00A560    SID <#0676F87AA7DD009C>
000B   0x00A568    SID <#928E23508A42DAF2>
000C   0x00A570    POINTER <is-final-build?>
000D   0x00A578    POINTER <display>
000E   0x00A580    POINTER <#5445173390656D6D>
000F   0x00A588    POINTER <#00000282BF0260D0>
0010   0x00A590    POINTER <#00000282BF025EFC>
0000   0x015910   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <is-final-build?>
0001   0x015918   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0002   0x015920   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0003   0x015928   2F 1C 00 00   BranchIfNot         r0, 001C       IF NOT r0 [0x6620ACB7] => L_0
0004   0x015930   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <display>
0005   0x015938   15 01 02 00   LookupPointer       r1, 2          r1 = ST[2] -> <#5445173390656D6D>
0006   0x015940   41 02 03 00   LoadStaticPointerImmr2, 3          r2 = ST[3] -> <0xBF026BEB>
0007   0x015948   41 03 04 00   LoadStaticPointerImmr3, 4          r3 = ST[4] -> <0xBF025EFC>
0008   0x015950   41 04 05 00   LoadStaticPointerImmr4, 5          r4 = ST[5] -> <0xBF0275D5>
0009   0x015958   15 05 06 00   LookupPointer       r5, 6          r5 = ST[6] -> <string-debug>
000A   0x015960   15 06 07 00   LookupPointer       r6, 7          r6 = ST[7] -> <get-symbol>
000B   0x015968   4A 07 08 00   LoadStaticU64Imm    r7, 8          r7 = ST[8] -> <#28D1CA76BD462D70>
000C   0x015970   4A 08 09 00   LoadStaticU64Imm    r8, 9          r8 = ST[9] -> <self>
000D   0x015978   43 31 07 00   Move                r49, r7        r49 = r7 [#28D1CA76BD462D70]
000E   0x015980   43 32 08 00   Move                r50, r8        r50 = r8 [self]
000F   0x015988   1C 06 06 02   CallFf              r6, r6, 2      r6 = get-symbol(#28D1CA76BD462D70, self)
0010   0x015990   43 31 06 00   Move                r49, r6        r49 = r6 [get-symbol()]
0011   0x015998   1C 05 05 01   CallFf              r5, r5, 1      r5 = string-debug(get-symbol())
0012   0x0159A0   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF026BEB]
0013   0x0159A8   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
0014   0x0159B0   43 33 04 00   Move                r51, r4        r51 = r4 [0xBF0275D5]
0015   0x0159B8   43 34 05 00   Move                r52, r5        r52 = r5 [string-debug()]
0016   0x0159C0   1C 01 01 04   CallFf              r1, r1, 4      r1 = #5445173390656D6D(0xBF026BEB, 0xBF025EFC, 0xBF0275D5, string-debug())
0017   0x0159C8   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
0018   0x0159D0   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
0019   0x0159D8   43 32 02 00   Move                r50, r2        r50 = r2 [19]
001A   0x0159E0   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
001B   0x0159E8   2D 1D 00 00   Branch              001D           => L_RETURN
L_0:
001C   0x0159F0   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
001D   0x0159F8   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x015A00    POINTER <is-final-build?>
0001   0x015A08    POINTER <display>
0002   0x015A10    POINTER <#5445173390656D6D>
0003   0x015A18    POINTER <#00000282BF026BEB>
0004   0x015A20    POINTER <#00000282BF025EFC>
0005   0x015A28    POINTER <#00000282BF0275D5>
0006   0x015A30    POINTER <string-debug>
0007   0x015A38    POINTER <get-symbol>
0008   0x015A40    SID <#28D1CA76BD462D70>
0009   0x015A48    SID <self>
0000   0x019C88   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <is-final-build?>
0001   0x019C90   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0002   0x019C98   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0003   0x019CA0   2F 1C 00 00   BranchIfNot         r0, 001C       IF NOT r0 [0x6620ACB7] => L_0
0004   0x019CA8   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <display>
0005   0x019CB0   15 01 02 00   LookupPointer       r1, 2          r1 = ST[2] -> <#5445173390656D6D>
0006   0x019CB8   41 02 03 00   LoadStaticPointerImmr2, 3          r2 = ST[3] -> <0xBF026BEB>
0007   0x019CC0   41 03 04 00   LoadStaticPointerImmr3, 4          r3 = ST[4] -> <0xBF025EFC>
0008   0x019CC8   41 04 05 00   LoadStaticPointerImmr4, 5          r4 = ST[5] -> <0xBF0275C2>
0009   0x019CD0   15 05 06 00   LookupPointer       r5, 6          r5 = ST[6] -> <string-debug>
000A   0x019CD8   15 06 07 00   LookupPointer       r6, 7          r6 = ST[7] -> <get-symbol>
000B   0x019CE0   4A 07 08 00   LoadStaticU64Imm    r7, 8          r7 = ST[8] -> <#77621D191B920833>
000C   0x019CE8   4A 08 09 00   LoadStaticU64Imm    r8, 9          r8 = ST[9] -> <self>
000D   0x019CF0   43 31 07 00   Move                r49, r7        r49 = r7 [#77621D191B920833]
000E   0x019CF8   43 32 08 00   Move                r50, r8        r50 = r8 [self]
000F   0x019D00   1C 06 06 02   CallFf              r6, r6, 2      r6 = get-symbol(#77621D191B920833, self)
0010   0x019D08   43 31 06 00   Move                r49, r6        r49 = r6 [get-symbol()]
0011   0x019D10   1C 05 05 01   CallFf              r5, r5, 1      r5 = string-debug(get-symbol())
0012   0x019D18   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF026BEB]
0013   0x019D20   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
0014   0x019D28   43 33 04 00   Move                r51, r4        r51 = r4 [0xBF0275C2]
0015   0x019D30   43 34 05 00   Move                r52, r5        r52 = r5 [string-debug()]
0016   0x019D38   1C 01 01 04   CallFf              r1, r1, 4      r1 = #5445173390656D6D(0xBF026BEB, 0xBF025EFC, 0xBF0275C2, string-debug())
0017   0x019D40   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
0018   0x019D48   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
0019   0x019D50   43 32 02 00   Move                r50, r2        r50 = r2 [19]
001A   0x019D58   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
001B   0x019D60   2D 1D 00 00   Branch              001D           => L_RETURN
L_0:
001C   0x019D68   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
001D   0x019D70   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x019D78    POINTER <is-final-build?>
0001   0x019D80    POINTER <display>
0002   0x019D88    POINTER <#5445173390656D6D>
0003   0x019D90    POINTER <#00000282BF026BEB>
0004   0x019D98    POINTER <#00000282BF025EFC>
0005   0x019DA0    POINTER <#00000282BF0275C2>
0006   0x019DA8    POINTER <string-debug>
0007   0x019DB0    POINTER <get-symbol>
0008   0x019DB8    SID <#77621D191B920833>
0009   0x019DC0    SID <self>
0000   0x015300   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <is-final-build?>
0001   0x015308   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0002   0x015310   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0003   0x015318   2F 1D 00 00   BranchIfNot         r0, 001D       IF NOT r0 [0x6620ACB7] => L_0
0004   0x015320   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <display>
0005   0x015328   15 01 02 00   LookupPointer       r1, 2          r1 = ST[2] -> <#5445173390656D6D>
0006   0x015330   41 02 03 00   LoadStaticPointerImmr2, 3          r2 = ST[3] -> <0xBF026BEB>
0007   0x015338   41 03 04 00   LoadStaticPointerImmr3, 4          r3 = ST[4] -> <0xBF025EFC>
0008   0x015340   41 04 05 00   LoadStaticPointerImmr4, 5          r4 = ST[5] -> <0xBF0275E6>
0009   0x015348   15 05 06 00   LookupPointer       r5, 6          r5 = ST[6] -> <get-boolean>
000A   0x015350   4A 06 07 00   LoadStaticU64Imm    r6, 7          r6 = ST[7] -> <#32E94EADDED8F01D>
000B   0x015358   4A 07 08 00   LoadStaticU64Imm    r7, 8          r7 = ST[8] -> <self>
000C   0x015360   43 31 06 00   Move                r49, r6        r49 = r6 [#32E94EADDED8F01D]
000D   0x015368   43 32 07 00   Move                r50, r7        r50 = r7 [self]
000E   0x015370   1C 05 05 02   CallFf              r5, r5, 2      r5 = get-boolean(#32E94EADDED8F01D, self)
000F   0x015378   2F 12 05 00   BranchIfNot         r5, 0012       IF NOT r5 [get-boolean()] => L_1
0010   0x015380   41 05 09 00   LoadStaticPointerImmr5, 9          r5 = ST[9] -> <0xBF027754>
0011   0x015388   2D 13 00 00   Branch              0013           => L_2
L_1:
0012   0x015390   41 05 0A 00   LoadStaticPointerImmr5, 10         r5 = ST[10] -> <0xBF027429>
L_2:
0013   0x015398   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF026BEB]
0014   0x0153A0   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
0015   0x0153A8   43 33 04 00   Move                r51, r4        r51 = r4 [0xBF0275E6]
0016   0x0153B0   43 34 05 00   Move                r52, r5        r52 = r5 [0xBF027429]
0017   0x0153B8   1C 01 01 04   CallFf              r1, r1, 4      r1 = #5445173390656D6D(0xBF026BEB, 0xBF025EFC, 0xBF0275E6, 0xBF027429)
0018   0x0153C0   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
0019   0x0153C8   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
001A   0x0153D0   43 32 02 00   Move                r50, r2        r50 = r2 [19]
001B   0x0153D8   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
001C   0x0153E0   2D 1E 00 00   Branch              001E           => L_RETURN
L_0:
001D   0x0153E8   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
001E   0x0153F0   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x0153F8    POINTER <is-final-build?>
0001   0x015400    POINTER <display>
0002   0x015408    POINTER <#5445173390656D6D>
0003   0x015410    POINTER <#00000282BF026BEB>
0004   0x015418    POINTER <#00000282BF025EFC>
0005   0x015420    POINTER <#00000282BF0275E6>
0006   0x015428    POINTER <get-boolean>
0007   0x015430    SID <#32E94EADDED8F01D>
0008   0x015438    SID <self>
0009   0x015440    POINTER <#00000282BF027754>
000A   0x015448    POINTER <#00000282BF027429>
0000   0x00B9F0   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <is-final-build?>
0001   0x00B9F8   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0002   0x00BA00   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0003   0x00BA08   2F 29 00 00   BranchIfNot         r0, 0029       IF NOT r0 [0x6620ACB7] => L_0
0004   0x00BA10   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <display>
0005   0x00BA18   15 01 02 00   LookupPointer       r1, 2          r1 = ST[2] -> <#5445173390656D6D>
0006   0x00BA20   41 02 03 00   LoadStaticPointerImmr2, 3          r2 = ST[3] -> <0xBF026BEB>
0007   0x00BA28   41 03 04 00   LoadStaticPointerImmr3, 4          r3 = ST[4] -> <0xBF025EFC>
0008   0x00BA30   41 04 05 00   LoadStaticPointerImmr4, 5          r4 = ST[5] -> <0xBF027685>
0009   0x00BA38   15 05 06 00   LookupPointer       r5, 6          r5 = ST[6] -> <get-int32>
000A   0x00BA40   4A 06 07 00   LoadStaticU64Imm    r6, 7          r6 = ST[7] -> <#0676F87AA7DD009C>
000B   0x00BA48   4A 07 08 00   LoadStaticU64Imm    r7, 8          r7 = ST[8] -> <self>
000C   0x00BA50   43 31 06 00   Move                r49, r6        r49 = r6 [#0676F87AA7DD009C]
000D   0x00BA58   43 32 07 00   Move                r50, r7        r50 = r7 [self]
000E   0x00BA60   1C 05 05 02   CallFf              r5, r5, 2      r5 = get-int32(#0676F87AA7DD009C, self)
000F   0x00BA68   0C 06 00 00   LoadU16Imm          r6, 0          r6 = 0
0010   0x00BA70   1E 05 05 06   IGreaterThan        r5, r5, r6     r5 = r5 [-635293440] > r6 [0]
0011   0x00BA78   2F 1E 05 00   BranchIfNot         r5, 001E       IF NOT r5 [0xDA223100] => L_1
0012   0x00BA80   15 05 02 00   LookupPointer       r5, 2          r5 = ST[2] -> <#5445173390656D6D>
0013   0x00BA88   41 06 09 00   LoadStaticPointerImmr6, 9          r6 = ST[9] -> <0xBF025F04>
0014   0x00BA90   15 07 06 00   LookupPointer       r7, 6          r7 = ST[6] -> <get-int32>
0015   0x00BA98   4A 08 07 00   LoadStaticU64Imm    r8, 7          r8 = ST[7] -> <#0676F87AA7DD009C>
0016   0x00BAA0   4A 09 08 00   LoadStaticU64Imm    r9, 8          r9 = ST[8] -> <self>
0017   0x00BAA8   43 31 08 00   Move                r49, r8        r49 = r8 [#0676F87AA7DD009C]
0018   0x00BAB0   43 32 09 00   Move                r50, r9        r50 = r9 [self]
0019   0x00BAB8   1C 07 07 02   CallFf              r7, r7, 2      r7 = get-int32(#0676F87AA7DD009C, self)
001A   0x00BAC0   43 31 06 00   Move                r49, r6        r49 = r6 [0xBF025F04]
001B   0x00BAC8   43 32 07 00   Move                r50, r7        r50 = r7 [get-int32()]
001C   0x00BAD0   1C 05 05 02   CallFf              r5, r5, 2      r5 = #5445173390656D6D(0xBF025F04, get-int32())
001D   0x00BAD8   2D 1F 00 00   Branch              001F           => L_2
L_1:
001E   0x00BAE0   41 05 0A 00   LoadStaticPointerImmr5, 10         r5 = ST[10] -> <0xBF027429>
L_2:
001F   0x00BAE8   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF026BEB]
0020   0x00BAF0   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
0021   0x00BAF8   43 33 04 00   Move                r51, r4        r51 = r4 [0xBF027685]
0022   0x00BB00   43 34 05 00   Move                r52, r5        r52 = r5 [0xBF027429]
0023   0x00BB08   1C 01 01 04   CallFf              r1, r1, 4      r1 = #5445173390656D6D(0xBF026BEB, 0xBF025EFC, 0xBF027685, 0xBF027429)
0024   0x00BB10   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
0025   0x00BB18   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
0026   0x00BB20   43 32 02 00   Move                r50, r2        r50 = r2 [19]
0027   0x00BB28   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
0028   0x00BB30   2D 2A 00 00   Branch              002A           => L_RETURN
L_0:
0029   0x00BB38   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
002A   0x00BB40   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x00BB48    POINTER <is-final-build?>
0001   0x00BB50    POINTER <display>
0002   0x00BB58    POINTER <#5445173390656D6D>
0003   0x00BB60    POINTER <#00000282BF026BEB>
0004   0x00BB68    POINTER <#00000282BF025EFC>
0005   0x00BB70    POINTER <#00000282BF027685>
0006   0x00BB78    POINTER <get-int32>
0007   0x00BB80    SID <#0676F87AA7DD009C>
0008   0x00BB88    SID <self>
0009   0x00BB90    POINTER <#00000282BF025F04>
000A   0x00BB98    POINTER <#00000282BF027429>
0000   0x019138   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <is-final-build?>
0001   0x019140   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0002   0x019148   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0003   0x019150   2F 29 00 00   BranchIfNot         r0, 0029       IF NOT r0 [0x6620ACB7] => L_0
0004   0x019158   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <display>
0005   0x019160   15 01 02 00   LookupPointer       r1, 2          r1 = ST[2] -> <#5445173390656D6D>
0006   0x019168   41 02 03 00   LoadStaticPointerImmr2, 3          r2 = ST[3] -> <0xBF026BEB>
0007   0x019170   41 03 04 00   LoadStaticPointerImmr3, 4          r3 = ST[4] -> <0xBF025EFC>
0008   0x019178   41 04 05 00   LoadStaticPointerImmr4, 5          r4 = ST[5] -> <0xBF027671>
0009   0x019180   15 05 06 00   LookupPointer       r5, 6          r5 = ST[6] -> <get-int32>
000A   0x019188   4A 06 07 00   LoadStaticU64Imm    r6, 7          r6 = ST[7] -> <#928E23508A42DAF2>
000B   0x019190   4A 07 08 00   LoadStaticU64Imm    r7, 8          r7 = ST[8] -> <self>
000C   0x019198   43 31 06 00   Move                r49, r6        r49 = r6 [#928E23508A42DAF2]
000D   0x0191A0   43 32 07 00   Move                r50, r7        r50 = r7 [self]
000E   0x0191A8   1C 05 05 02   CallFf              r5, r5, 2      r5 = get-int32(#928E23508A42DAF2, self)
000F   0x0191B0   0C 06 00 00   LoadU16Imm          r6, 0          r6 = 0
0010   0x0191B8   1E 05 05 06   IGreaterThan        r5, r5, r6     r5 = r5 [-635293440] > r6 [0]
0011   0x0191C0   2F 1E 05 00   BranchIfNot         r5, 001E       IF NOT r5 [0xDA223100] => L_1
0012   0x0191C8   15 05 02 00   LookupPointer       r5, 2          r5 = ST[2] -> <#5445173390656D6D>
0013   0x0191D0   41 06 09 00   LoadStaticPointerImmr6, 9          r6 = ST[9] -> <0xBF025F04>
0014   0x0191D8   15 07 06 00   LookupPointer       r7, 6          r7 = ST[6] -> <get-int32>
0015   0x0191E0   4A 08 07 00   LoadStaticU64Imm    r8, 7          r8 = ST[7] -> <#928E23508A42DAF2>
0016   0x0191E8   4A 09 08 00   LoadStaticU64Imm    r9, 8          r9 = ST[8] -> <self>
0017   0x0191F0   43 31 08 00   Move                r49, r8        r49 = r8 [#928E23508A42DAF2]
0018   0x0191F8   43 32 09 00   Move                r50, r9        r50 = r9 [self]
0019   0x019200   1C 07 07 02   CallFf              r7, r7, 2      r7 = get-int32(#928E23508A42DAF2, self)
001A   0x019208   43 31 06 00   Move                r49, r6        r49 = r6 [0xBF025F04]
001B   0x019210   43 32 07 00   Move                r50, r7        r50 = r7 [get-int32()]
001C   0x019218   1C 05 05 02   CallFf              r5, r5, 2      r5 = #5445173390656D6D(0xBF025F04, get-int32())
001D   0x019220   2D 1F 00 00   Branch              001F           => L_2
L_1:
001E   0x019228   41 05 0A 00   LoadStaticPointerImmr5, 10         r5 = ST[10] -> <0xBF027429>
L_2:
001F   0x019230   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF026BEB]
0020   0x019238   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
0021   0x019240   43 33 04 00   Move                r51, r4        r51 = r4 [0xBF027671]
0022   0x019248   43 34 05 00   Move                r52, r5        r52 = r5 [0xBF027429]
0023   0x019250   1C 01 01 04   CallFf              r1, r1, 4      r1 = #5445173390656D6D(0xBF026BEB, 0xBF025EFC, 0xBF027671, 0xBF027429)
0024   0x019258   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
0025   0x019260   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
0026   0x019268   43 32 02 00   Move                r50, r2        r50 = r2 [19]
0027   0x019270   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
0028   0x019278   2D 2A 00 00   Branch              002A           => L_RETURN
L_0:
0029   0x019280   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
002A   0x019288   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x019290    POINTER <is-final-build?>
0001   0x019298    POINTER <display>
0002   0x0192A0    POINTER <#5445173390656D6D>
0003   0x0192A8    POINTER <#00000282BF026BEB>
0004   0x0192B0    POINTER <#00000282BF025EFC>
0005   0x0192B8    POINTER <#00000282BF027671>
0006   0x0192C0    POINTER <get-int32>
0007   0x0192C8    SID <#928E23508A42DAF2>
0008   0x0192D0    SID <self>
0009   0x0192D8    POINTER <#00000282BF025F04>
000A   0x0192E0    POINTER <#00000282BF027429>
0000   0x01A150   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <is-final-build?>
0001   0x01A158   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0002   0x01A160   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0003   0x01A168   2F 1C 00 00   BranchIfNot         r0, 001C       IF NOT r0 [0x6620ACB7] => L_0
0004   0x01A170   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <display>
0005   0x01A178   15 01 02 00   LookupPointer       r1, 2          r1 = ST[2] -> <#5445173390656D6D>
0006   0x01A180   41 02 03 00   LoadStaticPointerImmr2, 3          r2 = ST[3] -> <0xBF026BEB>
0007   0x01A188   41 03 04 00   LoadStaticPointerImmr3, 4          r3 = ST[4] -> <0xBF025EFC>
0008   0x01A190   41 04 05 00   LoadStaticPointerImmr4, 5          r4 = ST[5] -> <0xBF027632>
0009   0x01A198   15 05 06 00   LookupPointer       r5, 6          r5 = ST[6] -> <#BC06CBDEAE8344C7>
000A   0x01A1A0   15 06 07 00   LookupPointer       r6, 7          r6 = ST[7] -> <get-int32>
000B   0x01A1A8   4A 07 08 00   LoadStaticU64Imm    r7, 8          r7 = ST[8] -> <#B779DF53A01D4CD9>
000C   0x01A1B0   4A 08 09 00   LoadStaticU64Imm    r8, 9          r8 = ST[9] -> <self>
000D   0x01A1B8   43 31 07 00   Move                r49, r7        r49 = r7 [#B779DF53A01D4CD9]
000E   0x01A1C0   43 32 08 00   Move                r50, r8        r50 = r8 [self]
000F   0x01A1C8   1C 06 06 02   CallFf              r6, r6, 2      r6 = get-int32(#B779DF53A01D4CD9, self)
0010   0x01A1D0   43 31 06 00   Move                r49, r6        r49 = r6 [get-int32()]
0011   0x01A1D8   1B 05 05 01   Call                r5, r5, 1      r5 = #BC06CBDEAE8344C7(get-int32())
0012   0x01A1E0   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF026BEB]
0013   0x01A1E8   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
0014   0x01A1F0   43 33 04 00   Move                r51, r4        r51 = r4 [0xBF027632]
0015   0x01A1F8   43 34 05 00   Move                r52, r5        r52 = r5 [#BC06CBDEAE8344C7()]
0016   0x01A200   1C 01 01 04   CallFf              r1, r1, 4      r1 = #5445173390656D6D(0xBF026BEB, 0xBF025EFC, 0xBF027632, #BC06CBDEAE8344C7())
0017   0x01A208   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
0018   0x01A210   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
0019   0x01A218   43 32 02 00   Move                r50, r2        r50 = r2 [19]
001A   0x01A220   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
001B   0x01A228   2D 1D 00 00   Branch              001D           => L_RETURN
L_0:
001C   0x01A230   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
001D   0x01A238   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x01A240    POINTER <is-final-build?>
0001   0x01A248    POINTER <display>
0002   0x01A250    POINTER <#5445173390656D6D>
0003   0x01A258    POINTER <#00000282BF026BEB>
0004   0x01A260    POINTER <#00000282BF025EFC>
0005   0x01A268    POINTER <#00000282BF027632>
0006   0x01A270    POINTER <#BC06CBDEAE8344C7>
0007   0x01A278    POINTER <get-int32>
0008   0x01A280    SID <#B779DF53A01D4CD9>
0009   0x01A288    SID <self>
0000   0x01A980   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <is-final-build?>
0001   0x01A988   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0002   0x01A990   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0003   0x01A998   2F 19 00 00   BranchIfNot         r0, 0019       IF NOT r0 [0x6620ACB7] => L_0
0004   0x01A9A0   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <display>
0005   0x01A9A8   15 01 02 00   LookupPointer       r1, 2          r1 = ST[2] -> <#5445173390656D6D>
0006   0x01A9B0   41 02 03 00   LoadStaticPointerImmr2, 3          r2 = ST[3] -> <0xBF026B9B>
0007   0x01A9B8   41 03 04 00   LoadStaticPointerImmr3, 4          r3 = ST[4] -> <0xBF025EFC>
0008   0x01A9C0   41 04 05 00   LoadStaticPointerImmr4, 5          r4 = ST[5] -> <0xBF0273BD>
0009   0x01A9C8   15 05 06 00   LookupPointer       r5, 6          r5 = ST[6] -> <get-float>
000A   0x01A9D0   4A 06 07 00   LoadStaticU64Imm    r6, 7          r6 = ST[7] -> <#648F7E10342158ED>
000B   0x01A9D8   4A 07 08 00   LoadStaticU64Imm    r7, 8          r7 = ST[8] -> <self>
000C   0x01A9E0   43 31 06 00   Move                r49, r6        r49 = r6 [#648F7E10342158ED]
000D   0x01A9E8   43 32 07 00   Move                r50, r7        r50 = r7 [self]
000E   0x01A9F0   1C 05 05 02   CallFf              r5, r5, 2      r5 = get-float(#648F7E10342158ED, self)
000F   0x01A9F8   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF026B9B]
0010   0x01AA00   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
0011   0x01AA08   43 33 04 00   Move                r51, r4        r51 = r4 [0xBF0273BD]
0012   0x01AA10   43 34 05 00   Move                r52, r5        r52 = r5 [get-float()]
0013   0x01AA18   1C 01 01 04   CallFf              r1, r1, 4      r1 = #5445173390656D6D(0xBF026B9B, 0xBF025EFC, 0xBF0273BD, get-float())
0014   0x01AA20   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
0015   0x01AA28   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
0016   0x01AA30   43 32 02 00   Move                r50, r2        r50 = r2 [19]
0017   0x01AA38   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
0018   0x01AA40   2D 1A 00 00   Branch              001A           => L_RETURN
L_0:
0019   0x01AA48   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
001A   0x01AA50   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x01AA58    POINTER <is-final-build?>
0001   0x01AA60    POINTER <display>
0002   0x01AA68    POINTER <#5445173390656D6D>
0003   0x01AA70    POINTER <#00000282BF026B9B>
0004   0x01AA78    POINTER <#00000282BF025EFC>
0005   0x01AA80    POINTER <#00000282BF0273BD>
0006   0x01AA88    POINTER <get-float>
0007   0x01AA90    SID <#648F7E10342158ED>
0008   0x01AA98    SID <self>
0000   0x019F58   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <is-final-build?>
0001   0x019F60   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0002   0x019F68   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0003   0x019F70   2F 1D 00 00   BranchIfNot         r0, 001D       IF NOT r0 [0x6620ACB7] => L_0
0004   0x019F78   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <display>
0005   0x019F80   15 01 02 00   LookupPointer       r1, 2          r1 = ST[2] -> <#5445173390656D6D>
0006   0x019F88   41 02 03 00   LoadStaticPointerImmr2, 3          r2 = ST[3] -> <0xBF026BEB>
0007   0x019F90   41 03 04 00   LoadStaticPointerImmr3, 4          r3 = ST[4] -> <0xBF025EFC>
0008   0x019F98   41 04 05 00   LoadStaticPointerImmr4, 5          r4 = ST[5] -> <0xBF0273AB>
0009   0x019FA0   15 05 06 00   LookupPointer       r5, 6          r5 = ST[6] -> <get-boolean>
000A   0x019FA8   4A 06 07 00   LoadStaticU64Imm    r6, 7          r6 = ST[7] -> <#FA343BC04362318D>
000B   0x019FB0   4A 07 08 00   LoadStaticU64Imm    r7, 8          r7 = ST[8] -> <self>
000C   0x019FB8   43 31 06 00   Move                r49, r6        r49 = r6 [#FA343BC04362318D]
000D   0x019FC0   43 32 07 00   Move                r50, r7        r50 = r7 [self]
000E   0x019FC8   1C 05 05 02   CallFf              r5, r5, 2      r5 = get-boolean(#FA343BC04362318D, self)
000F   0x019FD0   2F 12 05 00   BranchIfNot         r5, 0012       IF NOT r5 [get-boolean()] => L_1
0010   0x019FD8   41 05 09 00   LoadStaticPointerImmr5, 9          r5 = ST[9] -> <0xBF02776C>
0011   0x019FE0   2D 13 00 00   Branch              0013           => L_2
L_1:
0012   0x019FE8   41 05 0A 00   LoadStaticPointerImmr5, 10         r5 = ST[10] -> <0xBF0274FE>
L_2:
0013   0x019FF0   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF026BEB]
0014   0x019FF8   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
0015   0x01A000   43 33 04 00   Move                r51, r4        r51 = r4 [0xBF0273AB]
0016   0x01A008   43 34 05 00   Move                r52, r5        r52 = r5 [0xBF0274FE]
0017   0x01A010   1C 01 01 04   CallFf              r1, r1, 4      r1 = #5445173390656D6D(0xBF026BEB, 0xBF025EFC, 0xBF0273AB, 0xBF0274FE)
0018   0x01A018   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
0019   0x01A020   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
001A   0x01A028   43 32 02 00   Move                r50, r2        r50 = r2 [19]
001B   0x01A030   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
001C   0x01A038   2D 1E 00 00   Branch              001E           => L_RETURN
L_0:
001D   0x01A040   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
001E   0x01A048   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x01A050    POINTER <is-final-build?>
0001   0x01A058    POINTER <display>
0002   0x01A060    POINTER <#5445173390656D6D>
0003   0x01A068    POINTER <#00000282BF026BEB>
0004   0x01A070    POINTER <#00000282BF025EFC>
0005   0x01A078    POINTER <#00000282BF0273AB>
0006   0x01A080    POINTER <get-boolean>
0007   0x01A088    SID <#FA343BC04362318D>
0008   0x01A090    SID <self>
0009   0x01A098    POINTER <#00000282BF02776C>
000A   0x01A0A0    POINTER <#00000282BF0274FE>
0000   0x01EC20   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <wait-one-frame>
0001   0x01EC28   1C 00 00 00   CallFf              r0, r0, 0      r0 = wait-one-frame()
0002   0x01EC30   00 00 00 00   Return              r0             Return wait-one-frame()
SYMBOL TABLE: 
0000   0x01EC38    POINTER <wait-one-frame>
0000   0x010228   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <go>
0001   0x010230   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <setup-combat-params>
0002   0x010238   0C 02 01 00   LoadU16Imm          r2, 1          r2 = 1
0003   0x010240   43 31 01 00   Move                r49, r1        r49 = r1 [setup-combat-params]
0004   0x010248   43 32 02 00   Move                r50, r2        r50 = r2 [1]
0005   0x010250   1C 00 00 02   CallFf              r0, r0, 2      r0 = go(setup-combat-params, 1)
0006   0x010258   00 00 00 00   Return              r0             Return go()
SYMBOL TABLE: 
0000   0x010260    POINTER <go>
0001   0x010268    SID <setup-combat-params>
      STATE setup-combat-params:
         ON start
          TRACK main:
0000   0x00F9F8   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <is-final-build?>
0001   0x00FA00   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0002   0x00FA08   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0003   0x00FA10   2F 0E 00 00   BranchIfNot         r0, 000E       IF NOT r0 [0x6620ACB7] => L_0
0004   0x00FA18   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <display>
0005   0x00FA20   15 01 02 00   LookupPointer       r1, 2          r1 = ST[2] -> <#5445173390656D6D>
0006   0x00FA28   41 02 03 00   LoadStaticPointerImmr2, 3          r2 = ST[3] -> <0xBF0270EE>
0007   0x00FA30   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF0270EE]
0008   0x00FA38   1C 01 01 01   CallFf              r1, r1, 1      r1 = #5445173390656D6D(0xBF0270EE)
0009   0x00FA40   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
000A   0x00FA48   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
000B   0x00FA50   43 32 02 00   Move                r50, r2        r50 = r2 [19]
000C   0x00FA58   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
000D   0x00FA60   2D 0F 00 00   Branch              000F           => L_RETURN
L_0:
000E   0x00FA68   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
000F   0x00FA70   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x00FA78    POINTER <is-final-build?>
0001   0x00FA80    POINTER <display>
0002   0x00FA88    POINTER <#5445173390656D6D>
0003   0x00FA90    POINTER <#00000282BF0270EE>
0000   0x012F98   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <get-symbol>
0001   0x012FA0   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <global-combat-params>
0002   0x012FA8   4A 02 02 00   LoadStaticU64Imm    r2, 2          r2 = ST[2] -> <self>
0003   0x012FB0   43 31 01 00   Move                r49, r1        r49 = r1 [global-combat-params]
0004   0x012FB8   43 32 02 00   Move                r50, r2        r50 = r2 [self]
0005   0x012FC0   1C 00 00 02   CallFf              r0, r0, 2      r0 = get-symbol(global-combat-params, self)
0006   0x012FC8   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
0007   0x012FD0   1D 00 00 01   IEqual              r0, r0, r1     r0 = r0 [1774822656] == r1 [0]
0008   0x012FD8   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0009   0x012FE0   15 01 00 00   LookupPointer       r1, 0          r1 = ST[0] -> <get-symbol>
000A   0x012FE8   4A 02 03 00   LoadStaticU64Imm    r2, 3          r2 = ST[3] -> <#CD5807AC5F281201>
000B   0x012FF0   4A 03 02 00   LoadStaticU64Imm    r3, 2          r3 = ST[2] -> <self>
000C   0x012FF8   43 31 02 00   Move                r49, r2        r49 = r2 [#CD5807AC5F281201]
000D   0x013000   43 32 03 00   Move                r50, r3        r50 = r3 [self]
000E   0x013008   1C 01 01 02   CallFf              r1, r1, 2      r1 = get-symbol(#CD5807AC5F281201, self)
000F   0x013010   0C 02 00 00   LoadU16Imm          r2, 0          r2 = 0
0010   0x013018   1D 01 01 02   IEqual              r1, r1, r2     r1 = r1 [1774822656] == r2 [0]
0011   0x013020   30 01 01 00   OpLogNot            r1, r1         r1 = !r1 -> <TRUE>
0012   0x013028   15 02 00 00   LookupPointer       r2, 0          r2 = ST[0] -> <get-symbol>
0013   0x013030   4A 03 04 00   LoadStaticU64Imm    r3, 4          r3 = ST[4] -> <#355CB666FED58A80>
0014   0x013038   4A 04 02 00   LoadStaticU64Imm    r4, 2          r4 = ST[2] -> <self>
0015   0x013040   43 31 03 00   Move                r49, r3        r49 = r3 [#355CB666FED58A80]
0016   0x013048   43 32 04 00   Move                r50, r4        r50 = r4 [self]
0017   0x013050   1C 02 02 02   CallFf              r2, r2, 2      r2 = get-symbol(#355CB666FED58A80, self)
0018   0x013058   43 03 01 00   Move                r3, r1         r3 = r1 [0x69C9A501]
0019   0x013060   2F 56 03 00   BranchIfNot         r3, 0056       IF NOT r3 [0x69C9A501] => L_0
001A   0x013068   15 03 05 00   LookupPointer       r3, 5          r3 = ST[5] -> <is-final-build?>
001B   0x013070   1C 03 03 00   CallFf              r3, r3, 0      r3 = is-final-build?()
001C   0x013078   30 03 03 00   OpLogNot            r3, r3         r3 = !r3 -> <TRUE>
001D   0x013080   2F 2A 03 00   BranchIfNot         r3, 002A       IF NOT r3 [0x6620ACB7] => L_1
001E   0x013088   15 03 06 00   LookupPointer       r3, 6          r3 = ST[6] -> <display>
001F   0x013090   15 04 07 00   LookupPointer       r4, 7          r4 = ST[7] -> <#5445173390656D6D>
0020   0x013098   41 05 08 00   LoadStaticPointerImmr5, 8          r5 = ST[8] -> <0xBF026590>
0021   0x0130A0   41 06 09 00   LoadStaticPointerImmr6, 9          r6 = ST[9] -> <0xBF025EFC>
0022   0x0130A8   43 31 05 00   Move                r49, r5        r49 = r5 [0xBF026590]
0023   0x0130B0   43 32 06 00   Move                r50, r6        r50 = r6 [0xBF025EFC]
0024   0x0130B8   1C 04 04 02   CallFf              r4, r4, 2      r4 = #5445173390656D6D(0xBF026590, 0xBF025EFC)
0025   0x0130C0   0C 05 13 00   LoadU16Imm          r5, 19         r5 = 19
0026   0x0130C8   43 31 04 00   Move                r49, r4        r49 = r4 [#5445173390656D6D()]
0027   0x0130D0   43 32 05 00   Move                r50, r5        r50 = r5 [19]
0028   0x0130D8   1C 03 03 02   CallFf              r3, r3, 2      r3 = display(#5445173390656D6D(), 19)
0029   0x0130E0   2D 2B 00 00   Branch              002B           => L_2
L_1:
002A   0x0130E8   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
L_2:
002B   0x0130F0   15 03 05 00   LookupPointer       r3, 5          r3 = ST[5] -> <is-final-build?>
002C   0x0130F8   1C 03 03 00   CallFf              r3, r3, 0      r3 = is-final-build?()
002D   0x013100   30 03 03 00   OpLogNot            r3, r3         r3 = !r3 -> <TRUE>
002E   0x013108   2F 47 03 00   BranchIfNot         r3, 0047       IF NOT r3 [0x6620ACB7] => L_3
002F   0x013110   15 03 06 00   LookupPointer       r3, 6          r3 = ST[6] -> <display>
0030   0x013118   15 04 07 00   LookupPointer       r4, 7          r4 = ST[7] -> <#5445173390656D6D>
0031   0x013120   41 05 0A 00   LoadStaticPointerImmr5, 10         r5 = ST[10] -> <0xBF026BEB>
0032   0x013128   41 06 09 00   LoadStaticPointerImmr6, 9          r6 = ST[9] -> <0xBF025EFC>
0033   0x013130   41 07 0B 00   LoadStaticPointerImmr7, 11         r7 = ST[11] -> <0xBF02735E>
0034   0x013138   15 08 0C 00   LookupPointer       r8, 12         r8 = ST[12] -> <string-debug>
0035   0x013140   15 09 00 00   LookupPointer       r9, 0          r9 = ST[0] -> <get-symbol>
0036   0x013148   4A 0A 03 00   LoadStaticU64Imm    r10, 3         r10 = ST[3] -> <#CD5807AC5F281201>
0037   0x013150   4A 0B 02 00   LoadStaticU64Imm    r11, 2         r11 = ST[2] -> <self>
0038   0x013158   43 31 0A 00   Move                r49, r10       r49 = r10 [#CD5807AC5F281201]
0039   0x013160   43 32 0B 00   Move                r50, r11       r50 = r11 [self]
003A   0x013168   1C 09 09 02   CallFf              r9, r9, 2      r9 = get-symbol(#CD5807AC5F281201, self)
003B   0x013170   43 31 09 00   Move                r49, r9        r49 = r9 [get-symbol()]
003C   0x013178   1C 08 08 01   CallFf              r8, r8, 1      r8 = string-debug(get-symbol())
003D   0x013180   43 31 05 00   Move                r49, r5        r49 = r5 [0xBF026BEB]
003E   0x013188   43 32 06 00   Move                r50, r6        r50 = r6 [0xBF025EFC]
003F   0x013190   43 33 07 00   Move                r51, r7        r51 = r7 [0xBF02735E]
0040   0x013198   43 34 08 00   Move                r52, r8        r52 = r8 [string-debug()]
0041   0x0131A0   1C 04 04 04   CallFf              r4, r4, 4      r4 = #5445173390656D6D(0xBF026BEB, 0xBF025EFC, 0xBF02735E, string-debug())
0042   0x0131A8   0C 05 13 00   LoadU16Imm          r5, 19         r5 = 19
0043   0x0131B0   43 31 04 00   Move                r49, r4        r49 = r4 [#5445173390656D6D()]
0044   0x0131B8   43 32 05 00   Move                r50, r5        r50 = r5 [19]
0045   0x0131C0   1C 03 03 02   CallFf              r3, r3, 2      r3 = display(#5445173390656D6D(), 19)
0046   0x0131C8   2D 48 00 00   Branch              0048           => L_4
L_3:
0047   0x0131D0   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
L_4:
0048   0x0131D8   15 03 0D 00   LookupPointer       r3, 13         r3 = ST[13] -> <set-symbol>
0049   0x0131E0   4A 04 0E 00   LoadStaticU64Imm    r4, 14         r4 = ST[14] -> <#F1186475D251E396>
004A   0x0131E8   15 05 00 00   LookupPointer       r5, 0          r5 = ST[0] -> <get-symbol>
004B   0x0131F0   4A 06 03 00   LoadStaticU64Imm    r6, 3          r6 = ST[3] -> <#CD5807AC5F281201>
004C   0x0131F8   4A 07 02 00   LoadStaticU64Imm    r7, 2          r7 = ST[2] -> <self>
004D   0x013200   43 31 06 00   Move                r49, r6        r49 = r6 [#CD5807AC5F281201]
004E   0x013208   43 32 07 00   Move                r50, r7        r50 = r7 [self]
004F   0x013210   1C 05 05 02   CallFf              r5, r5, 2      r5 = get-symbol(#CD5807AC5F281201, self)
0050   0x013218   4A 06 02 00   LoadStaticU64Imm    r6, 2          r6 = ST[2] -> <self>
0051   0x013220   43 31 04 00   Move                r49, r4        r49 = r4 [#F1186475D251E396]
0052   0x013228   43 32 05 00   Move                r50, r5        r50 = r5 [get-symbol()]
0053   0x013230   43 33 06 00   Move                r51, r6        r51 = r6 [self]
0054   0x013238   1C 03 03 03   CallFf              r3, r3, 3      r3 = set-symbol(#F1186475D251E396, get-symbol(), self)
0055   0x013240   2D DD 00 00   Branch              00DD           => L_5
L_0:
0056   0x013248   43 03 00 00   Move                r3, r0         r3 = r0 [0x69C9A501]
0057   0x013250   2F 94 03 00   BranchIfNot         r3, 0094       IF NOT r3 [0x69C9A501] => L_6
0058   0x013258   15 03 05 00   LookupPointer       r3, 5          r3 = ST[5] -> <is-final-build?>
0059   0x013260   1C 03 03 00   CallFf              r3, r3, 0      r3 = is-final-build?()
005A   0x013268   30 03 03 00   OpLogNot            r3, r3         r3 = !r3 -> <TRUE>
005B   0x013270   2F 68 03 00   BranchIfNot         r3, 0068       IF NOT r3 [0x6620ACB7] => L_7
005C   0x013278   15 03 06 00   LookupPointer       r3, 6          r3 = ST[6] -> <display>
005D   0x013280   15 04 07 00   LookupPointer       r4, 7          r4 = ST[7] -> <#5445173390656D6D>
005E   0x013288   41 05 0F 00   LoadStaticPointerImmr5, 15         r5 = ST[15] -> <0xBF02640A>
005F   0x013290   41 06 09 00   LoadStaticPointerImmr6, 9          r6 = ST[9] -> <0xBF025EFC>
0060   0x013298   43 31 05 00   Move                r49, r5        r49 = r5 [0xBF02640A]
0061   0x0132A0   43 32 06 00   Move                r50, r6        r50 = r6 [0xBF025EFC]
0062   0x0132A8   1C 04 04 02   CallFf              r4, r4, 2      r4 = #5445173390656D6D(0xBF02640A, 0xBF025EFC)
0063   0x0132B0   0C 05 13 00   LoadU16Imm          r5, 19         r5 = 19
0064   0x0132B8   43 31 04 00   Move                r49, r4        r49 = r4 [#5445173390656D6D()]
0065   0x0132C0   43 32 05 00   Move                r50, r5        r50 = r5 [19]
0066   0x0132C8   1C 03 03 02   CallFf              r3, r3, 2      r3 = display(#5445173390656D6D(), 19)
0067   0x0132D0   2D 69 00 00   Branch              0069           => L_8
L_7:
0068   0x0132D8   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
L_8:
0069   0x0132E0   15 03 05 00   LookupPointer       r3, 5          r3 = ST[5] -> <is-final-build?>
006A   0x0132E8   1C 03 03 00   CallFf              r3, r3, 0      r3 = is-final-build?()
006B   0x0132F0   30 03 03 00   OpLogNot            r3, r3         r3 = !r3 -> <TRUE>
006C   0x0132F8   2F 85 03 00   BranchIfNot         r3, 0085       IF NOT r3 [0x6620ACB7] => L_9
006D   0x013300   15 03 06 00   LookupPointer       r3, 6          r3 = ST[6] -> <display>
006E   0x013308   15 04 07 00   LookupPointer       r4, 7          r4 = ST[7] -> <#5445173390656D6D>
006F   0x013310   41 05 0A 00   LoadStaticPointerImmr5, 10         r5 = ST[10] -> <0xBF026BEB>
0070   0x013318   41 06 09 00   LoadStaticPointerImmr6, 9          r6 = ST[9] -> <0xBF025EFC>
0071   0x013320   41 07 0B 00   LoadStaticPointerImmr7, 11         r7 = ST[11] -> <0xBF02735E>
0072   0x013328   15 08 0C 00   LookupPointer       r8, 12         r8 = ST[12] -> <string-debug>
0073   0x013330   15 09 00 00   LookupPointer       r9, 0          r9 = ST[0] -> <get-symbol>
0074   0x013338   4A 0A 01 00   LoadStaticU64Imm    r10, 1         r10 = ST[1] -> <global-combat-params>
0075   0x013340   4A 0B 02 00   LoadStaticU64Imm    r11, 2         r11 = ST[2] -> <self>
0076   0x013348   43 31 0A 00   Move                r49, r10       r49 = r10 [global-combat-params]
0077   0x013350   43 32 0B 00   Move                r50, r11       r50 = r11 [self]
0078   0x013358   1C 09 09 02   CallFf              r9, r9, 2      r9 = get-symbol(global-combat-params, self)
0079   0x013360   43 31 09 00   Move                r49, r9        r49 = r9 [get-symbol()]
007A   0x013368   1C 08 08 01   CallFf              r8, r8, 1      r8 = string-debug(get-symbol())
007B   0x013370   43 31 05 00   Move                r49, r5        r49 = r5 [0xBF026BEB]
007C   0x013378   43 32 06 00   Move                r50, r6        r50 = r6 [0xBF025EFC]
007D   0x013380   43 33 07 00   Move                r51, r7        r51 = r7 [0xBF02735E]
007E   0x013388   43 34 08 00   Move                r52, r8        r52 = r8 [string-debug()]
007F   0x013390   1C 04 04 04   CallFf              r4, r4, 4      r4 = #5445173390656D6D(0xBF026BEB, 0xBF025EFC, 0xBF02735E, string-debug())
0080   0x013398   0C 05 13 00   LoadU16Imm          r5, 19         r5 = 19
0081   0x0133A0   43 31 04 00   Move                r49, r4        r49 = r4 [#5445173390656D6D()]
0082   0x0133A8   43 32 05 00   Move                r50, r5        r50 = r5 [19]
0083   0x0133B0   1C 03 03 02   CallFf              r3, r3, 2      r3 = display(#5445173390656D6D(), 19)
0084   0x0133B8   2D 86 00 00   Branch              0086           => L_10
L_9:
0085   0x0133C0   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
L_10:
0086   0x0133C8   15 03 0D 00   LookupPointer       r3, 13         r3 = ST[13] -> <set-symbol>
0087   0x0133D0   4A 04 0E 00   LoadStaticU64Imm    r4, 14         r4 = ST[14] -> <#F1186475D251E396>
0088   0x0133D8   15 05 00 00   LookupPointer       r5, 0          r5 = ST[0] -> <get-symbol>
0089   0x0133E0   4A 06 01 00   LoadStaticU64Imm    r6, 1          r6 = ST[1] -> <global-combat-params>
008A   0x0133E8   4A 07 02 00   LoadStaticU64Imm    r7, 2          r7 = ST[2] -> <self>
008B   0x0133F0   43 31 06 00   Move                r49, r6        r49 = r6 [global-combat-params]
008C   0x0133F8   43 32 07 00   Move                r50, r7        r50 = r7 [self]
008D   0x013400   1C 05 05 02   CallFf              r5, r5, 2      r5 = get-symbol(global-combat-params, self)
008E   0x013408   4A 06 02 00   LoadStaticU64Imm    r6, 2          r6 = ST[2] -> <self>
008F   0x013410   43 31 04 00   Move                r49, r4        r49 = r4 [#F1186475D251E396]
0090   0x013418   43 32 05 00   Move                r50, r5        r50 = r5 [get-symbol()]
0091   0x013420   43 33 06 00   Move                r51, r6        r51 = r6 [self]
0092   0x013428   1C 03 03 03   CallFf              r3, r3, 3      r3 = set-symbol(#F1186475D251E396, get-symbol(), self)
0093   0x013430   2D DD 00 00   Branch              00DD           => L_5
L_6:
0094   0x013438   15 03 05 00   LookupPointer       r3, 5          r3 = ST[5] -> <is-final-build?>
0095   0x013440   1C 03 03 00   CallFf              r3, r3, 0      r3 = is-final-build?()
0096   0x013448   30 03 03 00   OpLogNot            r3, r3         r3 = !r3 -> <TRUE>
0097   0x013450   2F A4 03 00   BranchIfNot         r3, 00A4       IF NOT r3 [0x6620ACB7] => L_11
0098   0x013458   15 03 06 00   LookupPointer       r3, 6          r3 = ST[6] -> <display>
0099   0x013460   15 04 07 00   LookupPointer       r4, 7          r4 = ST[7] -> <#5445173390656D6D>
009A   0x013468   41 05 10 00   LoadStaticPointerImmr5, 16         r5 = ST[16] -> <0xBF026236>
009B   0x013470   41 06 09 00   LoadStaticPointerImmr6, 9          r6 = ST[9] -> <0xBF025EFC>
009C   0x013478   43 31 05 00   Move                r49, r5        r49 = r5 [0xBF026236]
009D   0x013480   43 32 06 00   Move                r50, r6        r50 = r6 [0xBF025EFC]
009E   0x013488   1C 04 04 02   CallFf              r4, r4, 2      r4 = #5445173390656D6D(0xBF026236, 0xBF025EFC)
009F   0x013490   0C 05 13 00   LoadU16Imm          r5, 19         r5 = 19
00A0   0x013498   43 31 04 00   Move                r49, r4        r49 = r4 [#5445173390656D6D()]
00A1   0x0134A0   43 32 05 00   Move                r50, r5        r50 = r5 [19]
00A2   0x0134A8   1C 03 03 02   CallFf              r3, r3, 2      r3 = display(#5445173390656D6D(), 19)
00A3   0x0134B0   2D A5 00 00   Branch              00A5           => L_12
L_11:
00A4   0x0134B8   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
L_12:
00A5   0x0134C0   15 03 05 00   LookupPointer       r3, 5          r3 = ST[5] -> <is-final-build?>
00A6   0x0134C8   1C 03 03 00   CallFf              r3, r3, 0      r3 = is-final-build?()
00A7   0x0134D0   30 03 03 00   OpLogNot            r3, r3         r3 = !r3 -> <TRUE>
00A8   0x0134D8   2F B9 03 00   BranchIfNot         r3, 00B9       IF NOT r3 [0x6620ACB7] => L_13
00A9   0x0134E0   15 03 06 00   LookupPointer       r3, 6          r3 = ST[6] -> <display>
00AA   0x0134E8   15 04 07 00   LookupPointer       r4, 7          r4 = ST[7] -> <#5445173390656D6D>
00AB   0x0134F0   41 05 0A 00   LoadStaticPointerImmr5, 10         r5 = ST[10] -> <0xBF026BEB>
00AC   0x0134F8   41 06 09 00   LoadStaticPointerImmr6, 9          r6 = ST[9] -> <0xBF025EFC>
00AD   0x013500   41 07 0B 00   LoadStaticPointerImmr7, 11         r7 = ST[11] -> <0xBF02735E>
00AE   0x013508   41 08 11 00   LoadStaticPointerImmr8, 17         r8 = ST[17] -> <0xBF0273FF>
00AF   0x013510   43 31 05 00   Move                r49, r5        r49 = r5 [0xBF026BEB]
00B0   0x013518   43 32 06 00   Move                r50, r6        r50 = r6 [0xBF025EFC]
00B1   0x013520   43 33 07 00   Move                r51, r7        r51 = r7 [0xBF02735E]
00B2   0x013528   43 34 08 00   Move                r52, r8        r52 = r8 [0xBF0273FF]
00B3   0x013530   1C 04 04 04   CallFf              r4, r4, 4      r4 = #5445173390656D6D(0xBF026BEB, 0xBF025EFC, 0xBF02735E, 0xBF0273FF)
00B4   0x013538   0C 05 13 00   LoadU16Imm          r5, 19         r5 = 19
00B5   0x013540   43 31 04 00   Move                r49, r4        r49 = r4 [#5445173390656D6D()]
00B6   0x013548   43 32 05 00   Move                r50, r5        r50 = r5 [19]
00B7   0x013550   1C 03 03 02   CallFf              r3, r3, 2      r3 = display(#5445173390656D6D(), 19)
00B8   0x013558   2D BA 00 00   Branch              00BA           => L_14
L_13:
00B9   0x013560   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
L_14:
00BA   0x013568   15 03 12 00   LookupPointer       r3, 18         r3 = ST[18] -> <display-error>
00BB   0x013570   15 04 07 00   LookupPointer       r4, 7          r4 = ST[7] -> <#5445173390656D6D>
00BC   0x013578   41 05 13 00   LoadStaticPointerImmr5, 19         r5 = ST[19] -> <0xBF027440>
00BD   0x013580   15 06 0C 00   LookupPointer       r6, 12         r6 = ST[12] -> <string-debug>
00BE   0x013588   15 07 00 00   LookupPointer       r7, 0          r7 = ST[0] -> <get-symbol>
00BF   0x013590   4A 08 14 00   LoadStaticU64Imm    r8, 20         r8 = ST[20] -> <#7E358C581E146817>
00C0   0x013598   4A 09 02 00   LoadStaticU64Imm    r9, 2          r9 = ST[2] -> <self>
00C1   0x0135A0   43 31 08 00   Move                r49, r8        r49 = r8 [#7E358C581E146817]
00C2   0x0135A8   43 32 09 00   Move                r50, r9        r50 = r9 [self]
00C3   0x0135B0   1C 07 07 02   CallFf              r7, r7, 2      r7 = get-symbol(#7E358C581E146817, self)
00C4   0x0135B8   43 31 07 00   Move                r49, r7        r49 = r7 [get-symbol()]
00C5   0x0135C0   1C 06 06 01   CallFf              r6, r6, 1      r6 = string-debug(get-symbol())
00C6   0x0135C8   15 07 0C 00   LookupPointer       r7, 12         r7 = ST[12] -> <string-debug>
00C7   0x0135D0   15 08 00 00   LookupPointer       r8, 0          r8 = ST[0] -> <get-symbol>
00C8   0x0135D8   4A 09 15 00   LoadStaticU64Imm    r9, 21         r9 = ST[21] -> <#7F25A075B1A9E239>
00C9   0x0135E0   4A 0A 02 00   LoadStaticU64Imm    r10, 2         r10 = ST[2] -> <self>
00CA   0x0135E8   43 31 09 00   Move                r49, r9        r49 = r9 [#7F25A075B1A9E239]
00CB   0x0135F0   43 32 0A 00   Move                r50, r10       r50 = r10 [self]
00CC   0x0135F8   1C 08 08 02   CallFf              r8, r8, 2      r8 = get-symbol(#7F25A075B1A9E239, self)
00CD   0x013600   43 31 08 00   Move                r49, r8        r49 = r8 [get-symbol()]
00CE   0x013608   1C 07 07 01   CallFf              r7, r7, 1      r7 = string-debug(get-symbol())
00CF   0x013610   43 31 05 00   Move                r49, r5        r49 = r5 [0xBF027440]
00D0   0x013618   43 32 06 00   Move                r50, r6        r50 = r6 [string-debug()]
00D1   0x013620   43 33 07 00   Move                r51, r7        r51 = r7 [string-debug()]
00D2   0x013628   1C 04 04 03   CallFf              r4, r4, 3      r4 = #5445173390656D6D(0xBF027440, string-debug(), string-debug())
00D3   0x013630   43 31 04 00   Move                r49, r4        r49 = r4 [#5445173390656D6D()]
00D4   0x013638   1C 03 03 01   CallFf              r3, r3, 1      r3 = display-error(#5445173390656D6D())
00D5   0x013640   15 03 0D 00   LookupPointer       r3, 13         r3 = ST[13] -> <set-symbol>
00D6   0x013648   4A 04 0E 00   LoadStaticU64Imm    r4, 14         r4 = ST[14] -> <#F1186475D251E396>
00D7   0x013650   4A 05 16 00   LoadStaticU64Imm    r5, 22         r5 = ST[22] -> <*default-global-combat-params*>
00D8   0x013658   4A 06 02 00   LoadStaticU64Imm    r6, 2          r6 = ST[2] -> <self>
00D9   0x013660   43 31 04 00   Move                r49, r4        r49 = r4 [#F1186475D251E396]
00DA   0x013668   43 32 05 00   Move                r50, r5        r50 = r5 [*default-global-combat-params*]
00DB   0x013670   43 33 06 00   Move                r51, r6        r51 = r6 [self]
00DC   0x013678   1C 03 03 03   CallFf              r3, r3, 3      r3 = set-symbol(#F1186475D251E396, *default-global-combat-params*, self)
L_5:
00DD   0x013680   15 03 17 00   LookupPointer       r3, 23         r3 = ST[23] -> <get-boolean>
00DE   0x013688   4A 04 18 00   LoadStaticU64Imm    r4, 24         r4 = ST[24] -> <#503D45B686F0E282>
00DF   0x013690   4A 05 02 00   LoadStaticU64Imm    r5, 2          r5 = ST[2] -> <self>
00E0   0x013698   43 31 04 00   Move                r49, r4        r49 = r4 [#503D45B686F0E282]
00E1   0x0136A0   43 32 05 00   Move                r50, r5        r50 = r5 [self]
00E2   0x0136A8   1C 03 03 02   CallFf              r3, r3, 2      r3 = get-boolean(#503D45B686F0E282, self)
00E3   0x0136B0   30 03 03 00   OpLogNot            r3, r3         r3 = !r3 -> <TRUE>
00E4   0x0136B8   2F EF 03 00   BranchIfNot         r3, 00EF       IF NOT r3 [0xFC4C4D87] => L_15
00E5   0x0136C0   15 03 19 00   LookupPointer       r3, 25         r3 = ST[25] -> <npc-set-global-combat-params>
00E6   0x0136C8   15 04 00 00   LookupPointer       r4, 0          r4 = ST[0] -> <get-symbol>
00E7   0x0136D0   4A 05 0E 00   LoadStaticU64Imm    r5, 14         r5 = ST[14] -> <#F1186475D251E396>
00E8   0x0136D8   4A 06 02 00   LoadStaticU64Imm    r6, 2          r6 = ST[2] -> <self>
00E9   0x0136E0   43 31 05 00   Move                r49, r5        r49 = r5 [#F1186475D251E396]
00EA   0x0136E8   43 32 06 00   Move                r50, r6        r50 = r6 [self]
00EB   0x0136F0   1C 04 04 02   CallFf              r4, r4, 2      r4 = get-symbol(#F1186475D251E396, self)
00EC   0x0136F8   43 31 04 00   Move                r49, r4        r49 = r4 [get-symbol()]
00ED   0x013700   1C 03 03 01   CallFf              r3, r3, 1      r3 = npc-set-global-combat-params(get-symbol())
00EE   0x013708   2D F0 00 00   Branch              00F0           => L_16
L_15:
00EF   0x013710   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
L_16:
00F0   0x013718   43 03 02 00   Move                r3, r2         r3 = r2 [get-symbol()]
00F1   0x013720   2F BE 03 01   BranchIfNot         r3, 01BE       IF NOT r3 [get-symbol()] => L_17
00F2   0x013728   43 03 02 00   Move                r3, r2         r3 = r2 [get-symbol()]
00F3   0x013730   5D 03 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00F4   0x013738   4F 03 03 00   LoadI32             ???            UNKNOWN INSTRUCTION
00F5   0x013740   43 04 02 00   Move                r4, r2         r4 = r2 [get-symbol()]
00F6   0x013748   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00F7   0x013750   3B 04 04 04   IAddImm             r4, r4, 4      r4 = r4 [1774822854] / 4 -> <1774822854>
00F8   0x013758   43 05 02 00   Move                r5, r2         r5 = r2 [get-symbol()]
00F9   0x013760   5D 05 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00FA   0x013768   3B 05 05 44   IAddImm             r5, r5, 68     r5 = r5 [2027467990] / 68 -> <2027467990>
00FB   0x013770   15 06 1A 00   LookupPointer       r6, 26         r6 = ST[26] -> <get-int32>
00FC   0x013778   4A 07 1B 00   LoadStaticU64Imm    r7, 27         r7 = ST[27] -> <#CEF93DF859F605EA>
00FD   0x013780   4A 08 02 00   LoadStaticU64Imm    r8, 2          r8 = ST[2] -> <self>
00FE   0x013788   43 31 07 00   Move                r49, r7        r49 = r7 [#CEF93DF859F605EA]
00FF   0x013790   43 32 08 00   Move                r50, r8        r50 = r8 [self]
0100   0x013798   1C 06 06 02   CallFf              r6, r6, 2      r6 = get-int32(#CEF93DF859F605EA, self)
0101   0x0137A0   43 07 06 00   Move                r7, r6         r7 = r6 [get-int32()]
0102   0x0137A8   0C 08 0F 27   LoadU16Imm          r8, 9999       r8 = 9999
0103   0x0137B0   01 07 07 08   IAdd                r7, r7, r8     -635283407 = get-int32() + 9999
0104   0x0137B8   3F 08 1C 00   LoadStaticI32Imm    r8, 28         r8 = ST[28] -> <-1>
0105   0x0137C0   0C 09 00 00   LoadU16Imm          r9, 0          r9 = 0
L_21:
0106   0x0137C8   43 0A 09 00   Move                r10, r9        r10 = r9 [0]
0107   0x0137D0   43 0B 03 00   Move                r11, r3        r11 = r3 [get-symbol]
0108   0x0137D8   20 0A 0A 0B   ILessThan           r10, r10, r11  r10 = r10 [0] < r11 [1774822854]
0109   0x0137E0   2F 3B 0A 01   BranchIfNot         r10, 013B      IF NOT r10 [0x0] => L_18
010A   0x0137E8   43 0A 04 00   Move                r10, r4        r10 = r4 [1774822854]
010B   0x0137F0   43 0B 09 00   Move                r11, r9        r11 = r9 [0]
010C   0x0137F8   3D 0B 0B 04   IMulImm             r11, r11, 4    r11 = r11 [0] / 4 -> <0>
010D   0x013800   01 0A 0A 0B   IAdd                r10, r10, r11  1774822854 = 1774822854 + 0
010E   0x013808   0E 0A 0A 00   LoadFloat           r10, [r10]     r10 = [0x0 + 0x0]
010F   0x013810   19 0A 0A 00   CastInteger         r10, r10       r10 = int(r10) -> <0.000000> => <0>
0110   0x013818   43 0B 05 00   Move                r11, r5        r11 = r5 [2027467990]
0111   0x013820   43 0C 09 00   Move                r12, r9        r12 = r9 [0]
0112   0x013828   3D 0C 0C 04   IMulImm             r12, r12, 4    r12 = r12 [0] / 4 -> <0>
0113   0x013830   01 0B 0B 0C   IAdd                r11, r11, r12  2027467990 = 2027467990 + 0
0114   0x013838   0E 0B 0B 00   LoadFloat           r11, [r11]     r11 = [0x0 + 0x0]
0115   0x013840   19 0B 0B 00   CastInteger         r11, r11       r11 = int(r11) -> <0.000000> => <0>
0116   0x013848   43 0C 07 00   Move                r12, r7        r12 = r7 [-635283407]
0117   0x013850   43 0D 06 00   Move                r13, r6        r13 = r6 [get-int32()]
0118   0x013858   02 0C 0C 0D   ISub                r12, r12, r13  9999 = -635283407 - get-int32()
0119   0x013860   43 0D 0C 00   Move                r13, r12       r13 = r12 [9999]
011A   0x013868   43 0E 0C 00   Move                r14, r12       r14 = r12 [9999]
011B   0x013870   03 0D 0D 0E   IMul                r13, r13, r14  99980001 = 9999 * 9999
011C   0x013878   43 0E 0A 00   Move                r14, r10       r14 = r10 [0]
011D   0x013880   43 0F 06 00   Move                r15, r6        r15 = r6 [get-int32()]
011E   0x013888   02 0E 0E 0F   ISub                r14, r14, r15  635293406 = 0 - get-int32()
011F   0x013890   43 0F 0E 00   Move                r15, r14       r15 = r14 [635293406]
0120   0x013898   43 10 0E 00   Move                r16, r14       r16 = r14 [635293406]
0121   0x0138A0   03 0F 0F 10   IMul                r15, r15, r16  -25819004 = 635293406 * 635293406
0122   0x0138A8   43 10 0F 00   Move                r16, r15       r16 = r15 [-25819004]
0123   0x0138B0   43 11 0D 00   Move                r17, r13       r17 = r13 [99980001]
0124   0x0138B8   21 10 10 11   ILessThanEqual      r16, r16, r17  r16 = r16 [-25819135] <= r17 [99980001]
0125   0x0138C0   2F 2D 10 01   BranchIfNot         r16, 012D      IF NOT r16 [0xFE760801] => L_19
0126   0x0138C8   43 10 0A 00   Move                r16, r10       r16 = r10 [0]
0127   0x0138D0   43 07 10 00   Move                r7, r16        r7 = r16 [0]
0128   0x0138D8   43 10 07 00   Move                r16, r7        r16 = r7 [0]
0129   0x0138E0   43 10 0B 00   Move                r16, r11       r16 = r11 [0]
012A   0x0138E8   43 08 10 00   Move                r8, r16        r8 = r16 [0]
012B   0x0138F0   43 10 08 00   Move                r16, r8        r16 = r8 [0]
012C   0x0138F8   2D 2E 00 01   Branch              012E           => L_20
L_19:
012D   0x013900   0C 10 00 00   LoadU16Imm          r16, 0         r16 = 0
L_20:
012E   0x013908   43 10 10 00   Move                r16, r16       r16 = r16 [0]
012F   0x013910   43 0F 10 00   Move                r15, r16       r15 = r16 [0]
0130   0x013918   43 0E 0F 00   Move                r14, r15       r14 = r15 [0]
0131   0x013920   43 0D 0E 00   Move                r13, r14       r13 = r14 [0]
0132   0x013928   43 0C 0D 00   Move                r12, r13       r12 = r13 [0]
0133   0x013930   43 0B 0C 00   Move                r11, r12       r11 = r12 [0]
0134   0x013938   43 0A 0B 00   Move                r10, r11       r10 = r11 [0]
0135   0x013940   43 0A 09 00   Move                r10, r9        r10 = r9 [0]
0136   0x013948   0C 0B 01 00   LoadU16Imm          r11, 1         r11 = 1
0137   0x013950   01 0A 0A 0B   IAdd                r10, r10, r11  1 = 0 + 1
0138   0x013958   43 09 0A 00   Move                r9, r10        r9 = r10 [1]
0139   0x013960   43 0A 09 00   Move                r10, r9        r10 = r9 [1]
013A   0x013968   2D 06 00 01   Branch              0106           => L_21
L_18:
013B   0x013970   43 09 0A 00   Move                r9, r10        r9 = r10 [1]
013C   0x013978   43 09 08 00   Move                r9, r8         r9 = r8 [0]
013D   0x013980   0C 0A 00 00   LoadU16Imm          r10, 0         r10 = 0
013E   0x013988   1E 09 09 0A   IGreaterThan        r9, r9, r10    r9 = r9 [0] > r10 [0]
013F   0x013990   2F 9D 09 01   BranchIfNot         r9, 019D       IF NOT r9 [0x0] => L_22
0140   0x013998   15 09 1D 00   LookupPointer       r9, 29         r9 = ST[29] -> <set-int32>
0141   0x0139A0   4A 0A 1E 00   LoadStaticU64Imm    r10, 30        r10 = ST[30] -> <#4046927F0EB6E142>
0142   0x0139A8   43 0B 08 00   Move                r11, r8        r11 = r8 [0]
0143   0x0139B0   4A 0C 02 00   LoadStaticU64Imm    r12, 2         r12 = ST[2] -> <self>
0144   0x0139B8   43 31 0A 00   Move                r49, r10       r49 = r10 [#4046927F0EB6E142]
0145   0x0139C0   43 32 0B 00   Move                r50, r11       r50 = r11 [0]
0146   0x0139C8   43 33 0C 00   Move                r51, r12       r51 = r12 [self]
0147   0x0139D0   1C 09 09 03   CallFf              r9, r9, 3      r9 = set-int32(#4046927F0EB6E142, 0, self)
0148   0x0139D8   15 09 05 00   LookupPointer       r9, 5          r9 = ST[5] -> <is-final-build?>
0149   0x0139E0   1C 09 09 00   CallFf              r9, r9, 0      r9 = is-final-build?()
014A   0x0139E8   30 09 09 00   OpLogNot            r9, r9         r9 = !r9 -> <TRUE>
014B   0x0139F0   2F 5E 09 01   BranchIfNot         r9, 015E       IF NOT r9 [0x6620ACB7] => L_23
014C   0x0139F8   15 09 06 00   LookupPointer       r9, 6          r9 = ST[6] -> <display>
014D   0x013A00   15 0A 07 00   LookupPointer       r10, 7         r10 = ST[7] -> <#5445173390656D6D>
014E   0x013A08   41 0B 1F 00   LoadStaticPointerImmr11, 31        r11 = ST[31] -> <0xBF026C4C>
014F   0x013A10   41 0C 09 00   LoadStaticPointerImmr12, 9         r12 = ST[9] -> <0xBF025EFC>
0150   0x013A18   41 0D 20 00   LoadStaticPointerImmr13, 32        r13 = ST[32] -> <0xBF027505>
0151   0x013A20   43 0E 07 00   Move                r14, r7        r14 = r7 [0]
0152   0x013A28   43 0F 08 00   Move                r15, r8        r15 = r8 [0]
0153   0x013A30   43 31 0B 00   Move                r49, r11       r49 = r11 [0xBF026C4C]
0154   0x013A38   43 32 0C 00   Move                r50, r12       r50 = r12 [0xBF025EFC]
0155   0x013A40   43 33 0D 00   Move                r51, r13       r51 = r13 [0xBF027505]
0156   0x013A48   43 34 0E 00   Move                r52, r14       r52 = r14 [0]
0157   0x013A50   43 35 0F 00   Move                r53, r15       r53 = r15 [0]
0158   0x013A58   1C 0A 0A 05   CallFf              r10, r10, 5    r10 = #5445173390656D6D(0xBF026C4C, 0xBF025EFC, 0xBF027505, 0, 0)
0159   0x013A60   0C 0B 13 00   LoadU16Imm          r11, 19        r11 = 19
015A   0x013A68   43 31 0A 00   Move                r49, r10       r49 = r10 [#5445173390656D6D()]
015B   0x013A70   43 32 0B 00   Move                r50, r11       r50 = r11 [19]
015C   0x013A78   1C 09 09 02   CallFf              r9, r9, 2      r9 = display(#5445173390656D6D(), 19)
015D   0x013A80   2D 5F 00 01   Branch              015F           => L_24
L_23:
015E   0x013A88   0C 09 00 00   LoadU16Imm          r9, 0          r9 = 0
L_24:
015F   0x013A90   15 09 05 00   LookupPointer       r9, 5          r9 = ST[5] -> <is-final-build?>
0160   0x013A98   1C 09 09 00   CallFf              r9, r9, 0      r9 = is-final-build?()
0161   0x013AA0   30 09 09 00   OpLogNot            r9, r9         r9 = !r9 -> <TRUE>
0162   0x013AA8   2F 78 09 01   BranchIfNot         r9, 0178       IF NOT r9 [0x6620ACB7] => L_25
0163   0x013AB0   15 09 06 00   LookupPointer       r9, 6          r9 = ST[6] -> <display>
0164   0x013AB8   15 0A 07 00   LookupPointer       r10, 7         r10 = ST[7] -> <#5445173390656D6D>
0165   0x013AC0   41 0B 21 00   LoadStaticPointerImmr11, 33        r11 = ST[33] -> <0xBF026BD4>
0166   0x013AC8   41 0C 09 00   LoadStaticPointerImmr12, 9         r12 = ST[9] -> <0xBF025EFC>
0167   0x013AD0   41 0D 22 00   LoadStaticPointerImmr13, 34        r13 = ST[34] -> <0xBF0271F5>
0168   0x013AD8   15 0E 1A 00   LookupPointer       r14, 26        r14 = ST[26] -> <get-int32>
0169   0x013AE0   4A 0F 1B 00   LoadStaticU64Imm    r15, 27        r15 = ST[27] -> <#CEF93DF859F605EA>
016A   0x013AE8   4A 10 02 00   LoadStaticU64Imm    r16, 2         r16 = ST[2] -> <self>
016B   0x013AF0   43 31 0F 00   Move                r49, r15       r49 = r15 [#CEF93DF859F605EA]
016C   0x013AF8   43 32 10 00   Move                r50, r16       r50 = r16 [self]
016D   0x013B00   1C 0E 0E 02   CallFf              r14, r14, 2    r14 = get-int32(#CEF93DF859F605EA, self)
016E   0x013B08   43 31 0B 00   Move                r49, r11       r49 = r11 [0xBF026BD4]
016F   0x013B10   43 32 0C 00   Move                r50, r12       r50 = r12 [0xBF025EFC]
0170   0x013B18   43 33 0D 00   Move                r51, r13       r51 = r13 [0xBF0271F5]
0171   0x013B20   43 34 0E 00   Move                r52, r14       r52 = r14 [get-int32()]
0172   0x013B28   1C 0A 0A 04   CallFf              r10, r10, 4    r10 = #5445173390656D6D(0xBF026BD4, 0xBF025EFC, 0xBF0271F5, get-int32())
0173   0x013B30   0C 0B 13 00   LoadU16Imm          r11, 19        r11 = 19
0174   0x013B38   43 31 0A 00   Move                r49, r10       r49 = r10 [#5445173390656D6D()]
0175   0x013B40   43 32 0B 00   Move                r50, r11       r50 = r11 [19]
0176   0x013B48   1C 09 09 02   CallFf              r9, r9, 2      r9 = display(#5445173390656D6D(), 19)
0177   0x013B50   2D 79 00 01   Branch              0179           => L_26
L_25:
0178   0x013B58   0C 09 00 00   LoadU16Imm          r9, 0          r9 = 0
L_26:
0179   0x013B60   15 09 05 00   LookupPointer       r9, 5          r9 = ST[5] -> <is-final-build?>
017A   0x013B68   1C 09 09 00   CallFf              r9, r9, 0      r9 = is-final-build?()
017B   0x013B70   30 09 09 00   OpLogNot            r9, r9         r9 = !r9 -> <TRUE>
017C   0x013B78   2F 8D 09 01   BranchIfNot         r9, 018D       IF NOT r9 [0x6620ACB7] => L_27
017D   0x013B80   15 09 06 00   LookupPointer       r9, 6          r9 = ST[6] -> <display>
017E   0x013B88   15 0A 07 00   LookupPointer       r10, 7         r10 = ST[7] -> <#5445173390656D6D>
017F   0x013B90   41 0B 21 00   LoadStaticPointerImmr11, 33        r11 = ST[33] -> <0xBF026BD4>
0180   0x013B98   41 0C 09 00   LoadStaticPointerImmr12, 9         r12 = ST[9] -> <0xBF025EFC>
0181   0x013BA0   41 0D 23 00   LoadStaticPointerImmr13, 35        r13 = ST[35] -> <0xBF027261>
0182   0x013BA8   43 0E 08 00   Move                r14, r8        r14 = r8 [0]
0183   0x013BB0   43 31 0B 00   Move                r49, r11       r49 = r11 [0xBF026BD4]
0184   0x013BB8   43 32 0C 00   Move                r50, r12       r50 = r12 [0xBF025EFC]
0185   0x013BC0   43 33 0D 00   Move                r51, r13       r51 = r13 [0xBF027261]
0186   0x013BC8   43 34 0E 00   Move                r52, r14       r52 = r14 [0]
0187   0x013BD0   1C 0A 0A 04   CallFf              r10, r10, 4    r10 = #5445173390656D6D(0xBF026BD4, 0xBF025EFC, 0xBF027261, 0)
0188   0x013BD8   0C 0B 13 00   LoadU16Imm          r11, 19        r11 = 19
0189   0x013BE0   43 31 0A 00   Move                r49, r10       r49 = r10 [#5445173390656D6D()]
018A   0x013BE8   43 32 0B 00   Move                r50, r11       r50 = r11 [19]
018B   0x013BF0   1C 09 09 02   CallFf              r9, r9, 2      r9 = display(#5445173390656D6D(), 19)
018C   0x013BF8   2D 8E 00 01   Branch              018E           => L_28
L_27:
018D   0x013C00   0C 09 00 00   LoadU16Imm          r9, 0          r9 = 0
L_28:
018E   0x013C08   15 09 17 00   LookupPointer       r9, 23         r9 = ST[23] -> <get-boolean>
018F   0x013C10   4A 0A 18 00   LoadStaticU64Imm    r10, 24        r10 = ST[24] -> <#503D45B686F0E282>
0190   0x013C18   4A 0B 02 00   LoadStaticU64Imm    r11, 2         r11 = ST[2] -> <self>
0191   0x013C20   43 31 0A 00   Move                r49, r10       r49 = r10 [#503D45B686F0E282]
0192   0x013C28   43 32 0B 00   Move                r50, r11       r50 = r11 [self]
0193   0x013C30   1C 09 09 02   CallFf              r9, r9, 2      r9 = get-boolean(#503D45B686F0E282, self)
0194   0x013C38   30 09 09 00   OpLogNot            r9, r9         r9 = !r9 -> <TRUE>
0195   0x013C40   2F 9B 09 01   BranchIfNot         r9, 019B       IF NOT r9 [0xFC4C4D87] => L_29
0196   0x013C48   15 09 24 00   LookupPointer       r9, 36         r9 = ST[36] -> <#C52976BF40B634F3>
0197   0x013C50   43 0A 08 00   Move                r10, r8        r10 = r8 [0]
0198   0x013C58   43 31 0A 00   Move                r49, r10       r49 = r10 [0]
0199   0x013C60   1C 09 09 01   CallFf              r9, r9, 1      r9 = #C52976BF40B634F3(0)
019A   0x013C68   2D 9C 00 01   Branch              019C           => L_30
L_29:
019B   0x013C70   0C 09 00 00   LoadU16Imm          r9, 0          r9 = 0
L_30:
019C   0x013C78   2D B6 00 01   Branch              01B6           => L_31
L_22:
019D   0x013C80   15 09 1D 00   LookupPointer       r9, 29         r9 = ST[29] -> <set-int32>
019E   0x013C88   4A 0A 1E 00   LoadStaticU64Imm    r10, 30        r10 = ST[30] -> <#4046927F0EB6E142>
019F   0x013C90   0C 0B 03 00   LoadU16Imm          r11, 3         r11 = 3
01A0   0x013C98   4A 0C 02 00   LoadStaticU64Imm    r12, 2         r12 = ST[2] -> <self>
01A1   0x013CA0   43 31 0A 00   Move                r49, r10       r49 = r10 [#4046927F0EB6E142]
01A2   0x013CA8   43 32 0B 00   Move                r50, r11       r50 = r11 [3]
01A3   0x013CB0   43 33 0C 00   Move                r51, r12       r51 = r12 [self]
01A4   0x013CB8   1C 09 09 03   CallFf              r9, r9, 3      r9 = set-int32(#4046927F0EB6E142, 3, self)
01A5   0x013CC0   15 09 05 00   LookupPointer       r9, 5          r9 = ST[5] -> <is-final-build?>
01A6   0x013CC8   1C 09 09 00   CallFf              r9, r9, 0      r9 = is-final-build?()
01A7   0x013CD0   30 09 09 00   OpLogNot            r9, r9         r9 = !r9 -> <TRUE>
01A8   0x013CD8   2F B5 09 01   BranchIfNot         r9, 01B5       IF NOT r9 [0x6620ACB7] => L_32
01A9   0x013CE0   15 09 06 00   LookupPointer       r9, 6          r9 = ST[6] -> <display>
01AA   0x013CE8   15 0A 07 00   LookupPointer       r10, 7         r10 = ST[7] -> <#5445173390656D6D>
01AB   0x013CF0   41 0B 25 00   LoadStaticPointerImmr11, 37        r11 = ST[37] -> <0xBF026256>
01AC   0x013CF8   41 0C 09 00   LoadStaticPointerImmr12, 9         r12 = ST[9] -> <0xBF025EFC>
01AD   0x013D00   43 31 0B 00   Move                r49, r11       r49 = r11 [0xBF026256]
01AE   0x013D08   43 32 0C 00   Move                r50, r12       r50 = r12 [0xBF025EFC]
01AF   0x013D10   1C 0A 0A 02   CallFf              r10, r10, 2    r10 = #5445173390656D6D(0xBF026256, 0xBF025EFC)
01B0   0x013D18   0C 0B 13 00   LoadU16Imm          r11, 19        r11 = 19
01B1   0x013D20   43 31 0A 00   Move                r49, r10       r49 = r10 [#5445173390656D6D()]
01B2   0x013D28   43 32 0B 00   Move                r50, r11       r50 = r11 [19]
01B3   0x013D30   1C 09 09 02   CallFf              r9, r9, 2      r9 = display(#5445173390656D6D(), 19)
01B4   0x013D38   2D B6 00 01   Branch              01B6           => L_31
L_32:
01B5   0x013D40   0C 09 00 00   LoadU16Imm          r9, 0          r9 = 0
L_31:
01B6   0x013D48   43 09 09 00   Move                r9, r9         r9 = r9 [0]
01B7   0x013D50   43 08 09 00   Move                r8, r9         r8 = r9 [0]
01B8   0x013D58   43 07 08 00   Move                r7, r8         r7 = r8 [0]
01B9   0x013D60   43 06 07 00   Move                r6, r7         r6 = r7 [0]
01BA   0x013D68   43 05 06 00   Move                r5, r6         r5 = r6 [0]
01BB   0x013D70   43 04 05 00   Move                r4, r5         r4 = r5 [0]
01BC   0x013D78   43 03 04 00   Move                r3, r4         r3 = r4 [0]
01BD   0x013D80   2D BF 00 01   Branch              01BF           => L_33
L_17:
01BE   0x013D88   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
L_33:
01BF   0x013D90   43 00 03 00   Move                r0, r3         r0 = r3 [0]
01C0   0x013D98   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x013DA0    POINTER <get-symbol>
0001   0x013DA8    SID <global-combat-params>
0002   0x013DB0    SID <self>
0003   0x013DB8    SID <#CD5807AC5F281201>
0004   0x013DC0    SID <#355CB666FED58A80>
0005   0x013DC8    POINTER <is-final-build?>
0006   0x013DD0    POINTER <display>
0007   0x013DD8    POINTER <#5445173390656D6D>
0008   0x013DE0    POINTER <#00000282BF026590>
0009   0x013DE8    POINTER <#00000282BF025EFC>
000A   0x013DF0    POINTER <#00000282BF026BEB>
000B   0x013DF8    POINTER <#00000282BF02735E>
000C   0x013E00    POINTER <string-debug>
000D   0x013E08    POINTER <set-symbol>
000E   0x013E10    SID <#F1186475D251E396>
000F   0x013E18    POINTER <#00000282BF02640A>
0010   0x013E20    POINTER <#00000282BF026236>
0011   0x013E28    POINTER <#00000282BF0273FF>
0012   0x013E30    POINTER <display-error>
0013   0x013E38    POINTER <#00000282BF027440>
0014   0x013E40    SID <#7E358C581E146817>
0015   0x013E48    SID <#7F25A075B1A9E239>
0016   0x013E50    SID <*default-global-combat-params*>
0017   0x013E58    POINTER <get-boolean>
0018   0x013E60    SID <#503D45B686F0E282>
0019   0x013E68    POINTER <npc-set-global-combat-params>
001A   0x013E70    POINTER <get-int32>
001B   0x013E78    SID <#CEF93DF859F605EA>
001C   0x013E80    INT <-1>
001D   0x013E88    POINTER <set-int32>
001E   0x013E90    SID <#4046927F0EB6E142>
001F   0x013E98    POINTER <#00000282BF026C4C>
0020   0x013EA0    POINTER <#00000282BF027505>
0021   0x013EA8    POINTER <#00000282BF026BD4>
0022   0x013EB0    POINTER <#00000282BF0271F5>
0023   0x013EB8    POINTER <#00000282BF027261>
0024   0x013EC0    POINTER <#C52976BF40B634F3>
0025   0x013EC8    POINTER <#00000282BF026256>
0000   0x011EB8   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <#C3B48D02AC9ECB46>
0001   0x011EC0   1B 00 00 00   Call                r0, r0, 0      r0 = #C3B48D02AC9ECB46()
0002   0x011EC8   00 00 00 00   Return              r0             Return #C3B48D02AC9ECB46()
SYMBOL TABLE: 
0000   0x011ED0    POINTER <#C3B48D02AC9ECB46>
0000   0x01EC20   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <wait-one-frame>
0001   0x01EC28   1C 00 00 00   CallFf              r0, r0, 0      r0 = wait-one-frame()
0002   0x01EC30   00 00 00 00   Return              r0             Return wait-one-frame()
SYMBOL TABLE: 
0000   0x01EC38    POINTER <wait-one-frame>
0000   0x011DD0   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <go>
0001   0x011DD8   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <fetch-all-spawn-regions>
0002   0x011DE0   0C 02 01 00   LoadU16Imm          r2, 1          r2 = 1
0003   0x011DE8   43 31 01 00   Move                r49, r1        r49 = r1 [fetch-all-spawn-regions]
0004   0x011DF0   43 32 02 00   Move                r50, r2        r50 = r2 [1]
0005   0x011DF8   1C 00 00 02   CallFf              r0, r0, 2      r0 = go(fetch-all-spawn-regions, 1)
0006   0x011E00   00 00 00 00   Return              r0             Return go()
SYMBOL TABLE: 
0000   0x011E08    POINTER <go>
0001   0x011E10    SID <fetch-all-spawn-regions>
      STATE fetch-all-spawn-regions:
         ON start
          TRACK main:
0000   0x017830   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <is-final-build?>
0001   0x017838   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0002   0x017840   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0003   0x017848   2F 0E 00 00   BranchIfNot         r0, 000E       IF NOT r0 [0x6620ACB7] => L_0
0004   0x017850   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <display>
0005   0x017858   15 01 02 00   LookupPointer       r1, 2          r1 = ST[2] -> <#5445173390656D6D>
0006   0x017860   41 02 03 00   LoadStaticPointerImmr2, 3          r2 = ST[3] -> <0xBF026FD3>
0007   0x017868   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF026FD3]
0008   0x017870   1C 01 01 01   CallFf              r1, r1, 1      r1 = #5445173390656D6D(0xBF026FD3)
0009   0x017878   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
000A   0x017880   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
000B   0x017888   43 32 02 00   Move                r50, r2        r50 = r2 [19]
000C   0x017890   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
000D   0x017898   2D 0F 00 00   Branch              000F           => L_RETURN
L_0:
000E   0x0178A0   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
000F   0x0178A8   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x0178B0    POINTER <is-final-build?>
0001   0x0178B8    POINTER <display>
0002   0x0178C0    POINTER <#5445173390656D6D>
0003   0x0178C8    POINTER <#00000282BF026FD3>
0000   0x017978   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <ddict-create>
0001   0x017980   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <single-frame>
0002   0x017988   3F 02 02 00   LoadStaticI32Imm    r2, 2          r2 = ST[2] -> <-1>
0003   0x017990   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
0004   0x017998   43 31 01 00   Move                r49, r1        r49 = r1 [single-frame]
0005   0x0179A0   43 32 02 00   Move                r50, r2        r50 = r2 [-1]
0006   0x0179A8   43 33 03 00   Move                r51, r3        r51 = r3 [0]
0007   0x0179B0   1C 00 00 03   CallFf              r0, r0, 3      r0 = ddict-create(single-frame, -1, 0)
0008   0x0179B8   15 01 03 00   LookupPointer       r1, 3          r1 = ST[3] -> <get-symbol>
0009   0x0179C0   4A 02 04 00   LoadStaticU64Imm    r2, 4          r2 = ST[4] -> <#28D1CA76BD462D70>
000A   0x0179C8   4A 03 05 00   LoadStaticU64Imm    r3, 5          r3 = ST[5] -> <self>
000B   0x0179D0   43 31 02 00   Move                r49, r2        r49 = r2 [#28D1CA76BD462D70]
000C   0x0179D8   43 32 03 00   Move                r50, r3        r50 = r3 [self]
000D   0x0179E0   1C 01 01 02   CallFf              r1, r1, 2      r1 = get-symbol(#28D1CA76BD462D70, self)
000E   0x0179E8   15 02 06 00   LookupPointer       r2, 6          r2 = ST[6] -> <is-final-build?>
000F   0x0179F0   1C 02 02 00   CallFf              r2, r2, 0      r2 = is-final-build?()
0010   0x0179F8   30 02 02 00   OpLogNot            r2, r2         r2 = !r2 -> <TRUE>
0011   0x017A00   2F 23 02 00   BranchIfNot         r2, 0023       IF NOT r2 [0x6620ACB7] => L_0
0012   0x017A08   15 02 07 00   LookupPointer       r2, 7          r2 = ST[7] -> <display>
0013   0x017A10   15 03 08 00   LookupPointer       r3, 8          r3 = ST[8] -> <#5445173390656D6D>
0014   0x017A18   41 04 09 00   LoadStaticPointerImmr4, 9          r4 = ST[9] -> <0xBF0264C3>
0015   0x017A20   41 05 0A 00   LoadStaticPointerImmr5, 10         r5 = ST[10] -> <0xBF025EFC>
0016   0x017A28   15 06 0B 00   LookupPointer       r6, 11         r6 = ST[11] -> <string-debug>
0017   0x017A30   43 07 01 00   Move                r7, r1         r7 = r1 [get-symbol()]
0018   0x017A38   43 31 07 00   Move                r49, r7        r49 = r7 [get-symbol()]
0019   0x017A40   1C 06 06 01   CallFf              r6, r6, 1      r6 = string-debug(get-symbol())
001A   0x017A48   43 31 04 00   Move                r49, r4        r49 = r4 [0xBF0264C3]
001B   0x017A50   43 32 05 00   Move                r50, r5        r50 = r5 [0xBF025EFC]
001C   0x017A58   43 33 06 00   Move                r51, r6        r51 = r6 [string-debug()]
001D   0x017A60   1C 03 03 03   CallFf              r3, r3, 3      r3 = #5445173390656D6D(0xBF0264C3, 0xBF025EFC, string-debug())
001E   0x017A68   0C 04 13 00   LoadU16Imm          r4, 19         r4 = 19
001F   0x017A70   43 31 03 00   Move                r49, r3        r49 = r3 [#5445173390656D6D()]
0020   0x017A78   43 32 04 00   Move                r50, r4        r50 = r4 [19]
0021   0x017A80   1C 02 02 02   CallFf              r2, r2, 2      r2 = display(#5445173390656D6D(), 19)
0022   0x017A88   2D 24 00 00   Branch              0024           => L_1
L_0:
0023   0x017A90   0C 02 00 00   LoadU16Imm          r2, 0          r2 = 0
L_1:
0024   0x017A98   43 02 01 00   Move                r2, r1         r2 = r1 [get-symbol()]
0025   0x017AA0   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
0026   0x017AA8   1D 02 02 03   IEqual              r2, r2, r3     r2 = r2 [1774822656] == r3 [0]
0027   0x017AB0   30 02 02 00   OpLogNot            r2, r2         r2 = !r2 -> <TRUE>
0028   0x017AB8   2F 45 02 00   BranchIfNot         r2, 0045       IF NOT r2 [0x69C9A501] => L_2
0029   0x017AC0   15 02 0C 00   LookupPointer       r2, 12         r2 = ST[12] -> <ddict-set>
002A   0x017AC8   43 03 00 00   Move                r3, r0         r3 = r0 [ddict-create()]
002B   0x017AD0   43 04 01 00   Move                r4, r1         r4 = r1 [get-symbol()]
002C   0x017AD8   15 05 0D 00   LookupPointer       r5, 13         r5 = ST[13] -> <new-boxed-value>
002D   0x017AE0   0C 06 02 00   LoadU16Imm          r6, 2          r6 = 2
002E   0x017AE8   0C 07 01 00   LoadU16Imm          r7, 1          r7 = 1
002F   0x017AF0   43 31 06 00   Move                r49, r6        r49 = r6 [2]
0030   0x017AF8   43 32 07 00   Move                r50, r7        r50 = r7 [1]
0031   0x017B00   1C 05 05 02   CallFf              r5, r5, 2      r5 = new-boxed-value(2, 1)
0032   0x017B08   43 31 03 00   Move                r49, r3        r49 = r3 [ddict-create()]
0033   0x017B10   43 32 04 00   Move                r50, r4        r50 = r4 [get-symbol()]
0034   0x017B18   43 33 05 00   Move                r51, r5        r51 = r5 [new-boxed-value()]
0035   0x017B20   1C 02 02 03   CallFf              r2, r2, 3      r2 = ddict-set(ddict-create(), get-symbol(), new-boxed-value())
0036   0x017B28   15 02 0E 00   LookupPointer       r2, 14         r2 = ST[14] -> <group-copy>
0037   0x017B30   15 03 0F 00   LookupPointer       r3, 15         r3 = ST[15] -> <get-regions-by-criteria>
0038   0x017B38   43 04 00 00   Move                r4, r0         r4 = r0 [ddict-create()]
0039   0x017B40   43 31 04 00   Move                r49, r4        r49 = r4 [ddict-create()]
003A   0x017B48   1C 03 03 01   CallFf              r3, r3, 1      r3 = get-regions-by-criteria(ddict-create())
003B   0x017B50   15 04 03 00   LookupPointer       r4, 3          r4 = ST[3] -> <get-symbol>
003C   0x017B58   4A 05 10 00   LoadStaticU64Imm    r5, 16         r5 = ST[16] -> <#129B0447586D0CD8>
003D   0x017B60   4A 06 05 00   LoadStaticU64Imm    r6, 5          r6 = ST[5] -> <self>
003E   0x017B68   43 31 05 00   Move                r49, r5        r49 = r5 [#129B0447586D0CD8]
003F   0x017B70   43 32 06 00   Move                r50, r6        r50 = r6 [self]
0040   0x017B78   1C 04 04 02   CallFf              r4, r4, 2      r4 = get-symbol(#129B0447586D0CD8, self)
0041   0x017B80   43 31 03 00   Move                r49, r3        r49 = r3 [get-regions-by-criteria()]
0042   0x017B88   43 32 04 00   Move                r50, r4        r50 = r4 [get-symbol()]
0043   0x017B90   1B 02 02 02   Call                r2, r2, 2      r2 = group-copy(get-regions-by-criteria(), get-symbol())
0044   0x017B98   2D 46 00 00   Branch              0046           => L_3
L_2:
0045   0x017BA0   0C 02 00 00   LoadU16Imm          r2, 0          r2 = 0
L_3:
0046   0x017BA8   43 00 02 00   Move                r0, r2         r0 = r2 [0]
0047   0x017BB0   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x017BB8    POINTER <ddict-create>
0001   0x017BC0    SID <single-frame>
0002   0x017BC8    INT <-1>
0003   0x017BD0    POINTER <get-symbol>
0004   0x017BD8    SID <#28D1CA76BD462D70>
0005   0x017BE0    SID <self>
0006   0x017BE8    POINTER <is-final-build?>
0007   0x017BF0    POINTER <display>
0008   0x017BF8    POINTER <#5445173390656D6D>
0009   0x017C00    POINTER <#00000282BF0264C3>
000A   0x017C08    POINTER <#00000282BF025EFC>
000B   0x017C10    POINTER <string-debug>
000C   0x017C18    POINTER <ddict-set>
000D   0x017C20    POINTER <new-boxed-value>
000E   0x017C28    POINTER <group-copy>
000F   0x017C30    POINTER <get-regions-by-criteria>
0010   0x017C38    SID <#129B0447586D0CD8>
0000   0x011ED8   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <is-final-build?>
0001   0x011EE0   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0002   0x011EE8   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0003   0x011EF0   2F 1C 00 00   BranchIfNot         r0, 001C       IF NOT r0 [0x6620ACB7] => L_0
0004   0x011EF8   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <display>
0005   0x011F00   15 01 02 00   LookupPointer       r1, 2          r1 = ST[2] -> <#5445173390656D6D>
0006   0x011F08   41 02 03 00   LoadStaticPointerImmr2, 3          r2 = ST[3] -> <0xBF026BD4>
0007   0x011F10   41 03 04 00   LoadStaticPointerImmr3, 4          r3 = ST[4] -> <0xBF025EFC>
0008   0x011F18   41 04 05 00   LoadStaticPointerImmr4, 5          r4 = ST[5] -> <0xBF0274CE>
0009   0x011F20   15 05 06 00   LookupPointer       r5, 6          r5 = ST[6] -> <darray-count>
000A   0x011F28   15 06 07 00   LookupPointer       r6, 7          r6 = ST[7] -> <get-symbol>
000B   0x011F30   4A 07 08 00   LoadStaticU64Imm    r7, 8          r7 = ST[8] -> <#129B0447586D0CD8>
000C   0x011F38   4A 08 09 00   LoadStaticU64Imm    r8, 9          r8 = ST[9] -> <self>
000D   0x011F40   43 31 07 00   Move                r49, r7        r49 = r7 [#129B0447586D0CD8]
000E   0x011F48   43 32 08 00   Move                r50, r8        r50 = r8 [self]
000F   0x011F50   1C 06 06 02   CallFf              r6, r6, 2      r6 = get-symbol(#129B0447586D0CD8, self)
0010   0x011F58   43 31 06 00   Move                r49, r6        r49 = r6 [get-symbol()]
0011   0x011F60   1C 05 05 01   CallFf              r5, r5, 1      r5 = darray-count(get-symbol())
0012   0x011F68   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF026BD4]
0013   0x011F70   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
0014   0x011F78   43 33 04 00   Move                r51, r4        r51 = r4 [0xBF0274CE]
0015   0x011F80   43 34 05 00   Move                r52, r5        r52 = r5 [darray-count()]
0016   0x011F88   1C 01 01 04   CallFf              r1, r1, 4      r1 = #5445173390656D6D(0xBF026BD4, 0xBF025EFC, 0xBF0274CE, darray-count())
0017   0x011F90   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
0018   0x011F98   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
0019   0x011FA0   43 32 02 00   Move                r50, r2        r50 = r2 [19]
001A   0x011FA8   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
001B   0x011FB0   2D 1D 00 00   Branch              001D           => L_RETURN
L_0:
001C   0x011FB8   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
001D   0x011FC0   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x011FC8    POINTER <is-final-build?>
0001   0x011FD0    POINTER <display>
0002   0x011FD8    POINTER <#5445173390656D6D>
0003   0x011FE0    POINTER <#00000282BF026BD4>
0004   0x011FE8    POINTER <#00000282BF025EFC>
0005   0x011FF0    POINTER <#00000282BF0274CE>
0006   0x011FF8    POINTER <darray-count>
0007   0x012000    POINTER <get-symbol>
0008   0x012008    SID <#129B0447586D0CD8>
0009   0x012010    SID <self>
0000   0x01EC20   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <wait-one-frame>
0001   0x01EC28   1C 00 00 00   CallFf              r0, r0, 0      r0 = wait-one-frame()
0002   0x01EC30   00 00 00 00   Return              r0             Return wait-one-frame()
SYMBOL TABLE: 
0000   0x01EC38    POINTER <wait-one-frame>
0000   0x010198   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <go>
0001   0x0101A0   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <fetch-all-spawn-positions>
0002   0x0101A8   0C 02 01 00   LoadU16Imm          r2, 1          r2 = 1
0003   0x0101B0   43 31 01 00   Move                r49, r1        r49 = r1 [fetch-all-spawn-positions]
0004   0x0101B8   43 32 02 00   Move                r50, r2        r50 = r2 [1]
0005   0x0101C0   1C 00 00 02   CallFf              r0, r0, 2      r0 = go(fetch-all-spawn-positions, 1)
0006   0x0101C8   00 00 00 00   Return              r0             Return go()
SYMBOL TABLE: 
0000   0x0101D0    POINTER <go>
0001   0x0101D8    SID <fetch-all-spawn-positions>
      STATE fetch-all-spawn-positions:
         ON start
          TRACK main:
0000   0x01ED48   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <is-final-build?>
0001   0x01ED50   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0002   0x01ED58   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0003   0x01ED60   2F 0E 00 00   BranchIfNot         r0, 000E       IF NOT r0 [0x6620ACB7] => L_0
0004   0x01ED68   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <display>
0005   0x01ED70   15 01 02 00   LookupPointer       r1, 2          r1 = ST[2] -> <#5445173390656D6D>
0006   0x01ED78   41 02 03 00   LoadStaticPointerImmr2, 3          r2 = ST[3] -> <0xBF026FAB>
0007   0x01ED80   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF026FAB]
0008   0x01ED88   1C 01 01 01   CallFf              r1, r1, 1      r1 = #5445173390656D6D(0xBF026FAB)
0009   0x01ED90   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
000A   0x01ED98   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
000B   0x01EDA0   43 32 02 00   Move                r50, r2        r50 = r2 [19]
000C   0x01EDA8   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
000D   0x01EDB0   2D 0F 00 00   Branch              000F           => L_RETURN
L_0:
000E   0x01EDB8   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
000F   0x01EDC0   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x01EDC8    POINTER <is-final-build?>
0001   0x01EDD0    POINTER <display>
0002   0x01EDD8    POINTER <#5445173390656D6D>
0003   0x01EDE0    POINTER <#00000282BF026FAB>
0000   0x014FA0   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <ddict-create>
0001   0x014FA8   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <single-frame>
0002   0x014FB0   3F 02 02 00   LoadStaticI32Imm    r2, 2          r2 = ST[2] -> <-1>
0003   0x014FB8   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
0004   0x014FC0   43 31 01 00   Move                r49, r1        r49 = r1 [single-frame]
0005   0x014FC8   43 32 02 00   Move                r50, r2        r50 = r2 [-1]
0006   0x014FD0   43 33 03 00   Move                r51, r3        r51 = r3 [0]
0007   0x014FD8   1C 00 00 03   CallFf              r0, r0, 3      r0 = ddict-create(single-frame, -1, 0)
0008   0x014FE0   15 01 03 00   LookupPointer       r1, 3          r1 = ST[3] -> <get-symbol>
0009   0x014FE8   4A 02 04 00   LoadStaticU64Imm    r2, 4          r2 = ST[4] -> <#77621D191B920833>
000A   0x014FF0   4A 03 05 00   LoadStaticU64Imm    r3, 5          r3 = ST[5] -> <self>
000B   0x014FF8   43 31 02 00   Move                r49, r2        r49 = r2 [#77621D191B920833]
000C   0x015000   43 32 03 00   Move                r50, r3        r50 = r3 [self]
000D   0x015008   1C 01 01 02   CallFf              r1, r1, 2      r1 = get-symbol(#77621D191B920833, self)
000E   0x015010   15 02 06 00   LookupPointer       r2, 6          r2 = ST[6] -> <is-final-build?>
000F   0x015018   1C 02 02 00   CallFf              r2, r2, 0      r2 = is-final-build?()
0010   0x015020   30 02 02 00   OpLogNot            r2, r2         r2 = !r2 -> <TRUE>
0011   0x015028   2F 23 02 00   BranchIfNot         r2, 0023       IF NOT r2 [0x6620ACB7] => L_0
0012   0x015030   15 02 07 00   LookupPointer       r2, 7          r2 = ST[7] -> <display>
0013   0x015038   15 03 08 00   LookupPointer       r3, 8          r3 = ST[8] -> <#5445173390656D6D>
0014   0x015040   41 04 09 00   LoadStaticPointerImmr4, 9          r4 = ST[9] -> <0xBF0264C3>
0015   0x015048   41 05 0A 00   LoadStaticPointerImmr5, 10         r5 = ST[10] -> <0xBF025EFC>
0016   0x015050   15 06 0B 00   LookupPointer       r6, 11         r6 = ST[11] -> <string-debug>
0017   0x015058   43 07 01 00   Move                r7, r1         r7 = r1 [get-symbol()]
0018   0x015060   43 31 07 00   Move                r49, r7        r49 = r7 [get-symbol()]
0019   0x015068   1C 06 06 01   CallFf              r6, r6, 1      r6 = string-debug(get-symbol())
001A   0x015070   43 31 04 00   Move                r49, r4        r49 = r4 [0xBF0264C3]
001B   0x015078   43 32 05 00   Move                r50, r5        r50 = r5 [0xBF025EFC]
001C   0x015080   43 33 06 00   Move                r51, r6        r51 = r6 [string-debug()]
001D   0x015088   1C 03 03 03   CallFf              r3, r3, 3      r3 = #5445173390656D6D(0xBF0264C3, 0xBF025EFC, string-debug())
001E   0x015090   0C 04 13 00   LoadU16Imm          r4, 19         r4 = 19
001F   0x015098   43 31 03 00   Move                r49, r3        r49 = r3 [#5445173390656D6D()]
0020   0x0150A0   43 32 04 00   Move                r50, r4        r50 = r4 [19]
0021   0x0150A8   1C 02 02 02   CallFf              r2, r2, 2      r2 = display(#5445173390656D6D(), 19)
0022   0x0150B0   2D 24 00 00   Branch              0024           => L_1
L_0:
0023   0x0150B8   0C 02 00 00   LoadU16Imm          r2, 0          r2 = 0
L_1:
0024   0x0150C0   43 02 01 00   Move                r2, r1         r2 = r1 [get-symbol()]
0025   0x0150C8   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
0026   0x0150D0   1D 02 02 03   IEqual              r2, r2, r3     r2 = r2 [1774822656] == r3 [0]
0027   0x0150D8   30 02 02 00   OpLogNot            r2, r2         r2 = !r2 -> <TRUE>
0028   0x0150E0   2F 4F 02 00   BranchIfNot         r2, 004F       IF NOT r2 [0x69C9A501] => L_2
0029   0x0150E8   15 02 0C 00   LookupPointer       r2, 12         r2 = ST[12] -> <ddict-set>
002A   0x0150F0   43 03 00 00   Move                r3, r0         r3 = r0 [ddict-create()]
002B   0x0150F8   43 04 01 00   Move                r4, r1         r4 = r1 [get-symbol()]
002C   0x015100   15 05 0D 00   LookupPointer       r5, 13         r5 = ST[13] -> <new-boxed-value>
002D   0x015108   0C 06 02 00   LoadU16Imm          r6, 2          r6 = 2
002E   0x015110   0C 07 01 00   LoadU16Imm          r7, 1          r7 = 1
002F   0x015118   43 31 06 00   Move                r49, r6        r49 = r6 [2]
0030   0x015120   43 32 07 00   Move                r50, r7        r50 = r7 [1]
0031   0x015128   1C 05 05 02   CallFf              r5, r5, 2      r5 = new-boxed-value(2, 1)
0032   0x015130   43 31 03 00   Move                r49, r3        r49 = r3 [ddict-create()]
0033   0x015138   43 32 04 00   Move                r50, r4        r50 = r4 [get-symbol()]
0034   0x015140   43 33 05 00   Move                r51, r5        r51 = r5 [new-boxed-value()]
0035   0x015148   1C 02 02 03   CallFf              r2, r2, 3      r2 = ddict-set(ddict-create(), get-symbol(), new-boxed-value())
0036   0x015150   15 02 0E 00   LookupPointer       r2, 14         r2 = ST[14] -> <group-copy>
0037   0x015158   15 03 0F 00   LookupPointer       r3, 15         r3 = ST[15] -> <get-spawners-by-criteria>
0038   0x015160   43 04 00 00   Move                r4, r0         r4 = r0 [ddict-create()]
0039   0x015168   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
003A   0x015170   0C 06 00 00   LoadU16Imm          r6, 0          r6 = 0
003B   0x015178   0C 07 00 00   LoadU16Imm          r7, 0          r7 = 0
003C   0x015180   0C 08 00 00   LoadU16Imm          r8, 0          r8 = 0
003D   0x015188   0C 09 00 00   LoadU16Imm          r9, 0          r9 = 0
003E   0x015190   43 31 04 00   Move                r49, r4        r49 = r4 [ddict-create()]
003F   0x015198   43 32 05 00   Move                r50, r5        r50 = r5 [0]
0040   0x0151A0   43 33 06 00   Move                r51, r6        r51 = r6 [0]
0041   0x0151A8   43 34 07 00   Move                r52, r7        r52 = r7 [0]
0042   0x0151B0   43 35 08 00   Move                r53, r8        r53 = r8 [0]
0043   0x0151B8   43 36 09 00   Move                r54, r9        r54 = r9 [0]
0044   0x0151C0   1C 03 03 06   CallFf              r3, r3, 6      r3 = get-spawners-by-criteria(ddict-create(), 0, 0, 0, 0, 0)
0045   0x0151C8   15 04 03 00   LookupPointer       r4, 3          r4 = ST[3] -> <get-symbol>
0046   0x0151D0   4A 05 10 00   LoadStaticU64Imm    r5, 16         r5 = ST[16] -> <#2D7661AFEECF44C9>
0047   0x0151D8   4A 06 05 00   LoadStaticU64Imm    r6, 5          r6 = ST[5] -> <self>
0048   0x0151E0   43 31 05 00   Move                r49, r5        r49 = r5 [#2D7661AFEECF44C9]
0049   0x0151E8   43 32 06 00   Move                r50, r6        r50 = r6 [self]
004A   0x0151F0   1C 04 04 02   CallFf              r4, r4, 2      r4 = get-symbol(#2D7661AFEECF44C9, self)
004B   0x0151F8   43 31 03 00   Move                r49, r3        r49 = r3 [get-spawners-by-criteria()]
004C   0x015200   43 32 04 00   Move                r50, r4        r50 = r4 [get-symbol()]
004D   0x015208   1B 02 02 02   Call                r2, r2, 2      r2 = group-copy(get-spawners-by-criteria(), get-symbol())
004E   0x015210   2D 50 00 00   Branch              0050           => L_3
L_2:
004F   0x015218   0C 02 00 00   LoadU16Imm          r2, 0          r2 = 0
L_3:
0050   0x015220   43 00 02 00   Move                r0, r2         r0 = r2 [0]
0051   0x015228   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x015230    POINTER <ddict-create>
0001   0x015238    SID <single-frame>
0002   0x015240    INT <-1>
0003   0x015248    POINTER <get-symbol>
0004   0x015250    SID <#77621D191B920833>
0005   0x015258    SID <self>
0006   0x015260    POINTER <is-final-build?>
0007   0x015268    POINTER <display>
0008   0x015270    POINTER <#5445173390656D6D>
0009   0x015278    POINTER <#00000282BF0264C3>
000A   0x015280    POINTER <#00000282BF025EFC>
000B   0x015288    POINTER <string-debug>
000C   0x015290    POINTER <ddict-set>
000D   0x015298    POINTER <new-boxed-value>
000E   0x0152A0    POINTER <group-copy>
000F   0x0152A8    POINTER <get-spawners-by-criteria>
0010   0x0152B0    SID <#2D7661AFEECF44C9>
0000   0x011380   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <#C7F82FED8C09844A>
0001   0x011388   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <tripwire-map>
0002   0x011390   43 31 01 00   Move                r49, r1        r49 = r1 [tripwire-map]
0003   0x011398   1B 00 00 01   Call                r0, r0, 1      r0 = #C7F82FED8C09844A(tripwire-map)
0004   0x0113A0   2E 14 00 00   BranchIf            r0, 0014       IF r0 [#C7F82FED8C09844A()] => L_0
0005   0x0113A8   15 00 02 00   LookupPointer       r0, 2          r0 = ST[2] -> <darray-contains?>
0006   0x0113B0   15 01 03 00   LookupPointer       r1, 3          r1 = ST[3] -> <#D38B5871160B3BED>
0007   0x0113B8   15 02 04 00   LookupPointer       r2, 4          r2 = ST[4] -> <#D234E7ECD77EC02D>
0008   0x0113C0   1B 02 02 00   Call                r2, r2, 0      r2 = #D234E7ECD77EC02D()
0009   0x0113C8   43 31 02 00   Move                r49, r2        r49 = r2 [#D234E7ECD77EC02D()]
000A   0x0113D0   1B 01 01 01   Call                r1, r1, 1      r1 = #D38B5871160B3BED(#D234E7ECD77EC02D())
000B   0x0113D8   15 02 05 00   LookupPointer       r2, 5          r2 = ST[5] -> <new-boxed-value>
000C   0x0113E0   0C 03 07 00   LoadU16Imm          r3, 7          r3 = 7
000D   0x0113E8   4A 04 01 00   LoadStaticU64Imm    r4, 1          r4 = ST[1] -> <tripwire-map>
000E   0x0113F0   43 31 03 00   Move                r49, r3        r49 = r3 [7]
000F   0x0113F8   43 32 04 00   Move                r50, r4        r50 = r4 [tripwire-map]
0010   0x011400   1C 02 02 02   CallFf              r2, r2, 2      r2 = new-boxed-value(7, tripwire-map)
0011   0x011408   43 31 01 00   Move                r49, r1        r49 = r1 [#D38B5871160B3BED()]
0012   0x011410   43 32 02 00   Move                r50, r2        r50 = r2 [new-boxed-value()]
0013   0x011418   1C 00 00 02   CallFf              r0, r0, 2      r0 = darray-contains?(#D38B5871160B3BED(), new-boxed-value())
L_0:
0014   0x011420   2F 0C 00 01   BranchIfNot         r0, 010C       IF NOT r0 [darray-contains?()] => L_1
0015   0x011428   15 00 06 00   LookupPointer       r0, 6          r0 = ST[6] -> <is-final-build?>
0016   0x011430   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0017   0x011438   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0018   0x011440   2F 25 00 00   BranchIfNot         r0, 0025       IF NOT r0 [0x6620ACB7] => L_2
0019   0x011448   15 00 07 00   LookupPointer       r0, 7          r0 = ST[7] -> <display>
001A   0x011450   15 01 08 00   LookupPointer       r1, 8          r1 = ST[8] -> <#5445173390656D6D>
001B   0x011458   41 02 09 00   LoadStaticPointerImmr2, 9          r2 = ST[9] -> <0xBF026805>
001C   0x011460   41 03 0A 00   LoadStaticPointerImmr3, 10         r3 = ST[10] -> <0xBF025EFC>
001D   0x011468   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF026805]
001E   0x011470   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
001F   0x011478   1C 01 01 02   CallFf              r1, r1, 2      r1 = #5445173390656D6D(0xBF026805, 0xBF025EFC)
0020   0x011480   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
0021   0x011488   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
0022   0x011490   43 32 02 00   Move                r50, r2        r50 = r2 [19]
0023   0x011498   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
0024   0x0114A0   2D 26 00 00   Branch              0026           => L_3
L_2:
0025   0x0114A8   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_3:
0026   0x0114B0   15 00 0B 00   LookupPointer       r0, 11         r0 = ST[11] -> <ddict-create>
0027   0x0114B8   4A 01 0C 00   LoadStaticU64Imm    r1, 12         r1 = ST[12] -> <single-frame>
0028   0x0114C0   3F 02 0D 00   LoadStaticI32Imm    r2, 13         r2 = ST[13] -> <-1>
0029   0x0114C8   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
002A   0x0114D0   43 31 01 00   Move                r49, r1        r49 = r1 [single-frame]
002B   0x0114D8   43 32 02 00   Move                r50, r2        r50 = r2 [-1]
002C   0x0114E0   43 33 03 00   Move                r51, r3        r51 = r3 [0]
002D   0x0114E8   1C 00 00 03   CallFf              r0, r0, 3      r0 = ddict-create(single-frame, -1, 0)
002E   0x0114F0   15 01 0E 00   LookupPointer       r1, 14         r1 = ST[14] -> <ddict-set>
002F   0x0114F8   43 02 00 00   Move                r2, r0         r2 = r0 [ddict-create()]
0030   0x011500   4A 03 0F 00   LoadStaticU64Imm    r3, 15         r3 = ST[15] -> <#BF568465FCD04213>
0031   0x011508   15 04 05 00   LookupPointer       r4, 5          r4 = ST[5] -> <new-boxed-value>
0032   0x011510   0C 05 02 00   LoadU16Imm          r5, 2          r5 = 2
0033   0x011518   0C 06 01 00   LoadU16Imm          r6, 1          r6 = 1
0034   0x011520   43 31 05 00   Move                r49, r5        r49 = r5 [2]
0035   0x011528   43 32 06 00   Move                r50, r6        r50 = r6 [1]
0036   0x011530   1C 04 04 02   CallFf              r4, r4, 2      r4 = new-boxed-value(2, 1)
0037   0x011538   43 31 02 00   Move                r49, r2        r49 = r2 [ddict-create()]
0038   0x011540   43 32 03 00   Move                r50, r3        r50 = r3 [#BF568465FCD04213]
0039   0x011548   43 33 04 00   Move                r51, r4        r51 = r4 [new-boxed-value()]
003A   0x011550   1C 01 01 03   CallFf              r1, r1, 3      r1 = ddict-set(ddict-create(), #BF568465FCD04213, new-boxed-value())
003B   0x011558   15 01 10 00   LookupPointer       r1, 16         r1 = ST[16] -> <group-copy>
003C   0x011560   15 02 11 00   LookupPointer       r2, 17         r2 = ST[17] -> <get-spawners-by-criteria>
003D   0x011568   43 03 00 00   Move                r3, r0         r3 = r0 [ddict-create()]
003E   0x011570   0C 04 00 00   LoadU16Imm          r4, 0          r4 = 0
003F   0x011578   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
0040   0x011580   0C 06 00 00   LoadU16Imm          r6, 0          r6 = 0
0041   0x011588   0C 07 00 00   LoadU16Imm          r7, 0          r7 = 0
0042   0x011590   0C 08 00 00   LoadU16Imm          r8, 0          r8 = 0
0043   0x011598   43 31 03 00   Move                r49, r3        r49 = r3 [ddict-create()]
0044   0x0115A0   43 32 04 00   Move                r50, r4        r50 = r4 [0]
0045   0x0115A8   43 33 05 00   Move                r51, r5        r51 = r5 [0]
0046   0x0115B0   43 34 06 00   Move                r52, r6        r52 = r6 [0]
0047   0x0115B8   43 35 07 00   Move                r53, r7        r53 = r7 [0]
0048   0x0115C0   43 36 08 00   Move                r54, r8        r54 = r8 [0]
0049   0x0115C8   1C 02 02 06   CallFf              r2, r2, 6      r2 = get-spawners-by-criteria(ddict-create(), 0, 0, 0, 0, 0)
004A   0x0115D0   15 03 12 00   LookupPointer       r3, 18         r3 = ST[18] -> <get-symbol>
004B   0x0115D8   4A 04 13 00   LoadStaticU64Imm    r4, 19         r4 = ST[19] -> <#0DB1F3A99E880DB1>
004C   0x0115E0   4A 05 14 00   LoadStaticU64Imm    r5, 20         r5 = ST[20] -> <self>
004D   0x0115E8   43 31 04 00   Move                r49, r4        r49 = r4 [#0DB1F3A99E880DB1]
004E   0x0115F0   43 32 05 00   Move                r50, r5        r50 = r5 [self]
004F   0x0115F8   1C 03 03 02   CallFf              r3, r3, 2      r3 = get-symbol(#0DB1F3A99E880DB1, self)
0050   0x011600   43 31 02 00   Move                r49, r2        r49 = r2 [get-spawners-by-criteria()]
0051   0x011608   43 32 03 00   Move                r50, r3        r50 = r3 [get-symbol()]
0052   0x011610   1B 01 01 02   Call                r1, r1, 2      r1 = group-copy(get-spawners-by-criteria(), get-symbol())
0053   0x011618   15 01 06 00   LookupPointer       r1, 6          r1 = ST[6] -> <is-final-build?>
0054   0x011620   1C 01 01 00   CallFf              r1, r1, 0      r1 = is-final-build?()
0055   0x011628   30 01 01 00   OpLogNot            r1, r1         r1 = !r1 -> <TRUE>
0056   0x011630   2F 6F 01 00   BranchIfNot         r1, 006F       IF NOT r1 [0x6620ACB7] => L_4
0057   0x011638   15 01 07 00   LookupPointer       r1, 7          r1 = ST[7] -> <display>
0058   0x011640   15 02 08 00   LookupPointer       r2, 8          r2 = ST[8] -> <#5445173390656D6D>
0059   0x011648   41 03 15 00   LoadStaticPointerImmr3, 21         r3 = ST[21] -> <0xBF026BD4>
005A   0x011650   41 04 0A 00   LoadStaticPointerImmr4, 10         r4 = ST[10] -> <0xBF025EFC>
005B   0x011658   41 05 16 00   LoadStaticPointerImmr5, 22         r5 = ST[22] -> <0xBF02765A>
005C   0x011660   15 06 17 00   LookupPointer       r6, 23         r6 = ST[23] -> <darray-count>
005D   0x011668   15 07 12 00   LookupPointer       r7, 18         r7 = ST[18] -> <get-symbol>
005E   0x011670   4A 08 18 00   LoadStaticU64Imm    r8, 24         r8 = ST[24] -> <#2D7661AFEECF44C9>
005F   0x011678   4A 09 14 00   LoadStaticU64Imm    r9, 20         r9 = ST[20] -> <self>
0060   0x011680   43 31 08 00   Move                r49, r8        r49 = r8 [#2D7661AFEECF44C9]
0061   0x011688   43 32 09 00   Move                r50, r9        r50 = r9 [self]
0062   0x011690   1C 07 07 02   CallFf              r7, r7, 2      r7 = get-symbol(#2D7661AFEECF44C9, self)
0063   0x011698   43 31 07 00   Move                r49, r7        r49 = r7 [get-symbol()]
0064   0x0116A0   1C 06 06 01   CallFf              r6, r6, 1      r6 = darray-count(get-symbol())
0065   0x0116A8   43 31 03 00   Move                r49, r3        r49 = r3 [0xBF026BD4]
0066   0x0116B0   43 32 04 00   Move                r50, r4        r50 = r4 [0xBF025EFC]
0067   0x0116B8   43 33 05 00   Move                r51, r5        r51 = r5 [0xBF02765A]
0068   0x0116C0   43 34 06 00   Move                r52, r6        r52 = r6 [darray-count()]
0069   0x0116C8   1C 02 02 04   CallFf              r2, r2, 4      r2 = #5445173390656D6D(0xBF026BD4, 0xBF025EFC, 0xBF02765A, darray-count())
006A   0x0116D0   0C 03 13 00   LoadU16Imm          r3, 19         r3 = 19
006B   0x0116D8   43 31 02 00   Move                r49, r2        r49 = r2 [#5445173390656D6D()]
006C   0x0116E0   43 32 03 00   Move                r50, r3        r50 = r3 [19]
006D   0x0116E8   1C 01 01 02   CallFf              r1, r1, 2      r1 = display(#5445173390656D6D(), 19)
006E   0x0116F0   2D 70 00 00   Branch              0070           => L_5
L_4:
006F   0x0116F8   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
L_5:
0070   0x011700   15 01 06 00   LookupPointer       r1, 6          r1 = ST[6] -> <is-final-build?>
0071   0x011708   1C 01 01 00   CallFf              r1, r1, 0      r1 = is-final-build?()
0072   0x011710   30 01 01 00   OpLogNot            r1, r1         r1 = !r1 -> <TRUE>
0073   0x011718   2F 8C 01 00   BranchIfNot         r1, 008C       IF NOT r1 [0x6620ACB7] => L_6
0074   0x011720   15 01 07 00   LookupPointer       r1, 7          r1 = ST[7] -> <display>
0075   0x011728   15 02 08 00   LookupPointer       r2, 8          r2 = ST[8] -> <#5445173390656D6D>
0076   0x011730   41 03 15 00   LoadStaticPointerImmr3, 21         r3 = ST[21] -> <0xBF026BD4>
0077   0x011738   41 04 0A 00   LoadStaticPointerImmr4, 10         r4 = ST[10] -> <0xBF025EFC>
0078   0x011740   41 05 19 00   LoadStaticPointerImmr5, 25         r5 = ST[25] -> <0xBF027517>
0079   0x011748   15 06 17 00   LookupPointer       r6, 23         r6 = ST[23] -> <darray-count>
007A   0x011750   15 07 12 00   LookupPointer       r7, 18         r7 = ST[18] -> <get-symbol>
007B   0x011758   4A 08 13 00   LoadStaticU64Imm    r8, 19         r8 = ST[19] -> <#0DB1F3A99E880DB1>
007C   0x011760   4A 09 14 00   LoadStaticU64Imm    r9, 20         r9 = ST[20] -> <self>
007D   0x011768   43 31 08 00   Move                r49, r8        r49 = r8 [#0DB1F3A99E880DB1]
007E   0x011770   43 32 09 00   Move                r50, r9        r50 = r9 [self]
007F   0x011778   1C 07 07 02   CallFf              r7, r7, 2      r7 = get-symbol(#0DB1F3A99E880DB1, self)
0080   0x011780   43 31 07 00   Move                r49, r7        r49 = r7 [get-symbol()]
0081   0x011788   1C 06 06 01   CallFf              r6, r6, 1      r6 = darray-count(get-symbol())
0082   0x011790   43 31 03 00   Move                r49, r3        r49 = r3 [0xBF026BD4]
0083   0x011798   43 32 04 00   Move                r50, r4        r50 = r4 [0xBF025EFC]
0084   0x0117A0   43 33 05 00   Move                r51, r5        r51 = r5 [0xBF027517]
0085   0x0117A8   43 34 06 00   Move                r52, r6        r52 = r6 [darray-count()]
0086   0x0117B0   1C 02 02 04   CallFf              r2, r2, 4      r2 = #5445173390656D6D(0xBF026BD4, 0xBF025EFC, 0xBF027517, darray-count())
0087   0x0117B8   0C 03 13 00   LoadU16Imm          r3, 19         r3 = 19
0088   0x0117C0   43 31 02 00   Move                r49, r2        r49 = r2 [#5445173390656D6D()]
0089   0x0117C8   43 32 03 00   Move                r50, r3        r50 = r3 [19]
008A   0x0117D0   1C 01 01 02   CallFf              r1, r1, 2      r1 = display(#5445173390656D6D(), 19)
008B   0x0117D8   2D 8D 00 00   Branch              008D           => L_7
L_6:
008C   0x0117E0   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
L_7:
008D   0x0117E8   43 00 01 00   Move                r0, r1         r0 = r1 [0]
008E   0x0117F0   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
008F   0x0117F8   15 01 17 00   LookupPointer       r1, 23         r1 = ST[23] -> <darray-count>
0090   0x011800   15 02 12 00   LookupPointer       r2, 18         r2 = ST[18] -> <get-symbol>
0091   0x011808   4A 03 13 00   LoadStaticU64Imm    r3, 19         r3 = ST[19] -> <#0DB1F3A99E880DB1>
0092   0x011810   4A 04 14 00   LoadStaticU64Imm    r4, 20         r4 = ST[20] -> <self>
0093   0x011818   43 31 03 00   Move                r49, r3        r49 = r3 [#0DB1F3A99E880DB1]
0094   0x011820   43 32 04 00   Move                r50, r4        r50 = r4 [self]
0095   0x011828   1C 02 02 02   CallFf              r2, r2, 2      r2 = get-symbol(#0DB1F3A99E880DB1, self)
0096   0x011830   43 31 02 00   Move                r49, r2        r49 = r2 [get-symbol()]
0097   0x011838   1C 01 01 01   CallFf              r1, r1, 1      r1 = darray-count(get-symbol())
0098   0x011840   15 02 1A 00   LookupPointer       r2, 26         r2 = ST[26] -> <begin-foreach>
0099   0x011848   1C 02 02 00   CallFf              r2, r2, 0      r2 = begin-foreach()
L_16:
009A   0x011850   43 02 00 00   Move                r2, r0         r2 = r0 [0]
009B   0x011858   43 03 01 00   Move                r3, r1         r3 = r1 [darray-count()]
009C   0x011860   20 02 02 03   ILessThan           r2, r2, r3     r2 = r2 [1] < r3 [1753163078]
009D   0x011868   2F EB 02 00   BranchIfNot         r2, 00EB       IF NOT r2 [0x1] => L_8
009E   0x011870   15 02 1B 00   LookupPointer       r2, 27         r2 = ST[27] -> <darray-at>
009F   0x011878   15 03 12 00   LookupPointer       r3, 18         r3 = ST[18] -> <get-symbol>
00A0   0x011880   4A 04 13 00   LoadStaticU64Imm    r4, 19         r4 = ST[19] -> <#0DB1F3A99E880DB1>
00A1   0x011888   4A 05 14 00   LoadStaticU64Imm    r5, 20         r5 = ST[20] -> <self>
00A2   0x011890   43 31 04 00   Move                r49, r4        r49 = r4 [#0DB1F3A99E880DB1]
00A3   0x011898   43 32 05 00   Move                r50, r5        r50 = r5 [self]
00A4   0x0118A0   1C 03 03 02   CallFf              r3, r3, 2      r3 = get-symbol(#0DB1F3A99E880DB1, self)
00A5   0x0118A8   43 04 00 00   Move                r4, r0         r4 = r0 [0]
00A6   0x0118B0   43 31 03 00   Move                r49, r3        r49 = r3 [get-symbol()]
00A7   0x0118B8   43 32 04 00   Move                r50, r4        r50 = r4 [0]
00A8   0x0118C0   1C 02 02 02   CallFf              r2, r2, 2      r2 = darray-at(get-symbol(), 0)
00A9   0x0118C8   43 03 02 00   Move                r3, r2         r3 = r2 [darray-at()]
00AA   0x0118D0   2F B1 03 00   BranchIfNot         r3, 00B1       IF NOT r3 [darray-at()] => L_9
00AB   0x0118D8   43 03 02 00   Move                r3, r2         r3 = r2 [darray-at()]
00AC   0x0118E0   5D 03 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00AD   0x0118E8   3B 03 03 0C   IAddImm             r3, r3, 12     r3 = r3 [-739117676] / 12 -> <-739117676>
00AE   0x0118F0   4E 03 03 00   LoadU16             ???            UNKNOWN INSTRUCTION
00AF   0x0118F8   0C 04 07 00   LoadU16Imm          r4, 7          r4 = 7
00B0   0x011900   1D 03 03 04   IEqual              r3, r3, r4     r3 = r3 [-739117824] == r4 [7]
L_9:
00B1   0x011908   2F B6 03 00   BranchIfNot         r3, 00B6       IF NOT r3 [0xD3F1F500] => L_10
00B2   0x011910   43 03 02 00   Move                r3, r2         r3 = r2 [darray-at()]
00B3   0x011918   5D 03 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00B4   0x011920   51 03 03 00   LoadU64             r3, [r3]       r3 = [0x0 + 0x0]
00B5   0x011928   2D D1 00 00   Branch              00D1           => L_11
L_10:
00B6   0x011930   43 03 02 00   Move                r3, r2         r3 = r2 [darray-at()]
00B7   0x011938   2F BE 03 00   BranchIfNot         r3, 00BE       IF NOT r3 [darray-at()] => L_12
00B8   0x011940   43 03 02 00   Move                r3, r2         r3 = r2 [darray-at()]
00B9   0x011948   5D 03 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00BA   0x011950   3B 03 03 0C   IAddImm             r3, r3, 12     r3 = r3 [-739117676] / 12 -> <-739117676>
00BB   0x011958   4E 03 03 00   LoadU16             ???            UNKNOWN INSTRUCTION
00BC   0x011960   0C 04 05 00   LoadU16Imm          r4, 5          r4 = 5
00BD   0x011968   1D 03 03 04   IEqual              r3, r3, r4     r3 = r3 [-739117824] == r4 [5]
L_12:
00BE   0x011970   2F C3 03 00   BranchIfNot         r3, 00C3       IF NOT r3 [0xD3F1F500] => L_13
00BF   0x011978   43 03 02 00   Move                r3, r2         r3 = r2 [darray-at()]
00C0   0x011980   5D 03 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00C1   0x011988   51 03 03 00   LoadU64             r3, [r3]       r3 = [0x0 + 0x0]
00C2   0x011990   2D D1 00 00   Branch              00D1           => L_11
L_13:
00C3   0x011998   43 03 02 00   Move                r3, r2         r3 = r2 [darray-at()]
00C4   0x0119A0   2F CB 03 00   BranchIfNot         r3, 00CB       IF NOT r3 [darray-at()] => L_14
00C5   0x0119A8   43 03 02 00   Move                r3, r2         r3 = r2 [darray-at()]
00C6   0x0119B0   5D 03 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00C7   0x0119B8   3B 03 03 0C   IAddImm             r3, r3, 12     r3 = r3 [-739117676] / 12 -> <-739117676>
00C8   0x0119C0   4E 03 03 00   LoadU16             ???            UNKNOWN INSTRUCTION
00C9   0x0119C8   0C 04 04 00   LoadU16Imm          r4, 4          r4 = 4
00CA   0x0119D0   1D 03 03 04   IEqual              r3, r3, r4     r3 = r3 [-739117824] == r4 [4]
L_14:
00CB   0x0119D8   2F D0 03 00   BranchIfNot         r3, 00D0       IF NOT r3 [0xD3F1F500] => L_15
00CC   0x0119E0   43 03 02 00   Move                r3, r2         r3 = r2 [darray-at()]
00CD   0x0119E8   5D 03 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00CE   0x0119F0   51 03 03 00   LoadU64             r3, [r3]       r3 = [0x0 + 0x0]
00CF   0x0119F8   2D D1 00 00   Branch              00D1           => L_11
L_15:
00D0   0x011A00   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
L_11:
00D1   0x011A08   43 02 03 00   Move                r2, r3         r2 = r3 [0]
00D2   0x011A10   15 03 1C 00   LookupPointer       r3, 28         r3 = ST[28] -> <darray-find-remove>
00D3   0x011A18   15 04 12 00   LookupPointer       r4, 18         r4 = ST[18] -> <get-symbol>
00D4   0x011A20   4A 05 18 00   LoadStaticU64Imm    r5, 24         r5 = ST[24] -> <#2D7661AFEECF44C9>
00D5   0x011A28   4A 06 14 00   LoadStaticU64Imm    r6, 20         r6 = ST[20] -> <self>
00D6   0x011A30   43 31 05 00   Move                r49, r5        r49 = r5 [#2D7661AFEECF44C9]
00D7   0x011A38   43 32 06 00   Move                r50, r6        r50 = r6 [self]
00D8   0x011A40   1C 04 04 02   CallFf              r4, r4, 2      r4 = get-symbol(#2D7661AFEECF44C9, self)
00D9   0x011A48   15 05 05 00   LookupPointer       r5, 5          r5 = ST[5] -> <new-boxed-value>
00DA   0x011A50   0C 06 07 00   LoadU16Imm          r6, 7          r6 = 7
00DB   0x011A58   43 07 02 00   Move                r7, r2         r7 = r2 [0]
00DC   0x011A60   43 31 06 00   Move                r49, r6        r49 = r6 [7]
00DD   0x011A68   43 32 07 00   Move                r50, r7        r50 = r7 [0]
00DE   0x011A70   1C 05 05 02   CallFf              r5, r5, 2      r5 = new-boxed-value(7, 0)
00DF   0x011A78   0C 06 00 00   LoadU16Imm          r6, 0          r6 = 0
00E0   0x011A80   43 31 04 00   Move                r49, r4        r49 = r4 [get-symbol()]
00E1   0x011A88   43 32 05 00   Move                r50, r5        r50 = r5 [new-boxed-value()]
00E2   0x011A90   43 33 06 00   Move                r51, r6        r51 = r6 [0]
00E3   0x011A98   1B 03 03 03   Call                r3, r3, 3      r3 = darray-find-remove(get-symbol(), new-boxed-value(), 0)
00E4   0x011AA0   43 03 00 00   Move                r3, r0         r3 = r0 [0]
00E5   0x011AA8   0C 04 01 00   LoadU16Imm          r4, 1          r4 = 1
00E6   0x011AB0   01 03 03 04   IAdd                r3, r3, r4     1 = 0 + 1
00E7   0x011AB8   43 00 03 00   Move                r0, r3         r0 = r3 [1]
00E8   0x011AC0   43 03 00 00   Move                r3, r0         r3 = r0 [1]
00E9   0x011AC8   43 02 03 00   Move                r2, r3         r2 = r3 [1]
00EA   0x011AD0   2D 9A 00 00   Branch              009A           => L_16
L_8:
00EB   0x011AD8   15 02 1D 00   LookupPointer       r2, 29         r2 = ST[29] -> <end-foreach>
00EC   0x011AE0   1C 02 02 00   CallFf              r2, r2, 0      r2 = end-foreach()
00ED   0x011AE8   43 00 02 00   Move                r0, r2         r0 = r2 [end-foreach()]
00EE   0x011AF0   15 00 06 00   LookupPointer       r0, 6          r0 = ST[6] -> <is-final-build?>
00EF   0x011AF8   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
00F0   0x011B00   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
00F1   0x011B08   2F 0A 00 01   BranchIfNot         r0, 010A       IF NOT r0 [0x6620ACB7] => L_17
00F2   0x011B10   15 00 07 00   LookupPointer       r0, 7          r0 = ST[7] -> <display>
00F3   0x011B18   15 01 08 00   LookupPointer       r1, 8          r1 = ST[8] -> <#5445173390656D6D>
00F4   0x011B20   41 02 15 00   LoadStaticPointerImmr2, 21         r2 = ST[21] -> <0xBF026BD4>
00F5   0x011B28   41 03 0A 00   LoadStaticPointerImmr3, 10         r3 = ST[10] -> <0xBF025EFC>
00F6   0x011B30   41 04 1E 00   LoadStaticPointerImmr4, 30         r4 = ST[30] -> <0xBF02754D>
00F7   0x011B38   15 05 17 00   LookupPointer       r5, 23         r5 = ST[23] -> <darray-count>
00F8   0x011B40   15 06 12 00   LookupPointer       r6, 18         r6 = ST[18] -> <get-symbol>
00F9   0x011B48   4A 07 18 00   LoadStaticU64Imm    r7, 24         r7 = ST[24] -> <#2D7661AFEECF44C9>
00FA   0x011B50   4A 08 14 00   LoadStaticU64Imm    r8, 20         r8 = ST[20] -> <self>
00FB   0x011B58   43 31 07 00   Move                r49, r7        r49 = r7 [#2D7661AFEECF44C9]
00FC   0x011B60   43 32 08 00   Move                r50, r8        r50 = r8 [self]
00FD   0x011B68   1C 06 06 02   CallFf              r6, r6, 2      r6 = get-symbol(#2D7661AFEECF44C9, self)
00FE   0x011B70   43 31 06 00   Move                r49, r6        r49 = r6 [get-symbol()]
00FF   0x011B78   1C 05 05 01   CallFf              r5, r5, 1      r5 = darray-count(get-symbol())
0100   0x011B80   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF026BD4]
0101   0x011B88   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
0102   0x011B90   43 33 04 00   Move                r51, r4        r51 = r4 [0xBF02754D]
0103   0x011B98   43 34 05 00   Move                r52, r5        r52 = r5 [darray-count()]
0104   0x011BA0   1C 01 01 04   CallFf              r1, r1, 4      r1 = #5445173390656D6D(0xBF026BD4, 0xBF025EFC, 0xBF02754D, darray-count())
0105   0x011BA8   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
0106   0x011BB0   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
0107   0x011BB8   43 32 02 00   Move                r50, r2        r50 = r2 [19]
0108   0x011BC0   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
0109   0x011BC8   2D 0B 00 01   Branch              010B           => L_18
L_17:
010A   0x011BD0   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_18:
010B   0x011BD8   2D 29 00 01   Branch              0129           => L_RETURN
L_1:
010C   0x011BE0   15 00 06 00   LookupPointer       r0, 6          r0 = ST[6] -> <is-final-build?>
010D   0x011BE8   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
010E   0x011BF0   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
010F   0x011BF8   2F 28 00 01   BranchIfNot         r0, 0128       IF NOT r0 [0x6620ACB7] => L_20
0110   0x011C00   15 00 07 00   LookupPointer       r0, 7          r0 = ST[7] -> <display>
0111   0x011C08   15 01 08 00   LookupPointer       r1, 8          r1 = ST[8] -> <#5445173390656D6D>
0112   0x011C10   41 02 15 00   LoadStaticPointerImmr2, 21         r2 = ST[21] -> <0xBF026BD4>
0113   0x011C18   41 03 0A 00   LoadStaticPointerImmr3, 10         r3 = ST[10] -> <0xBF025EFC>
0114   0x011C20   41 04 1F 00   LoadStaticPointerImmr4, 31         r4 = ST[31] -> <0xBF0274BA>
0115   0x011C28   15 05 17 00   LookupPointer       r5, 23         r5 = ST[23] -> <darray-count>
0116   0x011C30   15 06 12 00   LookupPointer       r6, 18         r6 = ST[18] -> <get-symbol>
0117   0x011C38   4A 07 18 00   LoadStaticU64Imm    r7, 24         r7 = ST[24] -> <#2D7661AFEECF44C9>
0118   0x011C40   4A 08 14 00   LoadStaticU64Imm    r8, 20         r8 = ST[20] -> <self>
0119   0x011C48   43 31 07 00   Move                r49, r7        r49 = r7 [#2D7661AFEECF44C9]
011A   0x011C50   43 32 08 00   Move                r50, r8        r50 = r8 [self]
011B   0x011C58   1C 06 06 02   CallFf              r6, r6, 2      r6 = get-symbol(#2D7661AFEECF44C9, self)
011C   0x011C60   43 31 06 00   Move                r49, r6        r49 = r6 [get-symbol()]
011D   0x011C68   1C 05 05 01   CallFf              r5, r5, 1      r5 = darray-count(get-symbol())
011E   0x011C70   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF026BD4]
011F   0x011C78   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
0120   0x011C80   43 33 04 00   Move                r51, r4        r51 = r4 [0xBF0274BA]
0121   0x011C88   43 34 05 00   Move                r52, r5        r52 = r5 [darray-count()]
0122   0x011C90   1C 01 01 04   CallFf              r1, r1, 4      r1 = #5445173390656D6D(0xBF026BD4, 0xBF025EFC, 0xBF0274BA, darray-count())
0123   0x011C98   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
0124   0x011CA0   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
0125   0x011CA8   43 32 02 00   Move                r50, r2        r50 = r2 [19]
0126   0x011CB0   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
0127   0x011CB8   2D 29 00 01   Branch              0129           => L_RETURN
L_20:
0128   0x011CC0   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
0129   0x011CC8   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x011CD0    POINTER <#C7F82FED8C09844A>
0001   0x011CD8    SID <tripwire-map>
0002   0x011CE0    POINTER <darray-contains?>
0003   0x011CE8    POINTER <#D38B5871160B3BED>
0004   0x011CF0    POINTER <#D234E7ECD77EC02D>
0005   0x011CF8    POINTER <new-boxed-value>
0006   0x011D00    POINTER <is-final-build?>
0007   0x011D08    POINTER <display>
0008   0x011D10    POINTER <#5445173390656D6D>
0009   0x011D18    POINTER <#00000282BF026805>
000A   0x011D20    POINTER <#00000282BF025EFC>
000B   0x011D28    POINTER <ddict-create>
000C   0x011D30    SID <single-frame>
000D   0x011D38    INT <-1>
000E   0x011D40    POINTER <ddict-set>
000F   0x011D48    SID <#BF568465FCD04213>
0010   0x011D50    POINTER <group-copy>
0011   0x011D58    POINTER <get-spawners-by-criteria>
0012   0x011D60    POINTER <get-symbol>
0013   0x011D68    SID <#0DB1F3A99E880DB1>
0014   0x011D70    SID <self>
0015   0x011D78    POINTER <#00000282BF026BD4>
0016   0x011D80    POINTER <#00000282BF02765A>
0017   0x011D88    POINTER <darray-count>
0018   0x011D90    SID <#2D7661AFEECF44C9>
0019   0x011D98    POINTER <#00000282BF027517>
001A   0x011DA0    POINTER <begin-foreach>
001B   0x011DA8    POINTER <darray-at>
001C   0x011DB0    POINTER <darray-find-remove>
001D   0x011DB8    POINTER <end-foreach>
001E   0x011DC0    POINTER <#00000282BF02754D>
001F   0x011DC8    POINTER <#00000282BF0274BA>
0000   0x01EC20   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <wait-one-frame>
0001   0x01EC28   1C 00 00 00   CallFf              r0, r0, 0      r0 = wait-one-frame()
0002   0x01EC30   00 00 00 00   Return              r0             Return wait-one-frame()
SYMBOL TABLE: 
0000   0x01EC38    POINTER <wait-one-frame>
0000   0x019E68   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <go>
0001   0x019E70   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <ready-waiting>
0002   0x019E78   0C 02 01 00   LoadU16Imm          r2, 1          r2 = 1
0003   0x019E80   43 31 01 00   Move                r49, r1        r49 = r1 [ready-waiting]
0004   0x019E88   43 32 02 00   Move                r50, r2        r50 = r2 [1]
0005   0x019E90   1C 00 00 02   CallFf              r0, r0, 2      r0 = go(ready-waiting, 1)
0006   0x019E98   00 00 00 00   Return              r0             Return go()
SYMBOL TABLE: 
0000   0x019EA0    POINTER <go>
0001   0x019EA8    SID <ready-waiting>
      STATE ready-waiting:
         ON start
          TRACK main:
0000   0x012EF8   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <is-final-build?>
0001   0x012F00   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0002   0x012F08   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0003   0x012F10   2F 0E 00 00   BranchIfNot         r0, 000E       IF NOT r0 [0x6620ACB7] => L_0
0004   0x012F18   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <display>
0005   0x012F20   15 01 02 00   LookupPointer       r1, 2          r1 = ST[2] -> <#5445173390656D6D>
0006   0x012F28   41 02 03 00   LoadStaticPointerImmr2, 3          r2 = ST[3] -> <0xBF027025>
0007   0x012F30   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF027025]
0008   0x012F38   1C 01 01 01   CallFf              r1, r1, 1      r1 = #5445173390656D6D(0xBF027025)
0009   0x012F40   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
000A   0x012F48   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
000B   0x012F50   43 32 02 00   Move                r50, r2        r50 = r2 [19]
000C   0x012F58   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
000D   0x012F60   2D 0F 00 00   Branch              000F           => L_RETURN
L_0:
000E   0x012F68   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
000F   0x012F70   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x012F78    POINTER <is-final-build?>
0001   0x012F80    POINTER <display>
0002   0x012F88    POINTER <#5445173390656D6D>
0003   0x012F90    POINTER <#00000282BF027025>
0000   0x0190D8   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <set-boolean>
0001   0x0190E0   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#C682097AD6DD2276>
0002   0x0190E8   0C 02 01 00   LoadU16Imm          r2, 1          r2 = 1
0003   0x0190F0   4A 03 02 00   LoadStaticU64Imm    r3, 2          r3 = ST[2] -> <self>
0004   0x0190F8   43 31 01 00   Move                r49, r1        r49 = r1 [#C682097AD6DD2276]
0005   0x019100   43 32 02 00   Move                r50, r2        r50 = r2 [1]
0006   0x019108   43 33 03 00   Move                r51, r3        r51 = r3 [self]
0007   0x019110   1C 00 00 03   CallFf              r0, r0, 3      r0 = set-boolean(#C682097AD6DD2276, 1, self)
0008   0x019118   00 00 00 00   Return              r0             Return set-boolean()
SYMBOL TABLE: 
0000   0x019120    POINTER <set-boolean>
0001   0x019128    SID <#C682097AD6DD2276>
0002   0x019130    SID <self>
0000   0x014DD0   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <is-final-build?>
0001   0x014DD8   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0002   0x014DE0   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0003   0x014DE8   2F 1A 00 00   BranchIfNot         r0, 001A       IF NOT r0 [0x6620ACB7] => L_0
0004   0x014DF0   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <display>
0005   0x014DF8   15 01 02 00   LookupPointer       r1, 2          r1 = ST[2] -> <#5445173390656D6D>
0006   0x014E00   41 02 03 00   LoadStaticPointerImmr2, 3          r2 = ST[3] -> <0xBF0266B8>
0007   0x014E08   41 03 04 00   LoadStaticPointerImmr3, 4          r3 = ST[4] -> <0xBF025EFC>
0008   0x014E10   15 04 05 00   LookupPointer       r4, 5          r4 = ST[5] -> <darray-count>
0009   0x014E18   15 05 06 00   LookupPointer       r5, 6          r5 = ST[6] -> <get-symbol>
000A   0x014E20   4A 06 07 00   LoadStaticU64Imm    r6, 7          r6 = ST[7] -> <#95B0EBA52417EDE3>
000B   0x014E28   4A 07 08 00   LoadStaticU64Imm    r7, 8          r7 = ST[8] -> <self>
000C   0x014E30   43 31 06 00   Move                r49, r6        r49 = r6 [#95B0EBA52417EDE3]
000D   0x014E38   43 32 07 00   Move                r50, r7        r50 = r7 [self]
000E   0x014E40   1C 05 05 02   CallFf              r5, r5, 2      r5 = get-symbol(#95B0EBA52417EDE3, self)
000F   0x014E48   43 31 05 00   Move                r49, r5        r49 = r5 [get-symbol()]
0010   0x014E50   1C 04 04 01   CallFf              r4, r4, 1      r4 = darray-count(get-symbol())
0011   0x014E58   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF0266B8]
0012   0x014E60   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
0013   0x014E68   43 33 04 00   Move                r51, r4        r51 = r4 [darray-count()]
0014   0x014E70   1C 01 01 03   CallFf              r1, r1, 3      r1 = #5445173390656D6D(0xBF0266B8, 0xBF025EFC, darray-count())
0015   0x014E78   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
0016   0x014E80   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
0017   0x014E88   43 32 02 00   Move                r50, r2        r50 = r2 [19]
0018   0x014E90   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
0019   0x014E98   2D 1B 00 00   Branch              001B           => L_RETURN
L_0:
001A   0x014EA0   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
001B   0x014EA8   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x014EB0    POINTER <is-final-build?>
0001   0x014EB8    POINTER <display>
0002   0x014EC0    POINTER <#5445173390656D6D>
0003   0x014EC8    POINTER <#00000282BF0266B8>
0004   0x014ED0    POINTER <#00000282BF025EFC>
0005   0x014ED8    POINTER <darray-count>
0006   0x014EE0    POINTER <get-symbol>
0007   0x014EE8    SID <#95B0EBA52417EDE3>
0008   0x014EF0    SID <self>
0000   0x014CB0   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <is-final-build?>
0001   0x014CB8   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0002   0x014CC0   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0003   0x014CC8   2F 19 00 00   BranchIfNot         r0, 0019       IF NOT r0 [0x6620ACB7] => L_0
0004   0x014CD0   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <display>
0005   0x014CD8   15 01 02 00   LookupPointer       r1, 2          r1 = ST[2] -> <#5445173390656D6D>
0006   0x014CE0   41 02 03 00   LoadStaticPointerImmr2, 3          r2 = ST[3] -> <0xBF026BD4>
0007   0x014CE8   41 03 04 00   LoadStaticPointerImmr3, 4          r3 = ST[4] -> <0xBF025EFC>
0008   0x014CF0   41 04 05 00   LoadStaticPointerImmr4, 5          r4 = ST[5] -> <0xBF0273E1>
0009   0x014CF8   15 05 06 00   LookupPointer       r5, 6          r5 = ST[6] -> <get-int32>
000A   0x014D00   4A 06 07 00   LoadStaticU64Imm    r6, 7          r6 = ST[7] -> <num-waves>
000B   0x014D08   4A 07 08 00   LoadStaticU64Imm    r7, 8          r7 = ST[8] -> <self>
000C   0x014D10   43 31 06 00   Move                r49, r6        r49 = r6 [num-waves]
000D   0x014D18   43 32 07 00   Move                r50, r7        r50 = r7 [self]
000E   0x014D20   1C 05 05 02   CallFf              r5, r5, 2      r5 = get-int32(num-waves, self)
000F   0x014D28   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF026BD4]
0010   0x014D30   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
0011   0x014D38   43 33 04 00   Move                r51, r4        r51 = r4 [0xBF0273E1]
0012   0x014D40   43 34 05 00   Move                r52, r5        r52 = r5 [get-int32()]
0013   0x014D48   1C 01 01 04   CallFf              r1, r1, 4      r1 = #5445173390656D6D(0xBF026BD4, 0xBF025EFC, 0xBF0273E1, get-int32())
0014   0x014D50   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
0015   0x014D58   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
0016   0x014D60   43 32 02 00   Move                r50, r2        r50 = r2 [19]
0017   0x014D68   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
0018   0x014D70   2D 1A 00 00   Branch              001A           => L_RETURN
L_0:
0019   0x014D78   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
001A   0x014D80   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x014D88    POINTER <is-final-build?>
0001   0x014D90    POINTER <display>
0002   0x014D98    POINTER <#5445173390656D6D>
0003   0x014DA0    POINTER <#00000282BF026BD4>
0004   0x014DA8    POINTER <#00000282BF025EFC>
0005   0x014DB0    POINTER <#00000282BF0273E1>
0006   0x014DB8    POINTER <get-int32>
0007   0x014DC0    SID <num-waves>
0008   0x014DC8    SID <self>
0000   0x01A688   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <is-final-build?>
0001   0x01A690   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0002   0x01A698   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0003   0x01A6A0   2F 28 00 00   BranchIfNot         r0, 0028       IF NOT r0 [0x6620ACB7] => L_0
0004   0x01A6A8   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <display>
0005   0x01A6B0   15 01 02 00   LookupPointer       r1, 2          r1 = ST[2] -> <#5445173390656D6D>
0006   0x01A6B8   41 02 03 00   LoadStaticPointerImmr2, 3          r2 = ST[3] -> <0xBF026C02>
0007   0x01A6C0   41 03 04 00   LoadStaticPointerImmr3, 4          r3 = ST[4] -> <0xBF025EFC>
0008   0x01A6C8   41 04 05 00   LoadStaticPointerImmr4, 5          r4 = ST[5] -> <0xBF027217>
0009   0x01A6D0   15 05 06 00   LookupPointer       r5, 6          r5 = ST[6] -> <get-boolean>
000A   0x01A6D8   4A 06 07 00   LoadStaticU64Imm    r6, 7          r6 = ST[7] -> <#FB027CA453EDDE5B>
000B   0x01A6E0   4A 07 08 00   LoadStaticU64Imm    r7, 8          r7 = ST[8] -> <self>
000C   0x01A6E8   43 31 06 00   Move                r49, r6        r49 = r6 [#FB027CA453EDDE5B]
000D   0x01A6F0   43 32 07 00   Move                r50, r7        r50 = r7 [self]
000E   0x01A6F8   1C 05 05 02   CallFf              r5, r5, 2      r5 = get-boolean(#FB027CA453EDDE5B, self)
000F   0x01A700   2F 12 05 00   BranchIfNot         r5, 0012       IF NOT r5 [get-boolean()] => L_1
0010   0x01A708   41 05 09 00   LoadStaticPointerImmr5, 9          r5 = ST[9] -> <0xBF0274FB>
0011   0x01A710   2D 13 00 00   Branch              0013           => L_2
L_1:
0012   0x01A718   41 05 0A 00   LoadStaticPointerImmr5, 10         r5 = ST[10] -> <0xBF0274FE>
L_2:
0013   0x01A720   15 06 0B 00   LookupPointer       r6, 11         r6 = ST[11] -> <#B96C7EEF7ACAB122>
0014   0x01A728   2F 19 06 00   BranchIfNot         r6, 0019       IF NOT r6 [0x7ACAB122] => L_3
0015   0x01A730   15 06 0B 01   LookupPointer       r6, 11         r6 = ST[11] -> <#B96C7EEF7ACAB122>
0016   0x01A738   5D 06 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0017   0x01A740   3B 06 06 11   IAddImm             r6, r6, 17     r6 = r6 [-971637651] / 17 -> <-971637651>
0018   0x01A748   4C 06 06 00   LoadU8              ???            UNKNOWN INSTRUCTION
L_3:
0019   0x01A750   2F 1C 06 00   BranchIfNot         r6, 001C       IF NOT r6 [-971637651] => L_4
001A   0x01A758   41 06 0C 00   LoadStaticPointerImmr6, 12         r6 = ST[12] -> <0xBF025F32>
001B   0x01A760   2D 1D 00 00   Branch              001D           => L_5
L_4:
001C   0x01A768   41 06 04 00   LoadStaticPointerImmr6, 4          r6 = ST[4] -> <0xBF025EFC>
L_5:
001D   0x01A770   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF026C02]
001E   0x01A778   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
001F   0x01A780   43 33 04 00   Move                r51, r4        r51 = r4 [0xBF027217]
0020   0x01A788   43 34 05 00   Move                r52, r5        r52 = r5 [0xBF0274FE]
0021   0x01A790   43 35 06 00   Move                r53, r6        r53 = r6 [0xBF025EFC]
0022   0x01A798   1C 01 01 05   CallFf              r1, r1, 5      r1 = #5445173390656D6D(0xBF026C02, 0xBF025EFC, 0xBF027217, 0xBF0274FE, 0xBF025EFC)
0023   0x01A7A0   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
0024   0x01A7A8   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
0025   0x01A7B0   43 32 02 00   Move                r50, r2        r50 = r2 [19]
0026   0x01A7B8   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
0027   0x01A7C0   2D 29 00 00   Branch              0029           => L_RETURN
L_0:
0028   0x01A7C8   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
0029   0x01A7D0   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x01A7D8    POINTER <is-final-build?>
0001   0x01A7E0    POINTER <display>
0002   0x01A7E8    POINTER <#5445173390656D6D>
0003   0x01A7F0    POINTER <#00000282BF026C02>
0004   0x01A7F8    POINTER <#00000282BF025EFC>
0005   0x01A800    POINTER <#00000282BF027217>
0006   0x01A808    POINTER <get-boolean>
0007   0x01A810    SID <#FB027CA453EDDE5B>
0008   0x01A818    SID <self>
0009   0x01A820    POINTER <#00000282BF0274FB>
000A   0x01A828    POINTER <#00000282BF0274FE>
000B   0x01A830    POINTER <#B96C7EEF7ACAB122>
000C   0x01A838    POINTER <#00000282BF025F32>
0000   0x01AF88   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <is-final-build?>
0001   0x01AF90   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0002   0x01AF98   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0003   0x01AFA0   2F 1D 00 00   BranchIfNot         r0, 001D       IF NOT r0 [0x6620ACB7] => L_0
0004   0x01AFA8   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <display>
0005   0x01AFB0   15 01 02 00   LookupPointer       r1, 2          r1 = ST[2] -> <#5445173390656D6D>
0006   0x01AFB8   41 02 03 00   LoadStaticPointerImmr2, 3          r2 = ST[3] -> <0xBF026BEB>
0007   0x01AFC0   41 03 04 00   LoadStaticPointerImmr3, 4          r3 = ST[4] -> <0xBF025EFC>
0008   0x01AFC8   41 04 05 00   LoadStaticPointerImmr4, 5          r4 = ST[5] -> <0xBF02753F>
0009   0x01AFD0   15 05 06 00   LookupPointer       r5, 6          r5 = ST[6] -> <get-boolean>
000A   0x01AFD8   4A 06 07 00   LoadStaticU64Imm    r6, 7          r6 = ST[7] -> <#5F89BCA42A4FC333>
000B   0x01AFE0   4A 07 08 00   LoadStaticU64Imm    r7, 8          r7 = ST[8] -> <self>
000C   0x01AFE8   43 31 06 00   Move                r49, r6        r49 = r6 [#5F89BCA42A4FC333]
000D   0x01AFF0   43 32 07 00   Move                r50, r7        r50 = r7 [self]
000E   0x01AFF8   1C 05 05 02   CallFf              r5, r5, 2      r5 = get-boolean(#5F89BCA42A4FC333, self)
000F   0x01B000   2F 12 05 00   BranchIfNot         r5, 0012       IF NOT r5 [get-boolean()] => L_1
0010   0x01B008   41 05 09 00   LoadStaticPointerImmr5, 9          r5 = ST[9] -> <0xBF0274FB>
0011   0x01B010   2D 13 00 00   Branch              0013           => L_2
L_1:
0012   0x01B018   41 05 0A 00   LoadStaticPointerImmr5, 10         r5 = ST[10] -> <0xBF0274FE>
L_2:
0013   0x01B020   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF026BEB]
0014   0x01B028   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
0015   0x01B030   43 33 04 00   Move                r51, r4        r51 = r4 [0xBF02753F]
0016   0x01B038   43 34 05 00   Move                r52, r5        r52 = r5 [0xBF0274FE]
0017   0x01B040   1C 01 01 04   CallFf              r1, r1, 4      r1 = #5445173390656D6D(0xBF026BEB, 0xBF025EFC, 0xBF02753F, 0xBF0274FE)
0018   0x01B048   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
0019   0x01B050   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
001A   0x01B058   43 32 02 00   Move                r50, r2        r50 = r2 [19]
001B   0x01B060   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
001C   0x01B068   2D 1E 00 00   Branch              001E           => L_RETURN
L_0:
001D   0x01B070   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
001E   0x01B078   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x01B080    POINTER <is-final-build?>
0001   0x01B088    POINTER <display>
0002   0x01B090    POINTER <#5445173390656D6D>
0003   0x01B098    POINTER <#00000282BF026BEB>
0004   0x01B0A0    POINTER <#00000282BF025EFC>
0005   0x01B0A8    POINTER <#00000282BF02753F>
0006   0x01B0B0    POINTER <get-boolean>
0007   0x01B0B8    SID <#5F89BCA42A4FC333>
0008   0x01B0C0    SID <self>
0009   0x01B0C8    POINTER <#00000282BF0274FB>
000A   0x01B0D0    POINTER <#00000282BF0274FE>
0000   0x00F9D8   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <#9265F983755147F4>
0001   0x00F9E0   1B 00 00 00   Call                r0, r0, 0      r0 = #9265F983755147F4()
0002   0x00F9E8   00 00 00 00   Return              r0             Return #9265F983755147F4()
SYMBOL TABLE: 
0000   0x00F9F0    POINTER <#9265F983755147F4>
0000   0x00B588   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
0001   0x00B590   15 01 00 00   LookupPointer       r1, 0          r1 = ST[0] -> <darray-count>
0002   0x00B598   15 02 01 00   LookupPointer       r2, 1          r2 = ST[1] -> <get-symbol>
0003   0x00B5A0   4A 03 02 00   LoadStaticU64Imm    r3, 2          r3 = ST[2] -> <#FDC4C8C377BAE464>
0004   0x00B5A8   4A 04 03 00   LoadStaticU64Imm    r4, 3          r4 = ST[3] -> <self>
0005   0x00B5B0   43 31 03 00   Move                r49, r3        r49 = r3 [#FDC4C8C377BAE464]
0006   0x00B5B8   43 32 04 00   Move                r50, r4        r50 = r4 [self]
0007   0x00B5C0   1C 02 02 02   CallFf              r2, r2, 2      r2 = get-symbol(#FDC4C8C377BAE464, self)
0008   0x00B5C8   43 31 02 00   Move                r49, r2        r49 = r2 [get-symbol()]
0009   0x00B5D0   1C 01 01 01   CallFf              r1, r1, 1      r1 = darray-count(get-symbol())
000A   0x00B5D8   0C 02 00 00   LoadU16Imm          r2, 0          r2 = 0
000B   0x00B5E0   1D 01 01 02   IEqual              r1, r1, r2     r1 = r1 [1753163008] == r2 [0]
000C   0x00B5E8   2F 34 01 00   BranchIfNot         r1, 0034       IF NOT r1 [0x687F2500] => L_0
000D   0x00B5F0   15 01 04 00   LookupPointer       r1, 4          r1 = ST[4] -> <is-final-build?>
000E   0x00B5F8   1C 01 01 00   CallFf              r1, r1, 0      r1 = is-final-build?()
000F   0x00B600   30 01 01 00   OpLogNot            r1, r1         r1 = !r1 -> <TRUE>
0010   0x00B608   2F 1D 01 00   BranchIfNot         r1, 001D       IF NOT r1 [0x6620ACB7] => L_1
0011   0x00B610   15 01 05 00   LookupPointer       r1, 5          r1 = ST[5] -> <display>
0012   0x00B618   15 02 06 00   LookupPointer       r2, 6          r2 = ST[6] -> <#5445173390656D6D>
0013   0x00B620   41 03 07 00   LoadStaticPointerImmr3, 7          r3 = ST[7] -> <0xBF02688C>
0014   0x00B628   41 04 08 00   LoadStaticPointerImmr4, 8          r4 = ST[8] -> <0xBF025EFC>
0015   0x00B630   43 31 03 00   Move                r49, r3        r49 = r3 [0xBF02688C]
0016   0x00B638   43 32 04 00   Move                r50, r4        r50 = r4 [0xBF025EFC]
0017   0x00B640   1C 02 02 02   CallFf              r2, r2, 2      r2 = #5445173390656D6D(0xBF02688C, 0xBF025EFC)
0018   0x00B648   0C 03 13 00   LoadU16Imm          r3, 19         r3 = 19
0019   0x00B650   43 31 02 00   Move                r49, r2        r49 = r2 [#5445173390656D6D()]
001A   0x00B658   43 32 03 00   Move                r50, r3        r50 = r3 [19]
001B   0x00B660   1C 01 01 02   CallFf              r1, r1, 2      r1 = display(#5445173390656D6D(), 19)
001C   0x00B668   2D 1E 00 00   Branch              001E           => L_2
L_1:
001D   0x00B670   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
L_2:
001E   0x00B678   15 01 09 00   LookupPointer       r1, 9          r1 = ST[9] -> <darray-copy-into>
001F   0x00B680   15 02 01 00   LookupPointer       r2, 1          r2 = ST[1] -> <get-symbol>
0020   0x00B688   4A 03 02 00   LoadStaticU64Imm    r3, 2          r3 = ST[2] -> <#FDC4C8C377BAE464>
0021   0x00B690   4A 04 03 00   LoadStaticU64Imm    r4, 3          r4 = ST[3] -> <self>
0022   0x00B698   43 31 03 00   Move                r49, r3        r49 = r3 [#FDC4C8C377BAE464]
0023   0x00B6A0   43 32 04 00   Move                r50, r4        r50 = r4 [self]
0024   0x00B6A8   1C 02 02 02   CallFf              r2, r2, 2      r2 = get-symbol(#FDC4C8C377BAE464, self)
0025   0x00B6B0   15 03 01 00   LookupPointer       r3, 1          r3 = ST[1] -> <get-symbol>
0026   0x00B6B8   4A 04 0A 00   LoadStaticU64Imm    r4, 10         r4 = ST[10] -> <#3CD186F47CCAE6B1>
0027   0x00B6C0   4A 05 03 00   LoadStaticU64Imm    r5, 3          r5 = ST[3] -> <self>
0028   0x00B6C8   43 31 04 00   Move                r49, r4        r49 = r4 [#3CD186F47CCAE6B1]
0029   0x00B6D0   43 32 05 00   Move                r50, r5        r50 = r5 [self]
002A   0x00B6D8   1C 03 03 02   CallFf              r3, r3, 2      r3 = get-symbol(#3CD186F47CCAE6B1, self)
002B   0x00B6E0   0C 04 00 00   LoadU16Imm          r4, 0          r4 = 0
002C   0x00B6E8   43 31 02 00   Move                r49, r2        r49 = r2 [get-symbol()]
002D   0x00B6F0   43 32 03 00   Move                r50, r3        r50 = r3 [get-symbol()]
002E   0x00B6F8   43 33 04 00   Move                r51, r4        r51 = r4 [0]
002F   0x00B700   1C 01 01 03   CallFf              r1, r1, 3      r1 = darray-copy-into(get-symbol(), get-symbol(), 0)
0030   0x00B708   0C 01 01 00   LoadU16Imm          r1, 1          r1 = 1
0031   0x00B710   43 00 01 00   Move                r0, r1         r0 = r1 [1]
0032   0x00B718   43 01 00 00   Move                r1, r0         r1 = r0 [1]
0033   0x00B720   2D 35 00 00   Branch              0035           => L_3
L_0:
0034   0x00B728   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
L_3:
0035   0x00B730   15 01 00 00   LookupPointer       r1, 0          r1 = ST[0] -> <darray-count>
0036   0x00B738   15 02 01 00   LookupPointer       r2, 1          r2 = ST[1] -> <get-symbol>
0037   0x00B740   4A 03 0B 00   LoadStaticU64Imm    r3, 11         r3 = ST[11] -> <#F14ED4EDE9DDEA26>
0038   0x00B748   4A 04 03 00   LoadStaticU64Imm    r4, 3          r4 = ST[3] -> <self>
0039   0x00B750   43 31 03 00   Move                r49, r3        r49 = r3 [#F14ED4EDE9DDEA26]
003A   0x00B758   43 32 04 00   Move                r50, r4        r50 = r4 [self]
003B   0x00B760   1C 02 02 02   CallFf              r2, r2, 2      r2 = get-symbol(#F14ED4EDE9DDEA26, self)
003C   0x00B768   43 31 02 00   Move                r49, r2        r49 = r2 [get-symbol()]
003D   0x00B770   1C 01 01 01   CallFf              r1, r1, 1      r1 = darray-count(get-symbol())
003E   0x00B778   0C 02 00 00   LoadU16Imm          r2, 0          r2 = 0
003F   0x00B780   1D 01 01 02   IEqual              r1, r1, r2     r1 = r1 [1753163008] == r2 [0]
0040   0x00B788   2F 4D 01 00   BranchIfNot         r1, 004D       IF NOT r1 [0x687F2500] => L_4
0041   0x00B790   15 01 00 00   LookupPointer       r1, 0          r1 = ST[0] -> <darray-count>
0042   0x00B798   15 02 01 00   LookupPointer       r2, 1          r2 = ST[1] -> <get-symbol>
0043   0x00B7A0   4A 03 0C 00   LoadStaticU64Imm    r3, 12         r3 = ST[12] -> <#AE606DDB7F18D76F>
0044   0x00B7A8   4A 04 03 00   LoadStaticU64Imm    r4, 3          r4 = ST[3] -> <self>
0045   0x00B7B0   43 31 03 00   Move                r49, r3        r49 = r3 [#AE606DDB7F18D76F]
0046   0x00B7B8   43 32 04 00   Move                r50, r4        r50 = r4 [self]
0047   0x00B7C0   1C 02 02 02   CallFf              r2, r2, 2      r2 = get-symbol(#AE606DDB7F18D76F, self)
0048   0x00B7C8   43 31 02 00   Move                r49, r2        r49 = r2 [get-symbol()]
0049   0x00B7D0   1C 01 01 01   CallFf              r1, r1, 1      r1 = darray-count(get-symbol())
004A   0x00B7D8   0C 02 00 00   LoadU16Imm          r2, 0          r2 = 0
004B   0x00B7E0   1D 01 01 02   IEqual              r1, r1, r2     r1 = r1 [1753163008] == r2 [0]
004C   0x00B7E8   30 01 01 00   OpLogNot            r1, r1         r1 = !r1 -> <TRUE>
L_4:
004D   0x00B7F0   2F 75 01 00   BranchIfNot         r1, 0075       IF NOT r1 [0x687F2501] => L_5
004E   0x00B7F8   15 01 04 00   LookupPointer       r1, 4          r1 = ST[4] -> <is-final-build?>
004F   0x00B800   1C 01 01 00   CallFf              r1, r1, 0      r1 = is-final-build?()
0050   0x00B808   30 01 01 00   OpLogNot            r1, r1         r1 = !r1 -> <TRUE>
0051   0x00B810   2F 5E 01 00   BranchIfNot         r1, 005E       IF NOT r1 [0x6620ACB7] => L_6
0052   0x00B818   15 01 05 00   LookupPointer       r1, 5          r1 = ST[5] -> <display>
0053   0x00B820   15 02 06 00   LookupPointer       r2, 6          r2 = ST[6] -> <#5445173390656D6D>
0054   0x00B828   41 03 0D 00   LoadStaticPointerImmr3, 13         r3 = ST[13] -> <0xBF02684D>
0055   0x00B830   41 04 08 00   LoadStaticPointerImmr4, 8          r4 = ST[8] -> <0xBF025EFC>
0056   0x00B838   43 31 03 00   Move                r49, r3        r49 = r3 [0xBF02684D]
0057   0x00B840   43 32 04 00   Move                r50, r4        r50 = r4 [0xBF025EFC]
0058   0x00B848   1C 02 02 02   CallFf              r2, r2, 2      r2 = #5445173390656D6D(0xBF02684D, 0xBF025EFC)
0059   0x00B850   0C 03 13 00   LoadU16Imm          r3, 19         r3 = 19
005A   0x00B858   43 31 02 00   Move                r49, r2        r49 = r2 [#5445173390656D6D()]
005B   0x00B860   43 32 03 00   Move                r50, r3        r50 = r3 [19]
005C   0x00B868   1C 01 01 02   CallFf              r1, r1, 2      r1 = display(#5445173390656D6D(), 19)
005D   0x00B870   2D 5F 00 00   Branch              005F           => L_7
L_6:
005E   0x00B878   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
L_7:
005F   0x00B880   15 01 09 00   LookupPointer       r1, 9          r1 = ST[9] -> <darray-copy-into>
0060   0x00B888   15 02 01 00   LookupPointer       r2, 1          r2 = ST[1] -> <get-symbol>
0061   0x00B890   4A 03 0B 00   LoadStaticU64Imm    r3, 11         r3 = ST[11] -> <#F14ED4EDE9DDEA26>
0062   0x00B898   4A 04 03 00   LoadStaticU64Imm    r4, 3          r4 = ST[3] -> <self>
0063   0x00B8A0   43 31 03 00   Move                r49, r3        r49 = r3 [#F14ED4EDE9DDEA26]
0064   0x00B8A8   43 32 04 00   Move                r50, r4        r50 = r4 [self]
0065   0x00B8B0   1C 02 02 02   CallFf              r2, r2, 2      r2 = get-symbol(#F14ED4EDE9DDEA26, self)
0066   0x00B8B8   15 03 01 00   LookupPointer       r3, 1          r3 = ST[1] -> <get-symbol>
0067   0x00B8C0   4A 04 0C 00   LoadStaticU64Imm    r4, 12         r4 = ST[12] -> <#AE606DDB7F18D76F>
0068   0x00B8C8   4A 05 03 00   LoadStaticU64Imm    r5, 3          r5 = ST[3] -> <self>
0069   0x00B8D0   43 31 04 00   Move                r49, r4        r49 = r4 [#AE606DDB7F18D76F]
006A   0x00B8D8   43 32 05 00   Move                r50, r5        r50 = r5 [self]
006B   0x00B8E0   1C 03 03 02   CallFf              r3, r3, 2      r3 = get-symbol(#AE606DDB7F18D76F, self)
006C   0x00B8E8   0C 04 00 00   LoadU16Imm          r4, 0          r4 = 0
006D   0x00B8F0   43 31 02 00   Move                r49, r2        r49 = r2 [get-symbol()]
006E   0x00B8F8   43 32 03 00   Move                r50, r3        r50 = r3 [get-symbol()]
006F   0x00B900   43 33 04 00   Move                r51, r4        r51 = r4 [0]
0070   0x00B908   1C 01 01 03   CallFf              r1, r1, 3      r1 = darray-copy-into(get-symbol(), get-symbol(), 0)
0071   0x00B910   0C 01 01 00   LoadU16Imm          r1, 1          r1 = 1
0072   0x00B918   43 00 01 00   Move                r0, r1         r0 = r1 [1]
0073   0x00B920   43 01 00 00   Move                r1, r0         r1 = r0 [1]
0074   0x00B928   2D 76 00 00   Branch              0076           => L_8
L_5:
0075   0x00B930   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
L_8:
0076   0x00B938   43 01 00 00   Move                r1, r0         r1 = r0 [1]
0077   0x00B940   2F 7B 01 00   BranchIfNot         r1, 007B       IF NOT r1 [1] => L_9
0078   0x00B948   15 01 0E 00   LookupPointer       r1, 14         r1 = ST[14] -> <#9265F983755147F4>
0079   0x00B950   1B 01 01 00   Call                r1, r1, 0      r1 = #9265F983755147F4()
007A   0x00B958   2D 7C 00 00   Branch              007C           => L_10
L_9:
007B   0x00B960   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
L_10:
007C   0x00B968   43 00 01 00   Move                r0, r1         r0 = r1 [0]
007D   0x00B970   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x00B978    POINTER <darray-count>
0001   0x00B980    POINTER <get-symbol>
0002   0x00B988    SID <#FDC4C8C377BAE464>
0003   0x00B990    SID <self>
0004   0x00B998    POINTER <is-final-build?>
0005   0x00B9A0    POINTER <display>
0006   0x00B9A8    POINTER <#5445173390656D6D>
0007   0x00B9B0    POINTER <#00000282BF02688C>
0008   0x00B9B8    POINTER <#00000282BF025EFC>
0009   0x00B9C0    POINTER <darray-copy-into>
000A   0x00B9C8    SID <#3CD186F47CCAE6B1>
000B   0x00B9D0    SID <#F14ED4EDE9DDEA26>
000C   0x00B9D8    SID <#AE606DDB7F18D76F>
000D   0x00B9E0    POINTER <#00000282BF02684D>
000E   0x00B9E8    POINTER <#9265F983755147F4>
0000   0x019478   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <get-boolean>
0001   0x019480   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#41BF7ED9363E5B7E>
0002   0x019488   4A 02 02 00   LoadStaticU64Imm    r2, 2          r2 = ST[2] -> <self>
0003   0x019490   43 31 01 00   Move                r49, r1        r49 = r1 [#41BF7ED9363E5B7E]
0004   0x019498   43 32 02 00   Move                r50, r2        r50 = r2 [self]
0005   0x0194A0   1C 00 00 02   CallFf              r0, r0, 2      r0 = get-boolean(#41BF7ED9363E5B7E, self)
0006   0x0194A8   2F 1F 00 00   BranchIfNot         r0, 001F       IF NOT r0 [get-boolean()] => L_0
0007   0x0194B0   15 00 03 00   LookupPointer       r0, 3          r0 = ST[3] -> <is-final-build?>
0008   0x0194B8   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0009   0x0194C0   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
000A   0x0194C8   2F 17 00 00   BranchIfNot         r0, 0017       IF NOT r0 [0x6620ACB7] => L_1
000B   0x0194D0   15 00 04 00   LookupPointer       r0, 4          r0 = ST[4] -> <display>
000C   0x0194D8   15 01 05 00   LookupPointer       r1, 5          r1 = ST[5] -> <#5445173390656D6D>
000D   0x0194E0   41 02 06 00   LoadStaticPointerImmr2, 6          r2 = ST[6] -> <0xBF02672C>
000E   0x0194E8   41 03 07 00   LoadStaticPointerImmr3, 7          r3 = ST[7] -> <0xBF025EFC>
000F   0x0194F0   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF02672C]
0010   0x0194F8   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
0011   0x019500   1C 01 01 02   CallFf              r1, r1, 2      r1 = #5445173390656D6D(0xBF02672C, 0xBF025EFC)
0012   0x019508   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
0013   0x019510   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
0014   0x019518   43 32 02 00   Move                r50, r2        r50 = r2 [19]
0015   0x019520   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
0016   0x019528   2D 18 00 00   Branch              0018           => L_2
L_1:
0017   0x019530   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_2:
0018   0x019538   15 00 08 00   LookupPointer       r0, 8          r0 = ST[8] -> <go>
0019   0x019540   4A 01 09 00   LoadStaticU64Imm    r1, 9          r1 = ST[9] -> <done>
001A   0x019548   0C 02 01 00   LoadU16Imm          r2, 1          r2 = 1
001B   0x019550   43 31 01 00   Move                r49, r1        r49 = r1 [done]
001C   0x019558   43 32 02 00   Move                r50, r2        r50 = r2 [1]
001D   0x019560   1C 00 00 02   CallFf              r0, r0, 2      r0 = go(done, 1)
001E   0x019568   2D 20 00 00   Branch              0020           => L_RETURN
L_0:
001F   0x019570   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
0020   0x019578   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x019580    POINTER <get-boolean>
0001   0x019588    SID <#41BF7ED9363E5B7E>
0002   0x019590    SID <self>
0003   0x019598    POINTER <is-final-build?>
0004   0x0195A0    POINTER <display>
0005   0x0195A8    POINTER <#5445173390656D6D>
0006   0x0195B0    POINTER <#00000282BF02672C>
0007   0x0195B8    POINTER <#00000282BF025EFC>
0008   0x0195C0    POINTER <go>
0009   0x0195C8    SID <done>
0000   0x00FB70   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <darray-count>
0001   0x00FB78   15 01 01 00   LookupPointer       r1, 1          r1 = ST[1] -> <get-symbol>
0002   0x00FB80   4A 02 02 00   LoadStaticU64Imm    r2, 2          r2 = ST[2] -> <#95B0EBA52417EDE3>
0003   0x00FB88   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
0004   0x00FB90   43 31 02 00   Move                r49, r2        r49 = r2 [#95B0EBA52417EDE3]
0005   0x00FB98   43 32 03 00   Move                r50, r3        r50 = r3 [self]
0006   0x00FBA0   1C 01 01 02   CallFf              r1, r1, 2      r1 = get-symbol(#95B0EBA52417EDE3, self)
0007   0x00FBA8   43 31 01 00   Move                r49, r1        r49 = r1 [get-symbol()]
0008   0x00FBB0   1C 00 00 01   CallFf              r0, r0, 1      r0 = darray-count(get-symbol())
0009   0x00FBB8   15 01 04 00   LookupPointer       r1, 4          r1 = ST[4] -> <get-int32>
000A   0x00FBC0   4A 02 05 00   LoadStaticU64Imm    r2, 5          r2 = ST[5] -> <num-waves>
000B   0x00FBC8   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
000C   0x00FBD0   43 31 02 00   Move                r49, r2        r49 = r2 [num-waves]
000D   0x00FBD8   43 32 03 00   Move                r50, r3        r50 = r3 [self]
000E   0x00FBE0   1C 01 01 02   CallFf              r1, r1, 2      r1 = get-int32(num-waves, self)
000F   0x00FBE8   1F 00 00 01   IGreaterThanEqual   r0, r0, r1     r0 = r0 [1753163009] >= r1 [-635293406]
0010   0x00FBF0   2F 29 00 00   BranchIfNot         r0, 0029       IF NOT r0 [0x687F2501] => L_0
0011   0x00FBF8   15 00 06 00   LookupPointer       r0, 6          r0 = ST[6] -> <is-final-build?>
0012   0x00FC00   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0013   0x00FC08   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0014   0x00FC10   2F 21 00 00   BranchIfNot         r0, 0021       IF NOT r0 [0x6620ACB7] => L_1
0015   0x00FC18   15 00 07 00   LookupPointer       r0, 7          r0 = ST[7] -> <display>
0016   0x00FC20   15 01 08 00   LookupPointer       r1, 8          r1 = ST[8] -> <#5445173390656D6D>
0017   0x00FC28   41 02 09 00   LoadStaticPointerImmr2, 9          r2 = ST[9] -> <0xBF0265B0>
0018   0x00FC30   41 03 0A 00   LoadStaticPointerImmr3, 10         r3 = ST[10] -> <0xBF025EFC>
0019   0x00FC38   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF0265B0]
001A   0x00FC40   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
001B   0x00FC48   1C 01 01 02   CallFf              r1, r1, 2      r1 = #5445173390656D6D(0xBF0265B0, 0xBF025EFC)
001C   0x00FC50   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
001D   0x00FC58   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
001E   0x00FC60   43 32 02 00   Move                r50, r2        r50 = r2 [19]
001F   0x00FC68   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
0020   0x00FC70   2D 22 00 00   Branch              0022           => L_2
L_1:
0021   0x00FC78   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_2:
0022   0x00FC80   15 00 0B 00   LookupPointer       r0, 11         r0 = ST[11] -> <go>
0023   0x00FC88   4A 01 0C 00   LoadStaticU64Imm    r1, 12         r1 = ST[12] -> <done>
0024   0x00FC90   0C 02 01 00   LoadU16Imm          r2, 1          r2 = 1
0025   0x00FC98   43 31 01 00   Move                r49, r1        r49 = r1 [done]
0026   0x00FCA0   43 32 02 00   Move                r50, r2        r50 = r2 [1]
0027   0x00FCA8   1C 00 00 02   CallFf              r0, r0, 2      r0 = go(done, 1)
0028   0x00FCB0   2D 2A 00 00   Branch              002A           => L_RETURN
L_0:
0029   0x00FCB8   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
002A   0x00FCC0   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x00FCC8    POINTER <darray-count>
0001   0x00FCD0    POINTER <get-symbol>
0002   0x00FCD8    SID <#95B0EBA52417EDE3>
0003   0x00FCE0    SID <self>
0004   0x00FCE8    POINTER <get-int32>
0005   0x00FCF0    SID <num-waves>
0006   0x00FCF8    POINTER <is-final-build?>
0007   0x00FD00    POINTER <display>
0008   0x00FD08    POINTER <#5445173390656D6D>
0009   0x00FD10    POINTER <#00000282BF0265B0>
000A   0x00FD18    POINTER <#00000282BF025EFC>
000B   0x00FD20    POINTER <go>
000C   0x00FD28    SID <done>
0000   0x00A640   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <tag-boolean>
0001   0x00A648   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#B86421EE6866D08D>
0002   0x00A650   4A 02 02 00   LoadStaticU64Imm    r2, 2          r2 = ST[2] -> <self>
0003   0x00A658   43 31 01 00   Move                r49, r1        r49 = r1 [#B86421EE6866D08D]
0004   0x00A660   43 32 02 00   Move                r50, r2        r50 = r2 [self]
0005   0x00A668   1C 00 00 02   CallFf              r0, r0, 2      r0 = tag-boolean(#B86421EE6866D08D, self)
0006   0x00A670   2F 41 00 00   BranchIfNot         r0, 0041       IF NOT r0 [tag-boolean()] => L_0
0007   0x00A678   15 00 03 00   LookupPointer       r0, 3          r0 = ST[3] -> <is-final-build?>
0008   0x00A680   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0009   0x00A688   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
000A   0x00A690   2F 17 00 00   BranchIfNot         r0, 0017       IF NOT r0 [0x6620ACB7] => L_1
000B   0x00A698   15 00 04 00   LookupPointer       r0, 4          r0 = ST[4] -> <display>
000C   0x00A6A0   15 01 05 00   LookupPointer       r1, 5          r1 = ST[5] -> <#5445173390656D6D>
000D   0x00A6A8   41 02 06 00   LoadStaticPointerImmr2, 6          r2 = ST[6] -> <0xBF0268F2>
000E   0x00A6B0   41 03 07 00   LoadStaticPointerImmr3, 7          r3 = ST[7] -> <0xBF025EFC>
000F   0x00A6B8   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF0268F2]
0010   0x00A6C0   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
0011   0x00A6C8   1C 01 01 02   CallFf              r1, r1, 2      r1 = #5445173390656D6D(0xBF0268F2, 0xBF025EFC)
0012   0x00A6D0   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
0013   0x00A6D8   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
0014   0x00A6E0   43 32 02 00   Move                r50, r2        r50 = r2 [19]
0015   0x00A6E8   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
0016   0x00A6F0   2D 18 00 00   Branch              0018           => L_2
L_1:
0017   0x00A6F8   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_2:
0018   0x00A700   15 00 03 00   LookupPointer       r0, 3          r0 = ST[3] -> <is-final-build?>
0019   0x00A708   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
001A   0x00A710   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
001B   0x00A718   2F 28 00 00   BranchIfNot         r0, 0028       IF NOT r0 [0x6620ACB7] => L_3
001C   0x00A720   15 00 04 00   LookupPointer       r0, 4          r0 = ST[4] -> <display>
001D   0x00A728   15 01 05 00   LookupPointer       r1, 5          r1 = ST[5] -> <#5445173390656D6D>
001E   0x00A730   41 02 08 00   LoadStaticPointerImmr2, 8          r2 = ST[8] -> <0xBF026AF5>
001F   0x00A738   41 03 07 00   LoadStaticPointerImmr3, 7          r3 = ST[7] -> <0xBF025EFC>
0020   0x00A740   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF026AF5]
0021   0x00A748   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
0022   0x00A750   1C 01 01 02   CallFf              r1, r1, 2      r1 = #5445173390656D6D(0xBF026AF5, 0xBF025EFC)
0023   0x00A758   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
0024   0x00A760   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
0025   0x00A768   43 32 02 00   Move                r50, r2        r50 = r2 [19]
0026   0x00A770   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
0027   0x00A778   2D 29 00 00   Branch              0029           => L_4
L_3:
0028   0x00A780   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_4:
0029   0x00A788   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
002A   0x00A790   15 01 09 00   LookupPointer       r1, 9          r1 = ST[9] -> <get-boolean>
002B   0x00A798   4A 02 0A 00   LoadStaticU64Imm    r2, 10         r2 = ST[10] -> <#BE1B99861A282419>
002C   0x00A7A0   4A 03 02 00   LoadStaticU64Imm    r3, 2          r3 = ST[2] -> <self>
002D   0x00A7A8   43 31 02 00   Move                r49, r2        r49 = r2 [#BE1B99861A282419]
002E   0x00A7B0   43 32 03 00   Move                r50, r3        r50 = r3 [self]
002F   0x00A7B8   1C 01 01 02   CallFf              r1, r1, 2      r1 = get-boolean(#BE1B99861A282419, self)
0030   0x00A7C0   1D 00 00 01   IEqual              r0, r0, r1     r0 = r0 [0] == r1 [-62108282]
0031   0x00A7C8   2E 3A 00 00   BranchIf            r0, 003A       IF r0 [0x0] => L_5
0032   0x00A7D0   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
0033   0x00A7D8   15 01 09 00   LookupPointer       r1, 9          r1 = ST[9] -> <get-boolean>
0034   0x00A7E0   4A 02 0B 00   LoadStaticU64Imm    r2, 11         r2 = ST[11] -> <#031D4F1C6B501E2B>
0035   0x00A7E8   4A 03 02 00   LoadStaticU64Imm    r3, 2          r3 = ST[2] -> <self>
0036   0x00A7F0   43 31 02 00   Move                r49, r2        r49 = r2 [#031D4F1C6B501E2B]
0037   0x00A7F8   43 32 03 00   Move                r50, r3        r50 = r3 [self]
0038   0x00A800   1C 01 01 02   CallFf              r1, r1, 2      r1 = get-boolean(#031D4F1C6B501E2B, self)
0039   0x00A808   1D 00 00 01   IEqual              r0, r0, r1     r0 = r0 [0] == r1 [-62108282]
L_5:
003A   0x00A810   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
003B   0x00A818   2F 3F 00 00   BranchIfNot         r0, 003F       IF NOT r0 [0x1] => L_6
003C   0x00A820   15 00 0C 00   LookupPointer       r0, 12         r0 = ST[12] -> <wait-one-frame>
003D   0x00A828   1C 00 00 00   CallFf              r0, r0, 0      r0 = wait-one-frame()
003E   0x00A830   2D 29 00 00   Branch              0029           => L_4
L_6:
003F   0x00A838   0C 00 01 00   LoadU16Imm          r0, 1          r0 = 1
0040   0x00A840   2D D3 00 00   Branch              00D3           => L_RETURN
L_0:
0041   0x00A848   15 00 03 00   LookupPointer       r0, 3          r0 = ST[3] -> <is-final-build?>
0042   0x00A850   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0043   0x00A858   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0044   0x00A860   2F 51 00 00   BranchIfNot         r0, 0051       IF NOT r0 [0x6620ACB7] => L_8
0045   0x00A868   15 00 04 00   LookupPointer       r0, 4          r0 = ST[4] -> <display>
0046   0x00A870   15 01 05 00   LookupPointer       r1, 5          r1 = ST[5] -> <#5445173390656D6D>
0047   0x00A878   41 02 0D 00   LoadStaticPointerImmr2, 13         r2 = ST[13] -> <0xBF02653C>
0048   0x00A880   41 03 07 00   LoadStaticPointerImmr3, 7          r3 = ST[7] -> <0xBF025EFC>
0049   0x00A888   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF02653C]
004A   0x00A890   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
004B   0x00A898   1C 01 01 02   CallFf              r1, r1, 2      r1 = #5445173390656D6D(0xBF02653C, 0xBF025EFC)
004C   0x00A8A0   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
004D   0x00A8A8   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
004E   0x00A8B0   43 32 02 00   Move                r50, r2        r50 = r2 [19]
004F   0x00A8B8   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
0050   0x00A8C0   2D 52 00 00   Branch              0052           => L_9
L_8:
0051   0x00A8C8   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_9:
0052   0x00A8D0   15 00 03 00   LookupPointer       r0, 3          r0 = ST[3] -> <is-final-build?>
0053   0x00A8D8   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0054   0x00A8E0   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0055   0x00A8E8   2F 62 00 00   BranchIfNot         r0, 0062       IF NOT r0 [0x6620ACB7] => L_10
0056   0x00A8F0   15 00 04 00   LookupPointer       r0, 4          r0 = ST[4] -> <display>
0057   0x00A8F8   15 01 05 00   LookupPointer       r1, 5          r1 = ST[5] -> <#5445173390656D6D>
0058   0x00A900   41 02 0E 00   LoadStaticPointerImmr2, 14         r2 = ST[14] -> <0xBF026AC3>
0059   0x00A908   41 03 07 00   LoadStaticPointerImmr3, 7          r3 = ST[7] -> <0xBF025EFC>
005A   0x00A910   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF026AC3]
005B   0x00A918   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
005C   0x00A920   1C 01 01 02   CallFf              r1, r1, 2      r1 = #5445173390656D6D(0xBF026AC3, 0xBF025EFC)
005D   0x00A928   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
005E   0x00A930   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
005F   0x00A938   43 32 02 00   Move                r50, r2        r50 = r2 [19]
0060   0x00A940   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
0061   0x00A948   2D 63 00 00   Branch              0063           => L_11
L_10:
0062   0x00A950   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_11:
0063   0x00A958   15 00 0F 00   LookupPointer       r0, 15         r0 = ST[15] -> <get-svar>
0064   0x00A960   4A 01 10 00   LoadStaticU64Imm    r1, 16         r1 = ST[16] -> <#B588F9BE19063DAC>
0065   0x00A968   43 31 01 00   Move                r49, r1        r49 = r1 [#B588F9BE19063DAC]
0066   0x00A970   1B 00 00 01   Call                r0, r0, 1      r0 = get-svar(#B588F9BE19063DAC)
0067   0x00A978   3F 01 11 00   LoadStaticI32Imm    r1, 17         r1 = ST[17] -> <-1>
0068   0x00A980   1E 00 00 01   IGreaterThan        r0, r0, r1     r0 = r0 [-547918079] > r1 [-1]
0069   0x00A988   2F 70 00 00   BranchIfNot         r0, 0070       IF NOT r0 [0xDF576F01] => L_12
006A   0x00A990   15 00 0F 00   LookupPointer       r0, 15         r0 = ST[15] -> <get-svar>
006B   0x00A998   4A 01 10 00   LoadStaticU64Imm    r1, 16         r1 = ST[16] -> <#B588F9BE19063DAC>
006C   0x00A9A0   43 31 01 00   Move                r49, r1        r49 = r1 [#B588F9BE19063DAC]
006D   0x00A9A8   1B 00 00 01   Call                r0, r0, 1      r0 = get-svar(#B588F9BE19063DAC)
006E   0x00A9B0   0C 01 04 00   LoadU16Imm          r1, 4          r1 = 4
006F   0x00A9B8   20 00 00 01   ILessThan           r0, r0, r1     r0 = r0 [-547918079] < r1 [4]
L_12:
0070   0x00A9C0   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <FALSE>
0071   0x00A9C8   2F 75 00 00   BranchIfNot         r0, 0075       IF NOT r0 [0xDF576F00] => L_13
0072   0x00A9D0   15 00 0C 00   LookupPointer       r0, 12         r0 = ST[12] -> <wait-one-frame>
0073   0x00A9D8   1C 00 00 00   CallFf              r0, r0, 0      r0 = wait-one-frame()
0074   0x00A9E0   2D 63 00 00   Branch              0063           => L_11
L_13:
0075   0x00A9E8   15 00 03 00   LookupPointer       r0, 3          r0 = ST[3] -> <is-final-build?>
0076   0x00A9F0   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0077   0x00A9F8   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0078   0x00AA00   2F 85 00 00   BranchIfNot         r0, 0085       IF NOT r0 [0x6620ACB7] => L_14
0079   0x00AA08   15 00 04 00   LookupPointer       r0, 4          r0 = ST[4] -> <display>
007A   0x00AA10   15 01 05 00   LookupPointer       r1, 5          r1 = ST[5] -> <#5445173390656D6D>
007B   0x00AA18   41 02 12 00   LoadStaticPointerImmr2, 18         r2 = ST[18] -> <0xBF026A6C>
007C   0x00AA20   41 03 07 00   LoadStaticPointerImmr3, 7          r3 = ST[7] -> <0xBF025EFC>
007D   0x00AA28   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF026A6C]
007E   0x00AA30   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
007F   0x00AA38   1C 01 01 02   CallFf              r1, r1, 2      r1 = #5445173390656D6D(0xBF026A6C, 0xBF025EFC)
0080   0x00AA40   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
0081   0x00AA48   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
0082   0x00AA50   43 32 02 00   Move                r50, r2        r50 = r2 [19]
0083   0x00AA58   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
0084   0x00AA60   2D 86 00 00   Branch              0086           => L_15
L_14:
0085   0x00AA68   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_15:
0086   0x00AA70   15 00 13 00   LookupPointer       r0, 19         r0 = ST[19] -> <is-level-set-loaded?>
0087   0x00AA78   4A 01 14 00   LoadStaticU64Imm    r1, 20         r1 = ST[20] -> <t2r-lvl-wave-manager-enemy-npcs>
0088   0x00AA80   43 31 01 00   Move                r49, r1        r49 = r1 [t2r-lvl-wave-manager-enemy-npcs]
0089   0x00AA88   1C 00 00 01   CallFf              r0, r0, 1      r0 = is-level-set-loaded?(t2r-lvl-wave-manager-enemy-npcs)
008A   0x00AA90   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
008B   0x00AA98   2F 8F 00 00   BranchIfNot         r0, 008F       IF NOT r0 [0x39B384B9] => L_16
008C   0x00AAA0   15 00 0C 00   LookupPointer       r0, 12         r0 = ST[12] -> <wait-one-frame>
008D   0x00AAA8   1C 00 00 00   CallFf              r0, r0, 0      r0 = wait-one-frame()
008E   0x00AAB0   2D 86 00 00   Branch              0086           => L_15
L_16:
008F   0x00AAB8   15 00 0C 00   LookupPointer       r0, 12         r0 = ST[12] -> <wait-one-frame>
0090   0x00AAC0   1C 00 00 00   CallFf              r0, r0, 0      r0 = wait-one-frame()
0091   0x00AAC8   15 00 03 00   LookupPointer       r0, 3          r0 = ST[3] -> <is-final-build?>
0092   0x00AAD0   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0093   0x00AAD8   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0094   0x00AAE0   2F A1 00 00   BranchIfNot         r0, 00A1       IF NOT r0 [0x6620ACB7] => L_17
0095   0x00AAE8   15 00 04 00   LookupPointer       r0, 4          r0 = ST[4] -> <display>
0096   0x00AAF0   15 01 05 00   LookupPointer       r1, 5          r1 = ST[5] -> <#5445173390656D6D>
0097   0x00AAF8   41 02 15 00   LoadStaticPointerImmr2, 21         r2 = ST[21] -> <0xBF026A08>
0098   0x00AB00   41 03 07 00   LoadStaticPointerImmr3, 7          r3 = ST[7] -> <0xBF025EFC>
0099   0x00AB08   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF026A08]
009A   0x00AB10   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
009B   0x00AB18   1C 01 01 02   CallFf              r1, r1, 2      r1 = #5445173390656D6D(0xBF026A08, 0xBF025EFC)
009C   0x00AB20   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
009D   0x00AB28   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
009E   0x00AB30   43 32 02 00   Move                r50, r2        r50 = r2 [19]
009F   0x00AB38   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
00A0   0x00AB40   2D A2 00 00   Branch              00A2           => L_18
L_17:
00A1   0x00AB48   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_18:
00A2   0x00AB50   15 00 16 00   LookupPointer       r0, 22         r0 = ST[22] -> <npc-group-alive-count>
00A3   0x00AB58   4A 01 17 00   LoadStaticU64Imm    r1, 23         r1 = ST[23] -> <#88F409F4BF0F056A>
00A4   0x00AB60   43 31 01 00   Move                r49, r1        r49 = r1 [#88F409F4BF0F056A]
00A5   0x00AB68   1C 00 00 01   CallFf              r0, r0, 1      r0 = npc-group-alive-count(#88F409F4BF0F056A)
00A6   0x00AB70   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
00A7   0x00AB78   21 00 00 01   ILessThanEqual      r0, r0, r1     r0 = r0 [-143247360] <= r1 [0]
00A8   0x00AB80   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
00A9   0x00AB88   2F AD 00 00   BranchIfNot         r0, 00AD       IF NOT r0 [0xF7763801] => L_19
00AA   0x00AB90   15 00 0C 00   LookupPointer       r0, 12         r0 = ST[12] -> <wait-one-frame>
00AB   0x00AB98   1C 00 00 00   CallFf              r0, r0, 0      r0 = wait-one-frame()
00AC   0x00ABA0   2D A2 00 00   Branch              00A2           => L_18
L_19:
00AD   0x00ABA8   15 00 03 00   LookupPointer       r0, 3          r0 = ST[3] -> <is-final-build?>
00AE   0x00ABB0   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
00AF   0x00ABB8   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
00B0   0x00ABC0   2F BD 00 00   BranchIfNot         r0, 00BD       IF NOT r0 [0x6620ACB7] => L_20
00B1   0x00ABC8   15 00 04 00   LookupPointer       r0, 4          r0 = ST[4] -> <display>
00B2   0x00ABD0   15 01 05 00   LookupPointer       r1, 5          r1 = ST[5] -> <#5445173390656D6D>
00B3   0x00ABD8   41 02 18 00   LoadStaticPointerImmr2, 24         r2 = ST[24] -> <0xBF026A3F>
00B4   0x00ABE0   41 03 07 00   LoadStaticPointerImmr3, 7          r3 = ST[7] -> <0xBF025EFC>
00B5   0x00ABE8   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF026A3F]
00B6   0x00ABF0   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
00B7   0x00ABF8   1C 01 01 02   CallFf              r1, r1, 2      r1 = #5445173390656D6D(0xBF026A3F, 0xBF025EFC)
00B8   0x00AC00   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
00B9   0x00AC08   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
00BA   0x00AC10   43 32 02 00   Move                r50, r2        r50 = r2 [19]
00BB   0x00AC18   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
00BC   0x00AC20   2D BE 00 00   Branch              00BE           => L_21
L_20:
00BD   0x00AC28   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_21:
00BE   0x00AC30   15 00 19 00   LookupPointer       r0, 25         r0 = ST[25] -> <wait>
00BF   0x00AC38   40 01 1A 00   LoadStaticFloatImm  r1, 26         r1 = ST[26] -> <7.00>
00C0   0x00AC40   43 31 01 00   Move                r49, r1        r49 = r1 [0x40E00000]
00C1   0x00AC48   1C 00 00 01   CallFf              r0, r0, 1      r0 = wait(0x40E00000)
00C2   0x00AC50   15 00 1B 00   LookupPointer       r0, 27         r0 = ST[27] -> <set-boolean>
00C3   0x00AC58   4A 01 0A 00   LoadStaticU64Imm    r1, 10         r1 = ST[10] -> <#BE1B99861A282419>
00C4   0x00AC60   0C 02 00 00   LoadU16Imm          r2, 0          r2 = 0
00C5   0x00AC68   4A 03 02 00   LoadStaticU64Imm    r3, 2          r3 = ST[2] -> <self>
00C6   0x00AC70   43 31 01 00   Move                r49, r1        r49 = r1 [#BE1B99861A282419]
00C7   0x00AC78   43 32 02 00   Move                r50, r2        r50 = r2 [0]
00C8   0x00AC80   43 33 03 00   Move                r51, r3        r51 = r3 [self]
00C9   0x00AC88   1C 00 00 03   CallFf              r0, r0, 3      r0 = set-boolean(#BE1B99861A282419, 0, self)
00CA   0x00AC90   15 00 1B 00   LookupPointer       r0, 27         r0 = ST[27] -> <set-boolean>
00CB   0x00AC98   4A 01 0B 00   LoadStaticU64Imm    r1, 11         r1 = ST[11] -> <#031D4F1C6B501E2B>
00CC   0x00ACA0   0C 02 01 00   LoadU16Imm          r2, 1          r2 = 1
00CD   0x00ACA8   4A 03 02 00   LoadStaticU64Imm    r3, 2          r3 = ST[2] -> <self>
00CE   0x00ACB0   43 31 01 00   Move                r49, r1        r49 = r1 [#031D4F1C6B501E2B]
00CF   0x00ACB8   43 32 02 00   Move                r50, r2        r50 = r2 [1]
00D0   0x00ACC0   43 33 03 00   Move                r51, r3        r51 = r3 [self]
00D1   0x00ACC8   1C 00 00 03   CallFf              r0, r0, 3      r0 = set-boolean(#031D4F1C6B501E2B, 1, self)
00D2   0x00ACD0   0C 00 01 00   LoadU16Imm          r0, 1          r0 = 1
L_RETURN:
00D3   0x00ACD8   00 00 00 00   Return              r0             Return 1
SYMBOL TABLE: 
0000   0x00ACE0    POINTER <tag-boolean>
0001   0x00ACE8    SID <#B86421EE6866D08D>
0002   0x00ACF0    SID <self>
0003   0x00ACF8    POINTER <is-final-build?>
0004   0x00AD00    POINTER <display>
0005   0x00AD08    POINTER <#5445173390656D6D>
0006   0x00AD10    POINTER <#00000282BF0268F2>
0007   0x00AD18    POINTER <#00000282BF025EFC>
0008   0x00AD20    POINTER <#00000282BF026AF5>
0009   0x00AD28    POINTER <get-boolean>
000A   0x00AD30    SID <#BE1B99861A282419>
000B   0x00AD38    SID <#031D4F1C6B501E2B>
000C   0x00AD40    POINTER <wait-one-frame>
000D   0x00AD48    POINTER <#00000282BF02653C>
000E   0x00AD50    POINTER <#00000282BF026AC3>
000F   0x00AD58    POINTER <get-svar>
0010   0x00AD60    SID <#B588F9BE19063DAC>
0011   0x00AD68    INT <-1>
0012   0x00AD70    POINTER <#00000282BF026A6C>
0013   0x00AD78    POINTER <is-level-set-loaded?>
0014   0x00AD80    SID <t2r-lvl-wave-manager-enemy-npcs>
0015   0x00AD88    POINTER <#00000282BF026A08>
0016   0x00AD90    POINTER <npc-group-alive-count>
0017   0x00AD98    SID <#88F409F4BF0F056A>
0018   0x00ADA0    POINTER <#00000282BF026A3F>
0019   0x00ADA8    POINTER <wait>
001A   0x00ADB0    FLOAT <7.000000>
001B   0x00ADB8    POINTER <set-boolean>
0000   0x00C398   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
0001   0x00C3A0   15 01 00 00   LookupPointer       r1, 0          r1 = ST[0] -> <get-boolean>
0002   0x00C3A8   4A 02 01 00   LoadStaticU64Imm    r2, 1          r2 = ST[1] -> <#031D4F1C6B501E2B>
0003   0x00C3B0   4A 03 02 00   LoadStaticU64Imm    r3, 2          r3 = ST[2] -> <self>
0004   0x00C3B8   43 31 02 00   Move                r49, r2        r49 = r2 [#031D4F1C6B501E2B]
0005   0x00C3C0   43 32 03 00   Move                r50, r3        r50 = r3 [self]
0006   0x00C3C8   1C 01 01 02   CallFf              r1, r1, 2      r1 = get-boolean(#031D4F1C6B501E2B, self)
0007   0x00C3D0   1D 00 00 01   IEqual              r0, r0, r1     r0 = r0 [0] == r1 [-62108282]
0008   0x00C3D8   2F 12 00 00   BranchIfNot         r0, 0012       IF NOT r0 [0x0] => L_0
0009   0x00C3E0   15 00 03 00   LookupPointer       r0, 3          r0 = ST[3] -> <set-boolean>
000A   0x00C3E8   4A 01 04 00   LoadStaticU64Imm    r1, 4          r1 = ST[4] -> <#8011CE00FED42EB7>
000B   0x00C3F0   0C 02 01 00   LoadU16Imm          r2, 1          r2 = 1
000C   0x00C3F8   4A 03 02 00   LoadStaticU64Imm    r3, 2          r3 = ST[2] -> <self>
000D   0x00C400   43 31 01 00   Move                r49, r1        r49 = r1 [#8011CE00FED42EB7]
000E   0x00C408   43 32 02 00   Move                r50, r2        r50 = r2 [1]
000F   0x00C410   43 33 03 00   Move                r51, r3        r51 = r3 [self]
0010   0x00C418   1C 00 00 03   CallFf              r0, r0, 3      r0 = set-boolean(#8011CE00FED42EB7, 1, self)
0011   0x00C420   2D 13 00 00   Branch              0013           => L_RETURN
L_0:
0012   0x00C428   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
0013   0x00C430   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x00C438    POINTER <get-boolean>
0001   0x00C440    SID <#031D4F1C6B501E2B>
0002   0x00C448    SID <self>
0003   0x00C450    POINTER <set-boolean>
0004   0x00C458    SID <#8011CE00FED42EB7>
0000   0x01EAA0   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <is-final-build?>
0001   0x01EAA8   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0002   0x01EAB0   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0003   0x01EAB8   2F 1B 00 00   BranchIfNot         r0, 001B       IF NOT r0 [0x6620ACB7] => L_0
0004   0x01EAC0   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <display>
0005   0x01EAC8   15 01 02 00   LookupPointer       r1, 2          r1 = ST[2] -> <#5445173390656D6D>
0006   0x01EAD0   41 02 03 00   LoadStaticPointerImmr2, 3          r2 = ST[3] -> <0xBF02670F>
0007   0x01EAD8   41 03 04 00   LoadStaticPointerImmr3, 4          r3 = ST[4] -> <0xBF025EFC>
0008   0x01EAE0   15 04 05 00   LookupPointer       r4, 5          r4 = ST[5] -> <get-boolean>
0009   0x01EAE8   4A 05 06 00   LoadStaticU64Imm    r5, 6          r5 = ST[6] -> <#8011CE00FED42EB7>
000A   0x01EAF0   4A 06 07 00   LoadStaticU64Imm    r6, 7          r6 = ST[7] -> <self>
000B   0x01EAF8   43 31 05 00   Move                r49, r5        r49 = r5 [#8011CE00FED42EB7]
000C   0x01EB00   43 32 06 00   Move                r50, r6        r50 = r6 [self]
000D   0x01EB08   1C 04 04 02   CallFf              r4, r4, 2      r4 = get-boolean(#8011CE00FED42EB7, self)
000E   0x01EB10   2F 11 04 00   BranchIfNot         r4, 0011       IF NOT r4 [get-boolean()] => L_1
000F   0x01EB18   41 04 08 00   LoadStaticPointerImmr4, 8          r4 = ST[8] -> <0xBF0277BC>
0010   0x01EB20   2D 12 00 00   Branch              0012           => L_2
L_1:
0011   0x01EB28   41 04 09 00   LoadStaticPointerImmr4, 9          r4 = ST[9] -> <0xBF027BF9>
L_2:
0012   0x01EB30   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF02670F]
0013   0x01EB38   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
0014   0x01EB40   43 33 04 00   Move                r51, r4        r51 = r4 [0xBF027BF9]
0015   0x01EB48   1C 01 01 03   CallFf              r1, r1, 3      r1 = #5445173390656D6D(0xBF02670F, 0xBF025EFC, 0xBF027BF9)
0016   0x01EB50   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
0017   0x01EB58   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
0018   0x01EB60   43 32 02 00   Move                r50, r2        r50 = r2 [19]
0019   0x01EB68   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
001A   0x01EB70   2D 1C 00 00   Branch              001C           => L_RETURN
L_0:
001B   0x01EB78   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
001C   0x01EB80   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x01EB88    POINTER <is-final-build?>
0001   0x01EB90    POINTER <display>
0002   0x01EB98    POINTER <#5445173390656D6D>
0003   0x01EBA0    POINTER <#00000282BF02670F>
0004   0x01EBA8    POINTER <#00000282BF025EFC>
0005   0x01EBB0    POINTER <get-boolean>
0006   0x01EBB8    SID <#8011CE00FED42EB7>
0007   0x01EBC0    SID <self>
0008   0x01EBC8    POINTER <#00000282BF0277BC>
0009   0x01EBD0    POINTER <#00000282BF027BF9>
0000   0x014018   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <go>
0001   0x014020   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <select-wave-npcs>
0002   0x014028   0C 02 01 00   LoadU16Imm          r2, 1          r2 = 1
0003   0x014030   43 31 01 00   Move                r49, r1        r49 = r1 [select-wave-npcs]
0004   0x014038   43 32 02 00   Move                r50, r2        r50 = r2 [1]
0005   0x014040   1C 00 00 02   CallFf              r0, r0, 2      r0 = go(select-wave-npcs, 1)
0006   0x014048   00 00 00 00   Return              r0             Return go()
SYMBOL TABLE: 
0000   0x014050    POINTER <go>
0001   0x014058    SID <select-wave-npcs>
      STATE select-wave-npcs:
         ON start
          TRACK main:
0000   0x015598   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <is-final-build?>
0001   0x0155A0   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0002   0x0155A8   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0003   0x0155B0   2F 0E 00 00   BranchIfNot         r0, 000E       IF NOT r0 [0x6620ACB7] => L_0
0004   0x0155B8   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <display>
0005   0x0155C0   15 01 02 00   LookupPointer       r1, 2          r1 = ST[2] -> <#5445173390656D6D>
0006   0x0155C8   41 02 03 00   LoadStaticPointerImmr2, 3          r2 = ST[3] -> <0xBF0270AF>
0007   0x0155D0   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF0270AF]
0008   0x0155D8   1C 01 01 01   CallFf              r1, r1, 1      r1 = #5445173390656D6D(0xBF0270AF)
0009   0x0155E0   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
000A   0x0155E8   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
000B   0x0155F0   43 32 02 00   Move                r50, r2        r50 = r2 [19]
000C   0x0155F8   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
000D   0x015600   2D 0F 00 00   Branch              000F           => L_RETURN
L_0:
000E   0x015608   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
000F   0x015610   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x015618    POINTER <is-final-build?>
0001   0x015620    POINTER <display>
0002   0x015628    POINTER <#5445173390656D6D>
0003   0x015630    POINTER <#00000282BF0270AF>
0000   0x00AE78   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <is-final-build?>
0001   0x00AE80   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0002   0x00AE88   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0003   0x00AE90   2F 1A 00 00   BranchIfNot         r0, 001A       IF NOT r0 [0x6620ACB7] => L_0
0004   0x00AE98   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <display>
0005   0x00AEA0   15 01 02 00   LookupPointer       r1, 2          r1 = ST[2] -> <#5445173390656D6D>
0006   0x00AEA8   41 02 03 00   LoadStaticPointerImmr2, 3          r2 = ST[3] -> <0xBF02642C>
0007   0x00AEB0   41 03 04 00   LoadStaticPointerImmr3, 4          r3 = ST[4] -> <0xBF025EFC>
0008   0x00AEB8   15 04 05 00   LookupPointer       r4, 5          r4 = ST[5] -> <string-debug>
0009   0x00AEC0   15 05 06 00   LookupPointer       r5, 6          r5 = ST[6] -> <get-symbol>
000A   0x00AEC8   4A 06 07 00   LoadStaticU64Imm    r6, 7          r6 = ST[7] -> <#7F25A075B1A9E239>
000B   0x00AED0   4A 07 08 00   LoadStaticU64Imm    r7, 8          r7 = ST[8] -> <self>
000C   0x00AED8   43 31 06 00   Move                r49, r6        r49 = r6 [#7F25A075B1A9E239]
000D   0x00AEE0   43 32 07 00   Move                r50, r7        r50 = r7 [self]
000E   0x00AEE8   1C 05 05 02   CallFf              r5, r5, 2      r5 = get-symbol(#7F25A075B1A9E239, self)
000F   0x00AEF0   43 31 05 00   Move                r49, r5        r49 = r5 [get-symbol()]
0010   0x00AEF8   1C 04 04 01   CallFf              r4, r4, 1      r4 = string-debug(get-symbol())
0011   0x00AF00   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF02642C]
0012   0x00AF08   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
0013   0x00AF10   43 33 04 00   Move                r51, r4        r51 = r4 [string-debug()]
0014   0x00AF18   1C 01 01 03   CallFf              r1, r1, 3      r1 = #5445173390656D6D(0xBF02642C, 0xBF025EFC, string-debug())
0015   0x00AF20   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
0016   0x00AF28   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
0017   0x00AF30   43 32 02 00   Move                r50, r2        r50 = r2 [19]
0018   0x00AF38   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
0019   0x00AF40   2D 1B 00 00   Branch              001B           => L_RETURN
L_0:
001A   0x00AF48   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
001B   0x00AF50   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x00AF58    POINTER <is-final-build?>
0001   0x00AF60    POINTER <display>
0002   0x00AF68    POINTER <#5445173390656D6D>
0003   0x00AF70    POINTER <#00000282BF02642C>
0004   0x00AF78    POINTER <#00000282BF025EFC>
0005   0x00AF80    POINTER <string-debug>
0006   0x00AF88    POINTER <get-symbol>
0007   0x00AF90    SID <#7F25A075B1A9E239>
0008   0x00AF98    SID <self>
0000   0x00EBB8   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <get-symbol>
0001   0x00EBC0   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#84335FAD5E97BB40>
0002   0x00EBC8   4A 02 02 00   LoadStaticU64Imm    r2, 2          r2 = ST[2] -> <self>
0003   0x00EBD0   43 31 01 00   Move                r49, r1        r49 = r1 [#84335FAD5E97BB40]
0004   0x00EBD8   43 32 02 00   Move                r50, r2        r50 = r2 [self]
0005   0x00EBE0   1C 00 00 02   CallFf              r0, r0, 2      r0 = get-symbol(#84335FAD5E97BB40, self)
0006   0x00EBE8   15 01 03 00   LookupPointer       r1, 3          r1 = ST[3] -> <get-boolean>
0007   0x00EBF0   4A 02 04 00   LoadStaticU64Imm    r2, 4          r2 = ST[4] -> <#8011CE00FED42EB7>
0008   0x00EBF8   4A 03 02 00   LoadStaticU64Imm    r3, 2          r3 = ST[2] -> <self>
0009   0x00EC00   43 31 02 00   Move                r49, r2        r49 = r2 [#8011CE00FED42EB7]
000A   0x00EC08   43 32 03 00   Move                r50, r3        r50 = r3 [self]
000B   0x00EC10   1C 01 01 02   CallFf              r1, r1, 2      r1 = get-boolean(#8011CE00FED42EB7, self)
000C   0x00EC18   43 02 01 00   Move                r2, r1         r2 = r1 [get-boolean()]
000D   0x00EC20   2F 20 02 00   BranchIfNot         r2, 0020       IF NOT r2 [get-boolean()] => L_0
000E   0x00EC28   15 02 05 00   LookupPointer       r2, 5          r2 = ST[5] -> <is-final-build?>
000F   0x00EC30   1C 02 02 00   CallFf              r2, r2, 0      r2 = is-final-build?()
0010   0x00EC38   30 02 02 00   OpLogNot            r2, r2         r2 = !r2 -> <TRUE>
0011   0x00EC40   2F 1E 02 00   BranchIfNot         r2, 001E       IF NOT r2 [0x6620ACB7] => L_1
0012   0x00EC48   15 02 06 00   LookupPointer       r2, 6          r2 = ST[6] -> <display>
0013   0x00EC50   15 03 07 00   LookupPointer       r3, 7          r3 = ST[7] -> <#5445173390656D6D>
0014   0x00EC58   41 04 08 00   LoadStaticPointerImmr4, 8          r4 = ST[8] -> <0xBF0263EB>
0015   0x00EC60   41 05 09 00   LoadStaticPointerImmr5, 9          r5 = ST[9] -> <0xBF025EFC>
0016   0x00EC68   43 31 04 00   Move                r49, r4        r49 = r4 [0xBF0263EB]
0017   0x00EC70   43 32 05 00   Move                r50, r5        r50 = r5 [0xBF025EFC]
0018   0x00EC78   1C 03 03 02   CallFf              r3, r3, 2      r3 = #5445173390656D6D(0xBF0263EB, 0xBF025EFC)
0019   0x00EC80   0C 04 13 00   LoadU16Imm          r4, 19         r4 = 19
001A   0x00EC88   43 31 03 00   Move                r49, r3        r49 = r3 [#5445173390656D6D()]
001B   0x00EC90   43 32 04 00   Move                r50, r4        r50 = r4 [19]
001C   0x00EC98   1C 02 02 02   CallFf              r2, r2, 2      r2 = display(#5445173390656D6D(), 19)
001D   0x00ECA0   2D 1F 00 00   Branch              001F           => L_2
L_1:
001E   0x00ECA8   0C 02 00 00   LoadU16Imm          r2, 0          r2 = 0
L_2:
001F   0x00ECB0   2D 21 00 00   Branch              0021           => L_3
L_0:
0020   0x00ECB8   0C 02 00 00   LoadU16Imm          r2, 0          r2 = 0
L_3:
0021   0x00ECC0   0C 02 00 00   LoadU16Imm          r2, 0          r2 = 0
L_41:
0022   0x00ECC8   43 03 02 00   Move                r3, r2         r3 = r2 [0]
0023   0x00ECD0   43 04 00 00   Move                r4, r0         r4 = r0 [get-symbol()]
0024   0x00ECD8   0C 05 08 00   LoadU16Imm          r5, 8          r5 = 8
0025   0x00ECE0   01 04 04 05   IAdd                r4, r4, r5     1774822862 = get-symbol() + 8
0026   0x00ECE8   4F 04 04 00   LoadI32             ???            UNKNOWN INSTRUCTION
0027   0x00ECF0   20 03 03 04   ILessThan           r3, r3, r4     r3 = r3 [0] < r4 [1774822862]
0028   0x00ECF8   2F 91 03 01   BranchIfNot         r3, 0191       IF NOT r3 [0x0] => L_4
0029   0x00ED00   43 03 00 00   Move                r3, r0         r3 = r0 [get-symbol]
002A   0x00ED08   0F 03 03 00   LoadPointer         r3, [r3]       r3 = [0x0 + 0x0]
002B   0x00ED10   43 04 02 00   Move                r4, r2         r4 = r2 [0]
002C   0x00ED18   3D 04 04 18   IMulImm             r4, r4, 24     r4 = r4 [0] / 24 -> <0>
002D   0x00ED20   01 03 03 04   IAdd                r3, r3, r4     0x0 = 0x0 + 0
002E   0x00ED28   43 04 03 00   Move                r4, r3         r4 = r3 [0x0]
002F   0x00ED30   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0030   0x00ED38   4F 04 04 00   LoadI32             ???            UNKNOWN INSTRUCTION
0031   0x00ED40   43 05 01 00   Move                r5, r1         r5 = r1 [get-boolean()]
0032   0x00ED48   2F 38 05 00   BranchIfNot         r5, 0038       IF NOT r5 [get-boolean()] => L_5
0033   0x00ED50   43 05 03 00   Move                r5, r3         r5 = r3 [0x0]
0034   0x00ED58   5D 05 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0035   0x00ED60   3B 05 05 10   IAddImm             r5, r5, 16     r5 = r5 [0] / 16 -> <0>
0036   0x00ED68   0F 05 05 00   LoadPointer         r5, [r5]       r5 = [0x0 + 0x0]
0037   0x00ED70   2D 3C 00 00   Branch              003C           => L_6
L_5:
0038   0x00ED78   43 05 03 00   Move                r5, r3         r5 = r3 [0x0]
0039   0x00ED80   5D 05 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
003A   0x00ED88   3B 05 05 08   IAddImm             r5, r5, 8      r5 = r5 [0] / 8 -> <0>
003B   0x00ED90   0F 05 05 00   LoadPointer         r5, [r5]       r5 = [0x0 + 0x0]
L_6:
003C   0x00ED98   43 06 01 00   Move                r6, r1         r6 = r1 [get-boolean()]
003D   0x00EDA0   2F 45 06 00   BranchIfNot         r6, 0045       IF NOT r6 [get-boolean()] => L_7
003E   0x00EDA8   15 06 00 00   LookupPointer       r6, 0          r6 = ST[0] -> <get-symbol>
003F   0x00EDB0   4A 07 0A 00   LoadStaticU64Imm    r7, 10         r7 = ST[10] -> <#813B48C382415979>
0040   0x00EDB8   4A 08 02 00   LoadStaticU64Imm    r8, 2          r8 = ST[2] -> <self>
0041   0x00EDC0   43 31 07 00   Move                r49, r7        r49 = r7 [#813B48C382415979]
0042   0x00EDC8   43 32 08 00   Move                r50, r8        r50 = r8 [self]
0043   0x00EDD0   1C 06 06 02   CallFf              r6, r6, 2      r6 = get-symbol(#813B48C382415979, self)
0044   0x00EDD8   2D 4B 00 00   Branch              004B           => L_8
L_7:
0045   0x00EDE0   15 06 00 00   LookupPointer       r6, 0          r6 = ST[0] -> <get-symbol>
0046   0x00EDE8   4A 07 0B 00   LoadStaticU64Imm    r7, 11         r7 = ST[11] -> <#95B0EBA52417EDE3>
0047   0x00EDF0   4A 08 02 00   LoadStaticU64Imm    r8, 2          r8 = ST[2] -> <self>
0048   0x00EDF8   43 31 07 00   Move                r49, r7        r49 = r7 [#95B0EBA52417EDE3]
0049   0x00EE00   43 32 08 00   Move                r50, r8        r50 = r8 [self]
004A   0x00EE08   1C 06 06 02   CallFf              r6, r6, 2      r6 = get-symbol(#95B0EBA52417EDE3, self)
L_8:
004B   0x00EE10   43 07 01 00   Move                r7, r1         r7 = r1 [get-boolean()]
004C   0x00EE18   2F 54 07 00   BranchIfNot         r7, 0054       IF NOT r7 [get-boolean()] => L_9
004D   0x00EE20   15 07 00 00   LookupPointer       r7, 0          r7 = ST[0] -> <get-symbol>
004E   0x00EE28   4A 08 0C 00   LoadStaticU64Imm    r8, 12         r8 = ST[12] -> <#F14ED4EDE9DDEA26>
004F   0x00EE30   4A 09 02 00   LoadStaticU64Imm    r9, 2          r9 = ST[2] -> <self>
0050   0x00EE38   43 31 08 00   Move                r49, r8        r49 = r8 [#F14ED4EDE9DDEA26]
0051   0x00EE40   43 32 09 00   Move                r50, r9        r50 = r9 [self]
0052   0x00EE48   1C 07 07 02   CallFf              r7, r7, 2      r7 = get-symbol(#F14ED4EDE9DDEA26, self)
0053   0x00EE50   2D 5A 00 00   Branch              005A           => L_10
L_9:
0054   0x00EE58   15 07 00 00   LookupPointer       r7, 0          r7 = ST[0] -> <get-symbol>
0055   0x00EE60   4A 08 0D 00   LoadStaticU64Imm    r8, 13         r8 = ST[13] -> <#FDC4C8C377BAE464>
0056   0x00EE68   4A 09 02 00   LoadStaticU64Imm    r9, 2          r9 = ST[2] -> <self>
0057   0x00EE70   43 31 08 00   Move                r49, r8        r49 = r8 [#FDC4C8C377BAE464]
0058   0x00EE78   43 32 09 00   Move                r50, r9        r50 = r9 [self]
0059   0x00EE80   1C 07 07 02   CallFf              r7, r7, 2      r7 = get-symbol(#FDC4C8C377BAE464, self)
L_10:
005A   0x00EE88   43 08 01 00   Move                r8, r1         r8 = r1 [get-boolean()]
005B   0x00EE90   2F 5E 08 00   BranchIfNot         r8, 005E       IF NOT r8 [get-boolean()] => L_11
005C   0x00EE98   4A 08 0E 00   LoadStaticU64Imm    r8, 14         r8 = ST[14] -> <#58F7DA31EC454A91>
005D   0x00EEA0   2D 5F 00 00   Branch              005F           => L_12
L_11:
005E   0x00EEA8   4A 08 0F 00   LoadStaticU64Imm    r8, 15         r8 = ST[15] -> <#7DD172077595EB73>
L_12:
005F   0x00EEB0   15 09 05 00   LookupPointer       r9, 5          r9 = ST[5] -> <is-final-build?>
0060   0x00EEB8   1C 09 09 00   CallFf              r9, r9, 0      r9 = is-final-build?()
0061   0x00EEC0   30 09 09 00   OpLogNot            r9, r9         r9 = !r9 -> <TRUE>
0062   0x00EEC8   2F 7E 09 00   BranchIfNot         r9, 007E       IF NOT r9 [0x6620ACB7] => L_13
0063   0x00EED0   15 09 06 00   LookupPointer       r9, 6          r9 = ST[6] -> <display>
0064   0x00EED8   15 0A 07 00   LookupPointer       r10, 7         r10 = ST[7] -> <#5445173390656D6D>
0065   0x00EEE0   41 0B 10 00   LoadStaticPointerImmr11, 16        r11 = ST[16] -> <0xBF026CF7>
0066   0x00EEE8   41 0C 09 00   LoadStaticPointerImmr12, 9         r12 = ST[9] -> <0xBF025EFC>
0067   0x00EEF0   43 0D 02 00   Move                r13, r2        r13 = r2 [0]
0068   0x00EEF8   0C 0E 01 00   LoadU16Imm          r14, 1         r14 = 1
0069   0x00EF00   01 0D 0D 0E   IAdd                r13, r13, r14  1 = 0 + 1
006A   0x00EF08   43 0E 04 00   Move                r14, r4        r14 = r4 [0x0]
006B   0x00EF10   43 0F 04 00   Move                r15, r4        r15 = r4 [0x0]
006C   0x00EF18   15 10 11 00   LookupPointer       r16, 17        r16 = ST[17] -> <#8A8D5C923D5DDB3B>
006D   0x00EF20   1B 10 10 00   Call                r16, r16, 0    r16 = #8A8D5C923D5DDB3B()
006E   0x00EF28   1D 0F 0F 10   IEqual              r15, r15, r16  r15 = r15 [0] == r16 [1029561147]
006F   0x00EF30   2F 72 0F 00   BranchIfNot         r15, 0072      IF NOT r15 [0x0] => L_14
0070   0x00EF38   41 0F 12 00   LoadStaticPointerImmr15, 18        r15 = ST[18] -> <0xBF027822>
0071   0x00EF40   2D 73 00 00   Branch              0073           => L_15
L_14:
0072   0x00EF48   41 0F 13 00   LoadStaticPointerImmr15, 19        r15 = ST[19] -> <0xBF02780D>
L_15:
0073   0x00EF50   43 31 0B 00   Move                r49, r11       r49 = r11 [0xBF026CF7]
0074   0x00EF58   43 32 0C 00   Move                r50, r12       r50 = r12 [0xBF025EFC]
0075   0x00EF60   43 33 0D 00   Move                r51, r13       r51 = r13 [1]
0076   0x00EF68   43 34 0E 00   Move                r52, r14       r52 = r14 [0x0]
0077   0x00EF70   43 35 0F 00   Move                r53, r15       r53 = r15 [0xBF02780D]
0078   0x00EF78   1C 0A 0A 05   CallFf              r10, r10, 5    r10 = #5445173390656D6D(0xBF026CF7, 0xBF025EFC, 1, 0x0, 0xBF02780D)
0079   0x00EF80   0C 0B 13 00   LoadU16Imm          r11, 19        r11 = 19
007A   0x00EF88   43 31 0A 00   Move                r49, r10       r49 = r10 [#5445173390656D6D()]
007B   0x00EF90   43 32 0B 00   Move                r50, r11       r50 = r11 [19]
007C   0x00EF98   1C 09 09 02   CallFf              r9, r9, 2      r9 = display(#5445173390656D6D(), 19)
007D   0x00EFA0   2D 7F 00 00   Branch              007F           => L_16
L_13:
007E   0x00EFA8   0C 09 00 00   LoadU16Imm          r9, 0          r9 = 0
L_16:
007F   0x00EFB0   43 09 02 00   Move                r9, r2         r9 = r2 [0]
0080   0x00EFB8   15 0A 14 00   LookupPointer       r10, 20        r10 = ST[20] -> <get-int32>
0081   0x00EFC0   4A 0B 15 00   LoadStaticU64Imm    r11, 21        r11 = ST[21] -> <#A2DAF2B622A5ECFD>
0082   0x00EFC8   4A 0C 02 00   LoadStaticU64Imm    r12, 2         r12 = ST[2] -> <self>
0083   0x00EFD0   43 31 0B 00   Move                r49, r11       r49 = r11 [#A2DAF2B622A5ECFD]
0084   0x00EFD8   43 32 0C 00   Move                r50, r12       r50 = r12 [self]
0085   0x00EFE0   1C 0A 0A 02   CallFf              r10, r10, 2    r10 = get-int32(#A2DAF2B622A5ECFD, self)
0086   0x00EFE8   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [0] == r10 [-635293406]
0087   0x00EFF0   2F 83 09 01   BranchIfNot         r9, 0183       IF NOT r9 [0x0] => L_17
0088   0x00EFF8   43 09 05 00   Move                r9, r5         r9 = r5 [0x0]
0089   0x00F000   0C 0A 08 00   LoadU16Imm          r10, 8         r10 = 8
008A   0x00F008   01 09 09 0A   IAdd                r9, r9, r10    0x0 = 0x0 + 8
008B   0x00F010   4F 09 09 00   LoadI32             ???            UNKNOWN INSTRUCTION
008C   0x00F018   15 0A 16 00   LookupPointer       r10, 22        r10 = ST[22] -> <rogue-get-next-random-number-for-category>
008D   0x00F020   43 0B 08 00   Move                r11, r8        r11 = r8 [#7DD172077595EB73]
008E   0x00F028   0C 0C 00 00   LoadU16Imm          r12, 0         r12 = 0
008F   0x00F030   43 31 0B 00   Move                r49, r11       r49 = r11 [#7DD172077595EB73]
0090   0x00F038   43 32 0C 00   Move                r50, r12       r50 = r12 [0]
0091   0x00F040   1C 0A 0A 02   CallFf              r10, r10, 2    r10 = rogue-get-next-random-number-for-category(#7DD172077595EB73, 0)
0092   0x00F048   43 0B 0A 00   Move                r11, r10       r11 = r10 [rogue-get-next-random-number-for-category()]
0093   0x00F050   15 0C 17 00   LookupPointer       r12, 23        r12 = ST[23] -> <darray-count>
0094   0x00F058   43 0D 07 00   Move                r13, r7        r13 = r7 [get-symbol()]
0095   0x00F060   43 31 0D 00   Move                r49, r13       r49 = r13 [get-symbol()]
0096   0x00F068   1C 0C 0C 01   CallFf              r12, r12, 1    r12 = darray-count(get-symbol())
0097   0x00F070   27 0B 0B 0C   IMod                r11, r11, r12  r11 = r11 [609714187] % r12 [1753163078] -> <609714187>
0098   0x00F078   15 0C 03 00   LookupPointer       r12, 3         r12 = ST[3] -> <get-boolean>
0099   0x00F080   4A 0D 18 00   LoadStaticU64Imm    r13, 24        r13 = ST[24] -> <#5F89BCA42A4FC333>
009A   0x00F088   4A 0E 02 00   LoadStaticU64Imm    r14, 2         r14 = ST[2] -> <self>
009B   0x00F090   43 31 0D 00   Move                r49, r13       r49 = r13 [#5F89BCA42A4FC333]
009C   0x00F098   43 32 0E 00   Move                r50, r14       r50 = r14 [self]
009D   0x00F0A0   1C 0C 0C 02   CallFf              r12, r12, 2    r12 = get-boolean(#5F89BCA42A4FC333, self)
009E   0x00F0A8   2F A1 0C 00   BranchIfNot         r12, 00A1      IF NOT r12 [get-boolean()] => L_18
009F   0x00F0B0   43 0C 0B 00   Move                r12, r11       r12 = r11 [609714187]
00A0   0x00F0B8   2D A2 00 00   Branch              00A2           => L_19
L_18:
00A1   0x00F0C0   0C 0C 00 00   LoadU16Imm          r12, 0         r12 = 0
L_19:
00A2   0x00F0C8   15 0D 19 00   LookupPointer       r13, 25        r13 = ST[25] -> <darray-at>
00A3   0x00F0D0   43 0E 07 00   Move                r14, r7        r14 = r7 [get-symbol()]
00A4   0x00F0D8   43 0F 0C 00   Move                r15, r12       r15 = r12 [0]
00A5   0x00F0E0   43 31 0E 00   Move                r49, r14       r49 = r14 [get-symbol()]
00A6   0x00F0E8   43 32 0F 00   Move                r50, r15       r50 = r15 [0]
00A7   0x00F0F0   1C 0D 0D 02   CallFf              r13, r13, 2    r13 = darray-at(get-symbol(), 0)
00A8   0x00F0F8   43 0E 0D 00   Move                r14, r13       r14 = r13 [darray-at()]
00A9   0x00F100   2F B0 0E 00   BranchIfNot         r14, 00B0      IF NOT r14 [darray-at()] => L_20
00AA   0x00F108   43 0E 0D 00   Move                r14, r13       r14 = r13 [darray-at()]
00AB   0x00F110   5D 0E 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00AC   0x00F118   3B 0E 0E 0C   IAddImm             r14, r14, 12   r14 = r14 [-739117676] / 12 -> <-739117676>
00AD   0x00F120   4E 0E 0E 00   LoadU16             ???            UNKNOWN INSTRUCTION
00AE   0x00F128   0C 0F 01 00   LoadU16Imm          r15, 1         r15 = 1
00AF   0x00F130   1D 0E 0E 0F   IEqual              r14, r14, r15  r14 = r14 [-739117824] == r15 [1]
L_20:
00B0   0x00F138   2F B5 0E 00   BranchIfNot         r14, 00B5      IF NOT r14 [0xD3F1F500] => L_21
00B1   0x00F140   43 0E 0D 00   Move                r14, r13       r14 = r13 [darray-at()]
00B2   0x00F148   5D 0E 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00B3   0x00F150   4C 0E 0E 00   LoadU8              ???            UNKNOWN INSTRUCTION
00B4   0x00F158   2D F8 00 00   Branch              00F8           => L_22
L_21:
00B5   0x00F160   43 0E 0D 00   Move                r14, r13       r14 = r13 [darray-at()]
00B6   0x00F168   2F BD 0E 00   BranchIfNot         r14, 00BD      IF NOT r14 [darray-at()] => L_23
00B7   0x00F170   43 0E 0D 00   Move                r14, r13       r14 = r13 [darray-at()]
00B8   0x00F178   5D 0E 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00B9   0x00F180   3B 0E 0E 0C   IAddImm             r14, r14, 12   r14 = r14 [-739117676] / 12 -> <-739117676>
00BA   0x00F188   4E 0E 0E 00   LoadU16             ???            UNKNOWN INSTRUCTION
00BB   0x00F190   0C 0F 02 00   LoadU16Imm          r15, 2         r15 = 2
00BC   0x00F198   1D 0E 0E 0F   IEqual              r14, r14, r15  r14 = r14 [-739117824] == r15 [2]
L_23:
00BD   0x00F1A0   2F C2 0E 00   BranchIfNot         r14, 00C2      IF NOT r14 [0xD3F1F500] => L_24
00BE   0x00F1A8   43 0E 0D 00   Move                r14, r13       r14 = r13 [darray-at()]
00BF   0x00F1B0   5D 0E 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00C0   0x00F1B8   4F 0E 0E 00   LoadI32             ???            UNKNOWN INSTRUCTION
00C1   0x00F1C0   2D F8 00 00   Branch              00F8           => L_22
L_24:
00C2   0x00F1C8   43 0E 0D 00   Move                r14, r13       r14 = r13 [darray-at()]
00C3   0x00F1D0   2F CA 0E 00   BranchIfNot         r14, 00CA      IF NOT r14 [darray-at()] => L_25
00C4   0x00F1D8   43 0E 0D 00   Move                r14, r13       r14 = r13 [darray-at()]
00C5   0x00F1E0   5D 0E 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00C6   0x00F1E8   3B 0E 0E 0C   IAddImm             r14, r14, 12   r14 = r14 [-739117676] / 12 -> <-739117676>
00C7   0x00F1F0   4E 0E 0E 00   LoadU16             ???            UNKNOWN INSTRUCTION
00C8   0x00F1F8   0C 0F 03 00   LoadU16Imm          r15, 3         r15 = 3
00C9   0x00F200   1D 0E 0E 0F   IEqual              r14, r14, r15  r14 = r14 [-739117824] == r15 [3]
L_25:
00CA   0x00F208   2F CF 0E 00   BranchIfNot         r14, 00CF      IF NOT r14 [0xD3F1F500] => L_26
00CB   0x00F210   43 0E 0D 00   Move                r14, r13       r14 = r13 [darray-at()]
00CC   0x00F218   5D 0E 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00CD   0x00F220   0D 0E 0E 00   LoadU32             r14, [r14]     r14 = [0x0 + 0x0]
00CE   0x00F228   2D F8 00 00   Branch              00F8           => L_22
L_26:
00CF   0x00F230   43 0E 0D 00   Move                r14, r13       r14 = r13 [darray-at()]
00D0   0x00F238   2F D7 0E 00   BranchIfNot         r14, 00D7      IF NOT r14 [darray-at()] => L_27
00D1   0x00F240   43 0E 0D 00   Move                r14, r13       r14 = r13 [darray-at()]
00D2   0x00F248   5D 0E 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00D3   0x00F250   3B 0E 0E 0C   IAddImm             r14, r14, 12   r14 = r14 [-739117676] / 12 -> <-739117676>
00D4   0x00F258   4E 0E 0E 00   LoadU16             ???            UNKNOWN INSTRUCTION
00D5   0x00F260   0C 0F 04 00   LoadU16Imm          r15, 4         r15 = 4
00D6   0x00F268   1D 0E 0E 0F   IEqual              r14, r14, r15  r14 = r14 [-739117824] == r15 [4]
L_27:
00D7   0x00F270   2F DC 0E 00   BranchIfNot         r14, 00DC      IF NOT r14 [0xD3F1F500] => L_28
00D8   0x00F278   43 0E 0D 00   Move                r14, r13       r14 = r13 [darray-at()]
00D9   0x00F280   5D 0E 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00DA   0x00F288   50 0E 0E 00   LoadI64             r14, [r14]     r14 = [0x0 + 0x0]
00DB   0x00F290   2D F8 00 00   Branch              00F8           => L_22
L_28:
00DC   0x00F298   43 0E 0D 00   Move                r14, r13       r14 = r13 [darray-at()]
00DD   0x00F2A0   2F E4 0E 00   BranchIfNot         r14, 00E4      IF NOT r14 [darray-at()] => L_29
00DE   0x00F2A8   43 0E 0D 00   Move                r14, r13       r14 = r13 [darray-at()]
00DF   0x00F2B0   5D 0E 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00E0   0x00F2B8   3B 0E 0E 0C   IAddImm             r14, r14, 12   r14 = r14 [-739117676] / 12 -> <-739117676>
00E1   0x00F2C0   4E 0E 0E 00   LoadU16             ???            UNKNOWN INSTRUCTION
00E2   0x00F2C8   0C 0F 05 00   LoadU16Imm          r15, 5         r15 = 5
00E3   0x00F2D0   1D 0E 0E 0F   IEqual              r14, r14, r15  r14 = r14 [-739117824] == r15 [5]
L_29:
00E4   0x00F2D8   2F E9 0E 00   BranchIfNot         r14, 00E9      IF NOT r14 [0xD3F1F500] => L_30
00E5   0x00F2E0   43 0E 0D 00   Move                r14, r13       r14 = r13 [darray-at()]
00E6   0x00F2E8   5D 0E 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00E7   0x00F2F0   51 0E 0E 00   LoadU64             r14, [r14]     r14 = [0x0 + 0x0]
00E8   0x00F2F8   2D F8 00 00   Branch              00F8           => L_22
L_30:
00E9   0x00F300   43 0E 0D 00   Move                r14, r13       r14 = r13 [darray-at()]
00EA   0x00F308   2F F1 0E 00   BranchIfNot         r14, 00F1      IF NOT r14 [darray-at()] => L_31
00EB   0x00F310   43 0E 0D 00   Move                r14, r13       r14 = r13 [darray-at()]
00EC   0x00F318   5D 0E 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00ED   0x00F320   3B 0E 0E 0C   IAddImm             r14, r14, 12   r14 = r14 [-739117676] / 12 -> <-739117676>
00EE   0x00F328   4E 0E 0E 00   LoadU16             ???            UNKNOWN INSTRUCTION
00EF   0x00F330   0C 0F 06 00   LoadU16Imm          r15, 6         r15 = 6
00F0   0x00F338   1D 0E 0E 0F   IEqual              r14, r14, r15  r14 = r14 [-739117824] == r15 [6]
L_31:
00F1   0x00F340   2F F7 0E 00   BranchIfNot         r14, 00F7      IF NOT r14 [0xD3F1F500] => L_32
00F2   0x00F348   43 0E 0D 00   Move                r14, r13       r14 = r13 [darray-at()]
00F3   0x00F350   5D 0E 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00F4   0x00F358   0E 0E 0E 00   LoadFloat           r14, [r14]     r14 = [0x0 + 0x0]
00F5   0x00F360   19 0E 0E 00   CastInteger         r14, r14       r14 = int(r14) -> <0.000000> => <0>
00F6   0x00F368   2D F8 00 00   Branch              00F8           => L_22
L_32:
00F7   0x00F370   0C 0E 00 00   LoadU16Imm          r14, 0         r14 = 0
L_22:
00F8   0x00F378   43 0D 0E 00   Move                r13, r14       r13 = r14 [0]
00F9   0x00F380   43 0E 05 00   Move                r14, r5        r14 = r5 [0x0]
00FA   0x00F388   0F 0E 0E 00   LoadPointer         r14, [r14]     r14 = [0x0 + 0x0]
00FB   0x00F390   43 0F 0D 00   Move                r15, r13       r15 = r13 [0]
00FC   0x00F398   3D 0F 0F 08   IMulImm             r15, r15, 8    r15 = r15 [0] / 8 -> <0>
00FD   0x00F3A0   01 0E 0E 0F   IAdd                r14, r14, r15  0x0 = 0x0 + 0
00FE   0x00F3A8   43 0F 0E 00   Move                r15, r14       r15 = r14 [0x0]
00FF   0x00F3B0   5D 0F 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0100   0x00F3B8   0F 0F 0F 00   LoadPointer         r15, [r15]     r15 = [0x0 + 0x0]
0101   0x00F3C0   15 10 05 00   LookupPointer       r16, 5         r16 = ST[5] -> <is-final-build?>
0102   0x00F3C8   1C 10 10 00   CallFf              r16, r16, 0    r16 = is-final-build?()
0103   0x00F3D0   30 10 10 00   OpLogNot            r16, r16       r16 = !r16 -> <TRUE>
0104   0x00F3D8   2F 19 10 01   BranchIfNot         r16, 0119      IF NOT r16 [0x6620ACB7] => L_33
0105   0x00F3E0   15 10 06 00   LookupPointer       r16, 6         r16 = ST[6] -> <display>
0106   0x00F3E8   15 11 07 00   LookupPointer       r17, 7         r17 = ST[7] -> <#5445173390656D6D>
0107   0x00F3F0   41 12 1A 00   LoadStaticPointerImmr18, 26        r18 = ST[26] -> <0xBF026095>
0108   0x00F3F8   41 13 09 00   LoadStaticPointerImmr19, 9         r19 = ST[9] -> <0xBF025EFC>
0109   0x00F400   41 14 1B 00   LoadStaticPointerImmr20, 27        r20 = ST[27] -> <0xBF027718>
010A   0x00F408   43 15 0D 00   Move                r21, r13       r21 = r13 [0]
010B   0x00F410   43 16 09 00   Move                r22, r9        r22 = r9 [0x0]
010C   0x00F418   0C 17 01 00   LoadU16Imm          r23, 1         r23 = 1
010D   0x00F420   02 16 16 17   ISub                r22, r22, r23  -1 = 0x0 - 1
010E   0x00F428   43 31 12 00   Move                r49, r18       r49 = r18 [0xBF026095]
010F   0x00F430   43 32 13 00   Move                r50, r19       r50 = r19 [0xBF025EFC]
0110   0x00F438   43 33 14 00   Move                r51, r20       r51 = r20 [0xBF027718]
0111   0x00F440   43 34 15 00   Move                r52, r21       r52 = r21 [0]
0112   0x00F448   43 35 16 00   Move                r53, r22       r53 = r22 [-1]
0113   0x00F450   1C 11 11 05   CallFf              r17, r17, 5    r17 = #5445173390656D6D(0xBF026095, 0xBF025EFC, 0xBF027718, 0, -1)
0114   0x00F458   0C 12 13 00   LoadU16Imm          r18, 19        r18 = 19
0115   0x00F460   43 31 11 00   Move                r49, r17       r49 = r17 [#5445173390656D6D()]
0116   0x00F468   43 32 12 00   Move                r50, r18       r50 = r18 [19]
0117   0x00F470   1C 10 10 02   CallFf              r16, r16, 2    r16 = display(#5445173390656D6D(), 19)
0118   0x00F478   2D 1A 00 01   Branch              011A           => L_34
L_33:
0119   0x00F480   0C 10 00 00   LoadU16Imm          r16, 0         r16 = 0
L_34:
011A   0x00F488   15 10 05 00   LookupPointer       r16, 5         r16 = ST[5] -> <is-final-build?>
011B   0x00F490   1C 10 10 00   CallFf              r16, r16, 0    r16 = is-final-build?()
011C   0x00F498   30 10 10 00   OpLogNot            r16, r16       r16 = !r16 -> <TRUE>
011D   0x00F4A0   2F 31 10 01   BranchIfNot         r16, 0131      IF NOT r16 [0x6620ACB7] => L_35
011E   0x00F4A8   15 10 06 00   LookupPointer       r16, 6         r16 = ST[6] -> <display>
011F   0x00F4B0   15 11 07 00   LookupPointer       r17, 7         r17 = ST[7] -> <#5445173390656D6D>
0120   0x00F4B8   41 12 1A 00   LoadStaticPointerImmr18, 26        r18 = ST[26] -> <0xBF026095>
0121   0x00F4C0   41 13 09 00   LoadStaticPointerImmr19, 9         r19 = ST[9] -> <0xBF025EFC>
0122   0x00F4C8   41 14 1C 00   LoadStaticPointerImmr20, 28        r20 = ST[28] -> <0xBF0274EA>
0123   0x00F4D0   43 15 0F 00   Move                r21, r15       r21 = r15 [0x0]
0124   0x00F4D8   0C 16 08 00   LoadU16Imm          r22, 8         r22 = 8
0125   0x00F4E0   01 15 15 16   IAdd                r21, r21, r22  0x0 = 0x0 + 8
0126   0x00F4E8   4F 15 15 00   LoadI32             ???            UNKNOWN INSTRUCTION
0127   0x00F4F0   43 31 12 00   Move                r49, r18       r49 = r18 [0xBF026095]
0128   0x00F4F8   43 32 13 00   Move                r50, r19       r50 = r19 [0xBF025EFC]
0129   0x00F500   43 33 14 00   Move                r51, r20       r51 = r20 [0xBF0274EA]
012A   0x00F508   43 34 15 00   Move                r52, r21       r52 = r21 [0x0]
012B   0x00F510   1C 11 11 04   CallFf              r17, r17, 4    r17 = #5445173390656D6D(0xBF026095, 0xBF025EFC, 0xBF0274EA, 0x0)
012C   0x00F518   0C 12 13 00   LoadU16Imm          r18, 19        r18 = 19
012D   0x00F520   43 31 11 00   Move                r49, r17       r49 = r17 [#5445173390656D6D()]
012E   0x00F528   43 32 12 00   Move                r50, r18       r50 = r18 [19]
012F   0x00F530   1C 10 10 02   CallFf              r16, r16, 2    r16 = display(#5445173390656D6D(), 19)
0130   0x00F538   2D 32 00 01   Branch              0132           => L_36
L_35:
0131   0x00F540   0C 10 00 00   LoadU16Imm          r16, 0         r16 = 0
L_36:
0132   0x00F548   15 10 1D 00   LookupPointer       r16, 29        r16 = ST[29] -> <darray-append>
0133   0x00F550   43 11 06 00   Move                r17, r6        r17 = r6 [get-symbol()]
0134   0x00F558   15 12 1E 00   LookupPointer       r18, 30        r18 = ST[30] -> <new-boxed-value>
0135   0x00F560   0C 13 02 00   LoadU16Imm          r19, 2         r19 = 2
0136   0x00F568   43 14 0D 00   Move                r20, r13       r20 = r13 [0]
0137   0x00F570   43 31 13 00   Move                r49, r19       r49 = r19 [2]
0138   0x00F578   43 32 14 00   Move                r50, r20       r50 = r20 [0]
0139   0x00F580   1C 12 12 02   CallFf              r18, r18, 2    r18 = new-boxed-value(2, 0)
013A   0x00F588   0C 13 00 00   LoadU16Imm          r19, 0         r19 = 0
013B   0x00F590   43 31 11 00   Move                r49, r17       r49 = r17 [get-symbol()]
013C   0x00F598   43 32 12 00   Move                r50, r18       r50 = r18 [new-boxed-value()]
013D   0x00F5A0   43 33 13 00   Move                r51, r19       r51 = r19 [0]
013E   0x00F5A8   1C 10 10 03   CallFf              r16, r16, 3    r16 = darray-append(get-symbol(), new-boxed-value(), 0)
013F   0x00F5B0   15 10 03 00   LookupPointer       r16, 3         r16 = ST[3] -> <get-boolean>
0140   0x00F5B8   4A 11 1F 00   LoadStaticU64Imm    r17, 31        r17 = ST[31] -> <#FB027CA453EDDE5B>
0141   0x00F5C0   4A 12 02 00   LoadStaticU64Imm    r18, 2         r18 = ST[2] -> <self>
0142   0x00F5C8   43 31 11 00   Move                r49, r17       r49 = r17 [#FB027CA453EDDE5B]
0143   0x00F5D0   43 32 12 00   Move                r50, r18       r50 = r18 [self]
0144   0x00F5D8   1C 10 10 02   CallFf              r16, r16, 2    r16 = get-boolean(#FB027CA453EDDE5B, self)
0145   0x00F5E0   2F 4D 10 01   BranchIfNot         r16, 014D      IF NOT r16 [get-boolean()] => L_37
0146   0x00F5E8   15 10 03 00   LookupPointer       r16, 3         r16 = ST[3] -> <get-boolean>
0147   0x00F5F0   4A 11 18 00   LoadStaticU64Imm    r17, 24        r17 = ST[24] -> <#5F89BCA42A4FC333>
0148   0x00F5F8   4A 12 02 00   LoadStaticU64Imm    r18, 2         r18 = ST[2] -> <self>
0149   0x00F600   43 31 11 00   Move                r49, r17       r49 = r17 [#5F89BCA42A4FC333]
014A   0x00F608   43 32 12 00   Move                r50, r18       r50 = r18 [self]
014B   0x00F610   1C 10 10 02   CallFf              r16, r16, 2    r16 = get-boolean(#5F89BCA42A4FC333, self)
014C   0x00F618   30 10 10 00   OpLogNot            r16, r16       r16 = !r16 -> <TRUE>
L_37:
014D   0x00F620   2F 64 10 01   BranchIfNot         r16, 0164      IF NOT r16 [0xFC4C4D87] => L_38
014E   0x00F628   15 10 19 00   LookupPointer       r16, 25        r16 = ST[25] -> <darray-at>
014F   0x00F630   43 11 07 00   Move                r17, r7        r17 = r7 [get-symbol()]
0150   0x00F638   0C 12 00 00   LoadU16Imm          r18, 0         r18 = 0
0151   0x00F640   43 31 11 00   Move                r49, r17       r49 = r17 [get-symbol()]
0152   0x00F648   43 32 12 00   Move                r50, r18       r50 = r18 [0]
0153   0x00F650   1C 10 10 02   CallFf              r16, r16, 2    r16 = darray-at(get-symbol(), 0)
0154   0x00F658   15 11 20 00   LookupPointer       r17, 32        r17 = ST[32] -> <darray-remove>
0155   0x00F660   43 12 07 00   Move                r18, r7        r18 = r7 [get-symbol()]
0156   0x00F668   0C 13 00 00   LoadU16Imm          r19, 0         r19 = 0
0157   0x00F670   43 31 12 00   Move                r49, r18       r49 = r18 [get-symbol()]
0158   0x00F678   43 32 13 00   Move                r50, r19       r50 = r19 [0]
0159   0x00F680   1C 11 11 02   CallFf              r17, r17, 2    r17 = darray-remove(get-symbol(), 0)
015A   0x00F688   15 11 1D 00   LookupPointer       r17, 29        r17 = ST[29] -> <darray-append>
015B   0x00F690   43 12 07 00   Move                r18, r7        r18 = r7 [get-symbol()]
015C   0x00F698   43 13 10 00   Move                r19, r16       r19 = r16 [darray-at()]
015D   0x00F6A0   0C 14 00 00   LoadU16Imm          r20, 0         r20 = 0
015E   0x00F6A8   43 31 12 00   Move                r49, r18       r49 = r18 [get-symbol()]
015F   0x00F6B0   43 32 13 00   Move                r50, r19       r50 = r19 [darray-at()]
0160   0x00F6B8   43 33 14 00   Move                r51, r20       r51 = r20 [0]
0161   0x00F6C0   1C 11 11 03   CallFf              r17, r17, 3    r17 = darray-append(get-symbol(), darray-at(), 0)
0162   0x00F6C8   43 10 11 00   Move                r16, r17       r16 = r17 [darray-append()]
0163   0x00F6D0   2D 6A 00 01   Branch              016A           => L_39
L_38:
0164   0x00F6D8   15 10 20 00   LookupPointer       r16, 32        r16 = ST[32] -> <darray-remove>
0165   0x00F6E0   43 11 07 00   Move                r17, r7        r17 = r7 [get-symbol()]
0166   0x00F6E8   43 12 0C 00   Move                r18, r12       r18 = r12 [0]
0167   0x00F6F0   43 31 11 00   Move                r49, r17       r49 = r17 [get-symbol()]
0168   0x00F6F8   43 32 12 00   Move                r50, r18       r50 = r18 [0]
0169   0x00F700   1C 10 10 02   CallFf              r16, r16, 2    r16 = darray-remove(get-symbol(), 0)
L_39:
016A   0x00F708   15 10 21 00   LookupPointer       r16, 33        r16 = ST[33] -> <set-int32>
016B   0x00F710   4A 11 22 00   LoadStaticU64Imm    r17, 34        r17 = ST[34] -> <#1F9001DFBF054576>
016C   0x00F718   43 12 0D 00   Move                r18, r13       r18 = r13 [0]
016D   0x00F720   4A 13 02 00   LoadStaticU64Imm    r19, 2         r19 = ST[2] -> <self>
016E   0x00F728   43 31 11 00   Move                r49, r17       r49 = r17 [#1F9001DFBF054576]
016F   0x00F730   43 32 12 00   Move                r50, r18       r50 = r18 [0]
0170   0x00F738   43 33 13 00   Move                r51, r19       r51 = r19 [self]
0171   0x00F740   1C 10 10 03   CallFf              r16, r16, 3    r16 = set-int32(#1F9001DFBF054576, 0, self)
0172   0x00F748   15 10 23 00   LookupPointer       r16, 35        r16 = ST[35] -> <set-symbol>
0173   0x00F750   4A 11 24 00   LoadStaticU64Imm    r17, 36        r17 = ST[36] -> <#FDCBB431C41579BC>
0174   0x00F758   43 12 0E 00   Move                r18, r14       r18 = r14 [0x0]
0175   0x00F760   4A 13 02 00   LoadStaticU64Imm    r19, 2         r19 = ST[2] -> <self>
0176   0x00F768   43 31 11 00   Move                r49, r17       r49 = r17 [#FDCBB431C41579BC]
0177   0x00F770   43 32 12 00   Move                r50, r18       r50 = r18 [0x0]
0178   0x00F778   43 33 13 00   Move                r51, r19       r51 = r19 [self]
0179   0x00F780   1C 10 10 03   CallFf              r16, r16, 3    r16 = set-symbol(#FDCBB431C41579BC, 0x0, self)
017A   0x00F788   43 10 10 00   Move                r16, r16       r16 = r16 [set-symbol()]
017B   0x00F790   43 0F 10 00   Move                r15, r16       r15 = r16 [set-symbol]
017C   0x00F798   43 0E 0F 00   Move                r14, r15       r14 = r15 [set-symbol]
017D   0x00F7A0   43 0D 0E 00   Move                r13, r14       r13 = r14 [set-symbol]
017E   0x00F7A8   43 0C 0D 00   Move                r12, r13       r12 = r13 [set-symbol]
017F   0x00F7B0   43 0B 0C 00   Move                r11, r12       r11 = r12 [set-symbol]
0180   0x00F7B8   43 0A 0B 00   Move                r10, r11       r10 = r11 [set-symbol]
0181   0x00F7C0   43 09 0A 00   Move                r9, r10        r9 = r10 [set-symbol]
0182   0x00F7C8   2D 84 00 01   Branch              0184           => L_40
L_17:
0183   0x00F7D0   0C 09 00 00   LoadU16Imm          r9, 0          r9 = 0
L_40:
0184   0x00F7D8   43 09 09 00   Move                r9, r9         r9 = r9 [0]
0185   0x00F7E0   43 08 09 00   Move                r8, r9         r8 = r9 [0]
0186   0x00F7E8   43 07 08 00   Move                r7, r8         r7 = r8 [0]
0187   0x00F7F0   43 06 07 00   Move                r6, r7         r6 = r7 [0]
0188   0x00F7F8   43 05 06 00   Move                r5, r6         r5 = r6 [0]
0189   0x00F800   43 04 05 00   Move                r4, r5         r4 = r5 [0]
018A   0x00F808   43 03 04 00   Move                r3, r4         r3 = r4 [0]
018B   0x00F810   43 03 02 00   Move                r3, r2         r3 = r2 [0]
018C   0x00F818   0C 04 01 00   LoadU16Imm          r4, 1          r4 = 1
018D   0x00F820   01 03 03 04   IAdd                r3, r3, r4     1 = 0 + 1
018E   0x00F828   43 02 03 00   Move                r2, r3         r2 = r3 [1]
018F   0x00F830   43 03 02 00   Move                r3, r2         r3 = r2 [1]
0190   0x00F838   2D 22 00 00   Branch              0022           => L_41
L_4:
0191   0x00F840   43 02 03 00   Move                r2, r3         r2 = r3 [1]
0192   0x00F848   15 02 25 00   LookupPointer       r2, 37         r2 = ST[37] -> <wait-one-frame>
0193   0x00F850   1C 02 02 00   CallFf              r2, r2, 0      r2 = wait-one-frame()
0194   0x00F858   15 02 26 00   LookupPointer       r2, 38         r2 = ST[38] -> <go>
0195   0x00F860   4A 03 27 00   LoadStaticU64Imm    r3, 39         r3 = ST[39] -> <select-spawn-regions>
0196   0x00F868   0C 04 01 00   LoadU16Imm          r4, 1          r4 = 1
0197   0x00F870   43 31 03 00   Move                r49, r3        r49 = r3 [select-spawn-regions]
0198   0x00F878   43 32 04 00   Move                r50, r4        r50 = r4 [1]
0199   0x00F880   1C 02 02 02   CallFf              r2, r2, 2      r2 = go(select-spawn-regions, 1)
019A   0x00F888   43 00 02 00   Move                r0, r2         r0 = r2 [go()]
019B   0x00F890   00 00 00 00   Return              r0             Return go()
SYMBOL TABLE: 
0000   0x00F898    POINTER <get-symbol>
0001   0x00F8A0    SID <#84335FAD5E97BB40>
0002   0x00F8A8    SID <self>
0003   0x00F8B0    POINTER <get-boolean>
0004   0x00F8B8    SID <#8011CE00FED42EB7>
0005   0x00F8C0    POINTER <is-final-build?>
0006   0x00F8C8    POINTER <display>
0007   0x00F8D0    POINTER <#5445173390656D6D>
0008   0x00F8D8    POINTER <#00000282BF0263EB>
0009   0x00F8E0    POINTER <#00000282BF025EFC>
000A   0x00F8E8    SID <#813B48C382415979>
000B   0x00F8F0    SID <#95B0EBA52417EDE3>
000C   0x00F8F8    SID <#F14ED4EDE9DDEA26>
000D   0x00F900    SID <#FDC4C8C377BAE464>
000E   0x00F908    SID <#58F7DA31EC454A91>
000F   0x00F910    SID <#7DD172077595EB73>
0010   0x00F918    POINTER <#00000282BF026CF7>
0011   0x00F920    POINTER <#8A8D5C923D5DDB3B>
0012   0x00F928    POINTER <#00000282BF027822>
0013   0x00F930    POINTER <#00000282BF02780D>
0014   0x00F938    POINTER <get-int32>
0015   0x00F940    SID <#A2DAF2B622A5ECFD>
0016   0x00F948    POINTER <rogue-get-next-random-number-for-category>
0017   0x00F950    POINTER <darray-count>
0018   0x00F958    SID <#5F89BCA42A4FC333>
0019   0x00F960    POINTER <darray-at>
001A   0x00F968    POINTER <#00000282BF026095>
001B   0x00F970    POINTER <#00000282BF027718>
001C   0x00F978    POINTER <#00000282BF0274EA>
001D   0x00F980    POINTER <darray-append>
001E   0x00F988    POINTER <new-boxed-value>
001F   0x00F990    SID <#FB027CA453EDDE5B>
0020   0x00F998    POINTER <darray-remove>
0021   0x00F9A0    POINTER <set-int32>
0022   0x00F9A8    SID <#1F9001DFBF054576>
0023   0x00F9B0    POINTER <set-symbol>
0024   0x00F9B8    SID <#FDCBB431C41579BC>
0025   0x00F9C0    POINTER <wait-one-frame>
0026   0x00F9C8    POINTER <go>
0027   0x00F9D0    SID <select-spawn-regions>
      STATE select-spawn-regions:
         ON start
          TRACK main:
0000   0x00FAD0   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <is-final-build?>
0001   0x00FAD8   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0002   0x00FAE0   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0003   0x00FAE8   2F 0E 00 00   BranchIfNot         r0, 000E       IF NOT r0 [0x6620ACB7] => L_0
0004   0x00FAF0   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <display>
0005   0x00FAF8   15 01 02 00   LookupPointer       r1, 2          r1 = ST[2] -> <#5445173390656D6D>
0006   0x00FB00   41 02 03 00   LoadStaticPointerImmr2, 3          r2 = ST[3] -> <0xBF027066>
0007   0x00FB08   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF027066]
0008   0x00FB10   1C 01 01 01   CallFf              r1, r1, 1      r1 = #5445173390656D6D(0xBF027066)
0009   0x00FB18   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
000A   0x00FB20   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
000B   0x00FB28   43 32 02 00   Move                r50, r2        r50 = r2 [19]
000C   0x00FB30   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
000D   0x00FB38   2D 0F 00 00   Branch              000F           => L_RETURN
L_0:
000E   0x00FB40   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
000F   0x00FB48   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x00FB50    POINTER <is-final-build?>
0001   0x00FB58    POINTER <display>
0002   0x00FB60    POINTER <#5445173390656D6D>
0003   0x00FB68    POINTER <#00000282BF027066>
0000   0x015A50   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <get-boolean>
0001   0x015A58   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#32E94EADDED8F01D>
0002   0x015A60   4A 02 02 00   LoadStaticU64Imm    r2, 2          r2 = ST[2] -> <self>
0003   0x015A68   43 31 01 00   Move                r49, r1        r49 = r1 [#32E94EADDED8F01D]
0004   0x015A70   43 32 02 00   Move                r50, r2        r50 = r2 [self]
0005   0x015A78   1C 00 00 02   CallFf              r0, r0, 2      r0 = get-boolean(#32E94EADDED8F01D, self)
0006   0x015A80   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
0007   0x015A88   15 02 03 00   LookupPointer       r2, 3          r2 = ST[3] -> <get-int32>
0008   0x015A90   4A 03 04 00   LoadStaticU64Imm    r3, 4          r3 = ST[4] -> <#0676F87AA7DD009C>
0009   0x015A98   4A 04 02 00   LoadStaticU64Imm    r4, 2          r4 = ST[2] -> <self>
000A   0x015AA0   43 31 03 00   Move                r49, r3        r49 = r3 [#0676F87AA7DD009C]
000B   0x015AA8   43 32 04 00   Move                r50, r4        r50 = r4 [self]
000C   0x015AB0   1C 02 02 02   CallFf              r2, r2, 2      r2 = get-int32(#0676F87AA7DD009C, self)
000D   0x015AB8   15 03 03 00   LookupPointer       r3, 3          r3 = ST[3] -> <get-int32>
000E   0x015AC0   4A 04 05 00   LoadStaticU64Imm    r4, 5          r4 = ST[5] -> <#928E23508A42DAF2>
000F   0x015AC8   4A 05 02 00   LoadStaticU64Imm    r5, 2          r5 = ST[2] -> <self>
0010   0x015AD0   43 31 04 00   Move                r49, r4        r49 = r4 [#928E23508A42DAF2]
0011   0x015AD8   43 32 05 00   Move                r50, r5        r50 = r5 [self]
0012   0x015AE0   1C 03 03 02   CallFf              r3, r3, 2      r3 = get-int32(#928E23508A42DAF2, self)
0013   0x015AE8   15 04 00 00   LookupPointer       r4, 0          r4 = ST[0] -> <get-boolean>
0014   0x015AF0   4A 05 06 00   LoadStaticU64Imm    r5, 6          r5 = ST[6] -> <#1FD0D5BACF6C26B1>
0015   0x015AF8   4A 06 02 00   LoadStaticU64Imm    r6, 2          r6 = ST[2] -> <self>
0016   0x015B00   43 31 05 00   Move                r49, r5        r49 = r5 [#1FD0D5BACF6C26B1]
0017   0x015B08   43 32 06 00   Move                r50, r6        r50 = r6 [self]
0018   0x015B10   1C 04 04 02   CallFf              r4, r4, 2      r4 = get-boolean(#1FD0D5BACF6C26B1, self)
0019   0x015B18   15 05 07 00   LookupPointer       r5, 7          r5 = ST[7] -> <darray-clear>
001A   0x015B20   15 06 08 00   LookupPointer       r6, 8          r6 = ST[8] -> <get-symbol>
001B   0x015B28   4A 07 09 00   LoadStaticU64Imm    r7, 9          r7 = ST[9] -> <#ACA135ADD5938983>
001C   0x015B30   4A 08 02 00   LoadStaticU64Imm    r8, 2          r8 = ST[2] -> <self>
001D   0x015B38   43 31 07 00   Move                r49, r7        r49 = r7 [#ACA135ADD5938983]
001E   0x015B40   43 32 08 00   Move                r50, r8        r50 = r8 [self]
001F   0x015B48   1C 06 06 02   CallFf              r6, r6, 2      r6 = get-symbol(#ACA135ADD5938983, self)
0020   0x015B50   43 31 06 00   Move                r49, r6        r49 = r6 [get-symbol()]
0021   0x015B58   1C 05 05 01   CallFf              r5, r5, 1      r5 = darray-clear(get-symbol())
0022   0x015B60   15 05 07 00   LookupPointer       r5, 7          r5 = ST[7] -> <darray-clear>
0023   0x015B68   15 06 08 00   LookupPointer       r6, 8          r6 = ST[8] -> <get-symbol>
0024   0x015B70   4A 07 0A 00   LoadStaticU64Imm    r7, 10         r7 = ST[10] -> <#80F4C52A6BDCA6BC>
0025   0x015B78   4A 08 02 00   LoadStaticU64Imm    r8, 2          r8 = ST[2] -> <self>
0026   0x015B80   43 31 07 00   Move                r49, r7        r49 = r7 [#80F4C52A6BDCA6BC]
0027   0x015B88   43 32 08 00   Move                r50, r8        r50 = r8 [self]
0028   0x015B90   1C 06 06 02   CallFf              r6, r6, 2      r6 = get-symbol(#80F4C52A6BDCA6BC, self)
0029   0x015B98   43 31 06 00   Move                r49, r6        r49 = r6 [get-symbol()]
002A   0x015BA0   1C 05 05 01   CallFf              r5, r5, 1      r5 = darray-clear(get-symbol())
002B   0x015BA8   15 05 0B 00   LookupPointer       r5, 11         r5 = ST[11] -> <is-final-build?>
002C   0x015BB0   1C 05 05 00   CallFf              r5, r5, 0      r5 = is-final-build?()
002D   0x015BB8   30 05 05 00   OpLogNot            r5, r5         r5 = !r5 -> <TRUE>
002E   0x015BC0   2F 3B 05 00   BranchIfNot         r5, 003B       IF NOT r5 [0x6620ACB7] => L_0
002F   0x015BC8   15 05 0C 00   LookupPointer       r5, 12         r5 = ST[12] -> <display>
0030   0x015BD0   15 06 0D 00   LookupPointer       r6, 13         r6 = ST[13] -> <#5445173390656D6D>
0031   0x015BD8   41 07 0E 00   LoadStaticPointerImmr7, 14         r7 = ST[14] -> <0xBF0269B5>
0032   0x015BE0   41 08 0F 00   LoadStaticPointerImmr8, 15         r8 = ST[15] -> <0xBF025EFC>
0033   0x015BE8   43 31 07 00   Move                r49, r7        r49 = r7 [0xBF0269B5]
0034   0x015BF0   43 32 08 00   Move                r50, r8        r50 = r8 [0xBF025EFC]
0035   0x015BF8   1C 06 06 02   CallFf              r6, r6, 2      r6 = #5445173390656D6D(0xBF0269B5, 0xBF025EFC)
0036   0x015C00   0C 07 13 00   LoadU16Imm          r7, 19         r7 = 19
0037   0x015C08   43 31 06 00   Move                r49, r6        r49 = r6 [#5445173390656D6D()]
0038   0x015C10   43 32 07 00   Move                r50, r7        r50 = r7 [19]
0039   0x015C18   1C 05 05 02   CallFf              r5, r5, 2      r5 = display(#5445173390656D6D(), 19)
003A   0x015C20   2D 3C 00 00   Branch              003C           => L_1
L_0:
003B   0x015C28   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
L_1:
003C   0x015C30   15 05 0B 00   LookupPointer       r5, 11         r5 = ST[11] -> <is-final-build?>
003D   0x015C38   1C 05 05 00   CallFf              r5, r5, 0      r5 = is-final-build?()
003E   0x015C40   30 05 05 00   OpLogNot            r5, r5         r5 = !r5 -> <TRUE>
003F   0x015C48   2F 54 05 00   BranchIfNot         r5, 0054       IF NOT r5 [0x6620ACB7] => L_2
0040   0x015C50   15 05 0C 00   LookupPointer       r5, 12         r5 = ST[12] -> <display>
0041   0x015C58   15 06 0D 00   LookupPointer       r6, 13         r6 = ST[13] -> <#5445173390656D6D>
0042   0x015C60   41 07 10 00   LoadStaticPointerImmr7, 16         r7 = ST[16] -> <0xBF026BEB>
0043   0x015C68   41 08 0F 00   LoadStaticPointerImmr8, 15         r8 = ST[15] -> <0xBF025EFC>
0044   0x015C70   41 09 11 00   LoadStaticPointerImmr9, 17         r9 = ST[17] -> <0xBF0275E6>
0045   0x015C78   43 0A 00 00   Move                r10, r0        r10 = r0 [get-boolean()]
0046   0x015C80   2F 49 0A 00   BranchIfNot         r10, 0049      IF NOT r10 [get-boolean()] => L_3
0047   0x015C88   41 0A 12 00   LoadStaticPointerImmr10, 18        r10 = ST[18] -> <0xBF027754>
0048   0x015C90   2D 4A 00 00   Branch              004A           => L_4
L_3:
0049   0x015C98   41 0A 13 00   LoadStaticPointerImmr10, 19        r10 = ST[19] -> <0xBF027429>
L_4:
004A   0x015CA0   43 31 07 00   Move                r49, r7        r49 = r7 [0xBF026BEB]
004B   0x015CA8   43 32 08 00   Move                r50, r8        r50 = r8 [0xBF025EFC]
004C   0x015CB0   43 33 09 00   Move                r51, r9        r51 = r9 [0xBF0275E6]
004D   0x015CB8   43 34 0A 00   Move                r52, r10       r52 = r10 [0xBF027429]
004E   0x015CC0   1C 06 06 04   CallFf              r6, r6, 4      r6 = #5445173390656D6D(0xBF026BEB, 0xBF025EFC, 0xBF0275E6, 0xBF027429)
004F   0x015CC8   0C 07 13 00   LoadU16Imm          r7, 19         r7 = 19
0050   0x015CD0   43 31 06 00   Move                r49, r6        r49 = r6 [#5445173390656D6D()]
0051   0x015CD8   43 32 07 00   Move                r50, r7        r50 = r7 [19]
0052   0x015CE0   1C 05 05 02   CallFf              r5, r5, 2      r5 = display(#5445173390656D6D(), 19)
0053   0x015CE8   2D 55 00 00   Branch              0055           => L_5
L_2:
0054   0x015CF0   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
L_5:
0055   0x015CF8   15 05 0B 00   LookupPointer       r5, 11         r5 = ST[11] -> <is-final-build?>
0056   0x015D00   1C 05 05 00   CallFf              r5, r5, 0      r5 = is-final-build?()
0057   0x015D08   30 05 05 00   OpLogNot            r5, r5         r5 = !r5 -> <TRUE>
0058   0x015D10   2F 74 05 00   BranchIfNot         r5, 0074       IF NOT r5 [0x6620ACB7] => L_6
0059   0x015D18   15 05 0C 00   LookupPointer       r5, 12         r5 = ST[12] -> <display>
005A   0x015D20   15 06 0D 00   LookupPointer       r6, 13         r6 = ST[13] -> <#5445173390656D6D>
005B   0x015D28   41 07 10 00   LoadStaticPointerImmr7, 16         r7 = ST[16] -> <0xBF026BEB>
005C   0x015D30   41 08 0F 00   LoadStaticPointerImmr8, 15         r8 = ST[15] -> <0xBF025EFC>
005D   0x015D38   41 09 14 00   LoadStaticPointerImmr9, 20         r9 = ST[20] -> <0xBF027685>
005E   0x015D40   43 0A 02 00   Move                r10, r2        r10 = r2 [get-int32()]
005F   0x015D48   0C 0B 00 00   LoadU16Imm          r11, 0         r11 = 0
0060   0x015D50   1E 0A 0A 0B   IGreaterThan        r10, r10, r11  r10 = r10 [-635293440] > r11 [0]
0061   0x015D58   2F 69 0A 00   BranchIfNot         r10, 0069      IF NOT r10 [0xDA223100] => L_7
0062   0x015D60   15 0A 0D 00   LookupPointer       r10, 13        r10 = ST[13] -> <#5445173390656D6D>
0063   0x015D68   41 0B 15 00   LoadStaticPointerImmr11, 21        r11 = ST[21] -> <0xBF025F04>
0064   0x015D70   43 0C 02 00   Move                r12, r2        r12 = r2 [get-int32()]
0065   0x015D78   43 31 0B 00   Move                r49, r11       r49 = r11 [0xBF025F04]
0066   0x015D80   43 32 0C 00   Move                r50, r12       r50 = r12 [get-int32()]
0067   0x015D88   1C 0A 0A 02   CallFf              r10, r10, 2    r10 = #5445173390656D6D(0xBF025F04, get-int32())
0068   0x015D90   2D 6A 00 00   Branch              006A           => L_8
L_7:
0069   0x015D98   41 0A 13 00   LoadStaticPointerImmr10, 19        r10 = ST[19] -> <0xBF027429>
L_8:
006A   0x015DA0   43 31 07 00   Move                r49, r7        r49 = r7 [0xBF026BEB]
006B   0x015DA8   43 32 08 00   Move                r50, r8        r50 = r8 [0xBF025EFC]
006C   0x015DB0   43 33 09 00   Move                r51, r9        r51 = r9 [0xBF027685]
006D   0x015DB8   43 34 0A 00   Move                r52, r10       r52 = r10 [0xBF027429]
006E   0x015DC0   1C 06 06 04   CallFf              r6, r6, 4      r6 = #5445173390656D6D(0xBF026BEB, 0xBF025EFC, 0xBF027685, 0xBF027429)
006F   0x015DC8   0C 07 13 00   LoadU16Imm          r7, 19         r7 = 19
0070   0x015DD0   43 31 06 00   Move                r49, r6        r49 = r6 [#5445173390656D6D()]
0071   0x015DD8   43 32 07 00   Move                r50, r7        r50 = r7 [19]
0072   0x015DE0   1C 05 05 02   CallFf              r5, r5, 2      r5 = display(#5445173390656D6D(), 19)
0073   0x015DE8   2D 75 00 00   Branch              0075           => L_9
L_6:
0074   0x015DF0   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
L_9:
0075   0x015DF8   15 05 0B 00   LookupPointer       r5, 11         r5 = ST[11] -> <is-final-build?>
0076   0x015E00   1C 05 05 00   CallFf              r5, r5, 0      r5 = is-final-build?()
0077   0x015E08   30 05 05 00   OpLogNot            r5, r5         r5 = !r5 -> <TRUE>
0078   0x015E10   2F 94 05 00   BranchIfNot         r5, 0094       IF NOT r5 [0x6620ACB7] => L_10
0079   0x015E18   15 05 0C 00   LookupPointer       r5, 12         r5 = ST[12] -> <display>
007A   0x015E20   15 06 0D 00   LookupPointer       r6, 13         r6 = ST[13] -> <#5445173390656D6D>
007B   0x015E28   41 07 10 00   LoadStaticPointerImmr7, 16         r7 = ST[16] -> <0xBF026BEB>
007C   0x015E30   41 08 0F 00   LoadStaticPointerImmr8, 15         r8 = ST[15] -> <0xBF025EFC>
007D   0x015E38   41 09 16 00   LoadStaticPointerImmr9, 22         r9 = ST[22] -> <0xBF027671>
007E   0x015E40   43 0A 03 00   Move                r10, r3        r10 = r3 [get-int32()]
007F   0x015E48   0C 0B 00 00   LoadU16Imm          r11, 0         r11 = 0
0080   0x015E50   1E 0A 0A 0B   IGreaterThan        r10, r10, r11  r10 = r10 [-635293440] > r11 [0]
0081   0x015E58   2F 89 0A 00   BranchIfNot         r10, 0089      IF NOT r10 [0xDA223100] => L_11
0082   0x015E60   15 0A 0D 00   LookupPointer       r10, 13        r10 = ST[13] -> <#5445173390656D6D>
0083   0x015E68   41 0B 15 00   LoadStaticPointerImmr11, 21        r11 = ST[21] -> <0xBF025F04>
0084   0x015E70   43 0C 03 00   Move                r12, r3        r12 = r3 [get-int32()]
0085   0x015E78   43 31 0B 00   Move                r49, r11       r49 = r11 [0xBF025F04]
0086   0x015E80   43 32 0C 00   Move                r50, r12       r50 = r12 [get-int32()]
0087   0x015E88   1C 0A 0A 02   CallFf              r10, r10, 2    r10 = #5445173390656D6D(0xBF025F04, get-int32())
0088   0x015E90   2D 8A 00 00   Branch              008A           => L_12
L_11:
0089   0x015E98   41 0A 13 00   LoadStaticPointerImmr10, 19        r10 = ST[19] -> <0xBF027429>
L_12:
008A   0x015EA0   43 31 07 00   Move                r49, r7        r49 = r7 [0xBF026BEB]
008B   0x015EA8   43 32 08 00   Move                r50, r8        r50 = r8 [0xBF025EFC]
008C   0x015EB0   43 33 09 00   Move                r51, r9        r51 = r9 [0xBF027671]
008D   0x015EB8   43 34 0A 00   Move                r52, r10       r52 = r10 [0xBF027429]
008E   0x015EC0   1C 06 06 04   CallFf              r6, r6, 4      r6 = #5445173390656D6D(0xBF026BEB, 0xBF025EFC, 0xBF027671, 0xBF027429)
008F   0x015EC8   0C 07 13 00   LoadU16Imm          r7, 19         r7 = 19
0090   0x015ED0   43 31 06 00   Move                r49, r6        r49 = r6 [#5445173390656D6D()]
0091   0x015ED8   43 32 07 00   Move                r50, r7        r50 = r7 [19]
0092   0x015EE0   1C 05 05 02   CallFf              r5, r5, 2      r5 = display(#5445173390656D6D(), 19)
0093   0x015EE8   2D 95 00 00   Branch              0095           => L_13
L_10:
0094   0x015EF0   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
L_13:
0095   0x015EF8   15 05 0B 00   LookupPointer       r5, 11         r5 = ST[11] -> <is-final-build?>
0096   0x015F00   1C 05 05 00   CallFf              r5, r5, 0      r5 = is-final-build?()
0097   0x015F08   30 05 05 00   OpLogNot            r5, r5         r5 = !r5 -> <TRUE>
0098   0x015F10   2F AD 05 00   BranchIfNot         r5, 00AD       IF NOT r5 [0x6620ACB7] => L_14
0099   0x015F18   15 05 0C 00   LookupPointer       r5, 12         r5 = ST[12] -> <display>
009A   0x015F20   15 06 0D 00   LookupPointer       r6, 13         r6 = ST[13] -> <#5445173390656D6D>
009B   0x015F28   41 07 10 00   LoadStaticPointerImmr7, 16         r7 = ST[16] -> <0xBF026BEB>
009C   0x015F30   41 08 0F 00   LoadStaticPointerImmr8, 15         r8 = ST[15] -> <0xBF025EFC>
009D   0x015F38   41 09 17 00   LoadStaticPointerImmr9, 23         r9 = ST[23] -> <0xBF02742C>
009E   0x015F40   43 0A 04 00   Move                r10, r4        r10 = r4 [get-boolean()]
009F   0x015F48   2F A2 0A 00   BranchIfNot         r10, 00A2      IF NOT r10 [get-boolean()] => L_15
00A0   0x015F50   41 0A 18 00   LoadStaticPointerImmr10, 24        r10 = ST[24] -> <0xBF027502>
00A1   0x015F58   2D A3 00 00   Branch              00A3           => L_16
L_15:
00A2   0x015F60   41 0A 19 00   LoadStaticPointerImmr10, 25        r10 = ST[25] -> <0xBF0274FE>
L_16:
00A3   0x015F68   43 31 07 00   Move                r49, r7        r49 = r7 [0xBF026BEB]
00A4   0x015F70   43 32 08 00   Move                r50, r8        r50 = r8 [0xBF025EFC]
00A5   0x015F78   43 33 09 00   Move                r51, r9        r51 = r9 [0xBF02742C]
00A6   0x015F80   43 34 0A 00   Move                r52, r10       r52 = r10 [0xBF0274FE]
00A7   0x015F88   1C 06 06 04   CallFf              r6, r6, 4      r6 = #5445173390656D6D(0xBF026BEB, 0xBF025EFC, 0xBF02742C, 0xBF0274FE)
00A8   0x015F90   0C 07 13 00   LoadU16Imm          r7, 19         r7 = 19
00A9   0x015F98   43 31 06 00   Move                r49, r6        r49 = r6 [#5445173390656D6D()]
00AA   0x015FA0   43 32 07 00   Move                r50, r7        r50 = r7 [19]
00AB   0x015FA8   1C 05 05 02   CallFf              r5, r5, 2      r5 = display(#5445173390656D6D(), 19)
00AC   0x015FB0   2D AE 00 00   Branch              00AE           => L_17
L_14:
00AD   0x015FB8   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
L_17:
00AE   0x015FC0   15 05 0B 00   LookupPointer       r5, 11         r5 = ST[11] -> <is-final-build?>
00AF   0x015FC8   1C 05 05 00   CallFf              r5, r5, 0      r5 = is-final-build?()
00B0   0x015FD0   30 05 05 00   OpLogNot            r5, r5         r5 = !r5 -> <TRUE>
00B1   0x015FD8   2F C8 05 00   BranchIfNot         r5, 00C8       IF NOT r5 [0x6620ACB7] => L_18
00B2   0x015FE0   15 05 0C 00   LookupPointer       r5, 12         r5 = ST[12] -> <display>
00B3   0x015FE8   15 06 0D 00   LookupPointer       r6, 13         r6 = ST[13] -> <#5445173390656D6D>
00B4   0x015FF0   41 07 1A 00   LoadStaticPointerImmr7, 26         r7 = ST[26] -> <0xBF0266DC>
00B5   0x015FF8   41 08 0F 00   LoadStaticPointerImmr8, 15         r8 = ST[15] -> <0xBF025EFC>
00B6   0x016000   15 09 1B 00   LookupPointer       r9, 27         r9 = ST[27] -> <darray-count>
00B7   0x016008   15 0A 08 00   LookupPointer       r10, 8         r10 = ST[8] -> <get-symbol>
00B8   0x016010   4A 0B 1C 00   LoadStaticU64Imm    r11, 28        r11 = ST[28] -> <#129B0447586D0CD8>
00B9   0x016018   4A 0C 02 00   LoadStaticU64Imm    r12, 2         r12 = ST[2] -> <self>
00BA   0x016020   43 31 0B 00   Move                r49, r11       r49 = r11 [#129B0447586D0CD8]
00BB   0x016028   43 32 0C 00   Move                r50, r12       r50 = r12 [self]
00BC   0x016030   1C 0A 0A 02   CallFf              r10, r10, 2    r10 = get-symbol(#129B0447586D0CD8, self)
00BD   0x016038   43 31 0A 00   Move                r49, r10       r49 = r10 [get-symbol()]
00BE   0x016040   1C 09 09 01   CallFf              r9, r9, 1      r9 = darray-count(get-symbol())
00BF   0x016048   43 31 07 00   Move                r49, r7        r49 = r7 [0xBF0266DC]
00C0   0x016050   43 32 08 00   Move                r50, r8        r50 = r8 [0xBF025EFC]
00C1   0x016058   43 33 09 00   Move                r51, r9        r51 = r9 [darray-count()]
00C2   0x016060   1C 06 06 03   CallFf              r6, r6, 3      r6 = #5445173390656D6D(0xBF0266DC, 0xBF025EFC, darray-count())
00C3   0x016068   0C 07 13 00   LoadU16Imm          r7, 19         r7 = 19
00C4   0x016070   43 31 06 00   Move                r49, r6        r49 = r6 [#5445173390656D6D()]
00C5   0x016078   43 32 07 00   Move                r50, r7        r50 = r7 [19]
00C6   0x016080   1C 05 05 02   CallFf              r5, r5, 2      r5 = display(#5445173390656D6D(), 19)
00C7   0x016088   2D C9 00 00   Branch              00C9           => L_19
L_18:
00C8   0x016090   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
L_19:
00C9   0x016098   43 05 02 00   Move                r5, r2         r5 = r2 [get-int32()]
00CA   0x0160A0   0C 06 00 00   LoadU16Imm          r6, 0          r6 = 0
00CB   0x0160A8   1E 05 05 06   IGreaterThan        r5, r5, r6     r5 = r5 [-635293440] > r6 [0]
00CC   0x0160B0   2F 04 05 01   BranchIfNot         r5, 0104       IF NOT r5 [0xDA223100] => L_20
00CD   0x0160B8   15 05 1D 00   LookupPointer       r5, 29         r5 = ST[29] -> <darray-sorted-indices>
00CE   0x0160C0   15 06 08 00   LookupPointer       r6, 8          r6 = ST[8] -> <get-symbol>
00CF   0x0160C8   4A 07 1C 00   LoadStaticU64Imm    r7, 28         r7 = ST[28] -> <#129B0447586D0CD8>
00D0   0x0160D0   4A 08 02 00   LoadStaticU64Imm    r8, 2          r8 = ST[2] -> <self>
00D1   0x0160D8   43 31 07 00   Move                r49, r7        r49 = r7 [#129B0447586D0CD8]
00D2   0x0160E0   43 32 08 00   Move                r50, r8        r50 = r8 [self]
00D3   0x0160E8   1C 06 06 02   CallFf              r6, r6, 2      r6 = get-symbol(#129B0447586D0CD8, self)
00D4   0x0160F0   15 07 1E 00   LookupPointer       r7, 30         r7 = ST[30] -> <#7C28D25188889230>
00D5   0x0160F8   0C 08 00 00   LoadU16Imm          r8, 0          r8 = 0
00D6   0x016100   0C 09 01 00   LoadU16Imm          r9, 1          r9 = 1
00D7   0x016108   43 31 06 00   Move                r49, r6        r49 = r6 [get-symbol()]
00D8   0x016110   43 32 07 00   Move                r50, r7        r50 = r7 [0x88889230]
00D9   0x016118   43 33 08 00   Move                r51, r8        r51 = r8 [0]
00DA   0x016120   43 34 09 00   Move                r52, r9        r52 = r9 [1]
00DB   0x016128   1C 05 05 04   CallFf              r5, r5, 4      r5 = darray-sorted-indices(get-symbol(), 0x88889230, 0, 1)
00DC   0x016130   15 06 1F 00   LookupPointer       r6, 31         r6 = ST[31] -> <darray-clone>
00DD   0x016138   15 07 08 00   LookupPointer       r7, 8          r7 = ST[8] -> <get-symbol>
00DE   0x016140   4A 08 1C 00   LoadStaticU64Imm    r8, 28         r8 = ST[28] -> <#129B0447586D0CD8>
00DF   0x016148   4A 09 02 00   LoadStaticU64Imm    r9, 2          r9 = ST[2] -> <self>
00E0   0x016150   43 31 08 00   Move                r49, r8        r49 = r8 [#129B0447586D0CD8]
00E1   0x016158   43 32 09 00   Move                r50, r9        r50 = r9 [self]
00E2   0x016160   1C 07 07 02   CallFf              r7, r7, 2      r7 = get-symbol(#129B0447586D0CD8, self)
00E3   0x016168   4A 08 20 00   LoadStaticU64Imm    r8, 32         r8 = ST[32] -> <single-frame>
00E4   0x016170   0C 09 00 00   LoadU16Imm          r9, 0          r9 = 0
00E5   0x016178   43 31 07 00   Move                r49, r7        r49 = r7 [get-symbol()]
00E6   0x016180   43 32 08 00   Move                r50, r8        r50 = r8 [single-frame]
00E7   0x016188   43 33 09 00   Move                r51, r9        r51 = r9 [0]
00E8   0x016190   1C 06 06 03   CallFf              r6, r6, 3      r6 = darray-clone(get-symbol(), single-frame, 0)
00E9   0x016198   15 07 07 00   LookupPointer       r7, 7          r7 = ST[7] -> <darray-clear>
00EA   0x0161A0   15 08 08 00   LookupPointer       r8, 8          r8 = ST[8] -> <get-symbol>
00EB   0x0161A8   4A 09 1C 00   LoadStaticU64Imm    r9, 28         r9 = ST[28] -> <#129B0447586D0CD8>
00EC   0x0161B0   4A 0A 02 00   LoadStaticU64Imm    r10, 2         r10 = ST[2] -> <self>
00ED   0x0161B8   43 31 09 00   Move                r49, r9        r49 = r9 [#129B0447586D0CD8]
00EE   0x0161C0   43 32 0A 00   Move                r50, r10       r50 = r10 [self]
00EF   0x0161C8   1C 08 08 02   CallFf              r8, r8, 2      r8 = get-symbol(#129B0447586D0CD8, self)
00F0   0x0161D0   43 31 08 00   Move                r49, r8        r49 = r8 [get-symbol()]
00F1   0x0161D8   1C 07 07 01   CallFf              r7, r7, 1      r7 = darray-clear(get-symbol())
00F2   0x0161E0   15 07 21 00   LookupPointer       r7, 33         r7 = ST[33] -> <darray-copy-into>
00F3   0x0161E8   15 08 08 00   LookupPointer       r8, 8          r8 = ST[8] -> <get-symbol>
00F4   0x0161F0   4A 09 1C 00   LoadStaticU64Imm    r9, 28         r9 = ST[28] -> <#129B0447586D0CD8>
00F5   0x0161F8   4A 0A 02 00   LoadStaticU64Imm    r10, 2         r10 = ST[2] -> <self>
00F6   0x016200   43 31 09 00   Move                r49, r9        r49 = r9 [#129B0447586D0CD8]
00F7   0x016208   43 32 0A 00   Move                r50, r10       r50 = r10 [self]
00F8   0x016210   1C 08 08 02   CallFf              r8, r8, 2      r8 = get-symbol(#129B0447586D0CD8, self)
00F9   0x016218   43 09 06 00   Move                r9, r6         r9 = r6 [darray-clone()]
00FA   0x016220   43 0A 05 00   Move                r10, r5        r10 = r5 [darray-sorted-indices()]
00FB   0x016228   43 31 08 00   Move                r49, r8        r49 = r8 [get-symbol()]
00FC   0x016230   43 32 09 00   Move                r50, r9        r50 = r9 [darray-clone()]
00FD   0x016238   43 33 0A 00   Move                r51, r10       r51 = r10 [darray-sorted-indices()]
00FE   0x016240   1C 07 07 03   CallFf              r7, r7, 3      r7 = darray-copy-into(get-symbol(), darray-clone(), darray-sorted-indices())
00FF   0x016248   43 05 07 00   Move                r5, r7         r5 = r7 [darray-copy-into()]
0100   0x016250   43 05 02 00   Move                r5, r2         r5 = r2 [get-int32()]
0101   0x016258   43 01 05 00   Move                r1, r5         r1 = r5 [get-int32()]
0102   0x016260   43 05 01 00   Move                r5, r1         r5 = r1 [get-int32()]
0103   0x016268   2D 3A 00 01   Branch              013A           => L_21
L_20:
0104   0x016270   15 05 1D 00   LookupPointer       r5, 29         r5 = ST[29] -> <darray-sorted-indices>
0105   0x016278   15 06 08 00   LookupPointer       r6, 8          r6 = ST[8] -> <get-symbol>
0106   0x016280   4A 07 1C 00   LoadStaticU64Imm    r7, 28         r7 = ST[28] -> <#129B0447586D0CD8>
0107   0x016288   4A 08 02 00   LoadStaticU64Imm    r8, 2          r8 = ST[2] -> <self>
0108   0x016290   43 31 07 00   Move                r49, r7        r49 = r7 [#129B0447586D0CD8]
0109   0x016298   43 32 08 00   Move                r50, r8        r50 = r8 [self]
010A   0x0162A0   1C 06 06 02   CallFf              r6, r6, 2      r6 = get-symbol(#129B0447586D0CD8, self)
010B   0x0162A8   15 07 22 00   LookupPointer       r7, 34         r7 = ST[34] -> <#E16F9CC43A37FADA>
010C   0x0162B0   0C 08 00 00   LoadU16Imm          r8, 0          r8 = 0
010D   0x0162B8   0C 09 01 00   LoadU16Imm          r9, 1          r9 = 1
010E   0x0162C0   43 31 06 00   Move                r49, r6        r49 = r6 [get-symbol()]
010F   0x0162C8   43 32 07 00   Move                r50, r7        r50 = r7 [0x3A37FADA]
0110   0x0162D0   43 33 08 00   Move                r51, r8        r51 = r8 [0]
0111   0x0162D8   43 34 09 00   Move                r52, r9        r52 = r9 [1]
0112   0x0162E0   1C 05 05 04   CallFf              r5, r5, 4      r5 = darray-sorted-indices(get-symbol(), 0x3A37FADA, 0, 1)
0113   0x0162E8   15 06 1F 00   LookupPointer       r6, 31         r6 = ST[31] -> <darray-clone>
0114   0x0162F0   15 07 08 00   LookupPointer       r7, 8          r7 = ST[8] -> <get-symbol>
0115   0x0162F8   4A 08 1C 00   LoadStaticU64Imm    r8, 28         r8 = ST[28] -> <#129B0447586D0CD8>
0116   0x016300   4A 09 02 00   LoadStaticU64Imm    r9, 2          r9 = ST[2] -> <self>
0117   0x016308   43 31 08 00   Move                r49, r8        r49 = r8 [#129B0447586D0CD8]
0118   0x016310   43 32 09 00   Move                r50, r9        r50 = r9 [self]
0119   0x016318   1C 07 07 02   CallFf              r7, r7, 2      r7 = get-symbol(#129B0447586D0CD8, self)
011A   0x016320   4A 08 20 00   LoadStaticU64Imm    r8, 32         r8 = ST[32] -> <single-frame>
011B   0x016328   0C 09 00 00   LoadU16Imm          r9, 0          r9 = 0
011C   0x016330   43 31 07 00   Move                r49, r7        r49 = r7 [get-symbol()]
011D   0x016338   43 32 08 00   Move                r50, r8        r50 = r8 [single-frame]
011E   0x016340   43 33 09 00   Move                r51, r9        r51 = r9 [0]
011F   0x016348   1C 06 06 03   CallFf              r6, r6, 3      r6 = darray-clone(get-symbol(), single-frame, 0)
0120   0x016350   15 07 07 00   LookupPointer       r7, 7          r7 = ST[7] -> <darray-clear>
0121   0x016358   15 08 08 00   LookupPointer       r8, 8          r8 = ST[8] -> <get-symbol>
0122   0x016360   4A 09 1C 00   LoadStaticU64Imm    r9, 28         r9 = ST[28] -> <#129B0447586D0CD8>
0123   0x016368   4A 0A 02 00   LoadStaticU64Imm    r10, 2         r10 = ST[2] -> <self>
0124   0x016370   43 31 09 00   Move                r49, r9        r49 = r9 [#129B0447586D0CD8]
0125   0x016378   43 32 0A 00   Move                r50, r10       r50 = r10 [self]
0126   0x016380   1C 08 08 02   CallFf              r8, r8, 2      r8 = get-symbol(#129B0447586D0CD8, self)
0127   0x016388   43 31 08 00   Move                r49, r8        r49 = r8 [get-symbol()]
0128   0x016390   1C 07 07 01   CallFf              r7, r7, 1      r7 = darray-clear(get-symbol())
0129   0x016398   15 07 21 00   LookupPointer       r7, 33         r7 = ST[33] -> <darray-copy-into>
012A   0x0163A0   15 08 08 00   LookupPointer       r8, 8          r8 = ST[8] -> <get-symbol>
012B   0x0163A8   4A 09 1C 00   LoadStaticU64Imm    r9, 28         r9 = ST[28] -> <#129B0447586D0CD8>
012C   0x0163B0   4A 0A 02 00   LoadStaticU64Imm    r10, 2         r10 = ST[2] -> <self>
012D   0x0163B8   43 31 09 00   Move                r49, r9        r49 = r9 [#129B0447586D0CD8]
012E   0x0163C0   43 32 0A 00   Move                r50, r10       r50 = r10 [self]
012F   0x0163C8   1C 08 08 02   CallFf              r8, r8, 2      r8 = get-symbol(#129B0447586D0CD8, self)
0130   0x0163D0   43 09 06 00   Move                r9, r6         r9 = r6 [darray-clone()]
0131   0x0163D8   43 0A 05 00   Move                r10, r5        r10 = r5 [darray-sorted-indices()]
0132   0x0163E0   43 31 08 00   Move                r49, r8        r49 = r8 [get-symbol()]
0133   0x0163E8   43 32 09 00   Move                r50, r9        r50 = r9 [darray-clone()]
0134   0x0163F0   43 33 0A 00   Move                r51, r10       r51 = r10 [darray-sorted-indices()]
0135   0x0163F8   1C 07 07 03   CallFf              r7, r7, 3      r7 = darray-copy-into(get-symbol(), darray-clone(), darray-sorted-indices())
0136   0x016400   43 05 07 00   Move                r5, r7         r5 = r7 [darray-copy-into()]
0137   0x016408   43 05 03 00   Move                r5, r3         r5 = r3 [get-int32()]
0138   0x016410   43 01 05 00   Move                r1, r5         r1 = r5 [get-int32()]
0139   0x016418   43 05 01 00   Move                r5, r1         r5 = r1 [get-int32()]
L_21:
013A   0x016420   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
L_42:
013B   0x016428   43 06 05 00   Move                r6, r5         r6 = r5 [0]
013C   0x016430   15 07 1B 00   LookupPointer       r7, 27         r7 = ST[27] -> <darray-count>
013D   0x016438   15 08 08 00   LookupPointer       r8, 8          r8 = ST[8] -> <get-symbol>
013E   0x016440   4A 09 1C 00   LoadStaticU64Imm    r9, 28         r9 = ST[28] -> <#129B0447586D0CD8>
013F   0x016448   4A 0A 02 00   LoadStaticU64Imm    r10, 2         r10 = ST[2] -> <self>
0140   0x016450   43 31 09 00   Move                r49, r9        r49 = r9 [#129B0447586D0CD8]
0141   0x016458   43 32 0A 00   Move                r50, r10       r50 = r10 [self]
0142   0x016460   1C 08 08 02   CallFf              r8, r8, 2      r8 = get-symbol(#129B0447586D0CD8, self)
0143   0x016468   43 31 08 00   Move                r49, r8        r49 = r8 [get-symbol()]
0144   0x016470   1C 07 07 01   CallFf              r7, r7, 1      r7 = darray-count(get-symbol())
0145   0x016478   20 06 06 07   ILessThan           r6, r6, r7     r6 = r6 [1] < r7 [1753163078]
0146   0x016480   2F 43 06 02   BranchIfNot         r6, 0243       IF NOT r6 [0x1] => L_22
0147   0x016488   15 06 23 00   LookupPointer       r6, 35         r6 = ST[35] -> <darray-at>
0148   0x016490   15 07 08 00   LookupPointer       r7, 8          r7 = ST[8] -> <get-symbol>
0149   0x016498   4A 08 1C 00   LoadStaticU64Imm    r8, 28         r8 = ST[28] -> <#129B0447586D0CD8>
014A   0x0164A0   4A 09 02 00   LoadStaticU64Imm    r9, 2          r9 = ST[2] -> <self>
014B   0x0164A8   43 31 08 00   Move                r49, r8        r49 = r8 [#129B0447586D0CD8]
014C   0x0164B0   43 32 09 00   Move                r50, r9        r50 = r9 [self]
014D   0x0164B8   1C 07 07 02   CallFf              r7, r7, 2      r7 = get-symbol(#129B0447586D0CD8, self)
014E   0x0164C0   43 08 05 00   Move                r8, r5         r8 = r5 [0]
014F   0x0164C8   43 31 07 00   Move                r49, r7        r49 = r7 [get-symbol()]
0150   0x0164D0   43 32 08 00   Move                r50, r8        r50 = r8 [0]
0151   0x0164D8   1C 06 06 02   CallFf              r6, r6, 2      r6 = darray-at(get-symbol(), 0)
0152   0x0164E0   43 07 06 00   Move                r7, r6         r7 = r6 [darray-at()]
0153   0x0164E8   2F 5A 07 01   BranchIfNot         r7, 015A       IF NOT r7 [darray-at()] => L_23
0154   0x0164F0   43 07 06 00   Move                r7, r6         r7 = r6 [darray-at()]
0155   0x0164F8   5D 07 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0156   0x016500   3B 07 07 0C   IAddImm             r7, r7, 12     r7 = r7 [-739117676] / 12 -> <-739117676>
0157   0x016508   4E 07 07 00   LoadU16             ???            UNKNOWN INSTRUCTION
0158   0x016510   0C 08 07 00   LoadU16Imm          r8, 7          r8 = 7
0159   0x016518   1D 07 07 08   IEqual              r7, r7, r8     r7 = r7 [-739117824] == r8 [7]
L_23:
015A   0x016520   2F 5F 07 01   BranchIfNot         r7, 015F       IF NOT r7 [0xD3F1F500] => L_24
015B   0x016528   43 07 06 00   Move                r7, r6         r7 = r6 [darray-at()]
015C   0x016530   5D 07 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
015D   0x016538   51 07 07 00   LoadU64             r7, [r7]       r7 = [0x0 + 0x0]
015E   0x016540   2D 7A 00 01   Branch              017A           => L_25
L_24:
015F   0x016548   43 07 06 00   Move                r7, r6         r7 = r6 [darray-at()]
0160   0x016550   2F 67 07 01   BranchIfNot         r7, 0167       IF NOT r7 [darray-at()] => L_26
0161   0x016558   43 07 06 00   Move                r7, r6         r7 = r6 [darray-at()]
0162   0x016560   5D 07 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0163   0x016568   3B 07 07 0C   IAddImm             r7, r7, 12     r7 = r7 [-739117676] / 12 -> <-739117676>
0164   0x016570   4E 07 07 00   LoadU16             ???            UNKNOWN INSTRUCTION
0165   0x016578   0C 08 05 00   LoadU16Imm          r8, 5          r8 = 5
0166   0x016580   1D 07 07 08   IEqual              r7, r7, r8     r7 = r7 [-739117824] == r8 [5]
L_26:
0167   0x016588   2F 6C 07 01   BranchIfNot         r7, 016C       IF NOT r7 [0xD3F1F500] => L_27
0168   0x016590   43 07 06 00   Move                r7, r6         r7 = r6 [darray-at()]
0169   0x016598   5D 07 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
016A   0x0165A0   51 07 07 00   LoadU64             r7, [r7]       r7 = [0x0 + 0x0]
016B   0x0165A8   2D 7A 00 01   Branch              017A           => L_25
L_27:
016C   0x0165B0   43 07 06 00   Move                r7, r6         r7 = r6 [darray-at()]
016D   0x0165B8   2F 74 07 01   BranchIfNot         r7, 0174       IF NOT r7 [darray-at()] => L_28
016E   0x0165C0   43 07 06 00   Move                r7, r6         r7 = r6 [darray-at()]
016F   0x0165C8   5D 07 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0170   0x0165D0   3B 07 07 0C   IAddImm             r7, r7, 12     r7 = r7 [-739117676] / 12 -> <-739117676>
0171   0x0165D8   4E 07 07 00   LoadU16             ???            UNKNOWN INSTRUCTION
0172   0x0165E0   0C 08 04 00   LoadU16Imm          r8, 4          r8 = 4
0173   0x0165E8   1D 07 07 08   IEqual              r7, r7, r8     r7 = r7 [-739117824] == r8 [4]
L_28:
0174   0x0165F0   2F 79 07 01   BranchIfNot         r7, 0179       IF NOT r7 [0xD3F1F500] => L_29
0175   0x0165F8   43 07 06 00   Move                r7, r6         r7 = r6 [darray-at()]
0176   0x016600   5D 07 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0177   0x016608   51 07 07 00   LoadU64             r7, [r7]       r7 = [0x0 + 0x0]
0178   0x016610   2D 7A 00 01   Branch              017A           => L_25
L_29:
0179   0x016618   0C 07 00 00   LoadU16Imm          r7, 0          r7 = 0
L_25:
017A   0x016620   43 06 07 00   Move                r6, r7         r6 = r7 [0]
017B   0x016628   15 07 24 00   LookupPointer       r7, 36         r7 = ST[36] -> <string-debug>
017C   0x016630   43 08 06 00   Move                r8, r6         r8 = r6 [0]
017D   0x016638   43 31 08 00   Move                r49, r8        r49 = r8 [0]
017E   0x016640   1C 07 07 01   CallFf              r7, r7, 1      r7 = string-debug(0)
017F   0x016648   15 08 0D 00   LookupPointer       r8, 13         r8 = ST[13] -> <#5445173390656D6D>
0180   0x016650   41 09 25 00   LoadStaticPointerImmr9, 37         r9 = ST[37] -> <0xBF027837>
0181   0x016658   15 0A 26 00   LookupPointer       r10, 38        r10 = ST[38] -> <distance-between-points>
0182   0x016660   15 0B 27 00   LookupPointer       r11, 39        r11 = ST[39] -> <get-object-position>
0183   0x016668   4A 0C 28 00   LoadStaticU64Imm    r12, 40        r12 = ST[40] -> <player>
0184   0x016670   43 31 0C 00   Move                r49, r12       r49 = r12 [player]
0185   0x016678   1C 0B 0B 01   CallFf              r11, r11, 1    r11 = get-object-position(player)
0186   0x016680   15 0C 29 00   LookupPointer       r12, 41        r12 = ST[41] -> <get-region-centroid>
0187   0x016688   43 0D 06 00   Move                r13, r6        r13 = r6 [0]
0188   0x016690   0C 0E 00 00   LoadU16Imm          r14, 0         r14 = 0
0189   0x016698   43 31 0D 00   Move                r49, r13       r49 = r13 [0]
018A   0x0166A0   43 32 0E 00   Move                r50, r14       r50 = r14 [0]
018B   0x0166A8   1C 0C 0C 02   CallFf              r12, r12, 2    r12 = get-region-centroid(0, 0)
018C   0x0166B0   43 31 0B 00   Move                r49, r11       r49 = r11 [get-object-position()]
018D   0x0166B8   43 32 0C 00   Move                r50, r12       r50 = r12 [get-region-centroid()]
018E   0x0166C0   1B 0A 0A 02   Call                r10, r10, 2    r10 = distance-between-points(get-object-position(), get-region-centroid())
018F   0x0166C8   43 31 09 00   Move                r49, r9        r49 = r9 [0xBF027837]
0190   0x0166D0   43 32 0A 00   Move                r50, r10       r50 = r10 [distance-between-points()]
0191   0x0166D8   1C 08 08 02   CallFf              r8, r8, 2      r8 = #5445173390656D6D(0xBF027837, distance-between-points())
0192   0x0166E0   41 09 0F 00   LoadStaticPointerImmr9, 15         r9 = ST[15] -> <0xBF025EFC>
0193   0x0166E8   15 0A 2A 00   LookupPointer       r10, 42        r10 = ST[42] -> <player-in-region?>
0194   0x0166F0   43 0B 06 00   Move                r11, r6        r11 = r6 [0]
0195   0x0166F8   0C 0C 02 00   LoadU16Imm          r12, 2         r12 = 2
0196   0x016700   43 31 0B 00   Move                r49, r11       r49 = r11 [0]
0197   0x016708   43 32 0C 00   Move                r50, r12       r50 = r12 [2]
0198   0x016710   1C 0A 0A 02   CallFf              r10, r10, 2    r10 = player-in-region?(0, 2)
0199   0x016718   2F B0 0A 01   BranchIfNot         r10, 01B0      IF NOT r10 [player-in-region?()] => L_30
019A   0x016720   15 0A 2B 00   LookupPointer       r10, 43        r10 = ST[43] -> <darray-append>
019B   0x016728   15 0B 08 00   LookupPointer       r11, 8         r11 = ST[8] -> <get-symbol>
019C   0x016730   4A 0C 09 00   LoadStaticU64Imm    r12, 9         r12 = ST[9] -> <#ACA135ADD5938983>
019D   0x016738   4A 0D 02 00   LoadStaticU64Imm    r13, 2         r13 = ST[2] -> <self>
019E   0x016740   43 31 0C 00   Move                r49, r12       r49 = r12 [#ACA135ADD5938983]
019F   0x016748   43 32 0D 00   Move                r50, r13       r50 = r13 [self]
01A0   0x016750   1C 0B 0B 02   CallFf              r11, r11, 2    r11 = get-symbol(#ACA135ADD5938983, self)
01A1   0x016758   15 0C 2C 00   LookupPointer       r12, 44        r12 = ST[44] -> <new-boxed-value>
01A2   0x016760   0C 0D 07 00   LoadU16Imm          r13, 7         r13 = 7
01A3   0x016768   43 0E 06 00   Move                r14, r6        r14 = r6 [0]
01A4   0x016770   43 31 0D 00   Move                r49, r13       r49 = r13 [7]
01A5   0x016778   43 32 0E 00   Move                r50, r14       r50 = r14 [0]
01A6   0x016780   1C 0C 0C 02   CallFf              r12, r12, 2    r12 = new-boxed-value(7, 0)
01A7   0x016788   0C 0D 01 00   LoadU16Imm          r13, 1         r13 = 1
01A8   0x016790   43 31 0B 00   Move                r49, r11       r49 = r11 [get-symbol()]
01A9   0x016798   43 32 0C 00   Move                r50, r12       r50 = r12 [new-boxed-value()]
01AA   0x0167A0   43 33 0D 00   Move                r51, r13       r51 = r13 [1]
01AB   0x0167A8   1C 0A 0A 03   CallFf              r10, r10, 3    r10 = darray-append(get-symbol(), new-boxed-value(), 1)
01AC   0x0167B0   41 0A 2D 00   LoadStaticPointerImmr10, 45        r10 = ST[45] -> <0xBF025FB2>
01AD   0x0167B8   43 09 0A 00   Move                r9, r10        r9 = r10 [0xBF025FB2]
01AE   0x0167C0   43 0A 09 00   Move                r10, r9        r10 = r9 [0xBF025FB2]
01AF   0x0167C8   2D 21 00 02   Branch              0221           => L_31
L_30:
01B0   0x0167D0   15 0A 2E 00   LookupPointer       r10, 46        r10 = ST[46] -> <darray-contains?>
01B1   0x0167D8   15 0B 08 00   LookupPointer       r11, 8         r11 = ST[8] -> <get-symbol>
01B2   0x0167E0   4A 0C 2F 00   LoadStaticU64Imm    r12, 47        r12 = ST[47] -> <#E44FA889CD257D23>
01B3   0x0167E8   4A 0D 02 00   LoadStaticU64Imm    r13, 2         r13 = ST[2] -> <self>
01B4   0x0167F0   43 31 0C 00   Move                r49, r12       r49 = r12 [#E44FA889CD257D23]
01B5   0x0167F8   43 32 0D 00   Move                r50, r13       r50 = r13 [self]
01B6   0x016800   1C 0B 0B 02   CallFf              r11, r11, 2    r11 = get-symbol(#E44FA889CD257D23, self)
01B7   0x016808   15 0C 2C 00   LookupPointer       r12, 44        r12 = ST[44] -> <new-boxed-value>
01B8   0x016810   0C 0D 07 00   LoadU16Imm          r13, 7         r13 = 7
01B9   0x016818   43 0E 06 00   Move                r14, r6        r14 = r6 [0]
01BA   0x016820   43 31 0D 00   Move                r49, r13       r49 = r13 [7]
01BB   0x016828   43 32 0E 00   Move                r50, r14       r50 = r14 [0]
01BC   0x016830   1C 0C 0C 02   CallFf              r12, r12, 2    r12 = new-boxed-value(7, 0)
01BD   0x016838   43 31 0B 00   Move                r49, r11       r49 = r11 [get-symbol()]
01BE   0x016840   43 32 0C 00   Move                r50, r12       r50 = r12 [new-boxed-value()]
01BF   0x016848   1C 0A 0A 02   CallFf              r10, r10, 2    r10 = darray-contains?(get-symbol(), new-boxed-value())
01C0   0x016850   2F C5 0A 01   BranchIfNot         r10, 01C5      IF NOT r10 [darray-contains?()] => L_32
01C1   0x016858   41 0A 30 00   LoadStaticPointerImmr10, 48        r10 = ST[48] -> <0xBF025F6E>
01C2   0x016860   43 09 0A 00   Move                r9, r10        r9 = r10 [0xBF025F6E]
01C3   0x016868   43 0A 09 00   Move                r10, r9        r10 = r9 [0xBF025F6E]
01C4   0x016870   2D 21 00 02   Branch              0221           => L_31
L_32:
01C5   0x016878   0C 0A 01 00   LoadU16Imm          r10, 1         r10 = 1
01C6   0x016880   43 0B 00 00   Move                r11, r0        r11 = r0 [get-boolean]
01C7   0x016888   1D 0A 0A 0B   IEqual              r10, r10, r11  r10 = r10 [0] == r11 [-62108282]
01C8   0x016890   2F D1 0A 01   BranchIfNot         r10, 01D1      IF NOT r10 [0x0] => L_33
01C9   0x016898   0C 0A 01 00   LoadU16Imm          r10, 1         r10 = 1
01CA   0x0168A0   15 0B 00 00   LookupPointer       r11, 0         r11 = ST[0] -> <get-boolean>
01CB   0x0168A8   4A 0C 06 00   LoadStaticU64Imm    r12, 6         r12 = ST[6] -> <#1FD0D5BACF6C26B1>
01CC   0x0168B0   4A 0D 02 00   LoadStaticU64Imm    r13, 2         r13 = ST[2] -> <self>
01CD   0x0168B8   43 31 0C 00   Move                r49, r12       r49 = r12 [#1FD0D5BACF6C26B1]
01CE   0x0168C0   43 32 0D 00   Move                r50, r13       r50 = r13 [self]
01CF   0x0168C8   1C 0B 0B 02   CallFf              r11, r11, 2    r11 = get-boolean(#1FD0D5BACF6C26B1, self)
01D0   0x0168D0   1D 0A 0A 0B   IEqual              r10, r10, r11  r10 = r10 [0] == r11 [-62108282]
L_33:
01D1   0x0168D8   2F E2 0A 01   BranchIfNot         r10, 01E2      IF NOT r10 [0x0] => L_34
01D2   0x0168E0   15 0A 2E 00   LookupPointer       r10, 46        r10 = ST[46] -> <darray-contains?>
01D3   0x0168E8   15 0B 08 00   LookupPointer       r11, 8         r11 = ST[8] -> <get-symbol>
01D4   0x0168F0   4A 0C 31 00   LoadStaticU64Imm    r12, 49        r12 = ST[49] -> <#0B2B4ACCA5F49744>
01D5   0x0168F8   4A 0D 02 00   LoadStaticU64Imm    r13, 2         r13 = ST[2] -> <self>
01D6   0x016900   43 31 0C 00   Move                r49, r12       r49 = r12 [#0B2B4ACCA5F49744]
01D7   0x016908   43 32 0D 00   Move                r50, r13       r50 = r13 [self]
01D8   0x016910   1C 0B 0B 02   CallFf              r11, r11, 2    r11 = get-symbol(#0B2B4ACCA5F49744, self)
01D9   0x016918   15 0C 2C 00   LookupPointer       r12, 44        r12 = ST[44] -> <new-boxed-value>
01DA   0x016920   0C 0D 07 00   LoadU16Imm          r13, 7         r13 = 7
01DB   0x016928   43 0E 06 00   Move                r14, r6        r14 = r6 [0]
01DC   0x016930   43 31 0D 00   Move                r49, r13       r49 = r13 [7]
01DD   0x016938   43 32 0E 00   Move                r50, r14       r50 = r14 [0]
01DE   0x016940   1C 0C 0C 02   CallFf              r12, r12, 2    r12 = new-boxed-value(7, 0)
01DF   0x016948   43 31 0B 00   Move                r49, r11       r49 = r11 [get-symbol()]
01E0   0x016950   43 32 0C 00   Move                r50, r12       r50 = r12 [new-boxed-value()]
01E1   0x016958   1C 0A 0A 02   CallFf              r10, r10, 2    r10 = darray-contains?(get-symbol(), new-boxed-value())
L_34:
01E2   0x016960   2F E7 0A 01   BranchIfNot         r10, 01E7      IF NOT r10 [darray-contains?()] => L_35
01E3   0x016968   41 0A 32 00   LoadStaticPointerImmr10, 50        r10 = ST[50] -> <0xBF025F42>
01E4   0x016970   43 09 0A 00   Move                r9, r10        r9 = r10 [0xBF025F42]
01E5   0x016978   43 0A 09 00   Move                r10, r9        r10 = r9 [0xBF025F42]
01E6   0x016980   2D 21 00 02   Branch              0221           => L_31
L_35:
01E7   0x016988   43 0A 01 00   Move                r10, r1        r10 = r1 [get-int32()]
01E8   0x016990   0C 0B 00 00   LoadU16Imm          r11, 0         r11 = 0
01E9   0x016998   1E 0A 0A 0B   IGreaterThan        r10, r10, r11  r10 = r10 [-635293440] > r11 [0]
01EA   0x0169A0   2F F8 0A 01   BranchIfNot         r10, 01F8      IF NOT r10 [0xDA223100] => L_36
01EB   0x0169A8   43 0A 05 00   Move                r10, r5        r10 = r5 [0]
01EC   0x0169B0   43 0B 01 00   Move                r11, r1        r11 = r1 [get-int32()]
01ED   0x0169B8   15 0C 1B 00   LookupPointer       r12, 27        r12 = ST[27] -> <darray-count>
01EE   0x0169C0   15 0D 08 00   LookupPointer       r13, 8         r13 = ST[8] -> <get-symbol>
01EF   0x0169C8   4A 0E 09 00   LoadStaticU64Imm    r14, 9         r14 = ST[9] -> <#ACA135ADD5938983>
01F0   0x0169D0   4A 0F 02 00   LoadStaticU64Imm    r15, 2         r15 = ST[2] -> <self>
01F1   0x0169D8   43 31 0E 00   Move                r49, r14       r49 = r14 [#ACA135ADD5938983]
01F2   0x0169E0   43 32 0F 00   Move                r50, r15       r50 = r15 [self]
01F3   0x0169E8   1C 0D 0D 02   CallFf              r13, r13, 2    r13 = get-symbol(#ACA135ADD5938983, self)
01F4   0x0169F0   43 31 0D 00   Move                r49, r13       r49 = r13 [get-symbol()]
01F5   0x0169F8   1C 0C 0C 01   CallFf              r12, r12, 1    r12 = darray-count(get-symbol())
01F6   0x016A00   01 0B 0B 0C   IAdd                r11, r11, r12  1117869672 = get-int32() + darray-count()
01F7   0x016A08   1F 0A 0A 0B   IGreaterThanEqual   r10, r10, r11  r10 = r10 [1] >= r11 [1117869672]
L_36:
01F8   0x016A10   2F 0F 0A 02   BranchIfNot         r10, 020F      IF NOT r10 [0x1] => L_37
01F9   0x016A18   43 0A 02 00   Move                r10, r2        r10 = r2 [get-int32()]
01FA   0x016A20   0C 0B 00 00   LoadU16Imm          r11, 0         r11 = 0
01FB   0x016A28   1E 0A 0A 0B   IGreaterThan        r10, r10, r11  r10 = r10 [-635293440] > r11 [0]
01FC   0x016A30   2F 06 0A 02   BranchIfNot         r10, 0206      IF NOT r10 [0xDA223100] => L_38
01FD   0x016A38   15 0A 0D 00   LookupPointer       r10, 13        r10 = ST[13] -> <#5445173390656D6D>
01FE   0x016A40   41 0B 33 00   LoadStaticPointerImmr11, 51        r11 = ST[51] -> <0xBF025F9C>
01FF   0x016A48   43 0C 02 00   Move                r12, r2        r12 = r2 [get-int32()]
0200   0x016A50   43 31 0B 00   Move                r49, r11       r49 = r11 [0xBF025F9C]
0201   0x016A58   43 32 0C 00   Move                r50, r12       r50 = r12 [get-int32()]
0202   0x016A60   1C 0A 0A 02   CallFf              r10, r10, 2    r10 = #5445173390656D6D(0xBF025F9C, get-int32())
0203   0x016A68   43 09 0A 00   Move                r9, r10        r9 = r10 [#5445173390656D6D()]
0204   0x016A70   43 0A 09 00   Move                r10, r9        r10 = r9 [#5445173390656D6D()]
0205   0x016A78   2D 0E 00 02   Branch              020E           => L_39
L_38:
0206   0x016A80   15 0A 0D 00   LookupPointer       r10, 13        r10 = ST[13] -> <#5445173390656D6D>
0207   0x016A88   41 0B 34 00   LoadStaticPointerImmr11, 52        r11 = ST[52] -> <0xBF025F87>
0208   0x016A90   43 0C 03 00   Move                r12, r3        r12 = r3 [get-int32()]
0209   0x016A98   43 31 0B 00   Move                r49, r11       r49 = r11 [0xBF025F87]
020A   0x016AA0   43 32 0C 00   Move                r50, r12       r50 = r12 [get-int32()]
020B   0x016AA8   1C 0A 0A 02   CallFf              r10, r10, 2    r10 = #5445173390656D6D(0xBF025F87, get-int32())
020C   0x016AB0   43 09 0A 00   Move                r9, r10        r9 = r10 [#5445173390656D6D()]
020D   0x016AB8   43 0A 09 00   Move                r10, r9        r10 = r9 [#5445173390656D6D()]
L_39:
020E   0x016AC0   2D 21 00 02   Branch              0221           => L_31
L_37:
020F   0x016AC8   15 0A 2B 00   LookupPointer       r10, 43        r10 = ST[43] -> <darray-append>
0210   0x016AD0   15 0B 08 00   LookupPointer       r11, 8         r11 = ST[8] -> <get-symbol>
0211   0x016AD8   4A 0C 0A 00   LoadStaticU64Imm    r12, 10        r12 = ST[10] -> <#80F4C52A6BDCA6BC>
0212   0x016AE0   4A 0D 02 00   LoadStaticU64Imm    r13, 2         r13 = ST[2] -> <self>
0213   0x016AE8   43 31 0C 00   Move                r49, r12       r49 = r12 [#80F4C52A6BDCA6BC]
0214   0x016AF0   43 32 0D 00   Move                r50, r13       r50 = r13 [self]
0215   0x016AF8   1C 0B 0B 02   CallFf              r11, r11, 2    r11 = get-symbol(#80F4C52A6BDCA6BC, self)
0216   0x016B00   15 0C 2C 00   LookupPointer       r12, 44        r12 = ST[44] -> <new-boxed-value>
0217   0x016B08   0C 0D 07 00   LoadU16Imm          r13, 7         r13 = 7
0218   0x016B10   43 0E 06 00   Move                r14, r6        r14 = r6 [0]
0219   0x016B18   43 31 0D 00   Move                r49, r13       r49 = r13 [7]
021A   0x016B20   43 32 0E 00   Move                r50, r14       r50 = r14 [0]
021B   0x016B28   1C 0C 0C 02   CallFf              r12, r12, 2    r12 = new-boxed-value(7, 0)
021C   0x016B30   0C 0D 01 00   LoadU16Imm          r13, 1         r13 = 1
021D   0x016B38   43 31 0B 00   Move                r49, r11       r49 = r11 [get-symbol()]
021E   0x016B40   43 32 0C 00   Move                r50, r12       r50 = r12 [new-boxed-value()]
021F   0x016B48   43 33 0D 00   Move                r51, r13       r51 = r13 [1]
0220   0x016B50   1C 0A 0A 03   CallFf              r10, r10, 3    r10 = darray-append(get-symbol(), new-boxed-value(), 1)
L_31:
0221   0x016B58   15 0A 0B 00   LookupPointer       r10, 11        r10 = ST[11] -> <is-final-build?>
0222   0x016B60   1C 0A 0A 00   CallFf              r10, r10, 0    r10 = is-final-build?()
0223   0x016B68   30 0A 0A 00   OpLogNot            r10, r10       r10 = !r10 -> <TRUE>
0224   0x016B70   2F 37 0A 02   BranchIfNot         r10, 0237      IF NOT r10 [0x6620ACB7] => L_40
0225   0x016B78   15 0A 0C 00   LookupPointer       r10, 12        r10 = ST[12] -> <display>
0226   0x016B80   15 0B 0D 00   LookupPointer       r11, 13        r11 = ST[13] -> <#5445173390656D6D>
0227   0x016B88   41 0C 35 00   LoadStaticPointerImmr12, 53        r12 = ST[53] -> <0xBF026F78>
0228   0x016B90   41 0D 0F 00   LoadStaticPointerImmr13, 15        r13 = ST[15] -> <0xBF025EFC>
0229   0x016B98   43 0E 07 00   Move                r14, r7        r14 = r7 [string-debug()]
022A   0x016BA0   43 0F 08 00   Move                r15, r8        r15 = r8 [#5445173390656D6D()]
022B   0x016BA8   43 10 09 00   Move                r16, r9        r16 = r9 [#5445173390656D6D()]
022C   0x016BB0   43 31 0C 00   Move                r49, r12       r49 = r12 [0xBF026F78]
022D   0x016BB8   43 32 0D 00   Move                r50, r13       r50 = r13 [0xBF025EFC]
022E   0x016BC0   43 33 0E 00   Move                r51, r14       r51 = r14 [string-debug()]
022F   0x016BC8   43 34 0F 00   Move                r52, r15       r52 = r15 [#5445173390656D6D()]
0230   0x016BD0   43 35 10 00   Move                r53, r16       r53 = r16 [#5445173390656D6D()]
0231   0x016BD8   1C 0B 0B 05   CallFf              r11, r11, 5    r11 = #5445173390656D6D(0xBF026F78, 0xBF025EFC, string-debug(), #5445173390656D6D(), #5445173390656D6D())
0232   0x016BE0   0C 0C 13 00   LoadU16Imm          r12, 19        r12 = 19
0233   0x016BE8   43 31 0B 00   Move                r49, r11       r49 = r11 [#5445173390656D6D()]
0234   0x016BF0   43 32 0C 00   Move                r50, r12       r50 = r12 [19]
0235   0x016BF8   1C 0A 0A 02   CallFf              r10, r10, 2    r10 = display(#5445173390656D6D(), 19)
0236   0x016C00   2D 38 00 02   Branch              0238           => L_41
L_40:
0237   0x016C08   0C 0A 00 00   LoadU16Imm          r10, 0         r10 = 0
L_41:
0238   0x016C10   43 0A 0A 00   Move                r10, r10       r10 = r10 [0]
0239   0x016C18   43 09 0A 00   Move                r9, r10        r9 = r10 [0]
023A   0x016C20   43 08 09 00   Move                r8, r9         r8 = r9 [0]
023B   0x016C28   43 07 08 00   Move                r7, r8         r7 = r8 [0]
023C   0x016C30   43 06 07 00   Move                r6, r7         r6 = r7 [0]
023D   0x016C38   43 06 05 00   Move                r6, r5         r6 = r5 [0]
023E   0x016C40   0C 07 01 00   LoadU16Imm          r7, 1          r7 = 1
023F   0x016C48   01 06 06 07   IAdd                r6, r6, r7     1 = 0 + 1
0240   0x016C50   43 05 06 00   Move                r5, r6         r5 = r6 [1]
0241   0x016C58   43 06 05 00   Move                r6, r5         r6 = r5 [1]
0242   0x016C60   2D 3B 00 01   Branch              013B           => L_42
L_22:
0243   0x016C68   43 05 06 00   Move                r5, r6         r5 = r6 [1]
0244   0x016C70   15 05 0B 00   LookupPointer       r5, 11         r5 = ST[11] -> <is-final-build?>
0245   0x016C78   1C 05 05 00   CallFf              r5, r5, 0      r5 = is-final-build?()
0246   0x016C80   30 05 05 00   OpLogNot            r5, r5         r5 = !r5 -> <TRUE>
0247   0x016C88   2F 5E 05 02   BranchIfNot         r5, 025E       IF NOT r5 [0x6620ACB7] => L_43
0248   0x016C90   15 05 0C 00   LookupPointer       r5, 12         r5 = ST[12] -> <display>
0249   0x016C98   15 06 0D 00   LookupPointer       r6, 13         r6 = ST[13] -> <#5445173390656D6D>
024A   0x016CA0   41 07 36 00   LoadStaticPointerImmr7, 54         r7 = ST[54] -> <0xBF0265DC>
024B   0x016CA8   41 08 0F 00   LoadStaticPointerImmr8, 15         r8 = ST[15] -> <0xBF025EFC>
024C   0x016CB0   15 09 1B 00   LookupPointer       r9, 27         r9 = ST[27] -> <darray-count>
024D   0x016CB8   15 0A 08 00   LookupPointer       r10, 8         r10 = ST[8] -> <get-symbol>
024E   0x016CC0   4A 0B 0A 00   LoadStaticU64Imm    r11, 10        r11 = ST[10] -> <#80F4C52A6BDCA6BC>
024F   0x016CC8   4A 0C 02 00   LoadStaticU64Imm    r12, 2         r12 = ST[2] -> <self>
0250   0x016CD0   43 31 0B 00   Move                r49, r11       r49 = r11 [#80F4C52A6BDCA6BC]
0251   0x016CD8   43 32 0C 00   Move                r50, r12       r50 = r12 [self]
0252   0x016CE0   1C 0A 0A 02   CallFf              r10, r10, 2    r10 = get-symbol(#80F4C52A6BDCA6BC, self)
0253   0x016CE8   43 31 0A 00   Move                r49, r10       r49 = r10 [get-symbol()]
0254   0x016CF0   1C 09 09 01   CallFf              r9, r9, 1      r9 = darray-count(get-symbol())
0255   0x016CF8   43 31 07 00   Move                r49, r7        r49 = r7 [0xBF0265DC]
0256   0x016D00   43 32 08 00   Move                r50, r8        r50 = r8 [0xBF025EFC]
0257   0x016D08   43 33 09 00   Move                r51, r9        r51 = r9 [darray-count()]
0258   0x016D10   1C 06 06 03   CallFf              r6, r6, 3      r6 = #5445173390656D6D(0xBF0265DC, 0xBF025EFC, darray-count())
0259   0x016D18   0C 07 13 00   LoadU16Imm          r7, 19         r7 = 19
025A   0x016D20   43 31 06 00   Move                r49, r6        r49 = r6 [#5445173390656D6D()]
025B   0x016D28   43 32 07 00   Move                r50, r7        r50 = r7 [19]
025C   0x016D30   1C 05 05 02   CallFf              r5, r5, 2      r5 = display(#5445173390656D6D(), 19)
025D   0x016D38   2D 5F 00 02   Branch              025F           => L_44
L_43:
025E   0x016D40   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
L_44:
025F   0x016D48   15 05 37 00   LookupPointer       r5, 55         r5 = ST[55] -> <set-symbol>
0260   0x016D50   4A 06 38 00   LoadStaticU64Imm    r6, 56         r6 = ST[56] -> <#95719EBD5D274866>
0261   0x016D58   15 07 39 00   LookupPointer       r7, 57         r7 = ST[57] -> <*invalid-symbol*>
0262   0x016D60   4A 08 02 00   LoadStaticU64Imm    r8, 2          r8 = ST[2] -> <self>
0263   0x016D68   43 31 06 00   Move                r49, r6        r49 = r6 [#95719EBD5D274866]
0264   0x016D70   43 32 07 00   Move                r50, r7        r50 = r7 [0x8726A837]
0265   0x016D78   43 33 08 00   Move                r51, r8        r51 = r8 [self]
0266   0x016D80   1C 05 05 03   CallFf              r5, r5, 3      r5 = set-symbol(#95719EBD5D274866, 0x8726A837, self)
0267   0x016D88   15 05 00 00   LookupPointer       r5, 0          r5 = ST[0] -> <get-boolean>
0268   0x016D90   4A 06 06 00   LoadStaticU64Imm    r6, 6          r6 = ST[6] -> <#1FD0D5BACF6C26B1>
0269   0x016D98   4A 07 02 00   LoadStaticU64Imm    r7, 2          r7 = ST[2] -> <self>
026A   0x016DA0   43 31 06 00   Move                r49, r6        r49 = r6 [#1FD0D5BACF6C26B1]
026B   0x016DA8   43 32 07 00   Move                r50, r7        r50 = r7 [self]
026C   0x016DB0   1C 05 05 02   CallFf              r5, r5, 2      r5 = get-boolean(#1FD0D5BACF6C26B1, self)
026D   0x016DB8   2F 79 05 02   BranchIfNot         r5, 0279       IF NOT r5 [get-boolean()] => L_45
026E   0x016DC0   15 05 1B 00   LookupPointer       r5, 27         r5 = ST[27] -> <darray-count>
026F   0x016DC8   15 06 08 00   LookupPointer       r6, 8          r6 = ST[8] -> <get-symbol>
0270   0x016DD0   4A 07 31 00   LoadStaticU64Imm    r7, 49         r7 = ST[49] -> <#0B2B4ACCA5F49744>
0271   0x016DD8   4A 08 02 00   LoadStaticU64Imm    r8, 2          r8 = ST[2] -> <self>
0272   0x016DE0   43 31 07 00   Move                r49, r7        r49 = r7 [#0B2B4ACCA5F49744]
0273   0x016DE8   43 32 08 00   Move                r50, r8        r50 = r8 [self]
0274   0x016DF0   1C 06 06 02   CallFf              r6, r6, 2      r6 = get-symbol(#0B2B4ACCA5F49744, self)
0275   0x016DF8   43 31 06 00   Move                r49, r6        r49 = r6 [get-symbol()]
0276   0x016E00   1C 05 05 01   CallFf              r5, r5, 1      r5 = darray-count(get-symbol())
0277   0x016E08   0C 06 01 00   LoadU16Imm          r6, 1          r6 = 1
0278   0x016E10   1F 05 05 06   IGreaterThanEqual   r5, r5, r6     r5 = r5 [1753163009] >= r6 [1]
L_45:
0279   0x016E18   2F 85 05 02   BranchIfNot         r5, 0285       IF NOT r5 [0x687F2501] => L_46
027A   0x016E20   15 05 1B 00   LookupPointer       r5, 27         r5 = ST[27] -> <darray-count>
027B   0x016E28   15 06 08 00   LookupPointer       r6, 8          r6 = ST[8] -> <get-symbol>
027C   0x016E30   4A 07 0A 00   LoadStaticU64Imm    r7, 10         r7 = ST[10] -> <#80F4C52A6BDCA6BC>
027D   0x016E38   4A 08 02 00   LoadStaticU64Imm    r8, 2          r8 = ST[2] -> <self>
027E   0x016E40   43 31 07 00   Move                r49, r7        r49 = r7 [#80F4C52A6BDCA6BC]
027F   0x016E48   43 32 08 00   Move                r50, r8        r50 = r8 [self]
0280   0x016E50   1C 06 06 02   CallFf              r6, r6, 2      r6 = get-symbol(#80F4C52A6BDCA6BC, self)
0281   0x016E58   43 31 06 00   Move                r49, r6        r49 = r6 [get-symbol()]
0282   0x016E60   1C 05 05 01   CallFf              r5, r5, 1      r5 = darray-count(get-symbol())
0283   0x016E68   0C 06 00 00   LoadU16Imm          r6, 0          r6 = 0
0284   0x016E70   21 05 05 06   ILessThanEqual      r5, r5, r6     r5 = r5 [1753163008] <= r6 [0]
L_46:
0285   0x016E78   2F B8 05 02   BranchIfNot         r5, 02B8       IF NOT r5 [0x687F2500] => L_47
0286   0x016E80   15 05 0B 00   LookupPointer       r5, 11         r5 = ST[11] -> <is-final-build?>
0287   0x016E88   1C 05 05 00   CallFf              r5, r5, 0      r5 = is-final-build?()
0288   0x016E90   30 05 05 00   OpLogNot            r5, r5         r5 = !r5 -> <TRUE>
0289   0x016E98   2F 96 05 02   BranchIfNot         r5, 0296       IF NOT r5 [0x6620ACB7] => L_48
028A   0x016EA0   15 05 0C 00   LookupPointer       r5, 12         r5 = ST[12] -> <display>
028B   0x016EA8   15 06 0D 00   LookupPointer       r6, 13         r6 = ST[13] -> <#5445173390656D6D>
028C   0x016EB0   41 07 3A 00   LoadStaticPointerImmr7, 58         r7 = ST[58] -> <0xBF026E66>
028D   0x016EB8   41 08 0F 00   LoadStaticPointerImmr8, 15         r8 = ST[15] -> <0xBF025EFC>
028E   0x016EC0   43 31 07 00   Move                r49, r7        r49 = r7 [0xBF026E66]
028F   0x016EC8   43 32 08 00   Move                r50, r8        r50 = r8 [0xBF025EFC]
0290   0x016ED0   1C 06 06 02   CallFf              r6, r6, 2      r6 = #5445173390656D6D(0xBF026E66, 0xBF025EFC)
0291   0x016ED8   0C 07 13 00   LoadU16Imm          r7, 19         r7 = 19
0292   0x016EE0   43 31 06 00   Move                r49, r6        r49 = r6 [#5445173390656D6D()]
0293   0x016EE8   43 32 07 00   Move                r50, r7        r50 = r7 [19]
0294   0x016EF0   1C 05 05 02   CallFf              r5, r5, 2      r5 = display(#5445173390656D6D(), 19)
0295   0x016EF8   2D 97 00 02   Branch              0297           => L_49
L_48:
0296   0x016F00   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
L_49:
0297   0x016F08   15 05 0B 00   LookupPointer       r5, 11         r5 = ST[11] -> <is-final-build?>
0298   0x016F10   1C 05 05 00   CallFf              r5, r5, 0      r5 = is-final-build?()
0299   0x016F18   30 05 05 00   OpLogNot            r5, r5         r5 = !r5 -> <TRUE>
029A   0x016F20   2F A7 05 02   BranchIfNot         r5, 02A7       IF NOT r5 [0x6620ACB7] => L_50
029B   0x016F28   15 05 0C 00   LookupPointer       r5, 12         r5 = ST[12] -> <display>
029C   0x016F30   15 06 0D 00   LookupPointer       r6, 13         r6 = ST[13] -> <#5445173390656D6D>
029D   0x016F38   41 07 3B 00   LoadStaticPointerImmr7, 59         r7 = ST[59] -> <0xBF026F21>
029E   0x016F40   41 08 0F 00   LoadStaticPointerImmr8, 15         r8 = ST[15] -> <0xBF025EFC>
029F   0x016F48   43 31 07 00   Move                r49, r7        r49 = r7 [0xBF026F21]
02A0   0x016F50   43 32 08 00   Move                r50, r8        r50 = r8 [0xBF025EFC]
02A1   0x016F58   1C 06 06 02   CallFf              r6, r6, 2      r6 = #5445173390656D6D(0xBF026F21, 0xBF025EFC)
02A2   0x016F60   0C 07 13 00   LoadU16Imm          r7, 19         r7 = 19
02A3   0x016F68   43 31 06 00   Move                r49, r6        r49 = r6 [#5445173390656D6D()]
02A4   0x016F70   43 32 07 00   Move                r50, r7        r50 = r7 [19]
02A5   0x016F78   1C 05 05 02   CallFf              r5, r5, 2      r5 = display(#5445173390656D6D(), 19)
02A6   0x016F80   2D A8 00 02   Branch              02A8           => L_51
L_50:
02A7   0x016F88   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
L_51:
02A8   0x016F90   15 05 07 00   LookupPointer       r5, 7          r5 = ST[7] -> <darray-clear>
02A9   0x016F98   15 06 08 00   LookupPointer       r6, 8          r6 = ST[8] -> <get-symbol>
02AA   0x016FA0   4A 07 31 00   LoadStaticU64Imm    r7, 49         r7 = ST[49] -> <#0B2B4ACCA5F49744>
02AB   0x016FA8   4A 08 02 00   LoadStaticU64Imm    r8, 2          r8 = ST[2] -> <self>
02AC   0x016FB0   43 31 07 00   Move                r49, r7        r49 = r7 [#0B2B4ACCA5F49744]
02AD   0x016FB8   43 32 08 00   Move                r50, r8        r50 = r8 [self]
02AE   0x016FC0   1C 06 06 02   CallFf              r6, r6, 2      r6 = get-symbol(#0B2B4ACCA5F49744, self)
02AF   0x016FC8   43 31 06 00   Move                r49, r6        r49 = r6 [get-symbol()]
02B0   0x016FD0   1C 05 05 01   CallFf              r5, r5, 1      r5 = darray-clear(get-symbol())
02B1   0x016FD8   15 05 3C 00   LookupPointer       r5, 60         r5 = ST[60] -> <go>
02B2   0x016FE0   4A 06 3D 00   LoadStaticU64Imm    r6, 61         r6 = ST[61] -> <select-spawn-regions>
02B3   0x016FE8   0C 07 01 00   LoadU16Imm          r7, 1          r7 = 1
02B4   0x016FF0   43 31 06 00   Move                r49, r6        r49 = r6 [select-spawn-regions]
02B5   0x016FF8   43 32 07 00   Move                r50, r7        r50 = r7 [1]
02B6   0x017000   1C 05 05 02   CallFf              r5, r5, 2      r5 = go(select-spawn-regions, 1)
02B7   0x017008   2D B9 00 02   Branch              02B9           => L_52
L_47:
02B8   0x017010   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
L_52:
02B9   0x017018   0C 05 01 00   LoadU16Imm          r5, 1          r5 = 1
02BA   0x017020   43 06 00 00   Move                r6, r0         r6 = r0 [get-boolean]
02BB   0x017028   1D 05 05 06   IEqual              r5, r5, r6     r5 = r5 [0] == r6 [-62108282]
02BC   0x017030   2F 5B 05 03   BranchIfNot         r5, 035B       IF NOT r5 [0x0] => L_53
02BD   0x017038   15 05 1B 00   LookupPointer       r5, 27         r5 = ST[27] -> <darray-count>
02BE   0x017040   15 06 08 00   LookupPointer       r6, 8          r6 = ST[8] -> <get-symbol>
02BF   0x017048   4A 07 0A 00   LoadStaticU64Imm    r7, 10         r7 = ST[10] -> <#80F4C52A6BDCA6BC>
02C0   0x017050   4A 08 02 00   LoadStaticU64Imm    r8, 2          r8 = ST[2] -> <self>
02C1   0x017058   43 31 07 00   Move                r49, r7        r49 = r7 [#80F4C52A6BDCA6BC]
02C2   0x017060   43 32 08 00   Move                r50, r8        r50 = r8 [self]
02C3   0x017068   1C 06 06 02   CallFf              r6, r6, 2      r6 = get-symbol(#80F4C52A6BDCA6BC, self)
02C4   0x017070   43 31 06 00   Move                r49, r6        r49 = r6 [get-symbol()]
02C5   0x017078   1C 05 05 01   CallFf              r5, r5, 1      r5 = darray-count(get-symbol())
02C6   0x017080   43 06 05 00   Move                r6, r5         r6 = r5 [darray-count()]
02C7   0x017088   0C 07 00 00   LoadU16Imm          r7, 0          r7 = 0
02C8   0x017090   21 06 06 07   ILessThanEqual      r6, r6, r7     r6 = r6 [1753163008] <= r7 [0]
02C9   0x017098   2F CC 06 02   BranchIfNot         r6, 02CC       IF NOT r6 [0x687F2500] => L_54
02CA   0x0170A0   3F 06 3E 00   LoadStaticI32Imm    r6, 62         r6 = ST[62] -> <-1>
02CB   0x0170A8   2D D4 00 02   Branch              02D4           => L_55
L_54:
02CC   0x0170B0   15 06 3F 00   LookupPointer       r6, 63         r6 = ST[63] -> <random-integer>
02CD   0x0170B8   43 07 05 00   Move                r7, r5         r7 = r5 [darray-count()]
02CE   0x0170C0   0C 08 00 00   LoadU16Imm          r8, 0          r8 = 0
02CF   0x0170C8   0C 09 00 00   LoadU16Imm          r9, 0          r9 = 0
02D0   0x0170D0   43 31 07 00   Move                r49, r7        r49 = r7 [darray-count()]
02D1   0x0170D8   43 32 08 00   Move                r50, r8        r50 = r8 [0]
02D2   0x0170E0   43 33 09 00   Move                r51, r9        r51 = r9 [0]
02D3   0x0170E8   1C 06 06 03   CallFf              r6, r6, 3      r6 = random-integer(darray-count(), 0, 0)
L_55:
02D4   0x0170F0   3F 07 3E 00   LoadStaticI32Imm    r7, 62         r7 = ST[62] -> <-1>
02D5   0x0170F8   43 08 06 00   Move                r8, r6         r8 = r6 [random-integer()]
02D6   0x017100   5A 07 07 08   INotEqual           ???            UNKNOWN INSTRUCTION
02D7   0x017108   2F 0D 07 03   BranchIfNot         r7, 030D       IF NOT r7 [-1] => L_56
02D8   0x017110   15 07 23 00   LookupPointer       r7, 35         r7 = ST[35] -> <darray-at>
02D9   0x017118   15 08 08 00   LookupPointer       r8, 8          r8 = ST[8] -> <get-symbol>
02DA   0x017120   4A 09 0A 00   LoadStaticU64Imm    r9, 10         r9 = ST[10] -> <#80F4C52A6BDCA6BC>
02DB   0x017128   4A 0A 02 00   LoadStaticU64Imm    r10, 2         r10 = ST[2] -> <self>
02DC   0x017130   43 31 09 00   Move                r49, r9        r49 = r9 [#80F4C52A6BDCA6BC]
02DD   0x017138   43 32 0A 00   Move                r50, r10       r50 = r10 [self]
02DE   0x017140   1C 08 08 02   CallFf              r8, r8, 2      r8 = get-symbol(#80F4C52A6BDCA6BC, self)
02DF   0x017148   43 09 06 00   Move                r9, r6         r9 = r6 [random-integer()]
02E0   0x017150   43 31 08 00   Move                r49, r8        r49 = r8 [get-symbol()]
02E1   0x017158   43 32 09 00   Move                r50, r9        r50 = r9 [random-integer()]
02E2   0x017160   1C 07 07 02   CallFf              r7, r7, 2      r7 = darray-at(get-symbol(), random-integer())
02E3   0x017168   43 08 07 00   Move                r8, r7         r8 = r7 [darray-at()]
02E4   0x017170   2F EB 08 02   BranchIfNot         r8, 02EB       IF NOT r8 [darray-at()] => L_57
02E5   0x017178   43 08 07 00   Move                r8, r7         r8 = r7 [darray-at()]
02E6   0x017180   5D 08 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
02E7   0x017188   3B 08 08 0C   IAddImm             r8, r8, 12     r8 = r8 [-739117676] / 12 -> <-739117676>
02E8   0x017190   4E 08 08 00   LoadU16             ???            UNKNOWN INSTRUCTION
02E9   0x017198   0C 09 07 00   LoadU16Imm          r9, 7          r9 = 7
02EA   0x0171A0   1D 08 08 09   IEqual              r8, r8, r9     r8 = r8 [-739117824] == r9 [7]
L_57:
02EB   0x0171A8   2F F0 08 02   BranchIfNot         r8, 02F0       IF NOT r8 [0xD3F1F500] => L_58
02EC   0x0171B0   43 08 07 00   Move                r8, r7         r8 = r7 [darray-at()]
02ED   0x0171B8   5D 08 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
02EE   0x0171C0   51 08 08 00   LoadU64             r8, [r8]       r8 = [0x0 + 0x0]
02EF   0x0171C8   2D 0B 00 03   Branch              030B           => L_59
L_58:
02F0   0x0171D0   43 08 07 00   Move                r8, r7         r8 = r7 [darray-at()]
02F1   0x0171D8   2F F8 08 02   BranchIfNot         r8, 02F8       IF NOT r8 [darray-at()] => L_60
02F2   0x0171E0   43 08 07 00   Move                r8, r7         r8 = r7 [darray-at()]
02F3   0x0171E8   5D 08 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
02F4   0x0171F0   3B 08 08 0C   IAddImm             r8, r8, 12     r8 = r8 [-739117676] / 12 -> <-739117676>
02F5   0x0171F8   4E 08 08 00   LoadU16             ???            UNKNOWN INSTRUCTION
02F6   0x017200   0C 09 05 00   LoadU16Imm          r9, 5          r9 = 5
02F7   0x017208   1D 08 08 09   IEqual              r8, r8, r9     r8 = r8 [-739117824] == r9 [5]
L_60:
02F8   0x017210   2F FD 08 02   BranchIfNot         r8, 02FD       IF NOT r8 [0xD3F1F500] => L_61
02F9   0x017218   43 08 07 00   Move                r8, r7         r8 = r7 [darray-at()]
02FA   0x017220   5D 08 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
02FB   0x017228   51 08 08 00   LoadU64             r8, [r8]       r8 = [0x0 + 0x0]
02FC   0x017230   2D 0B 00 03   Branch              030B           => L_59
L_61:
02FD   0x017238   43 08 07 00   Move                r8, r7         r8 = r7 [darray-at()]
02FE   0x017240   2F 05 08 03   BranchIfNot         r8, 0305       IF NOT r8 [darray-at()] => L_62
02FF   0x017248   43 08 07 00   Move                r8, r7         r8 = r7 [darray-at()]
0300   0x017250   5D 08 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0301   0x017258   3B 08 08 0C   IAddImm             r8, r8, 12     r8 = r8 [-739117676] / 12 -> <-739117676>
0302   0x017260   4E 08 08 00   LoadU16             ???            UNKNOWN INSTRUCTION
0303   0x017268   0C 09 04 00   LoadU16Imm          r9, 4          r9 = 4
0304   0x017270   1D 08 08 09   IEqual              r8, r8, r9     r8 = r8 [-739117824] == r9 [4]
L_62:
0305   0x017278   2F 0A 08 03   BranchIfNot         r8, 030A       IF NOT r8 [0xD3F1F500] => L_63
0306   0x017280   43 08 07 00   Move                r8, r7         r8 = r7 [darray-at()]
0307   0x017288   5D 08 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0308   0x017290   51 08 08 00   LoadU64             r8, [r8]       r8 = [0x0 + 0x0]
0309   0x017298   2D 0B 00 03   Branch              030B           => L_59
L_63:
030A   0x0172A0   0C 08 00 00   LoadU16Imm          r8, 0          r8 = 0
L_59:
030B   0x0172A8   43 07 08 00   Move                r7, r8         r7 = r8 [0]
030C   0x0172B0   2D 0E 00 03   Branch              030E           => L_64
L_56:
030D   0x0172B8   15 07 39 00   LookupPointer       r7, 57         r7 = ST[57] -> <*invalid-symbol*>
L_64:
030E   0x0172C0   43 08 07 00   Move                r8, r7         r8 = r7 [0x8726A837]
030F   0x0172C8   0C 09 00 00   LoadU16Imm          r9, 0          r9 = 0
0310   0x0172D0   1D 08 08 09   IEqual              r8, r8, r9     r8 = r8 [-2027509760] == r9 [0]
0311   0x0172D8   30 08 08 00   OpLogNot            r8, r8         r8 = !r8 -> <TRUE>
0312   0x0172E0   2F 55 08 03   BranchIfNot         r8, 0355       IF NOT r8 [0x8726A801] => L_65
0313   0x0172E8   15 08 0B 00   LookupPointer       r8, 11         r8 = ST[11] -> <is-final-build?>
0314   0x0172F0   1C 08 08 00   CallFf              r8, r8, 0      r8 = is-final-build?()
0315   0x0172F8   30 08 08 00   OpLogNot            r8, r8         r8 = !r8 -> <TRUE>
0316   0x017300   2F 23 08 03   BranchIfNot         r8, 0323       IF NOT r8 [0x6620ACB7] => L_66
0317   0x017308   15 08 0C 00   LookupPointer       r8, 12         r8 = ST[12] -> <display>
0318   0x017310   15 09 0D 00   LookupPointer       r9, 13         r9 = ST[13] -> <#5445173390656D6D>
0319   0x017318   41 0A 40 00   LoadStaticPointerImmr10, 64        r10 = ST[64] -> <0xBF0266A3>
031A   0x017320   41 0B 0F 00   LoadStaticPointerImmr11, 15        r11 = ST[15] -> <0xBF025EFC>
031B   0x017328   43 31 0A 00   Move                r49, r10       r49 = r10 [0xBF0266A3]
031C   0x017330   43 32 0B 00   Move                r50, r11       r50 = r11 [0xBF025EFC]
031D   0x017338   1C 09 09 02   CallFf              r9, r9, 2      r9 = #5445173390656D6D(0xBF0266A3, 0xBF025EFC)
031E   0x017340   0C 0A 13 00   LoadU16Imm          r10, 19        r10 = 19
031F   0x017348   43 31 09 00   Move                r49, r9        r49 = r9 [#5445173390656D6D()]
0320   0x017350   43 32 0A 00   Move                r50, r10       r50 = r10 [19]
0321   0x017358   1C 08 08 02   CallFf              r8, r8, 2      r8 = display(#5445173390656D6D(), 19)
0322   0x017360   2D 24 00 03   Branch              0324           => L_67
L_66:
0323   0x017368   0C 08 00 00   LoadU16Imm          r8, 0          r8 = 0
L_67:
0324   0x017370   15 08 0B 00   LookupPointer       r8, 11         r8 = ST[11] -> <is-final-build?>
0325   0x017378   1C 08 08 00   CallFf              r8, r8, 0      r8 = is-final-build?()
0326   0x017380   30 08 08 00   OpLogNot            r8, r8         r8 = !r8 -> <TRUE>
0327   0x017388   2F 39 08 03   BranchIfNot         r8, 0339       IF NOT r8 [0x6620ACB7] => L_68
0328   0x017390   15 08 0C 00   LookupPointer       r8, 12         r8 = ST[12] -> <display>
0329   0x017398   15 09 0D 00   LookupPointer       r9, 13         r9 = ST[13] -> <#5445173390656D6D>
032A   0x0173A0   41 0A 41 00   LoadStaticPointerImmr10, 65        r10 = ST[65] -> <0xBF026F99>
032B   0x0173A8   41 0B 0F 00   LoadStaticPointerImmr11, 15        r11 = ST[15] -> <0xBF025EFC>
032C   0x0173B0   15 0C 24 00   LookupPointer       r12, 36        r12 = ST[36] -> <string-debug>
032D   0x0173B8   43 0D 07 00   Move                r13, r7        r13 = r7 [0x8726A837]
032E   0x0173C0   43 31 0D 00   Move                r49, r13       r49 = r13 [0x8726A837]
032F   0x0173C8   1C 0C 0C 01   CallFf              r12, r12, 1    r12 = string-debug(0x8726A837)
0330   0x0173D0   43 31 0A 00   Move                r49, r10       r49 = r10 [0xBF026F99]
0331   0x0173D8   43 32 0B 00   Move                r50, r11       r50 = r11 [0xBF025EFC]
0332   0x0173E0   43 33 0C 00   Move                r51, r12       r51 = r12 [string-debug()]
0333   0x0173E8   1C 09 09 03   CallFf              r9, r9, 3      r9 = #5445173390656D6D(0xBF026F99, 0xBF025EFC, string-debug())
0334   0x0173F0   0C 0A 13 00   LoadU16Imm          r10, 19        r10 = 19
0335   0x0173F8   43 31 09 00   Move                r49, r9        r49 = r9 [#5445173390656D6D()]
0336   0x017400   43 32 0A 00   Move                r50, r10       r50 = r10 [19]
0337   0x017408   1C 08 08 02   CallFf              r8, r8, 2      r8 = display(#5445173390656D6D(), 19)
0338   0x017410   2D 3A 00 03   Branch              033A           => L_69
L_68:
0339   0x017418   0C 08 00 00   LoadU16Imm          r8, 0          r8 = 0
L_69:
033A   0x017420   15 08 37 00   LookupPointer       r8, 55         r8 = ST[55] -> <set-symbol>
033B   0x017428   4A 09 38 00   LoadStaticU64Imm    r9, 56         r9 = ST[56] -> <#95719EBD5D274866>
033C   0x017430   43 0A 07 00   Move                r10, r7        r10 = r7 [0x8726A837]
033D   0x017438   4A 0B 02 00   LoadStaticU64Imm    r11, 2         r11 = ST[2] -> <self>
033E   0x017440   43 31 09 00   Move                r49, r9        r49 = r9 [#95719EBD5D274866]
033F   0x017448   43 32 0A 00   Move                r50, r10       r50 = r10 [0x8726A837]
0340   0x017450   43 33 0B 00   Move                r51, r11       r51 = r11 [self]
0341   0x017458   1C 08 08 03   CallFf              r8, r8, 3      r8 = set-symbol(#95719EBD5D274866, 0x8726A837, self)
0342   0x017460   15 08 2B 00   LookupPointer       r8, 43         r8 = ST[43] -> <darray-append>
0343   0x017468   15 09 08 00   LookupPointer       r9, 8          r9 = ST[8] -> <get-symbol>
0344   0x017470   4A 0A 31 00   LoadStaticU64Imm    r10, 49        r10 = ST[49] -> <#0B2B4ACCA5F49744>
0345   0x017478   4A 0B 02 00   LoadStaticU64Imm    r11, 2         r11 = ST[2] -> <self>
0346   0x017480   43 31 0A 00   Move                r49, r10       r49 = r10 [#0B2B4ACCA5F49744]
0347   0x017488   43 32 0B 00   Move                r50, r11       r50 = r11 [self]
0348   0x017490   1C 09 09 02   CallFf              r9, r9, 2      r9 = get-symbol(#0B2B4ACCA5F49744, self)
0349   0x017498   15 0A 2C 00   LookupPointer       r10, 44        r10 = ST[44] -> <new-boxed-value>
034A   0x0174A0   0C 0B 07 00   LoadU16Imm          r11, 7         r11 = 7
034B   0x0174A8   43 0C 07 00   Move                r12, r7        r12 = r7 [0x8726A837]
034C   0x0174B0   43 31 0B 00   Move                r49, r11       r49 = r11 [7]
034D   0x0174B8   43 32 0C 00   Move                r50, r12       r50 = r12 [0x8726A837]
034E   0x0174C0   1C 0A 0A 02   CallFf              r10, r10, 2    r10 = new-boxed-value(7, 0x8726A837)
034F   0x0174C8   0C 0B 01 00   LoadU16Imm          r11, 1         r11 = 1
0350   0x0174D0   43 31 09 00   Move                r49, r9        r49 = r9 [get-symbol()]
0351   0x0174D8   43 32 0A 00   Move                r50, r10       r50 = r10 [new-boxed-value()]
0352   0x0174E0   43 33 0B 00   Move                r51, r11       r51 = r11 [1]
0353   0x0174E8   1C 08 08 03   CallFf              r8, r8, 3      r8 = darray-append(get-symbol(), new-boxed-value(), 1)
0354   0x0174F0   2D 56 00 03   Branch              0356           => L_70
L_65:
0355   0x0174F8   0C 08 00 00   LoadU16Imm          r8, 0          r8 = 0
L_70:
0356   0x017500   43 08 08 00   Move                r8, r8         r8 = r8 [0]
0357   0x017508   43 07 08 00   Move                r7, r8         r7 = r8 [0]
0358   0x017510   43 06 07 00   Move                r6, r7         r6 = r7 [0]
0359   0x017518   43 05 06 00   Move                r5, r6         r5 = r6 [0]
035A   0x017520   2D 5C 00 03   Branch              035C           => L_71
L_53:
035B   0x017528   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
L_71:
035C   0x017530   43 00 05 00   Move                r0, r5         r0 = r5 [0]
035D   0x017538   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x017540    POINTER <get-boolean>
0001   0x017548    SID <#32E94EADDED8F01D>
0002   0x017550    SID <self>
0003   0x017558    POINTER <get-int32>
0004   0x017560    SID <#0676F87AA7DD009C>
0005   0x017568    SID <#928E23508A42DAF2>
0006   0x017570    SID <#1FD0D5BACF6C26B1>
0007   0x017578    POINTER <darray-clear>
0008   0x017580    POINTER <get-symbol>
0009   0x017588    SID <#ACA135ADD5938983>
000A   0x017590    SID <#80F4C52A6BDCA6BC>
000B   0x017598    POINTER <is-final-build?>
000C   0x0175A0    POINTER <display>
000D   0x0175A8    POINTER <#5445173390656D6D>
000E   0x0175B0    POINTER <#00000282BF0269B5>
000F   0x0175B8    POINTER <#00000282BF025EFC>
0010   0x0175C0    POINTER <#00000282BF026BEB>
0011   0x0175C8    POINTER <#00000282BF0275E6>
0012   0x0175D0    POINTER <#00000282BF027754>
0013   0x0175D8    POINTER <#00000282BF027429>
0014   0x0175E0    POINTER <#00000282BF027685>
0015   0x0175E8    POINTER <#00000282BF025F04>
0016   0x0175F0    POINTER <#00000282BF027671>
0017   0x0175F8    POINTER <#00000282BF02742C>
0018   0x017600    POINTER <#00000282BF027502>
0019   0x017608    POINTER <#00000282BF0274FE>
001A   0x017610    POINTER <#00000282BF0266DC>
001B   0x017618    POINTER <darray-count>
001C   0x017620    SID <#129B0447586D0CD8>
001D   0x017628    POINTER <darray-sorted-indices>
001E   0x017630    POINTER <#7C28D25188889230>
001F   0x017638    POINTER <darray-clone>
0020   0x017640    SID <single-frame>
0021   0x017648    POINTER <darray-copy-into>
0022   0x017650    POINTER <#E16F9CC43A37FADA>
0023   0x017658    POINTER <darray-at>
0024   0x017660    POINTER <string-debug>
0025   0x017668    POINTER <#00000282BF027837>
0026   0x017670    POINTER <distance-between-points>
0027   0x017678    POINTER <get-object-position>
0028   0x017680    SID <player>
0029   0x017688    POINTER <get-region-centroid>
002A   0x017690    POINTER <player-in-region?>
002B   0x017698    POINTER <darray-append>
002C   0x0176A0    POINTER <new-boxed-value>
002D   0x0176A8    POINTER <#00000282BF025FB2>
002E   0x0176B0    POINTER <darray-contains?>
002F   0x0176B8    SID <#E44FA889CD257D23>
0030   0x0176C0    POINTER <#00000282BF025F6E>
0031   0x0176C8    SID <#0B2B4ACCA5F49744>
0032   0x0176D0    POINTER <#00000282BF025F42>
0033   0x0176D8    POINTER <#00000282BF025F9C>
0034   0x0176E0    POINTER <#00000282BF025F87>
0035   0x0176E8    POINTER <#00000282BF026F78>
0036   0x0176F0    POINTER <#00000282BF0265DC>
0037   0x0176F8    POINTER <set-symbol>
0038   0x017700    SID <#95719EBD5D274866>
0039   0x017708    POINTER <*invalid-symbol*>
003A   0x017710    POINTER <#00000282BF026E66>
003B   0x017718    POINTER <#00000282BF026F21>
003C   0x017720    POINTER <go>
003D   0x017728    SID <select-spawn-regions>
003E   0x017730    INT <-1>
003F   0x017738    POINTER <random-integer>
0040   0x017740    POINTER <#00000282BF0266A3>
0041   0x017748    POINTER <#00000282BF026F99>
0000   0x01EC20   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <wait-one-frame>
0001   0x01EC28   1C 00 00 00   CallFf              r0, r0, 0      r0 = wait-one-frame()
0002   0x01EC30   00 00 00 00   Return              r0             Return wait-one-frame()
SYMBOL TABLE: 
0000   0x01EC38    POINTER <wait-one-frame>
0000   0x01EDE8   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <go>
0001   0x01EDF0   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <select-spawn-positions>
0002   0x01EDF8   0C 02 01 00   LoadU16Imm          r2, 1          r2 = 1
0003   0x01EE00   43 31 01 00   Move                r49, r1        r49 = r1 [select-spawn-positions]
0004   0x01EE08   43 32 02 00   Move                r50, r2        r50 = r2 [1]
0005   0x01EE10   1C 00 00 02   CallFf              r0, r0, 2      r0 = go(select-spawn-positions, 1)
0006   0x01EE18   00 00 00 00   Return              r0             Return go()
SYMBOL TABLE: 
0000   0x01EE20    POINTER <go>
0001   0x01EE28    SID <select-spawn-positions>
      STATE select-spawn-positions:
         ON start
          TRACK main:
0000   0x00D698   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <is-final-build?>
0001   0x00D6A0   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0002   0x00D6A8   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0003   0x00D6B0   2F 0E 00 00   BranchIfNot         r0, 000E       IF NOT r0 [0x6620ACB7] => L_0
0004   0x00D6B8   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <display>
0005   0x00D6C0   15 01 02 00   LookupPointer       r1, 2          r1 = ST[2] -> <#5445173390656D6D>
0006   0x00D6C8   41 02 03 00   LoadStaticPointerImmr2, 3          r2 = ST[3] -> <0xBF027041>
0007   0x00D6D0   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF027041]
0008   0x00D6D8   1C 01 01 01   CallFf              r1, r1, 1      r1 = #5445173390656D6D(0xBF027041)
0009   0x00D6E0   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
000A   0x00D6E8   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
000B   0x00D6F0   43 32 02 00   Move                r50, r2        r50 = r2 [19]
000C   0x00D6F8   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
000D   0x00D700   2D 0F 00 00   Branch              000F           => L_RETURN
L_0:
000E   0x00D708   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
000F   0x00D710   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x00D718    POINTER <is-final-build?>
0001   0x00D720    POINTER <display>
0002   0x00D728    POINTER <#5445173390656D6D>
0003   0x00D730    POINTER <#00000282BF027041>
0000   0x015638   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <darray-clear>
0001   0x015640   15 01 01 00   LookupPointer       r1, 1          r1 = ST[1] -> <get-symbol>
0002   0x015648   4A 02 02 00   LoadStaticU64Imm    r2, 2          r2 = ST[2] -> <#FE0CDBDD4CC9DFAD>
0003   0x015650   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
0004   0x015658   43 31 02 00   Move                r49, r2        r49 = r2 [#FE0CDBDD4CC9DFAD]
0005   0x015660   43 32 03 00   Move                r50, r3        r50 = r3 [self]
0006   0x015668   1C 01 01 02   CallFf              r1, r1, 2      r1 = get-symbol(#FE0CDBDD4CC9DFAD, self)
0007   0x015670   43 31 01 00   Move                r49, r1        r49 = r1 [get-symbol()]
0008   0x015678   1C 00 00 01   CallFf              r0, r0, 1      r0 = darray-clear(get-symbol())
0009   0x015680   00 00 00 00   Return              r0             Return darray-clear()
SYMBOL TABLE: 
0000   0x015688    POINTER <darray-clear>
0001   0x015690    POINTER <get-symbol>
0002   0x015698    SID <#FE0CDBDD4CC9DFAD>
0003   0x0156A0    SID <self>
0000   0x019BD8   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <group-copy>
0001   0x019BE0   15 01 01 00   LookupPointer       r1, 1          r1 = ST[1] -> <get-symbol>
0002   0x019BE8   4A 02 02 00   LoadStaticU64Imm    r2, 2          r2 = ST[2] -> <#2D7661AFEECF44C9>
0003   0x019BF0   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
0004   0x019BF8   43 31 02 00   Move                r49, r2        r49 = r2 [#2D7661AFEECF44C9]
0005   0x019C00   43 32 03 00   Move                r50, r3        r50 = r3 [self]
0006   0x019C08   1C 01 01 02   CallFf              r1, r1, 2      r1 = get-symbol(#2D7661AFEECF44C9, self)
0007   0x019C10   15 02 01 00   LookupPointer       r2, 1          r2 = ST[1] -> <get-symbol>
0008   0x019C18   4A 03 04 00   LoadStaticU64Imm    r3, 4          r3 = ST[4] -> <#FE0CDBDD4CC9DFAD>
0009   0x019C20   4A 04 03 00   LoadStaticU64Imm    r4, 3          r4 = ST[3] -> <self>
000A   0x019C28   43 31 03 00   Move                r49, r3        r49 = r3 [#FE0CDBDD4CC9DFAD]
000B   0x019C30   43 32 04 00   Move                r50, r4        r50 = r4 [self]
000C   0x019C38   1C 02 02 02   CallFf              r2, r2, 2      r2 = get-symbol(#FE0CDBDD4CC9DFAD, self)
000D   0x019C40   43 31 01 00   Move                r49, r1        r49 = r1 [get-symbol()]
000E   0x019C48   43 32 02 00   Move                r50, r2        r50 = r2 [get-symbol()]
000F   0x019C50   1B 00 00 02   Call                r0, r0, 2      r0 = group-copy(get-symbol(), get-symbol())
0010   0x019C58   00 00 00 00   Return              r0             Return group-copy()
SYMBOL TABLE: 
0000   0x019C60    POINTER <group-copy>
0001   0x019C68    POINTER <get-symbol>
0002   0x019C70    SID <#2D7661AFEECF44C9>
0003   0x019C78    SID <self>
0004   0x019C80    SID <#FE0CDBDD4CC9DFAD>
0000   0x01B0D8   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <darray-create>
0001   0x01B0E0   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <self>
0002   0x01B0E8   3F 02 02 00   LoadStaticI32Imm    r2, 2          r2 = ST[2] -> <-1>
0003   0x01B0F0   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
0004   0x01B0F8   43 31 01 00   Move                r49, r1        r49 = r1 [self]
0005   0x01B100   43 32 02 00   Move                r50, r2        r50 = r2 [-1]
0006   0x01B108   43 33 03 00   Move                r51, r3        r51 = r3 [0]
0007   0x01B110   1C 00 00 03   CallFf              r0, r0, 3      r0 = darray-create(self, -1, 0)
0008   0x01B118   15 01 03 00   LookupPointer       r1, 3          r1 = ST[3] -> <group-copy>
0009   0x01B120   15 02 04 00   LookupPointer       r2, 4          r2 = ST[4] -> <get-symbol>
000A   0x01B128   4A 03 05 00   LoadStaticU64Imm    r3, 5          r3 = ST[5] -> <#FE0CDBDD4CC9DFAD>
000B   0x01B130   4A 04 01 00   LoadStaticU64Imm    r4, 1          r4 = ST[1] -> <self>
000C   0x01B138   43 31 03 00   Move                r49, r3        r49 = r3 [#FE0CDBDD4CC9DFAD]
000D   0x01B140   43 32 04 00   Move                r50, r4        r50 = r4 [self]
000E   0x01B148   1C 02 02 02   CallFf              r2, r2, 2      r2 = get-symbol(#FE0CDBDD4CC9DFAD, self)
000F   0x01B150   43 03 00 00   Move                r3, r0         r3 = r0 [darray-create()]
0010   0x01B158   43 31 02 00   Move                r49, r2        r49 = r2 [get-symbol()]
0011   0x01B160   43 32 03 00   Move                r50, r3        r50 = r3 [darray-create()]
0012   0x01B168   1B 01 01 02   Call                r1, r1, 2      r1 = group-copy(get-symbol(), darray-create())
0013   0x01B170   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
0014   0x01B178   15 02 06 00   LookupPointer       r2, 6          r2 = ST[6] -> <darray-count>
0015   0x01B180   15 03 04 00   LookupPointer       r3, 4          r3 = ST[4] -> <get-symbol>
0016   0x01B188   4A 04 07 00   LoadStaticU64Imm    r4, 7          r4 = ST[7] -> <#ACA135ADD5938983>
0017   0x01B190   4A 05 01 00   LoadStaticU64Imm    r5, 1          r5 = ST[1] -> <self>
0018   0x01B198   43 31 04 00   Move                r49, r4        r49 = r4 [#ACA135ADD5938983]
0019   0x01B1A0   43 32 05 00   Move                r50, r5        r50 = r5 [self]
001A   0x01B1A8   1C 03 03 02   CallFf              r3, r3, 2      r3 = get-symbol(#ACA135ADD5938983, self)
001B   0x01B1B0   43 31 03 00   Move                r49, r3        r49 = r3 [get-symbol()]
001C   0x01B1B8   1C 02 02 01   CallFf              r2, r2, 1      r2 = darray-count(get-symbol())
001D   0x01B1C0   15 03 08 00   LookupPointer       r3, 8          r3 = ST[8] -> <begin-foreach>
001E   0x01B1C8   1C 03 03 00   CallFf              r3, r3, 0      r3 = begin-foreach()
L_19:
001F   0x01B1D0   43 03 01 00   Move                r3, r1         r3 = r1 [0]
0020   0x01B1D8   43 04 02 00   Move                r4, r2         r4 = r2 [darray-count()]
0021   0x01B1E0   20 03 03 04   ILessThan           r3, r3, r4     r3 = r3 [1] < r4 [1753163078]
0022   0x01B1E8   2F C4 03 00   BranchIfNot         r3, 00C4       IF NOT r3 [0x1] => L_0
0023   0x01B1F0   15 03 09 00   LookupPointer       r3, 9          r3 = ST[9] -> <darray-at>
0024   0x01B1F8   15 04 04 00   LookupPointer       r4, 4          r4 = ST[4] -> <get-symbol>
0025   0x01B200   4A 05 07 00   LoadStaticU64Imm    r5, 7          r5 = ST[7] -> <#ACA135ADD5938983>
0026   0x01B208   4A 06 01 00   LoadStaticU64Imm    r6, 1          r6 = ST[1] -> <self>
0027   0x01B210   43 31 05 00   Move                r49, r5        r49 = r5 [#ACA135ADD5938983]
0028   0x01B218   43 32 06 00   Move                r50, r6        r50 = r6 [self]
0029   0x01B220   1C 04 04 02   CallFf              r4, r4, 2      r4 = get-symbol(#ACA135ADD5938983, self)
002A   0x01B228   43 05 01 00   Move                r5, r1         r5 = r1 [0]
002B   0x01B230   43 31 04 00   Move                r49, r4        r49 = r4 [get-symbol()]
002C   0x01B238   43 32 05 00   Move                r50, r5        r50 = r5 [0]
002D   0x01B240   1C 03 03 02   CallFf              r3, r3, 2      r3 = darray-at(get-symbol(), 0)
002E   0x01B248   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
002F   0x01B250   2F 36 04 00   BranchIfNot         r4, 0036       IF NOT r4 [darray-at()] => L_1
0030   0x01B258   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
0031   0x01B260   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0032   0x01B268   3B 04 04 0C   IAddImm             r4, r4, 12     r4 = r4 [-739117676] / 12 -> <-739117676>
0033   0x01B270   4E 04 04 00   LoadU16             ???            UNKNOWN INSTRUCTION
0034   0x01B278   0C 05 07 00   LoadU16Imm          r5, 7          r5 = 7
0035   0x01B280   1D 04 04 05   IEqual              r4, r4, r5     r4 = r4 [-739117824] == r5 [7]
L_1:
0036   0x01B288   2F 3B 04 00   BranchIfNot         r4, 003B       IF NOT r4 [0xD3F1F500] => L_2
0037   0x01B290   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
0038   0x01B298   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0039   0x01B2A0   51 04 04 00   LoadU64             r4, [r4]       r4 = [0x0 + 0x0]
003A   0x01B2A8   2D 56 00 00   Branch              0056           => L_3
L_2:
003B   0x01B2B0   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
003C   0x01B2B8   2F 43 04 00   BranchIfNot         r4, 0043       IF NOT r4 [darray-at()] => L_4
003D   0x01B2C0   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
003E   0x01B2C8   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
003F   0x01B2D0   3B 04 04 0C   IAddImm             r4, r4, 12     r4 = r4 [-739117676] / 12 -> <-739117676>
0040   0x01B2D8   4E 04 04 00   LoadU16             ???            UNKNOWN INSTRUCTION
0041   0x01B2E0   0C 05 05 00   LoadU16Imm          r5, 5          r5 = 5
0042   0x01B2E8   1D 04 04 05   IEqual              r4, r4, r5     r4 = r4 [-739117824] == r5 [5]
L_4:
0043   0x01B2F0   2F 48 04 00   BranchIfNot         r4, 0048       IF NOT r4 [0xD3F1F500] => L_5
0044   0x01B2F8   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
0045   0x01B300   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0046   0x01B308   51 04 04 00   LoadU64             r4, [r4]       r4 = [0x0 + 0x0]
0047   0x01B310   2D 56 00 00   Branch              0056           => L_3
L_5:
0048   0x01B318   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
0049   0x01B320   2F 50 04 00   BranchIfNot         r4, 0050       IF NOT r4 [darray-at()] => L_6
004A   0x01B328   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
004B   0x01B330   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
004C   0x01B338   3B 04 04 0C   IAddImm             r4, r4, 12     r4 = r4 [-739117676] / 12 -> <-739117676>
004D   0x01B340   4E 04 04 00   LoadU16             ???            UNKNOWN INSTRUCTION
004E   0x01B348   0C 05 04 00   LoadU16Imm          r5, 4          r5 = 4
004F   0x01B350   1D 04 04 05   IEqual              r4, r4, r5     r4 = r4 [-739117824] == r5 [4]
L_6:
0050   0x01B358   2F 55 04 00   BranchIfNot         r4, 0055       IF NOT r4 [0xD3F1F500] => L_7
0051   0x01B360   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
0052   0x01B368   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0053   0x01B370   51 04 04 00   LoadU64             r4, [r4]       r4 = [0x0 + 0x0]
0054   0x01B378   2D 56 00 00   Branch              0056           => L_3
L_7:
0055   0x01B380   0C 04 00 00   LoadU16Imm          r4, 0          r4 = 0
L_3:
0056   0x01B388   43 03 04 00   Move                r3, r4         r3 = r4 [0]
0057   0x01B390   0C 04 00 00   LoadU16Imm          r4, 0          r4 = 0
0058   0x01B398   15 05 06 00   LookupPointer       r5, 6          r5 = ST[6] -> <darray-count>
0059   0x01B3A0   43 06 00 00   Move                r6, r0         r6 = r0 [darray-create]
005A   0x01B3A8   43 31 06 00   Move                r49, r6        r49 = r6 [darray-create]
005B   0x01B3B0   1C 05 05 01   CallFf              r5, r5, 1      r5 = darray-count(darray-create)
005C   0x01B3B8   15 06 08 00   LookupPointer       r6, 8          r6 = ST[8] -> <begin-foreach>
005D   0x01B3C0   1C 06 06 00   CallFf              r6, r6, 0      r6 = begin-foreach()
L_18:
005E   0x01B3C8   43 06 04 00   Move                r6, r4         r6 = r4 [0]
005F   0x01B3D0   43 07 05 00   Move                r7, r5         r7 = r5 [darray-count()]
0060   0x01B3D8   20 06 06 07   ILessThan           r6, r6, r7     r6 = r6 [1] < r7 [1753163078]
0061   0x01B3E0   2F BA 06 00   BranchIfNot         r6, 00BA       IF NOT r6 [0x1] => L_8
0062   0x01B3E8   15 06 09 00   LookupPointer       r6, 9          r6 = ST[9] -> <darray-at>
0063   0x01B3F0   43 07 00 00   Move                r7, r0         r7 = r0 [darray-create]
0064   0x01B3F8   43 08 04 00   Move                r8, r4         r8 = r4 [0]
0065   0x01B400   43 31 07 00   Move                r49, r7        r49 = r7 [darray-create]
0066   0x01B408   43 32 08 00   Move                r50, r8        r50 = r8 [0]
0067   0x01B410   1C 06 06 02   CallFf              r6, r6, 2      r6 = darray-at(darray-create, 0)
0068   0x01B418   43 07 06 00   Move                r7, r6         r7 = r6 [darray-at()]
0069   0x01B420   2F 70 07 00   BranchIfNot         r7, 0070       IF NOT r7 [darray-at()] => L_9
006A   0x01B428   43 07 06 00   Move                r7, r6         r7 = r6 [darray-at()]
006B   0x01B430   5D 07 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
006C   0x01B438   3B 07 07 0C   IAddImm             r7, r7, 12     r7 = r7 [-739117676] / 12 -> <-739117676>
006D   0x01B440   4E 07 07 00   LoadU16             ???            UNKNOWN INSTRUCTION
006E   0x01B448   0C 08 07 00   LoadU16Imm          r8, 7          r8 = 7
006F   0x01B450   1D 07 07 08   IEqual              r7, r7, r8     r7 = r7 [-739117824] == r8 [7]
L_9:
0070   0x01B458   2F 75 07 00   BranchIfNot         r7, 0075       IF NOT r7 [0xD3F1F500] => L_10
0071   0x01B460   43 07 06 00   Move                r7, r6         r7 = r6 [darray-at()]
0072   0x01B468   5D 07 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0073   0x01B470   51 07 07 00   LoadU64             r7, [r7]       r7 = [0x0 + 0x0]
0074   0x01B478   2D 90 00 00   Branch              0090           => L_11
L_10:
0075   0x01B480   43 07 06 00   Move                r7, r6         r7 = r6 [darray-at()]
0076   0x01B488   2F 7D 07 00   BranchIfNot         r7, 007D       IF NOT r7 [darray-at()] => L_12
0077   0x01B490   43 07 06 00   Move                r7, r6         r7 = r6 [darray-at()]
0078   0x01B498   5D 07 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0079   0x01B4A0   3B 07 07 0C   IAddImm             r7, r7, 12     r7 = r7 [-739117676] / 12 -> <-739117676>
007A   0x01B4A8   4E 07 07 00   LoadU16             ???            UNKNOWN INSTRUCTION
007B   0x01B4B0   0C 08 05 00   LoadU16Imm          r8, 5          r8 = 5
007C   0x01B4B8   1D 07 07 08   IEqual              r7, r7, r8     r7 = r7 [-739117824] == r8 [5]
L_12:
007D   0x01B4C0   2F 82 07 00   BranchIfNot         r7, 0082       IF NOT r7 [0xD3F1F500] => L_13
007E   0x01B4C8   43 07 06 00   Move                r7, r6         r7 = r6 [darray-at()]
007F   0x01B4D0   5D 07 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0080   0x01B4D8   51 07 07 00   LoadU64             r7, [r7]       r7 = [0x0 + 0x0]
0081   0x01B4E0   2D 90 00 00   Branch              0090           => L_11
L_13:
0082   0x01B4E8   43 07 06 00   Move                r7, r6         r7 = r6 [darray-at()]
0083   0x01B4F0   2F 8A 07 00   BranchIfNot         r7, 008A       IF NOT r7 [darray-at()] => L_14
0084   0x01B4F8   43 07 06 00   Move                r7, r6         r7 = r6 [darray-at()]
0085   0x01B500   5D 07 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0086   0x01B508   3B 07 07 0C   IAddImm             r7, r7, 12     r7 = r7 [-739117676] / 12 -> <-739117676>
0087   0x01B510   4E 07 07 00   LoadU16             ???            UNKNOWN INSTRUCTION
0088   0x01B518   0C 08 04 00   LoadU16Imm          r8, 4          r8 = 4
0089   0x01B520   1D 07 07 08   IEqual              r7, r7, r8     r7 = r7 [-739117824] == r8 [4]
L_14:
008A   0x01B528   2F 8F 07 00   BranchIfNot         r7, 008F       IF NOT r7 [0xD3F1F500] => L_15
008B   0x01B530   43 07 06 00   Move                r7, r6         r7 = r6 [darray-at()]
008C   0x01B538   5D 07 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
008D   0x01B540   51 07 07 00   LoadU64             r7, [r7]       r7 = [0x0 + 0x0]
008E   0x01B548   2D 90 00 00   Branch              0090           => L_11
L_15:
008F   0x01B550   0C 07 00 00   LoadU16Imm          r7, 0          r7 = 0
L_11:
0090   0x01B558   43 06 07 00   Move                r6, r7         r6 = r7 [0]
0091   0x01B560   15 07 0A 00   LookupPointer       r7, 10         r7 = ST[10] -> <locator-in-region?>
0092   0x01B568   15 08 0B 00   LookupPointer       r8, 11         r8 = ST[11] -> <get-spawner-locator>
0093   0x01B570   43 09 06 00   Move                r9, r6         r9 = r6 [0]
0094   0x01B578   0C 0A 01 00   LoadU16Imm          r10, 1         r10 = 1
0095   0x01B580   43 31 09 00   Move                r49, r9        r49 = r9 [0]
0096   0x01B588   43 32 0A 00   Move                r50, r10       r50 = r10 [1]
0097   0x01B590   1C 08 08 02   CallFf              r8, r8, 2      r8 = get-spawner-locator(0, 1)
0098   0x01B598   43 09 03 00   Move                r9, r3         r9 = r3 [0]
0099   0x01B5A0   4A 0A 0C 00   LoadStaticU64Imm    r10, 12        r10 = ST[12] -> <player>
009A   0x01B5A8   43 31 08 00   Move                r49, r8        r49 = r8 [get-spawner-locator()]
009B   0x01B5B0   43 32 09 00   Move                r50, r9        r50 = r9 [0]
009C   0x01B5B8   43 33 0A 00   Move                r51, r10       r51 = r10 [player]
009D   0x01B5C0   1C 07 07 03   CallFf              r7, r7, 3      r7 = locator-in-region?(get-spawner-locator(), 0, player)
009E   0x01B5C8   2F B2 07 00   BranchIfNot         r7, 00B2       IF NOT r7 [locator-in-region?()] => L_16
009F   0x01B5D0   15 07 0D 00   LookupPointer       r7, 13         r7 = ST[13] -> <darray-find-remove>
00A0   0x01B5D8   15 08 04 00   LookupPointer       r8, 4          r8 = ST[4] -> <get-symbol>
00A1   0x01B5E0   4A 09 05 00   LoadStaticU64Imm    r9, 5          r9 = ST[5] -> <#FE0CDBDD4CC9DFAD>
00A2   0x01B5E8   4A 0A 01 00   LoadStaticU64Imm    r10, 1         r10 = ST[1] -> <self>
00A3   0x01B5F0   43 31 09 00   Move                r49, r9        r49 = r9 [#FE0CDBDD4CC9DFAD]
00A4   0x01B5F8   43 32 0A 00   Move                r50, r10       r50 = r10 [self]
00A5   0x01B600   1C 08 08 02   CallFf              r8, r8, 2      r8 = get-symbol(#FE0CDBDD4CC9DFAD, self)
00A6   0x01B608   15 09 0E 00   LookupPointer       r9, 14         r9 = ST[14] -> <new-boxed-value>
00A7   0x01B610   0C 0A 07 00   LoadU16Imm          r10, 7         r10 = 7
00A8   0x01B618   43 0B 06 00   Move                r11, r6        r11 = r6 [0]
00A9   0x01B620   43 31 0A 00   Move                r49, r10       r49 = r10 [7]
00AA   0x01B628   43 32 0B 00   Move                r50, r11       r50 = r11 [0]
00AB   0x01B630   1C 09 09 02   CallFf              r9, r9, 2      r9 = new-boxed-value(7, 0)
00AC   0x01B638   0C 0A 00 00   LoadU16Imm          r10, 0         r10 = 0
00AD   0x01B640   43 31 08 00   Move                r49, r8        r49 = r8 [get-symbol()]
00AE   0x01B648   43 32 09 00   Move                r50, r9        r50 = r9 [new-boxed-value()]
00AF   0x01B650   43 33 0A 00   Move                r51, r10       r51 = r10 [0]
00B0   0x01B658   1B 07 07 03   Call                r7, r7, 3      r7 = darray-find-remove(get-symbol(), new-boxed-value(), 0)
00B1   0x01B660   2D B3 00 00   Branch              00B3           => L_17
L_16:
00B2   0x01B668   0C 07 00 00   LoadU16Imm          r7, 0          r7 = 0
L_17:
00B3   0x01B670   43 07 04 00   Move                r7, r4         r7 = r4 [0]
00B4   0x01B678   0C 08 01 00   LoadU16Imm          r8, 1          r8 = 1
00B5   0x01B680   01 07 07 08   IAdd                r7, r7, r8     1 = 0 + 1
00B6   0x01B688   43 04 07 00   Move                r4, r7         r4 = r7 [1]
00B7   0x01B690   43 07 04 00   Move                r7, r4         r7 = r4 [1]
00B8   0x01B698   43 06 07 00   Move                r6, r7         r6 = r7 [1]
00B9   0x01B6A0   2D 5E 00 00   Branch              005E           => L_18
L_8:
00BA   0x01B6A8   15 06 0F 00   LookupPointer       r6, 15         r6 = ST[15] -> <end-foreach>
00BB   0x01B6B0   1C 06 06 00   CallFf              r6, r6, 0      r6 = end-foreach()
00BC   0x01B6B8   43 04 06 00   Move                r4, r6         r4 = r6 [end-foreach()]
00BD   0x01B6C0   43 04 01 00   Move                r4, r1         r4 = r1 [0]
00BE   0x01B6C8   0C 05 01 00   LoadU16Imm          r5, 1          r5 = 1
00BF   0x01B6D0   01 04 04 05   IAdd                r4, r4, r5     1 = 0 + 1
00C0   0x01B6D8   43 01 04 00   Move                r1, r4         r1 = r4 [1]
00C1   0x01B6E0   43 04 01 00   Move                r4, r1         r4 = r1 [1]
00C2   0x01B6E8   43 03 04 00   Move                r3, r4         r3 = r4 [1]
00C3   0x01B6F0   2D 1F 00 00   Branch              001F           => L_19
L_0:
00C4   0x01B6F8   15 03 0F 00   LookupPointer       r3, 15         r3 = ST[15] -> <end-foreach>
00C5   0x01B700   1C 03 03 00   CallFf              r3, r3, 0      r3 = end-foreach()
00C6   0x01B708   43 01 03 00   Move                r1, r3         r1 = r3 [end-foreach()]
00C7   0x01B710   15 01 10 00   LookupPointer       r1, 16         r1 = ST[16] -> <is-final-build?>
00C8   0x01B718   1C 01 01 00   CallFf              r1, r1, 0      r1 = is-final-build?()
00C9   0x01B720   30 01 01 00   OpLogNot            r1, r1         r1 = !r1 -> <TRUE>
00CA   0x01B728   2F D7 01 00   BranchIfNot         r1, 00D7       IF NOT r1 [0x6620ACB7] => L_20
00CB   0x01B730   15 01 11 00   LookupPointer       r1, 17         r1 = ST[17] -> <display>
00CC   0x01B738   15 02 12 00   LookupPointer       r2, 18         r2 = ST[18] -> <#5445173390656D6D>
00CD   0x01B740   41 03 13 00   LoadStaticPointerImmr3, 19         r3 = ST[19] -> <0xBF0265FF>
00CE   0x01B748   41 04 14 00   LoadStaticPointerImmr4, 20         r4 = ST[20] -> <0xBF025EFC>
00CF   0x01B750   43 31 03 00   Move                r49, r3        r49 = r3 [0xBF0265FF]
00D0   0x01B758   43 32 04 00   Move                r50, r4        r50 = r4 [0xBF025EFC]
00D1   0x01B760   1C 02 02 02   CallFf              r2, r2, 2      r2 = #5445173390656D6D(0xBF0265FF, 0xBF025EFC)
00D2   0x01B768   0C 03 13 00   LoadU16Imm          r3, 19         r3 = 19
00D3   0x01B770   43 31 02 00   Move                r49, r2        r49 = r2 [#5445173390656D6D()]
00D4   0x01B778   43 32 03 00   Move                r50, r3        r50 = r3 [19]
00D5   0x01B780   1C 01 01 02   CallFf              r1, r1, 2      r1 = display(#5445173390656D6D(), 19)
00D6   0x01B788   2D D8 00 00   Branch              00D8           => L_21
L_20:
00D7   0x01B790   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
L_21:
00D8   0x01B798   15 01 15 00   LookupPointer       r1, 21         r1 = ST[21] -> <darray-destroy>
00D9   0x01B7A0   43 02 00 00   Move                r2, r0         r2 = r0 [darray-create]
00DA   0x01B7A8   43 31 02 00   Move                r49, r2        r49 = r2 [darray-create]
00DB   0x01B7B0   1C 01 01 01   CallFf              r1, r1, 1      r1 = darray-destroy(darray-create)
00DC   0x01B7B8   43 00 01 00   Move                r0, r1         r0 = r1 [darray-destroy()]
00DD   0x01B7C0   00 00 00 00   Return              r0             Return darray-destroy()
SYMBOL TABLE: 
0000   0x01B7C8    POINTER <darray-create>
0001   0x01B7D0    SID <self>
0002   0x01B7D8    INT <-1>
0003   0x01B7E0    POINTER <group-copy>
0004   0x01B7E8    POINTER <get-symbol>
0005   0x01B7F0    SID <#FE0CDBDD4CC9DFAD>
0006   0x01B7F8    POINTER <darray-count>
0007   0x01B800    SID <#ACA135ADD5938983>
0008   0x01B808    POINTER <begin-foreach>
0009   0x01B810    POINTER <darray-at>
000A   0x01B818    POINTER <locator-in-region?>
000B   0x01B820    POINTER <get-spawner-locator>
000C   0x01B828    SID <player>
000D   0x01B830    POINTER <darray-find-remove>
000E   0x01B838    POINTER <new-boxed-value>
000F   0x01B840    POINTER <end-foreach>
0010   0x01B848    POINTER <is-final-build?>
0011   0x01B850    POINTER <display>
0012   0x01B858    POINTER <#5445173390656D6D>
0013   0x01B860    POINTER <#00000282BF0265FF>
0014   0x01B868    POINTER <#00000282BF025EFC>
0015   0x01B870    POINTER <darray-destroy>
0000   0x012018   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <get-boolean>
0001   0x012020   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#32E94EADDED8F01D>
0002   0x012028   4A 02 02 00   LoadStaticU64Imm    r2, 2          r2 = ST[2] -> <self>
0003   0x012030   43 31 01 00   Move                r49, r1        r49 = r1 [#32E94EADDED8F01D]
0004   0x012038   43 32 02 00   Move                r50, r2        r50 = r2 [self]
0005   0x012040   1C 00 00 02   CallFf              r0, r0, 2      r0 = get-boolean(#32E94EADDED8F01D, self)
0006   0x012048   2F D0 00 00   BranchIfNot         r0, 00D0       IF NOT r0 [get-boolean()] => L_0
0007   0x012050   15 00 03 00   LookupPointer       r0, 3          r0 = ST[3] -> <get-symbol>
0008   0x012058   4A 01 04 00   LoadStaticU64Imm    r1, 4          r1 = ST[4] -> <#95719EBD5D274866>
0009   0x012060   4A 02 02 00   LoadStaticU64Imm    r2, 2          r2 = ST[2] -> <self>
000A   0x012068   43 31 01 00   Move                r49, r1        r49 = r1 [#95719EBD5D274866]
000B   0x012070   43 32 02 00   Move                r50, r2        r50 = r2 [self]
000C   0x012078   1C 00 00 02   CallFf              r0, r0, 2      r0 = get-symbol(#95719EBD5D274866, self)
000D   0x012080   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
000E   0x012088   1D 00 00 01   IEqual              r0, r0, r1     r0 = r0 [1774822656] == r1 [0]
000F   0x012090   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0010   0x012098   2F B1 00 00   BranchIfNot         r0, 00B1       IF NOT r0 [0x69C9A501] => L_1
0011   0x0120A0   15 00 05 00   LookupPointer       r0, 5          r0 = ST[5] -> <darray-create>
0012   0x0120A8   4A 01 02 00   LoadStaticU64Imm    r1, 2          r1 = ST[2] -> <self>
0013   0x0120B0   3F 02 06 00   LoadStaticI32Imm    r2, 6          r2 = ST[6] -> <-1>
0014   0x0120B8   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
0015   0x0120C0   43 31 01 00   Move                r49, r1        r49 = r1 [self]
0016   0x0120C8   43 32 02 00   Move                r50, r2        r50 = r2 [-1]
0017   0x0120D0   43 33 03 00   Move                r51, r3        r51 = r3 [0]
0018   0x0120D8   1C 00 00 03   CallFf              r0, r0, 3      r0 = darray-create(self, -1, 0)
0019   0x0120E0   15 01 07 00   LookupPointer       r1, 7          r1 = ST[7] -> <group-copy>
001A   0x0120E8   15 02 03 00   LookupPointer       r2, 3          r2 = ST[3] -> <get-symbol>
001B   0x0120F0   4A 03 08 00   LoadStaticU64Imm    r3, 8          r3 = ST[8] -> <#FE0CDBDD4CC9DFAD>
001C   0x0120F8   4A 04 02 00   LoadStaticU64Imm    r4, 2          r4 = ST[2] -> <self>
001D   0x012100   43 31 03 00   Move                r49, r3        r49 = r3 [#FE0CDBDD4CC9DFAD]
001E   0x012108   43 32 04 00   Move                r50, r4        r50 = r4 [self]
001F   0x012110   1C 02 02 02   CallFf              r2, r2, 2      r2 = get-symbol(#FE0CDBDD4CC9DFAD, self)
0020   0x012118   43 03 00 00   Move                r3, r0         r3 = r0 [darray-create()]
0021   0x012120   43 31 02 00   Move                r49, r2        r49 = r2 [get-symbol()]
0022   0x012128   43 32 03 00   Move                r50, r3        r50 = r3 [darray-create()]
0023   0x012130   1B 01 01 02   Call                r1, r1, 2      r1 = group-copy(get-symbol(), darray-create())
0024   0x012138   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
0025   0x012140   15 02 09 00   LookupPointer       r2, 9          r2 = ST[9] -> <darray-count>
0026   0x012148   43 03 00 00   Move                r3, r0         r3 = r0 [darray-create()]
0027   0x012150   43 31 03 00   Move                r49, r3        r49 = r3 [darray-create()]
0028   0x012158   1C 02 02 01   CallFf              r2, r2, 1      r2 = darray-count(darray-create())
0029   0x012160   15 03 0A 00   LookupPointer       r3, 10         r3 = ST[10] -> <begin-foreach>
002A   0x012168   1C 03 03 00   CallFf              r3, r3, 0      r3 = begin-foreach()
L_12:
002B   0x012170   43 03 01 00   Move                r3, r1         r3 = r1 [0]
002C   0x012178   43 04 02 00   Move                r4, r2         r4 = r2 [darray-count()]
002D   0x012180   20 03 03 04   ILessThan           r3, r3, r4     r3 = r3 [1] < r4 [1753163078]
002E   0x012188   2F 8D 03 00   BranchIfNot         r3, 008D       IF NOT r3 [0x1] => L_2
002F   0x012190   15 03 0B 00   LookupPointer       r3, 11         r3 = ST[11] -> <darray-at>
0030   0x012198   43 04 00 00   Move                r4, r0         r4 = r0 [darray-create]
0031   0x0121A0   43 05 01 00   Move                r5, r1         r5 = r1 [0]
0032   0x0121A8   43 31 04 00   Move                r49, r4        r49 = r4 [darray-create]
0033   0x0121B0   43 32 05 00   Move                r50, r5        r50 = r5 [0]
0034   0x0121B8   1C 03 03 02   CallFf              r3, r3, 2      r3 = darray-at(darray-create, 0)
0035   0x0121C0   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
0036   0x0121C8   2F 3D 04 00   BranchIfNot         r4, 003D       IF NOT r4 [darray-at()] => L_3
0037   0x0121D0   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
0038   0x0121D8   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0039   0x0121E0   3B 04 04 0C   IAddImm             r4, r4, 12     r4 = r4 [-739117676] / 12 -> <-739117676>
003A   0x0121E8   4E 04 04 00   LoadU16             ???            UNKNOWN INSTRUCTION
003B   0x0121F0   0C 05 07 00   LoadU16Imm          r5, 7          r5 = 7
003C   0x0121F8   1D 04 04 05   IEqual              r4, r4, r5     r4 = r4 [-739117824] == r5 [7]
L_3:
003D   0x012200   2F 42 04 00   BranchIfNot         r4, 0042       IF NOT r4 [0xD3F1F500] => L_4
003E   0x012208   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
003F   0x012210   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0040   0x012218   51 04 04 00   LoadU64             r4, [r4]       r4 = [0x0 + 0x0]
0041   0x012220   2D 5D 00 00   Branch              005D           => L_5
L_4:
0042   0x012228   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
0043   0x012230   2F 4A 04 00   BranchIfNot         r4, 004A       IF NOT r4 [darray-at()] => L_6
0044   0x012238   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
0045   0x012240   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0046   0x012248   3B 04 04 0C   IAddImm             r4, r4, 12     r4 = r4 [-739117676] / 12 -> <-739117676>
0047   0x012250   4E 04 04 00   LoadU16             ???            UNKNOWN INSTRUCTION
0048   0x012258   0C 05 05 00   LoadU16Imm          r5, 5          r5 = 5
0049   0x012260   1D 04 04 05   IEqual              r4, r4, r5     r4 = r4 [-739117824] == r5 [5]
L_6:
004A   0x012268   2F 4F 04 00   BranchIfNot         r4, 004F       IF NOT r4 [0xD3F1F500] => L_7
004B   0x012270   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
004C   0x012278   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
004D   0x012280   51 04 04 00   LoadU64             r4, [r4]       r4 = [0x0 + 0x0]
004E   0x012288   2D 5D 00 00   Branch              005D           => L_5
L_7:
004F   0x012290   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
0050   0x012298   2F 57 04 00   BranchIfNot         r4, 0057       IF NOT r4 [darray-at()] => L_8
0051   0x0122A0   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
0052   0x0122A8   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0053   0x0122B0   3B 04 04 0C   IAddImm             r4, r4, 12     r4 = r4 [-739117676] / 12 -> <-739117676>
0054   0x0122B8   4E 04 04 00   LoadU16             ???            UNKNOWN INSTRUCTION
0055   0x0122C0   0C 05 04 00   LoadU16Imm          r5, 4          r5 = 4
0056   0x0122C8   1D 04 04 05   IEqual              r4, r4, r5     r4 = r4 [-739117824] == r5 [4]
L_8:
0057   0x0122D0   2F 5C 04 00   BranchIfNot         r4, 005C       IF NOT r4 [0xD3F1F500] => L_9
0058   0x0122D8   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
0059   0x0122E0   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
005A   0x0122E8   51 04 04 00   LoadU64             r4, [r4]       r4 = [0x0 + 0x0]
005B   0x0122F0   2D 5D 00 00   Branch              005D           => L_5
L_9:
005C   0x0122F8   0C 04 00 00   LoadU16Imm          r4, 0          r4 = 0
L_5:
005D   0x012300   43 03 04 00   Move                r3, r4         r3 = r4 [0]
005E   0x012308   15 04 0C 00   LookupPointer       r4, 12         r4 = ST[12] -> <locator-in-region?>
005F   0x012310   15 05 0D 00   LookupPointer       r5, 13         r5 = ST[13] -> <get-spawner-locator>
0060   0x012318   43 06 03 00   Move                r6, r3         r6 = r3 [0]
0061   0x012320   0C 07 01 00   LoadU16Imm          r7, 1          r7 = 1
0062   0x012328   43 31 06 00   Move                r49, r6        r49 = r6 [0]
0063   0x012330   43 32 07 00   Move                r50, r7        r50 = r7 [1]
0064   0x012338   1C 05 05 02   CallFf              r5, r5, 2      r5 = get-spawner-locator(0, 1)
0065   0x012340   15 06 03 00   LookupPointer       r6, 3          r6 = ST[3] -> <get-symbol>
0066   0x012348   4A 07 04 00   LoadStaticU64Imm    r7, 4          r7 = ST[4] -> <#95719EBD5D274866>
0067   0x012350   4A 08 02 00   LoadStaticU64Imm    r8, 2          r8 = ST[2] -> <self>
0068   0x012358   43 31 07 00   Move                r49, r7        r49 = r7 [#95719EBD5D274866]
0069   0x012360   43 32 08 00   Move                r50, r8        r50 = r8 [self]
006A   0x012368   1C 06 06 02   CallFf              r6, r6, 2      r6 = get-symbol(#95719EBD5D274866, self)
006B   0x012370   4A 07 0E 00   LoadStaticU64Imm    r7, 14         r7 = ST[14] -> <player>
006C   0x012378   43 31 05 00   Move                r49, r5        r49 = r5 [get-spawner-locator()]
006D   0x012380   43 32 06 00   Move                r50, r6        r50 = r6 [get-symbol()]
006E   0x012388   43 33 07 00   Move                r51, r7        r51 = r7 [player]
006F   0x012390   1C 04 04 03   CallFf              r4, r4, 3      r4 = locator-in-region?(get-spawner-locator(), get-symbol(), player)
0070   0x012398   30 04 04 00   OpLogNot            r4, r4         r4 = !r4 -> <TRUE>
0071   0x0123A0   2F 85 04 00   BranchIfNot         r4, 0085       IF NOT r4 [0xA55C2EE6] => L_10
0072   0x0123A8   15 04 0F 00   LookupPointer       r4, 15         r4 = ST[15] -> <darray-find-remove>
0073   0x0123B0   15 05 03 00   LookupPointer       r5, 3          r5 = ST[3] -> <get-symbol>
0074   0x0123B8   4A 06 08 00   LoadStaticU64Imm    r6, 8          r6 = ST[8] -> <#FE0CDBDD4CC9DFAD>
0075   0x0123C0   4A 07 02 00   LoadStaticU64Imm    r7, 2          r7 = ST[2] -> <self>
0076   0x0123C8   43 31 06 00   Move                r49, r6        r49 = r6 [#FE0CDBDD4CC9DFAD]
0077   0x0123D0   43 32 07 00   Move                r50, r7        r50 = r7 [self]
0078   0x0123D8   1C 05 05 02   CallFf              r5, r5, 2      r5 = get-symbol(#FE0CDBDD4CC9DFAD, self)
0079   0x0123E0   15 06 10 00   LookupPointer       r6, 16         r6 = ST[16] -> <new-boxed-value>
007A   0x0123E8   0C 07 07 00   LoadU16Imm          r7, 7          r7 = 7
007B   0x0123F0   43 08 03 00   Move                r8, r3         r8 = r3 [0]
007C   0x0123F8   43 31 07 00   Move                r49, r7        r49 = r7 [7]
007D   0x012400   43 32 08 00   Move                r50, r8        r50 = r8 [0]
007E   0x012408   1C 06 06 02   CallFf              r6, r6, 2      r6 = new-boxed-value(7, 0)
007F   0x012410   0C 07 00 00   LoadU16Imm          r7, 0          r7 = 0
0080   0x012418   43 31 05 00   Move                r49, r5        r49 = r5 [get-symbol()]
0081   0x012420   43 32 06 00   Move                r50, r6        r50 = r6 [new-boxed-value()]
0082   0x012428   43 33 07 00   Move                r51, r7        r51 = r7 [0]
0083   0x012430   1B 04 04 03   Call                r4, r4, 3      r4 = darray-find-remove(get-symbol(), new-boxed-value(), 0)
0084   0x012438   2D 86 00 00   Branch              0086           => L_11
L_10:
0085   0x012440   0C 04 00 00   LoadU16Imm          r4, 0          r4 = 0
L_11:
0086   0x012448   43 04 01 00   Move                r4, r1         r4 = r1 [0]
0087   0x012450   0C 05 01 00   LoadU16Imm          r5, 1          r5 = 1
0088   0x012458   01 04 04 05   IAdd                r4, r4, r5     1 = 0 + 1
0089   0x012460   43 01 04 00   Move                r1, r4         r1 = r4 [1]
008A   0x012468   43 04 01 00   Move                r4, r1         r4 = r1 [1]
008B   0x012470   43 03 04 00   Move                r3, r4         r3 = r4 [1]
008C   0x012478   2D 2B 00 00   Branch              002B           => L_12
L_2:
008D   0x012480   15 03 11 00   LookupPointer       r3, 17         r3 = ST[17] -> <end-foreach>
008E   0x012488   1C 03 03 00   CallFf              r3, r3, 0      r3 = end-foreach()
008F   0x012490   43 01 03 00   Move                r1, r3         r1 = r3 [end-foreach()]
0090   0x012498   15 01 12 00   LookupPointer       r1, 18         r1 = ST[18] -> <is-final-build?>
0091   0x0124A0   1C 01 01 00   CallFf              r1, r1, 0      r1 = is-final-build?()
0092   0x0124A8   30 01 01 00   OpLogNot            r1, r1         r1 = !r1 -> <TRUE>
0093   0x0124B0   2F AA 01 00   BranchIfNot         r1, 00AA       IF NOT r1 [0x6620ACB7] => L_13
0094   0x0124B8   15 01 13 00   LookupPointer       r1, 19         r1 = ST[19] -> <display>
0095   0x0124C0   15 02 14 00   LookupPointer       r2, 20         r2 = ST[20] -> <#5445173390656D6D>
0096   0x0124C8   41 03 15 00   LoadStaticPointerImmr3, 21         r3 = ST[21] -> <0xBF026638>
0097   0x0124D0   41 04 16 00   LoadStaticPointerImmr4, 22         r4 = ST[22] -> <0xBF025EFC>
0098   0x0124D8   15 05 17 00   LookupPointer       r5, 23         r5 = ST[23] -> <string-debug>
0099   0x0124E0   15 06 03 00   LookupPointer       r6, 3          r6 = ST[3] -> <get-symbol>
009A   0x0124E8   4A 07 04 00   LoadStaticU64Imm    r7, 4          r7 = ST[4] -> <#95719EBD5D274866>
009B   0x0124F0   4A 08 02 00   LoadStaticU64Imm    r8, 2          r8 = ST[2] -> <self>
009C   0x0124F8   43 31 07 00   Move                r49, r7        r49 = r7 [#95719EBD5D274866]
009D   0x012500   43 32 08 00   Move                r50, r8        r50 = r8 [self]
009E   0x012508   1C 06 06 02   CallFf              r6, r6, 2      r6 = get-symbol(#95719EBD5D274866, self)
009F   0x012510   43 31 06 00   Move                r49, r6        r49 = r6 [get-symbol()]
00A0   0x012518   1C 05 05 01   CallFf              r5, r5, 1      r5 = string-debug(get-symbol())
00A1   0x012520   43 31 03 00   Move                r49, r3        r49 = r3 [0xBF026638]
00A2   0x012528   43 32 04 00   Move                r50, r4        r50 = r4 [0xBF025EFC]
00A3   0x012530   43 33 05 00   Move                r51, r5        r51 = r5 [string-debug()]
00A4   0x012538   1C 02 02 03   CallFf              r2, r2, 3      r2 = #5445173390656D6D(0xBF026638, 0xBF025EFC, string-debug())
00A5   0x012540   0C 03 13 00   LoadU16Imm          r3, 19         r3 = 19
00A6   0x012548   43 31 02 00   Move                r49, r2        r49 = r2 [#5445173390656D6D()]
00A7   0x012550   43 32 03 00   Move                r50, r3        r50 = r3 [19]
00A8   0x012558   1C 01 01 02   CallFf              r1, r1, 2      r1 = display(#5445173390656D6D(), 19)
00A9   0x012560   2D AB 00 00   Branch              00AB           => L_14
L_13:
00AA   0x012568   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
L_14:
00AB   0x012570   15 01 18 00   LookupPointer       r1, 24         r1 = ST[24] -> <darray-destroy>
00AC   0x012578   43 02 00 00   Move                r2, r0         r2 = r0 [darray-create]
00AD   0x012580   43 31 02 00   Move                r49, r2        r49 = r2 [darray-create]
00AE   0x012588   1C 01 01 01   CallFf              r1, r1, 1      r1 = darray-destroy(darray-create)
00AF   0x012590   43 00 01 00   Move                r0, r1         r0 = r1 [darray-destroy()]
00B0   0x012598   2D CF 00 00   Branch              00CF           => L_15
L_1:
00B1   0x0125A0   15 00 19 00   LookupPointer       r0, 25         r0 = ST[25] -> <display-error>
00B2   0x0125A8   41 01 1A 00   LoadStaticPointerImmr1, 26         r1 = ST[26] -> <0xBF026065>
00B3   0x0125B0   43 31 01 00   Move                r49, r1        r49 = r1 [0xBF026065]
00B4   0x0125B8   1C 00 00 01   CallFf              r0, r0, 1      r0 = display-error(0xBF026065)
00B5   0x0125C0   15 00 12 00   LookupPointer       r0, 18         r0 = ST[18] -> <is-final-build?>
00B6   0x0125C8   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
00B7   0x0125D0   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
00B8   0x0125D8   2F C5 00 00   BranchIfNot         r0, 00C5       IF NOT r0 [0x6620ACB7] => L_16
00B9   0x0125E0   15 00 13 00   LookupPointer       r0, 19         r0 = ST[19] -> <display>
00BA   0x0125E8   15 01 14 00   LookupPointer       r1, 20         r1 = ST[20] -> <#5445173390656D6D>
00BB   0x0125F0   41 02 1B 00   LoadStaticPointerImmr2, 27         r2 = ST[27] -> <0xBF026311>
00BC   0x0125F8   41 03 16 00   LoadStaticPointerImmr3, 22         r3 = ST[22] -> <0xBF025EFC>
00BD   0x012600   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF026311]
00BE   0x012608   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
00BF   0x012610   1C 01 01 02   CallFf              r1, r1, 2      r1 = #5445173390656D6D(0xBF026311, 0xBF025EFC)
00C0   0x012618   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
00C1   0x012620   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
00C2   0x012628   43 32 02 00   Move                r50, r2        r50 = r2 [19]
00C3   0x012630   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
00C4   0x012638   2D C6 00 00   Branch              00C6           => L_17
L_16:
00C5   0x012640   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_17:
00C6   0x012648   15 00 1C 00   LookupPointer       r0, 28         r0 = ST[28] -> <darray-clear>
00C7   0x012650   15 01 03 00   LookupPointer       r1, 3          r1 = ST[3] -> <get-symbol>
00C8   0x012658   4A 02 08 00   LoadStaticU64Imm    r2, 8          r2 = ST[8] -> <#FE0CDBDD4CC9DFAD>
00C9   0x012660   4A 03 02 00   LoadStaticU64Imm    r3, 2          r3 = ST[2] -> <self>
00CA   0x012668   43 31 02 00   Move                r49, r2        r49 = r2 [#FE0CDBDD4CC9DFAD]
00CB   0x012670   43 32 03 00   Move                r50, r3        r50 = r3 [self]
00CC   0x012678   1C 01 01 02   CallFf              r1, r1, 2      r1 = get-symbol(#FE0CDBDD4CC9DFAD, self)
00CD   0x012680   43 31 01 00   Move                r49, r1        r49 = r1 [get-symbol()]
00CE   0x012688   1C 00 00 01   CallFf              r0, r0, 1      r0 = darray-clear(get-symbol())
L_15:
00CF   0x012690   2D BC 00 01   Branch              01BC           => L_RETURN
L_0:
00D0   0x012698   15 00 05 00   LookupPointer       r0, 5          r0 = ST[5] -> <darray-create>
00D1   0x0126A0   4A 01 02 00   LoadStaticU64Imm    r1, 2          r1 = ST[2] -> <self>
00D2   0x0126A8   3F 02 06 00   LoadStaticI32Imm    r2, 6          r2 = ST[6] -> <-1>
00D3   0x0126B0   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
00D4   0x0126B8   43 31 01 00   Move                r49, r1        r49 = r1 [self]
00D5   0x0126C0   43 32 02 00   Move                r50, r2        r50 = r2 [-1]
00D6   0x0126C8   43 33 03 00   Move                r51, r3        r51 = r3 [0]
00D7   0x0126D0   1C 00 00 03   CallFf              r0, r0, 3      r0 = darray-create(self, -1, 0)
00D8   0x0126D8   15 01 07 00   LookupPointer       r1, 7          r1 = ST[7] -> <group-copy>
00D9   0x0126E0   15 02 03 00   LookupPointer       r2, 3          r2 = ST[3] -> <get-symbol>
00DA   0x0126E8   4A 03 08 00   LoadStaticU64Imm    r3, 8          r3 = ST[8] -> <#FE0CDBDD4CC9DFAD>
00DB   0x0126F0   4A 04 02 00   LoadStaticU64Imm    r4, 2          r4 = ST[2] -> <self>
00DC   0x0126F8   43 31 03 00   Move                r49, r3        r49 = r3 [#FE0CDBDD4CC9DFAD]
00DD   0x012700   43 32 04 00   Move                r50, r4        r50 = r4 [self]
00DE   0x012708   1C 02 02 02   CallFf              r2, r2, 2      r2 = get-symbol(#FE0CDBDD4CC9DFAD, self)
00DF   0x012710   43 03 00 00   Move                r3, r0         r3 = r0 [darray-create()]
00E0   0x012718   43 31 02 00   Move                r49, r2        r49 = r2 [get-symbol()]
00E1   0x012720   43 32 03 00   Move                r50, r3        r50 = r3 [darray-create()]
00E2   0x012728   1B 01 01 02   Call                r1, r1, 2      r1 = group-copy(get-symbol(), darray-create())
00E3   0x012730   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
00E4   0x012738   15 02 09 00   LookupPointer       r2, 9          r2 = ST[9] -> <darray-count>
00E5   0x012740   43 03 00 00   Move                r3, r0         r3 = r0 [darray-create()]
00E6   0x012748   43 31 03 00   Move                r49, r3        r49 = r3 [darray-create()]
00E7   0x012750   1C 02 02 01   CallFf              r2, r2, 1      r2 = darray-count(darray-create())
00E8   0x012758   15 03 0A 00   LookupPointer       r3, 10         r3 = ST[10] -> <begin-foreach>
00E9   0x012760   1C 03 03 00   CallFf              r3, r3, 0      r3 = begin-foreach()
L_41:
00EA   0x012768   43 03 01 00   Move                r3, r1         r3 = r1 [0]
00EB   0x012770   43 04 02 00   Move                r4, r2         r4 = r2 [darray-count()]
00EC   0x012778   20 03 03 04   ILessThan           r3, r3, r4     r3 = r3 [1] < r4 [1753163078]
00ED   0x012780   2F A3 03 01   BranchIfNot         r3, 01A3       IF NOT r3 [0x1] => L_19
00EE   0x012788   15 03 0B 00   LookupPointer       r3, 11         r3 = ST[11] -> <darray-at>
00EF   0x012790   43 04 00 00   Move                r4, r0         r4 = r0 [darray-create]
00F0   0x012798   43 05 01 00   Move                r5, r1         r5 = r1 [0]
00F1   0x0127A0   43 31 04 00   Move                r49, r4        r49 = r4 [darray-create]
00F2   0x0127A8   43 32 05 00   Move                r50, r5        r50 = r5 [0]
00F3   0x0127B0   1C 03 03 02   CallFf              r3, r3, 2      r3 = darray-at(darray-create, 0)
00F4   0x0127B8   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
00F5   0x0127C0   2F FC 04 00   BranchIfNot         r4, 00FC       IF NOT r4 [darray-at()] => L_20
00F6   0x0127C8   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
00F7   0x0127D0   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00F8   0x0127D8   3B 04 04 0C   IAddImm             r4, r4, 12     r4 = r4 [-739117676] / 12 -> <-739117676>
00F9   0x0127E0   4E 04 04 00   LoadU16             ???            UNKNOWN INSTRUCTION
00FA   0x0127E8   0C 05 07 00   LoadU16Imm          r5, 7          r5 = 7
00FB   0x0127F0   1D 04 04 05   IEqual              r4, r4, r5     r4 = r4 [-739117824] == r5 [7]
L_20:
00FC   0x0127F8   2F 01 04 01   BranchIfNot         r4, 0101       IF NOT r4 [0xD3F1F500] => L_21
00FD   0x012800   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
00FE   0x012808   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00FF   0x012810   51 04 04 00   LoadU64             r4, [r4]       r4 = [0x0 + 0x0]
0100   0x012818   2D 1C 00 01   Branch              011C           => L_22
L_21:
0101   0x012820   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
0102   0x012828   2F 09 04 01   BranchIfNot         r4, 0109       IF NOT r4 [darray-at()] => L_23
0103   0x012830   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
0104   0x012838   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0105   0x012840   3B 04 04 0C   IAddImm             r4, r4, 12     r4 = r4 [-739117676] / 12 -> <-739117676>
0106   0x012848   4E 04 04 00   LoadU16             ???            UNKNOWN INSTRUCTION
0107   0x012850   0C 05 05 00   LoadU16Imm          r5, 5          r5 = 5
0108   0x012858   1D 04 04 05   IEqual              r4, r4, r5     r4 = r4 [-739117824] == r5 [5]
L_23:
0109   0x012860   2F 0E 04 01   BranchIfNot         r4, 010E       IF NOT r4 [0xD3F1F500] => L_24
010A   0x012868   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
010B   0x012870   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
010C   0x012878   51 04 04 00   LoadU64             r4, [r4]       r4 = [0x0 + 0x0]
010D   0x012880   2D 1C 00 01   Branch              011C           => L_22
L_24:
010E   0x012888   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
010F   0x012890   2F 16 04 01   BranchIfNot         r4, 0116       IF NOT r4 [darray-at()] => L_25
0110   0x012898   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
0111   0x0128A0   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0112   0x0128A8   3B 04 04 0C   IAddImm             r4, r4, 12     r4 = r4 [-739117676] / 12 -> <-739117676>
0113   0x0128B0   4E 04 04 00   LoadU16             ???            UNKNOWN INSTRUCTION
0114   0x0128B8   0C 05 04 00   LoadU16Imm          r5, 4          r5 = 4
0115   0x0128C0   1D 04 04 05   IEqual              r4, r4, r5     r4 = r4 [-739117824] == r5 [4]
L_25:
0116   0x0128C8   2F 1B 04 01   BranchIfNot         r4, 011B       IF NOT r4 [0xD3F1F500] => L_26
0117   0x0128D0   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
0118   0x0128D8   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0119   0x0128E0   51 04 04 00   LoadU64             r4, [r4]       r4 = [0x0 + 0x0]
011A   0x0128E8   2D 1C 00 01   Branch              011C           => L_22
L_26:
011B   0x0128F0   0C 04 00 00   LoadU16Imm          r4, 0          r4 = 0
L_22:
011C   0x0128F8   43 03 04 00   Move                r3, r4         r3 = r4 [0]
011D   0x012900   0C 04 00 00   LoadU16Imm          r4, 0          r4 = 0
011E   0x012908   15 05 0D 00   LookupPointer       r5, 13         r5 = ST[13] -> <get-spawner-locator>
011F   0x012910   43 06 03 00   Move                r6, r3         r6 = r3 [0]
0120   0x012918   0C 07 01 00   LoadU16Imm          r7, 1          r7 = 1
0121   0x012920   43 31 06 00   Move                r49, r6        r49 = r6 [0]
0122   0x012928   43 32 07 00   Move                r50, r7        r50 = r7 [1]
0123   0x012930   1C 05 05 02   CallFf              r5, r5, 2      r5 = get-spawner-locator(0, 1)
0124   0x012938   0C 06 00 00   LoadU16Imm          r6, 0          r6 = 0
0125   0x012940   15 07 09 00   LookupPointer       r7, 9          r7 = ST[9] -> <darray-count>
0126   0x012948   15 08 03 00   LookupPointer       r8, 3          r8 = ST[3] -> <get-symbol>
0127   0x012950   4A 09 1D 00   LoadStaticU64Imm    r9, 29         r9 = ST[29] -> <#80F4C52A6BDCA6BC>
0128   0x012958   4A 0A 02 00   LoadStaticU64Imm    r10, 2         r10 = ST[2] -> <self>
0129   0x012960   43 31 09 00   Move                r49, r9        r49 = r9 [#80F4C52A6BDCA6BC]
012A   0x012968   43 32 0A 00   Move                r50, r10       r50 = r10 [self]
012B   0x012970   1C 08 08 02   CallFf              r8, r8, 2      r8 = get-symbol(#80F4C52A6BDCA6BC, self)
012C   0x012978   43 31 08 00   Move                r49, r8        r49 = r8 [get-symbol()]
012D   0x012980   1C 07 07 01   CallFf              r7, r7, 1      r7 = darray-count(get-symbol())
012E   0x012988   15 08 0A 00   LookupPointer       r8, 10         r8 = ST[10] -> <begin-foreach>
012F   0x012990   1C 08 08 00   CallFf              r8, r8, 0      r8 = begin-foreach()
L_38:
0130   0x012998   43 08 06 00   Move                r8, r6         r8 = r6 [0]
0131   0x0129A0   43 09 07 00   Move                r9, r7         r9 = r7 [darray-count()]
0132   0x0129A8   20 08 08 09   ILessThan           r8, r8, r9     r8 = r8 [1] < r9 [1753163078]
0133   0x0129B0   2F 81 08 01   BranchIfNot         r8, 0181       IF NOT r8 [0x1] => L_27
0134   0x0129B8   15 08 0B 00   LookupPointer       r8, 11         r8 = ST[11] -> <darray-at>
0135   0x0129C0   15 09 03 00   LookupPointer       r9, 3          r9 = ST[3] -> <get-symbol>
0136   0x0129C8   4A 0A 1D 00   LoadStaticU64Imm    r10, 29        r10 = ST[29] -> <#80F4C52A6BDCA6BC>
0137   0x0129D0   4A 0B 02 00   LoadStaticU64Imm    r11, 2         r11 = ST[2] -> <self>
0138   0x0129D8   43 31 0A 00   Move                r49, r10       r49 = r10 [#80F4C52A6BDCA6BC]
0139   0x0129E0   43 32 0B 00   Move                r50, r11       r50 = r11 [self]
013A   0x0129E8   1C 09 09 02   CallFf              r9, r9, 2      r9 = get-symbol(#80F4C52A6BDCA6BC, self)
013B   0x0129F0   43 0A 06 00   Move                r10, r6        r10 = r6 [0]
013C   0x0129F8   43 31 09 00   Move                r49, r9        r49 = r9 [get-symbol()]
013D   0x012A00   43 32 0A 00   Move                r50, r10       r50 = r10 [0]
013E   0x012A08   1C 08 08 02   CallFf              r8, r8, 2      r8 = darray-at(get-symbol(), 0)
013F   0x012A10   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0140   0x012A18   2F 47 09 01   BranchIfNot         r9, 0147       IF NOT r9 [darray-at()] => L_28
0141   0x012A20   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0142   0x012A28   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0143   0x012A30   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
0144   0x012A38   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
0145   0x012A40   0C 0A 07 00   LoadU16Imm          r10, 7         r10 = 7
0146   0x012A48   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [7]
L_28:
0147   0x012A50   2F 4C 09 01   BranchIfNot         r9, 014C       IF NOT r9 [0xD3F1F500] => L_29
0148   0x012A58   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0149   0x012A60   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
014A   0x012A68   51 09 09 00   LoadU64             r9, [r9]       r9 = [0x0 + 0x0]
014B   0x012A70   2D 67 00 01   Branch              0167           => L_30
L_29:
014C   0x012A78   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
014D   0x012A80   2F 54 09 01   BranchIfNot         r9, 0154       IF NOT r9 [darray-at()] => L_31
014E   0x012A88   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
014F   0x012A90   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0150   0x012A98   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
0151   0x012AA0   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
0152   0x012AA8   0C 0A 05 00   LoadU16Imm          r10, 5         r10 = 5
0153   0x012AB0   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [5]
L_31:
0154   0x012AB8   2F 59 09 01   BranchIfNot         r9, 0159       IF NOT r9 [0xD3F1F500] => L_32
0155   0x012AC0   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0156   0x012AC8   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0157   0x012AD0   51 09 09 00   LoadU64             r9, [r9]       r9 = [0x0 + 0x0]
0158   0x012AD8   2D 67 00 01   Branch              0167           => L_30
L_32:
0159   0x012AE0   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
015A   0x012AE8   2F 61 09 01   BranchIfNot         r9, 0161       IF NOT r9 [darray-at()] => L_33
015B   0x012AF0   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
015C   0x012AF8   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
015D   0x012B00   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
015E   0x012B08   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
015F   0x012B10   0C 0A 04 00   LoadU16Imm          r10, 4         r10 = 4
0160   0x012B18   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [4]
L_33:
0161   0x012B20   2F 66 09 01   BranchIfNot         r9, 0166       IF NOT r9 [0xD3F1F500] => L_34
0162   0x012B28   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
0163   0x012B30   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0164   0x012B38   51 09 09 00   LoadU64             r9, [r9]       r9 = [0x0 + 0x0]
0165   0x012B40   2D 67 00 01   Branch              0167           => L_30
L_34:
0166   0x012B48   0C 09 00 00   LoadU16Imm          r9, 0          r9 = 0
L_30:
0167   0x012B50   43 08 09 00   Move                r8, r9         r8 = r9 [0]
0168   0x012B58   0C 09 00 00   LoadU16Imm          r9, 0          r9 = 0
0169   0x012B60   43 0A 04 00   Move                r10, r4        r10 = r4 [0]
016A   0x012B68   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [1] == r10 [0]
016B   0x012B70   2F 74 09 01   BranchIfNot         r9, 0174       IF NOT r9 [0x1] => L_35
016C   0x012B78   15 09 0C 00   LookupPointer       r9, 12         r9 = ST[12] -> <locator-in-region?>
016D   0x012B80   43 0A 05 00   Move                r10, r5        r10 = r5 [get-spawner-locator()]
016E   0x012B88   43 0B 08 00   Move                r11, r8        r11 = r8 [0]
016F   0x012B90   4A 0C 0E 00   LoadStaticU64Imm    r12, 14        r12 = ST[14] -> <player>
0170   0x012B98   43 31 0A 00   Move                r49, r10       r49 = r10 [get-spawner-locator()]
0171   0x012BA0   43 32 0B 00   Move                r50, r11       r50 = r11 [0]
0172   0x012BA8   43 33 0C 00   Move                r51, r12       r51 = r12 [player]
0173   0x012BB0   1C 09 09 03   CallFf              r9, r9, 3      r9 = locator-in-region?(get-spawner-locator(), 0, player)
L_35:
0174   0x012BB8   2F 79 09 01   BranchIfNot         r9, 0179       IF NOT r9 [locator-in-region?()] => L_36
0175   0x012BC0   0C 09 01 00   LoadU16Imm          r9, 1          r9 = 1
0176   0x012BC8   43 04 09 00   Move                r4, r9         r4 = r9 [1]
0177   0x012BD0   43 09 04 00   Move                r9, r4         r9 = r4 [1]
0178   0x012BD8   2D 7A 00 01   Branch              017A           => L_37
L_36:
0179   0x012BE0   0C 09 00 00   LoadU16Imm          r9, 0          r9 = 0
L_37:
017A   0x012BE8   43 09 06 00   Move                r9, r6         r9 = r6 [0]
017B   0x012BF0   0C 0A 01 00   LoadU16Imm          r10, 1         r10 = 1
017C   0x012BF8   01 09 09 0A   IAdd                r9, r9, r10    1 = 0 + 1
017D   0x012C00   43 06 09 00   Move                r6, r9         r6 = r9 [1]
017E   0x012C08   43 09 06 00   Move                r9, r6         r9 = r6 [1]
017F   0x012C10   43 08 09 00   Move                r8, r9         r8 = r9 [1]
0180   0x012C18   2D 30 00 01   Branch              0130           => L_38
L_27:
0181   0x012C20   15 08 11 00   LookupPointer       r8, 17         r8 = ST[17] -> <end-foreach>
0182   0x012C28   1C 08 08 00   CallFf              r8, r8, 0      r8 = end-foreach()
0183   0x012C30   43 06 08 00   Move                r6, r8         r6 = r8 [end-foreach()]
0184   0x012C38   43 06 04 00   Move                r6, r4         r6 = r4 [1]
0185   0x012C40   30 06 06 00   OpLogNot            r6, r6         r6 = !r6 -> <FALSE>
0186   0x012C48   2F 9A 06 01   BranchIfNot         r6, 019A       IF NOT r6 [0x0] => L_39
0187   0x012C50   15 06 0F 00   LookupPointer       r6, 15         r6 = ST[15] -> <darray-find-remove>
0188   0x012C58   15 07 03 00   LookupPointer       r7, 3          r7 = ST[3] -> <get-symbol>
0189   0x012C60   4A 08 08 00   LoadStaticU64Imm    r8, 8          r8 = ST[8] -> <#FE0CDBDD4CC9DFAD>
018A   0x012C68   4A 09 02 00   LoadStaticU64Imm    r9, 2          r9 = ST[2] -> <self>
018B   0x012C70   43 31 08 00   Move                r49, r8        r49 = r8 [#FE0CDBDD4CC9DFAD]
018C   0x012C78   43 32 09 00   Move                r50, r9        r50 = r9 [self]
018D   0x012C80   1C 07 07 02   CallFf              r7, r7, 2      r7 = get-symbol(#FE0CDBDD4CC9DFAD, self)
018E   0x012C88   15 08 10 00   LookupPointer       r8, 16         r8 = ST[16] -> <new-boxed-value>
018F   0x012C90   0C 09 07 00   LoadU16Imm          r9, 7          r9 = 7
0190   0x012C98   43 0A 03 00   Move                r10, r3        r10 = r3 [0]
0191   0x012CA0   43 31 09 00   Move                r49, r9        r49 = r9 [7]
0192   0x012CA8   43 32 0A 00   Move                r50, r10       r50 = r10 [0]
0193   0x012CB0   1C 08 08 02   CallFf              r8, r8, 2      r8 = new-boxed-value(7, 0)
0194   0x012CB8   0C 09 00 00   LoadU16Imm          r9, 0          r9 = 0
0195   0x012CC0   43 31 07 00   Move                r49, r7        r49 = r7 [get-symbol()]
0196   0x012CC8   43 32 08 00   Move                r50, r8        r50 = r8 [new-boxed-value()]
0197   0x012CD0   43 33 09 00   Move                r51, r9        r51 = r9 [0]
0198   0x012CD8   1B 06 06 03   Call                r6, r6, 3      r6 = darray-find-remove(get-symbol(), new-boxed-value(), 0)
0199   0x012CE0   2D 9B 00 01   Branch              019B           => L_40
L_39:
019A   0x012CE8   0C 06 00 00   LoadU16Imm          r6, 0          r6 = 0
L_40:
019B   0x012CF0   43 04 06 00   Move                r4, r6         r4 = r6 [0]
019C   0x012CF8   43 04 01 00   Move                r4, r1         r4 = r1 [0]
019D   0x012D00   0C 05 01 00   LoadU16Imm          r5, 1          r5 = 1
019E   0x012D08   01 04 04 05   IAdd                r4, r4, r5     1 = 0 + 1
019F   0x012D10   43 01 04 00   Move                r1, r4         r1 = r4 [1]
01A0   0x012D18   43 04 01 00   Move                r4, r1         r4 = r1 [1]
01A1   0x012D20   43 03 04 00   Move                r3, r4         r3 = r4 [1]
01A2   0x012D28   2D EA 00 00   Branch              00EA           => L_41
L_19:
01A3   0x012D30   15 03 11 00   LookupPointer       r3, 17         r3 = ST[17] -> <end-foreach>
01A4   0x012D38   1C 03 03 00   CallFf              r3, r3, 0      r3 = end-foreach()
01A5   0x012D40   43 01 03 00   Move                r1, r3         r1 = r3 [end-foreach()]
01A6   0x012D48   15 01 12 00   LookupPointer       r1, 18         r1 = ST[18] -> <is-final-build?>
01A7   0x012D50   1C 01 01 00   CallFf              r1, r1, 0      r1 = is-final-build?()
01A8   0x012D58   30 01 01 00   OpLogNot            r1, r1         r1 = !r1 -> <TRUE>
01A9   0x012D60   2F B6 01 01   BranchIfNot         r1, 01B6       IF NOT r1 [0x6620ACB7] => L_42
01AA   0x012D68   15 01 13 00   LookupPointer       r1, 19         r1 = ST[19] -> <display>
01AB   0x012D70   15 02 14 00   LookupPointer       r2, 20         r2 = ST[20] -> <#5445173390656D6D>
01AC   0x012D78   41 03 1E 00   LoadStaticPointerImmr3, 30         r3 = ST[30] -> <0xBF026666>
01AD   0x012D80   41 04 16 00   LoadStaticPointerImmr4, 22         r4 = ST[22] -> <0xBF025EFC>
01AE   0x012D88   43 31 03 00   Move                r49, r3        r49 = r3 [0xBF026666]
01AF   0x012D90   43 32 04 00   Move                r50, r4        r50 = r4 [0xBF025EFC]
01B0   0x012D98   1C 02 02 02   CallFf              r2, r2, 2      r2 = #5445173390656D6D(0xBF026666, 0xBF025EFC)
01B1   0x012DA0   0C 03 13 00   LoadU16Imm          r3, 19         r3 = 19
01B2   0x012DA8   43 31 02 00   Move                r49, r2        r49 = r2 [#5445173390656D6D()]
01B3   0x012DB0   43 32 03 00   Move                r50, r3        r50 = r3 [19]
01B4   0x012DB8   1C 01 01 02   CallFf              r1, r1, 2      r1 = display(#5445173390656D6D(), 19)
01B5   0x012DC0   2D B7 00 01   Branch              01B7           => L_43
L_42:
01B6   0x012DC8   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
L_43:
01B7   0x012DD0   15 01 18 00   LookupPointer       r1, 24         r1 = ST[24] -> <darray-destroy>
01B8   0x012DD8   43 02 00 00   Move                r2, r0         r2 = r0 [darray-create]
01B9   0x012DE0   43 31 02 00   Move                r49, r2        r49 = r2 [darray-create]
01BA   0x012DE8   1C 01 01 01   CallFf              r1, r1, 1      r1 = darray-destroy(darray-create)
01BB   0x012DF0   43 00 01 00   Move                r0, r1         r0 = r1 [darray-destroy()]
L_RETURN:
01BC   0x012DF8   00 00 00 00   Return              r0             Return darray-destroy()
SYMBOL TABLE: 
0000   0x012E00    POINTER <get-boolean>
0001   0x012E08    SID <#32E94EADDED8F01D>
0002   0x012E10    SID <self>
0003   0x012E18    POINTER <get-symbol>
0004   0x012E20    SID <#95719EBD5D274866>
0005   0x012E28    POINTER <darray-create>
0006   0x012E30    INT <-1>
0007   0x012E38    POINTER <group-copy>
0008   0x012E40    SID <#FE0CDBDD4CC9DFAD>
0009   0x012E48    POINTER <darray-count>
000A   0x012E50    POINTER <begin-foreach>
000B   0x012E58    POINTER <darray-at>
000C   0x012E60    POINTER <locator-in-region?>
000D   0x012E68    POINTER <get-spawner-locator>
000E   0x012E70    SID <player>
000F   0x012E78    POINTER <darray-find-remove>
0010   0x012E80    POINTER <new-boxed-value>
0011   0x012E88    POINTER <end-foreach>
0012   0x012E90    POINTER <is-final-build?>
0013   0x012E98    POINTER <display>
0014   0x012EA0    POINTER <#5445173390656D6D>
0015   0x012EA8    POINTER <#00000282BF026638>
0016   0x012EB0    POINTER <#00000282BF025EFC>
0017   0x012EB8    POINTER <string-debug>
0018   0x012EC0    POINTER <darray-destroy>
0019   0x012EC8    POINTER <display-error>
001A   0x012ED0    POINTER <#00000282BF026065>
001B   0x012ED8    POINTER <#00000282BF026311>
001C   0x012EE0    POINTER <darray-clear>
001D   0x012EE8    SID <#80F4C52A6BDCA6BC>
001E   0x012EF0    POINTER <#00000282BF026666>
0000   0x0156C8   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <is-final-build?>
0001   0x0156D0   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0002   0x0156D8   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0003   0x0156E0   2F 1C 00 00   BranchIfNot         r0, 001C       IF NOT r0 [0x6620ACB7] => L_0
0004   0x0156E8   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <display>
0005   0x0156F0   15 01 02 00   LookupPointer       r1, 2          r1 = ST[2] -> <#5445173390656D6D>
0006   0x0156F8   41 02 03 00   LoadStaticPointerImmr2, 3          r2 = ST[3] -> <0xBF026BD4>
0007   0x015700   41 03 04 00   LoadStaticPointerImmr3, 4          r3 = ST[4] -> <0xBF025EFC>
0008   0x015708   41 04 05 00   LoadStaticPointerImmr4, 5          r4 = ST[5] -> <0xBF025FCE>
0009   0x015710   15 05 06 00   LookupPointer       r5, 6          r5 = ST[6] -> <darray-count>
000A   0x015718   15 06 07 00   LookupPointer       r6, 7          r6 = ST[7] -> <get-symbol>
000B   0x015720   4A 07 08 00   LoadStaticU64Imm    r7, 8          r7 = ST[8] -> <#2D7661AFEECF44C9>
000C   0x015728   4A 08 09 00   LoadStaticU64Imm    r8, 9          r8 = ST[9] -> <self>
000D   0x015730   43 31 07 00   Move                r49, r7        r49 = r7 [#2D7661AFEECF44C9]
000E   0x015738   43 32 08 00   Move                r50, r8        r50 = r8 [self]
000F   0x015740   1C 06 06 02   CallFf              r6, r6, 2      r6 = get-symbol(#2D7661AFEECF44C9, self)
0010   0x015748   43 31 06 00   Move                r49, r6        r49 = r6 [get-symbol()]
0011   0x015750   1C 05 05 01   CallFf              r5, r5, 1      r5 = darray-count(get-symbol())
0012   0x015758   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF026BD4]
0013   0x015760   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
0014   0x015768   43 33 04 00   Move                r51, r4        r51 = r4 [0xBF025FCE]
0015   0x015770   43 34 05 00   Move                r52, r5        r52 = r5 [darray-count()]
0016   0x015778   1C 01 01 04   CallFf              r1, r1, 4      r1 = #5445173390656D6D(0xBF026BD4, 0xBF025EFC, 0xBF025FCE, darray-count())
0017   0x015780   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
0018   0x015788   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
0019   0x015790   43 32 02 00   Move                r50, r2        r50 = r2 [19]
001A   0x015798   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
001B   0x0157A0   2D 1D 00 00   Branch              001D           => L_RETURN
L_0:
001C   0x0157A8   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
001D   0x0157B0   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x0157B8    POINTER <is-final-build?>
0001   0x0157C0    POINTER <display>
0002   0x0157C8    POINTER <#5445173390656D6D>
0003   0x0157D0    POINTER <#00000282BF026BD4>
0004   0x0157D8    POINTER <#00000282BF025EFC>
0005   0x0157E0    POINTER <#00000282BF025FCE>
0006   0x0157E8    POINTER <darray-count>
0007   0x0157F0    POINTER <get-symbol>
0008   0x0157F8    SID <#2D7661AFEECF44C9>
0009   0x015800    SID <self>
0000   0x01A840   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <is-final-build?>
0001   0x01A848   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0002   0x01A850   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0003   0x01A858   2F 1C 00 00   BranchIfNot         r0, 001C       IF NOT r0 [0x6620ACB7] => L_0
0004   0x01A860   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <display>
0005   0x01A868   15 01 02 00   LookupPointer       r1, 2          r1 = ST[2] -> <#5445173390656D6D>
0006   0x01A870   41 02 03 00   LoadStaticPointerImmr2, 3          r2 = ST[3] -> <0xBF026BD4>
0007   0x01A878   41 03 04 00   LoadStaticPointerImmr3, 4          r3 = ST[4] -> <0xBF025EFC>
0008   0x01A880   41 04 05 00   LoadStaticPointerImmr4, 5          r4 = ST[5] -> <0xBF025FF6>
0009   0x01A888   15 05 06 00   LookupPointer       r5, 6          r5 = ST[6] -> <darray-count>
000A   0x01A890   15 06 07 00   LookupPointer       r6, 7          r6 = ST[7] -> <get-symbol>
000B   0x01A898   4A 07 08 00   LoadStaticU64Imm    r7, 8          r7 = ST[8] -> <#FE0CDBDD4CC9DFAD>
000C   0x01A8A0   4A 08 09 00   LoadStaticU64Imm    r8, 9          r8 = ST[9] -> <self>
000D   0x01A8A8   43 31 07 00   Move                r49, r7        r49 = r7 [#FE0CDBDD4CC9DFAD]
000E   0x01A8B0   43 32 08 00   Move                r50, r8        r50 = r8 [self]
000F   0x01A8B8   1C 06 06 02   CallFf              r6, r6, 2      r6 = get-symbol(#FE0CDBDD4CC9DFAD, self)
0010   0x01A8C0   43 31 06 00   Move                r49, r6        r49 = r6 [get-symbol()]
0011   0x01A8C8   1C 05 05 01   CallFf              r5, r5, 1      r5 = darray-count(get-symbol())
0012   0x01A8D0   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF026BD4]
0013   0x01A8D8   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
0014   0x01A8E0   43 33 04 00   Move                r51, r4        r51 = r4 [0xBF025FF6]
0015   0x01A8E8   43 34 05 00   Move                r52, r5        r52 = r5 [darray-count()]
0016   0x01A8F0   1C 01 01 04   CallFf              r1, r1, 4      r1 = #5445173390656D6D(0xBF026BD4, 0xBF025EFC, 0xBF025FF6, darray-count())
0017   0x01A8F8   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
0018   0x01A900   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
0019   0x01A908   43 32 02 00   Move                r50, r2        r50 = r2 [19]
001A   0x01A910   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
001B   0x01A918   2D 1D 00 00   Branch              001D           => L_RETURN
L_0:
001C   0x01A920   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
001D   0x01A928   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x01A930    POINTER <is-final-build?>
0001   0x01A938    POINTER <display>
0002   0x01A940    POINTER <#5445173390656D6D>
0003   0x01A948    POINTER <#00000282BF026BD4>
0004   0x01A950    POINTER <#00000282BF025EFC>
0005   0x01A958    POINTER <#00000282BF025FF6>
0006   0x01A960    POINTER <darray-count>
0007   0x01A968    POINTER <get-symbol>
0008   0x01A970    SID <#FE0CDBDD4CC9DFAD>
0009   0x01A978    SID <self>
0000   0x01A2D8   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <get-symbol>
0001   0x01A2E0   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#95719EBD5D274866>
0002   0x01A2E8   4A 02 02 00   LoadStaticU64Imm    r2, 2          r2 = ST[2] -> <self>
0003   0x01A2F0   43 31 01 00   Move                r49, r1        r49 = r1 [#95719EBD5D274866]
0004   0x01A2F8   43 32 02 00   Move                r50, r2        r50 = r2 [self]
0005   0x01A300   1C 00 00 02   CallFf              r0, r0, 2      r0 = get-symbol(#95719EBD5D274866, self)
0006   0x01A308   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
0007   0x01A310   1D 00 00 01   IEqual              r0, r0, r1     r0 = r0 [1774822656] == r1 [0]
0008   0x01A318   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0009   0x01A320   2F 15 00 00   BranchIfNot         r0, 0015       IF NOT r0 [0x69C9A501] => L_0
000A   0x01A328   15 00 03 00   LookupPointer       r0, 3          r0 = ST[3] -> <darray-count>
000B   0x01A330   15 01 00 00   LookupPointer       r1, 0          r1 = ST[0] -> <get-symbol>
000C   0x01A338   4A 02 04 00   LoadStaticU64Imm    r2, 4          r2 = ST[4] -> <#FE0CDBDD4CC9DFAD>
000D   0x01A340   4A 03 02 00   LoadStaticU64Imm    r3, 2          r3 = ST[2] -> <self>
000E   0x01A348   43 31 02 00   Move                r49, r2        r49 = r2 [#FE0CDBDD4CC9DFAD]
000F   0x01A350   43 32 03 00   Move                r50, r3        r50 = r3 [self]
0010   0x01A358   1C 01 01 02   CallFf              r1, r1, 2      r1 = get-symbol(#FE0CDBDD4CC9DFAD, self)
0011   0x01A360   43 31 01 00   Move                r49, r1        r49 = r1 [get-symbol()]
0012   0x01A368   1C 00 00 01   CallFf              r0, r0, 1      r0 = darray-count(get-symbol())
0013   0x01A370   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
0014   0x01A378   21 00 00 01   ILessThanEqual      r0, r0, r1     r0 = r0 [1753163008] <= r1 [0]
L_0:
0015   0x01A380   2F 62 00 00   BranchIfNot         r0, 0062       IF NOT r0 [0x687F2500] => L_1
0016   0x01A388   15 00 05 00   LookupPointer       r0, 5          r0 = ST[5] -> <is-final-build?>
0017   0x01A390   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0018   0x01A398   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0019   0x01A3A0   2F 30 00 00   BranchIfNot         r0, 0030       IF NOT r0 [0x6620ACB7] => L_2
001A   0x01A3A8   15 00 06 00   LookupPointer       r0, 6          r0 = ST[6] -> <display>
001B   0x01A3B0   15 01 07 00   LookupPointer       r1, 7          r1 = ST[7] -> <#5445173390656D6D>
001C   0x01A3B8   41 02 08 00   LoadStaticPointerImmr2, 8          r2 = ST[8] -> <0xBF026569>
001D   0x01A3C0   41 03 09 00   LoadStaticPointerImmr3, 9          r3 = ST[9] -> <0xBF025EFC>
001E   0x01A3C8   15 04 0A 00   LookupPointer       r4, 10         r4 = ST[10] -> <string-debug>
001F   0x01A3D0   15 05 00 00   LookupPointer       r5, 0          r5 = ST[0] -> <get-symbol>
0020   0x01A3D8   4A 06 01 00   LoadStaticU64Imm    r6, 1          r6 = ST[1] -> <#95719EBD5D274866>
0021   0x01A3E0   4A 07 02 00   LoadStaticU64Imm    r7, 2          r7 = ST[2] -> <self>
0022   0x01A3E8   43 31 06 00   Move                r49, r6        r49 = r6 [#95719EBD5D274866]
0023   0x01A3F0   43 32 07 00   Move                r50, r7        r50 = r7 [self]
0024   0x01A3F8   1C 05 05 02   CallFf              r5, r5, 2      r5 = get-symbol(#95719EBD5D274866, self)
0025   0x01A400   43 31 05 00   Move                r49, r5        r49 = r5 [get-symbol()]
0026   0x01A408   1C 04 04 01   CallFf              r4, r4, 1      r4 = string-debug(get-symbol())
0027   0x01A410   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF026569]
0028   0x01A418   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
0029   0x01A420   43 33 04 00   Move                r51, r4        r51 = r4 [string-debug()]
002A   0x01A428   1C 01 01 03   CallFf              r1, r1, 3      r1 = #5445173390656D6D(0xBF026569, 0xBF025EFC, string-debug())
002B   0x01A430   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
002C   0x01A438   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
002D   0x01A440   43 32 02 00   Move                r50, r2        r50 = r2 [19]
002E   0x01A448   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
002F   0x01A450   2D 31 00 00   Branch              0031           => L_3
L_2:
0030   0x01A458   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_3:
0031   0x01A460   15 00 05 00   LookupPointer       r0, 5          r0 = ST[5] -> <is-final-build?>
0032   0x01A468   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0033   0x01A470   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0034   0x01A478   2F 41 00 00   BranchIfNot         r0, 0041       IF NOT r0 [0x6620ACB7] => L_4
0035   0x01A480   15 00 06 00   LookupPointer       r0, 6          r0 = ST[6] -> <display>
0036   0x01A488   15 01 07 00   LookupPointer       r1, 7          r1 = ST[7] -> <#5445173390656D6D>
0037   0x01A490   41 02 0B 00   LoadStaticPointerImmr2, 11         r2 = ST[11] -> <0xBF026391>
0038   0x01A498   41 03 09 00   LoadStaticPointerImmr3, 9          r3 = ST[9] -> <0xBF025EFC>
0039   0x01A4A0   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF026391]
003A   0x01A4A8   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
003B   0x01A4B0   1C 01 01 02   CallFf              r1, r1, 2      r1 = #5445173390656D6D(0xBF026391, 0xBF025EFC)
003C   0x01A4B8   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
003D   0x01A4C0   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
003E   0x01A4C8   43 32 02 00   Move                r50, r2        r50 = r2 [19]
003F   0x01A4D0   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
0040   0x01A4D8   2D 42 00 00   Branch              0042           => L_5
L_4:
0041   0x01A4E0   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_5:
0042   0x01A4E8   15 00 0C 00   LookupPointer       r0, 12         r0 = ST[12] -> <darray-append>
0043   0x01A4F0   15 01 00 00   LookupPointer       r1, 0          r1 = ST[0] -> <get-symbol>
0044   0x01A4F8   4A 02 0D 00   LoadStaticU64Imm    r2, 13         r2 = ST[13] -> <#E44FA889CD257D23>
0045   0x01A500   4A 03 02 00   LoadStaticU64Imm    r3, 2          r3 = ST[2] -> <self>
0046   0x01A508   43 31 02 00   Move                r49, r2        r49 = r2 [#E44FA889CD257D23]
0047   0x01A510   43 32 03 00   Move                r50, r3        r50 = r3 [self]
0048   0x01A518   1C 01 01 02   CallFf              r1, r1, 2      r1 = get-symbol(#E44FA889CD257D23, self)
0049   0x01A520   15 02 0E 00   LookupPointer       r2, 14         r2 = ST[14] -> <new-boxed-value>
004A   0x01A528   0C 03 07 00   LoadU16Imm          r3, 7          r3 = 7
004B   0x01A530   15 04 00 00   LookupPointer       r4, 0          r4 = ST[0] -> <get-symbol>
004C   0x01A538   4A 05 01 00   LoadStaticU64Imm    r5, 1          r5 = ST[1] -> <#95719EBD5D274866>
004D   0x01A540   4A 06 02 00   LoadStaticU64Imm    r6, 2          r6 = ST[2] -> <self>
004E   0x01A548   43 31 05 00   Move                r49, r5        r49 = r5 [#95719EBD5D274866]
004F   0x01A550   43 32 06 00   Move                r50, r6        r50 = r6 [self]
0050   0x01A558   1C 04 04 02   CallFf              r4, r4, 2      r4 = get-symbol(#95719EBD5D274866, self)
0051   0x01A560   43 31 03 00   Move                r49, r3        r49 = r3 [7]
0052   0x01A568   43 32 04 00   Move                r50, r4        r50 = r4 [get-symbol()]
0053   0x01A570   1C 02 02 02   CallFf              r2, r2, 2      r2 = new-boxed-value(7, get-symbol())
0054   0x01A578   0C 03 01 00   LoadU16Imm          r3, 1          r3 = 1
0055   0x01A580   43 31 01 00   Move                r49, r1        r49 = r1 [get-symbol()]
0056   0x01A588   43 32 02 00   Move                r50, r2        r50 = r2 [new-boxed-value()]
0057   0x01A590   43 33 03 00   Move                r51, r3        r51 = r3 [1]
0058   0x01A598   1C 00 00 03   CallFf              r0, r0, 3      r0 = darray-append(get-symbol(), new-boxed-value(), 1)
0059   0x01A5A0   15 00 0F 00   LookupPointer       r0, 15         r0 = ST[15] -> <wait-one-frame>
005A   0x01A5A8   1C 00 00 00   CallFf              r0, r0, 0      r0 = wait-one-frame()
005B   0x01A5B0   15 00 10 00   LookupPointer       r0, 16         r0 = ST[16] -> <go>
005C   0x01A5B8   4A 01 11 00   LoadStaticU64Imm    r1, 17         r1 = ST[17] -> <select-spawn-regions>
005D   0x01A5C0   0C 02 01 00   LoadU16Imm          r2, 1          r2 = 1
005E   0x01A5C8   43 31 01 00   Move                r49, r1        r49 = r1 [select-spawn-regions]
005F   0x01A5D0   43 32 02 00   Move                r50, r2        r50 = r2 [1]
0060   0x01A5D8   1C 00 00 02   CallFf              r0, r0, 2      r0 = go(select-spawn-regions, 1)
0061   0x01A5E0   2D 63 00 00   Branch              0063           => L_RETURN
L_1:
0062   0x01A5E8   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
0063   0x01A5F0   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x01A5F8    POINTER <get-symbol>
0001   0x01A600    SID <#95719EBD5D274866>
0002   0x01A608    SID <self>
0003   0x01A610    POINTER <darray-count>
0004   0x01A618    SID <#FE0CDBDD4CC9DFAD>
0005   0x01A620    POINTER <is-final-build?>
0006   0x01A628    POINTER <display>
0007   0x01A630    POINTER <#5445173390656D6D>
0008   0x01A638    POINTER <#00000282BF026569>
0009   0x01A640    POINTER <#00000282BF025EFC>
000A   0x01A648    POINTER <string-debug>
000B   0x01A650    POINTER <#00000282BF026391>
000C   0x01A658    POINTER <darray-append>
000D   0x01A660    SID <#E44FA889CD257D23>
000E   0x01A668    POINTER <new-boxed-value>
000F   0x01A670    POINTER <wait-one-frame>
0010   0x01A678    POINTER <go>
0011   0x01A680    SID <select-spawn-regions>
0000   0x01EC20   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <wait-one-frame>
0001   0x01EC28   1C 00 00 00   CallFf              r0, r0, 0      r0 = wait-one-frame()
0002   0x01EC30   00 00 00 00   Return              r0             Return wait-one-frame()
SYMBOL TABLE: 
0000   0x01EC38    POINTER <wait-one-frame>
0000   0x0152B8   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <go>
0001   0x0152C0   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <raycast-check-spawn-positions>
0002   0x0152C8   0C 02 01 00   LoadU16Imm          r2, 1          r2 = 1
0003   0x0152D0   43 31 01 00   Move                r49, r1        r49 = r1 [raycast-check-spawn-positions]
0004   0x0152D8   43 32 02 00   Move                r50, r2        r50 = r2 [1]
0005   0x0152E0   1C 00 00 02   CallFf              r0, r0, 2      r0 = go(raycast-check-spawn-positions, 1)
0006   0x0152E8   00 00 00 00   Return              r0             Return go()
SYMBOL TABLE: 
0000   0x0152F0    POINTER <go>
0001   0x0152F8    SID <raycast-check-spawn-positions>
      STATE raycast-check-spawn-positions:
         ON start
          TRACK main:
0000   0x00FFB0   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <is-final-build?>
0001   0x00FFB8   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0002   0x00FFC0   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0003   0x00FFC8   2F 0E 00 00   BranchIfNot         r0, 000E       IF NOT r0 [0x6620ACB7] => L_0
0004   0x00FFD0   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <display>
0005   0x00FFD8   15 01 02 00   LookupPointer       r1, 2          r1 = ST[2] -> <#5445173390656D6D>
0006   0x00FFE0   41 02 03 00   LoadStaticPointerImmr2, 3          r2 = ST[3] -> <0xBF026FF9>
0007   0x00FFE8   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF026FF9]
0008   0x00FFF0   1C 01 01 01   CallFf              r1, r1, 1      r1 = #5445173390656D6D(0xBF026FF9)
0009   0x00FFF8   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
000A   0x010000   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
000B   0x010008   43 32 02 00   Move                r50, r2        r50 = r2 [19]
000C   0x010010   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
000D   0x010018   2D 0F 00 00   Branch              000F           => L_RETURN
L_0:
000E   0x010020   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
000F   0x010028   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x010030    POINTER <is-final-build?>
0001   0x010038    POINTER <display>
0002   0x010040    POINTER <#5445173390656D6D>
0003   0x010048    POINTER <#00000282BF026FF9>
0000   0x009D90   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <darray-clear>
0001   0x009D98   15 01 01 00   LookupPointer       r1, 1          r1 = ST[1] -> <get-symbol>
0002   0x009DA0   4A 02 02 00   LoadStaticU64Imm    r2, 2          r2 = ST[2] -> <#2005DE6CD0556E13>
0003   0x009DA8   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
0004   0x009DB0   43 31 02 00   Move                r49, r2        r49 = r2 [#2005DE6CD0556E13]
0005   0x009DB8   43 32 03 00   Move                r50, r3        r50 = r3 [self]
0006   0x009DC0   1C 01 01 02   CallFf              r1, r1, 2      r1 = get-symbol(#2005DE6CD0556E13, self)
0007   0x009DC8   43 31 01 00   Move                r49, r1        r49 = r1 [get-symbol()]
0008   0x009DD0   1C 00 00 01   CallFf              r0, r0, 1      r0 = darray-clear(get-symbol())
0009   0x009DD8   00 00 00 00   Return              r0             Return darray-clear()
SYMBOL TABLE: 
0000   0x009DE0    POINTER <darray-clear>
0001   0x009DE8    POINTER <get-symbol>
0002   0x009DF0    SID <#2005DE6CD0556E13>
0003   0x009DF8    SID <self>
0000   0x01B878   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <is-final-build?>
0001   0x01B880   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0002   0x01B888   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0003   0x01B890   2F 10 00 00   BranchIfNot         r0, 0010       IF NOT r0 [0x6620ACB7] => L_0
0004   0x01B898   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <display>
0005   0x01B8A0   15 01 02 00   LookupPointer       r1, 2          r1 = ST[2] -> <#5445173390656D6D>
0006   0x01B8A8   41 02 03 00   LoadStaticPointerImmr2, 3          r2 = ST[3] -> <0xBF026202>
0007   0x01B8B0   41 03 04 00   LoadStaticPointerImmr3, 4          r3 = ST[4] -> <0xBF025EFC>
0008   0x01B8B8   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF026202]
0009   0x01B8C0   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
000A   0x01B8C8   1C 01 01 02   CallFf              r1, r1, 2      r1 = #5445173390656D6D(0xBF026202, 0xBF025EFC)
000B   0x01B8D0   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
000C   0x01B8D8   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
000D   0x01B8E0   43 32 02 00   Move                r50, r2        r50 = r2 [19]
000E   0x01B8E8   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
000F   0x01B8F0   2D 11 00 00   Branch              0011           => L_RETURN
L_0:
0010   0x01B8F8   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
0011   0x01B900   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x01B908    POINTER <is-final-build?>
0001   0x01B910    POINTER <display>
0002   0x01B918    POINTER <#5445173390656D6D>
0003   0x01B920    POINTER <#00000282BF026202>
0004   0x01B928    POINTER <#00000282BF025EFC>
0000   0x017C40   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <ddict-create>
0001   0x017C48   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <self>
0002   0x017C50   3F 02 02 00   LoadStaticI32Imm    r2, 2          r2 = ST[2] -> <-1>
0003   0x017C58   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
0004   0x017C60   43 31 01 00   Move                r49, r1        r49 = r1 [self]
0005   0x017C68   43 32 02 00   Move                r50, r2        r50 = r2 [-1]
0006   0x017C70   43 33 03 00   Move                r51, r3        r51 = r3 [0]
0007   0x017C78   1C 00 00 03   CallFf              r0, r0, 3      r0 = ddict-create(self, -1, 0)
0008   0x017C80   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
0009   0x017C88   15 02 03 00   LookupPointer       r2, 3          r2 = ST[3] -> <darray-count>
000A   0x017C90   15 03 04 00   LookupPointer       r3, 4          r3 = ST[4] -> <get-symbol>
000B   0x017C98   4A 04 05 00   LoadStaticU64Imm    r4, 5          r4 = ST[5] -> <#FE0CDBDD4CC9DFAD>
000C   0x017CA0   4A 05 01 00   LoadStaticU64Imm    r5, 1          r5 = ST[1] -> <self>
000D   0x017CA8   43 31 04 00   Move                r49, r4        r49 = r4 [#FE0CDBDD4CC9DFAD]
000E   0x017CB0   43 32 05 00   Move                r50, r5        r50 = r5 [self]
000F   0x017CB8   1C 03 03 02   CallFf              r3, r3, 2      r3 = get-symbol(#FE0CDBDD4CC9DFAD, self)
0010   0x017CC0   43 31 03 00   Move                r49, r3        r49 = r3 [get-symbol()]
0011   0x017CC8   1C 02 02 01   CallFf              r2, r2, 1      r2 = darray-count(get-symbol())
0012   0x017CD0   15 03 06 00   LookupPointer       r3, 6          r3 = ST[6] -> <begin-foreach>
0013   0x017CD8   1C 03 03 00   CallFf              r3, r3, 0      r3 = begin-foreach()
L_8:
0014   0x017CE0   43 03 01 00   Move                r3, r1         r3 = r1 [0]
0015   0x017CE8   43 04 02 00   Move                r4, r2         r4 = r2 [darray-count()]
0016   0x017CF0   20 03 03 04   ILessThan           r3, r3, r4     r3 = r3 [1] < r4 [1753163078]
0017   0x017CF8   2F 60 03 00   BranchIfNot         r3, 0060       IF NOT r3 [0x1] => L_0
0018   0x017D00   15 03 07 00   LookupPointer       r3, 7          r3 = ST[7] -> <darray-at>
0019   0x017D08   15 04 04 00   LookupPointer       r4, 4          r4 = ST[4] -> <get-symbol>
001A   0x017D10   4A 05 05 00   LoadStaticU64Imm    r5, 5          r5 = ST[5] -> <#FE0CDBDD4CC9DFAD>
001B   0x017D18   4A 06 01 00   LoadStaticU64Imm    r6, 1          r6 = ST[1] -> <self>
001C   0x017D20   43 31 05 00   Move                r49, r5        r49 = r5 [#FE0CDBDD4CC9DFAD]
001D   0x017D28   43 32 06 00   Move                r50, r6        r50 = r6 [self]
001E   0x017D30   1C 04 04 02   CallFf              r4, r4, 2      r4 = get-symbol(#FE0CDBDD4CC9DFAD, self)
001F   0x017D38   43 05 01 00   Move                r5, r1         r5 = r1 [0]
0020   0x017D40   43 31 04 00   Move                r49, r4        r49 = r4 [get-symbol()]
0021   0x017D48   43 32 05 00   Move                r50, r5        r50 = r5 [0]
0022   0x017D50   1C 03 03 02   CallFf              r3, r3, 2      r3 = darray-at(get-symbol(), 0)
0023   0x017D58   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
0024   0x017D60   2F 2B 04 00   BranchIfNot         r4, 002B       IF NOT r4 [darray-at()] => L_1
0025   0x017D68   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
0026   0x017D70   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0027   0x017D78   3B 04 04 0C   IAddImm             r4, r4, 12     r4 = r4 [-739117676] / 12 -> <-739117676>
0028   0x017D80   4E 04 04 00   LoadU16             ???            UNKNOWN INSTRUCTION
0029   0x017D88   0C 05 07 00   LoadU16Imm          r5, 7          r5 = 7
002A   0x017D90   1D 04 04 05   IEqual              r4, r4, r5     r4 = r4 [-739117824] == r5 [7]
L_1:
002B   0x017D98   2F 30 04 00   BranchIfNot         r4, 0030       IF NOT r4 [0xD3F1F500] => L_2
002C   0x017DA0   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
002D   0x017DA8   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
002E   0x017DB0   51 04 04 00   LoadU64             r4, [r4]       r4 = [0x0 + 0x0]
002F   0x017DB8   2D 4B 00 00   Branch              004B           => L_3
L_2:
0030   0x017DC0   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
0031   0x017DC8   2F 38 04 00   BranchIfNot         r4, 0038       IF NOT r4 [darray-at()] => L_4
0032   0x017DD0   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
0033   0x017DD8   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0034   0x017DE0   3B 04 04 0C   IAddImm             r4, r4, 12     r4 = r4 [-739117676] / 12 -> <-739117676>
0035   0x017DE8   4E 04 04 00   LoadU16             ???            UNKNOWN INSTRUCTION
0036   0x017DF0   0C 05 05 00   LoadU16Imm          r5, 5          r5 = 5
0037   0x017DF8   1D 04 04 05   IEqual              r4, r4, r5     r4 = r4 [-739117824] == r5 [5]
L_4:
0038   0x017E00   2F 3D 04 00   BranchIfNot         r4, 003D       IF NOT r4 [0xD3F1F500] => L_5
0039   0x017E08   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
003A   0x017E10   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
003B   0x017E18   51 04 04 00   LoadU64             r4, [r4]       r4 = [0x0 + 0x0]
003C   0x017E20   2D 4B 00 00   Branch              004B           => L_3
L_5:
003D   0x017E28   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
003E   0x017E30   2F 45 04 00   BranchIfNot         r4, 0045       IF NOT r4 [darray-at()] => L_6
003F   0x017E38   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
0040   0x017E40   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0041   0x017E48   3B 04 04 0C   IAddImm             r4, r4, 12     r4 = r4 [-739117676] / 12 -> <-739117676>
0042   0x017E50   4E 04 04 00   LoadU16             ???            UNKNOWN INSTRUCTION
0043   0x017E58   0C 05 04 00   LoadU16Imm          r5, 4          r5 = 4
0044   0x017E60   1D 04 04 05   IEqual              r4, r4, r5     r4 = r4 [-739117824] == r5 [4]
L_6:
0045   0x017E68   2F 4A 04 00   BranchIfNot         r4, 004A       IF NOT r4 [0xD3F1F500] => L_7
0046   0x017E70   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
0047   0x017E78   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0048   0x017E80   51 04 04 00   LoadU64             r4, [r4]       r4 = [0x0 + 0x0]
0049   0x017E88   2D 4B 00 00   Branch              004B           => L_3
L_7:
004A   0x017E90   0C 04 00 00   LoadU16Imm          r4, 0          r4 = 0
L_3:
004B   0x017E98   43 03 04 00   Move                r3, r4         r3 = r4 [0]
004C   0x017EA0   15 04 08 00   LookupPointer       r4, 8          r4 = ST[8] -> <ddict-set>
004D   0x017EA8   43 05 00 00   Move                r5, r0         r5 = r0 [ddict-create()]
004E   0x017EB0   43 06 03 00   Move                r6, r3         r6 = r3 [0]
004F   0x017EB8   15 07 09 00   LookupPointer       r7, 9          r7 = ST[9] -> <new-boxed-value>
0050   0x017EC0   0C 08 01 00   LoadU16Imm          r8, 1          r8 = 1
0051   0x017EC8   0C 09 01 00   LoadU16Imm          r9, 1          r9 = 1
0052   0x017ED0   43 31 08 00   Move                r49, r8        r49 = r8 [1]
0053   0x017ED8   43 32 09 00   Move                r50, r9        r50 = r9 [1]
0054   0x017EE0   1C 07 07 02   CallFf              r7, r7, 2      r7 = new-boxed-value(1, 1)
0055   0x017EE8   43 31 05 00   Move                r49, r5        r49 = r5 [ddict-create()]
0056   0x017EF0   43 32 06 00   Move                r50, r6        r50 = r6 [0]
0057   0x017EF8   43 33 07 00   Move                r51, r7        r51 = r7 [new-boxed-value()]
0058   0x017F00   1C 04 04 03   CallFf              r4, r4, 3      r4 = ddict-set(ddict-create(), 0, new-boxed-value())
0059   0x017F08   43 04 01 00   Move                r4, r1         r4 = r1 [0]
005A   0x017F10   0C 05 01 00   LoadU16Imm          r5, 1          r5 = 1
005B   0x017F18   01 04 04 05   IAdd                r4, r4, r5     1 = 0 + 1
005C   0x017F20   43 01 04 00   Move                r1, r4         r1 = r4 [1]
005D   0x017F28   43 04 01 00   Move                r4, r1         r4 = r1 [1]
005E   0x017F30   43 03 04 00   Move                r3, r4         r3 = r4 [1]
005F   0x017F38   2D 14 00 00   Branch              0014           => L_8
L_0:
0060   0x017F40   15 03 0A 00   LookupPointer       r3, 10         r3 = ST[10] -> <end-foreach>
0061   0x017F48   1C 03 03 00   CallFf              r3, r3, 0      r3 = end-foreach()
0062   0x017F50   43 01 03 00   Move                r1, r3         r1 = r3 [end-foreach()]
0063   0x017F58   15 01 0B 00   LookupPointer       r1, 11         r1 = ST[11] -> <#14C6FC79122F4A87>
0064   0x017F60   43 02 00 00   Move                r2, r0         r2 = r0 [ddict-create()]
0065   0x017F68   43 31 02 00   Move                r49, r2        r49 = r2 [ddict-create()]
0066   0x017F70   1B 01 01 01   Call                r1, r1, 1      r1 = #14C6FC79122F4A87(ddict-create())
0067   0x017F78   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
L_25:
0068   0x017F80   43 02 01 00   Move                r2, r1         r2 = r1 [0]
0069   0x017F88   15 03 0C 00   LookupPointer       r3, 12         r3 = ST[12] -> <ddict-key-count>
006A   0x017F90   43 04 00 00   Move                r4, r0         r4 = r0 [ddict-create()]
006B   0x017F98   43 31 04 00   Move                r49, r4        r49 = r4 [ddict-create()]
006C   0x017FA0   1C 03 03 01   CallFf              r3, r3, 1      r3 = ddict-key-count(ddict-create())
006D   0x017FA8   20 02 02 03   ILessThan           r2, r2, r3     r2 = r2 [1] < r3 [453060971]
006E   0x017FB0   2F F6 02 00   BranchIfNot         r2, 00F6       IF NOT r2 [0x1] => L_9
006F   0x017FB8   15 02 0D 00   LookupPointer       r2, 13         r2 = ST[13] -> <ddict-key-at>
0070   0x017FC0   43 03 00 00   Move                r3, r0         r3 = r0 [ddict-create]
0071   0x017FC8   43 04 01 00   Move                r4, r1         r4 = r1 [0]
0072   0x017FD0   43 31 03 00   Move                r49, r3        r49 = r3 [ddict-create]
0073   0x017FD8   43 32 04 00   Move                r50, r4        r50 = r4 [0]
0074   0x017FE0   1C 02 02 02   CallFf              r2, r2, 2      r2 = ddict-key-at(ddict-create, 0)
0075   0x017FE8   15 03 0E 00   LookupPointer       r3, 14         r3 = ST[14] -> <ddict-value-at>
0076   0x017FF0   43 04 00 00   Move                r4, r0         r4 = r0 [ddict-create]
0077   0x017FF8   43 05 01 00   Move                r5, r1         r5 = r1 [0]
0078   0x018000   43 31 04 00   Move                r49, r4        r49 = r4 [ddict-create]
0079   0x018008   43 32 05 00   Move                r50, r5        r50 = r5 [0]
007A   0x018010   1C 03 03 02   CallFf              r3, r3, 2      r3 = ddict-value-at(ddict-create, 0)
007B   0x018018   43 04 03 00   Move                r4, r3         r4 = r3 [ddict-value-at()]
007C   0x018020   2F 83 04 00   BranchIfNot         r4, 0083       IF NOT r4 [ddict-value-at()] => L_10
007D   0x018028   43 04 03 00   Move                r4, r3         r4 = r3 [ddict-value-at()]
007E   0x018030   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
007F   0x018038   3B 04 04 0C   IAddImm             r4, r4, 12     r4 = r4 [1998752874] / 12 -> <1998752874>
0080   0x018040   4E 04 04 00   LoadU16             ???            UNKNOWN INSTRUCTION
0081   0x018048   0C 05 01 00   LoadU16Imm          r5, 1          r5 = 1
0082   0x018050   1D 04 04 05   IEqual              r4, r4, r5     r4 = r4 [1998752768] == r5 [1]
L_10:
0083   0x018058   2F 88 04 00   BranchIfNot         r4, 0088       IF NOT r4 [0x77228C00] => L_11
0084   0x018060   43 04 03 00   Move                r4, r3         r4 = r3 [ddict-value-at()]
0085   0x018068   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0086   0x018070   4C 04 04 00   LoadU8              ???            UNKNOWN INSTRUCTION
0087   0x018078   2D D7 00 00   Branch              00D7           => L_12
L_11:
0088   0x018080   43 04 03 00   Move                r4, r3         r4 = r3 [ddict-value-at()]
0089   0x018088   2F 90 04 00   BranchIfNot         r4, 0090       IF NOT r4 [ddict-value-at()] => L_13
008A   0x018090   43 04 03 00   Move                r4, r3         r4 = r3 [ddict-value-at()]
008B   0x018098   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
008C   0x0180A0   3B 04 04 0C   IAddImm             r4, r4, 12     r4 = r4 [1998752874] / 12 -> <1998752874>
008D   0x0180A8   4E 04 04 00   LoadU16             ???            UNKNOWN INSTRUCTION
008E   0x0180B0   0C 05 02 00   LoadU16Imm          r5, 2          r5 = 2
008F   0x0180B8   1D 04 04 05   IEqual              r4, r4, r5     r4 = r4 [1998752768] == r5 [2]
L_13:
0090   0x0180C0   2F 97 04 00   BranchIfNot         r4, 0097       IF NOT r4 [0x77228C00] => L_14
0091   0x0180C8   0C 04 00 00   LoadU16Imm          r4, 0          r4 = 0
0092   0x0180D0   43 05 03 00   Move                r5, r3         r5 = r3 [ddict-value-at()]
0093   0x0180D8   5D 05 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0094   0x0180E0   4F 05 05 00   LoadI32             ???            UNKNOWN INSTRUCTION
0095   0x0180E8   5A 04 04 05   INotEqual           ???            UNKNOWN INSTRUCTION
0096   0x0180F0   2D D7 00 00   Branch              00D7           => L_12
L_14:
0097   0x0180F8   43 04 03 00   Move                r4, r3         r4 = r3 [ddict-value-at()]
0098   0x018100   2F 9F 04 00   BranchIfNot         r4, 009F       IF NOT r4 [ddict-value-at()] => L_15
0099   0x018108   43 04 03 00   Move                r4, r3         r4 = r3 [ddict-value-at()]
009A   0x018110   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
009B   0x018118   3B 04 04 0C   IAddImm             r4, r4, 12     r4 = r4 [1998752874] / 12 -> <1998752874>
009C   0x018120   4E 04 04 00   LoadU16             ???            UNKNOWN INSTRUCTION
009D   0x018128   0C 05 03 00   LoadU16Imm          r5, 3          r5 = 3
009E   0x018130   1D 04 04 05   IEqual              r4, r4, r5     r4 = r4 [1998752768] == r5 [3]
L_15:
009F   0x018138   2F A6 04 00   BranchIfNot         r4, 00A6       IF NOT r4 [0x77228C00] => L_16
00A0   0x018140   0C 04 00 00   LoadU16Imm          r4, 0          r4 = 0
00A1   0x018148   43 05 03 00   Move                r5, r3         r5 = r3 [ddict-value-at()]
00A2   0x018150   5D 05 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00A3   0x018158   0D 05 05 00   LoadU32             r5, [r5]       r5 = [0x0 + 0x0]
00A4   0x018160   5A 04 04 05   INotEqual           ???            UNKNOWN INSTRUCTION
00A5   0x018168   2D D7 00 00   Branch              00D7           => L_12
L_16:
00A6   0x018170   43 04 03 00   Move                r4, r3         r4 = r3 [ddict-value-at()]
00A7   0x018178   2F AE 04 00   BranchIfNot         r4, 00AE       IF NOT r4 [ddict-value-at()] => L_17
00A8   0x018180   43 04 03 00   Move                r4, r3         r4 = r3 [ddict-value-at()]
00A9   0x018188   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00AA   0x018190   3B 04 04 0C   IAddImm             r4, r4, 12     r4 = r4 [1998752874] / 12 -> <1998752874>
00AB   0x018198   4E 04 04 00   LoadU16             ???            UNKNOWN INSTRUCTION
00AC   0x0181A0   0C 05 04 00   LoadU16Imm          r5, 4          r5 = 4
00AD   0x0181A8   1D 04 04 05   IEqual              r4, r4, r5     r4 = r4 [1998752768] == r5 [4]
L_17:
00AE   0x0181B0   2F B5 04 00   BranchIfNot         r4, 00B5       IF NOT r4 [0x77228C00] => L_18
00AF   0x0181B8   0C 04 00 00   LoadU16Imm          r4, 0          r4 = 0
00B0   0x0181C0   43 05 03 00   Move                r5, r3         r5 = r3 [ddict-value-at()]
00B1   0x0181C8   5D 05 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00B2   0x0181D0   50 05 05 00   LoadI64             r5, [r5]       r5 = [0x0 + 0x0]
00B3   0x0181D8   5A 04 04 05   INotEqual           ???            UNKNOWN INSTRUCTION
00B4   0x0181E0   2D D7 00 00   Branch              00D7           => L_12
L_18:
00B5   0x0181E8   43 04 03 00   Move                r4, r3         r4 = r3 [ddict-value-at()]
00B6   0x0181F0   2F BD 04 00   BranchIfNot         r4, 00BD       IF NOT r4 [ddict-value-at()] => L_19
00B7   0x0181F8   43 04 03 00   Move                r4, r3         r4 = r3 [ddict-value-at()]
00B8   0x018200   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00B9   0x018208   3B 04 04 0C   IAddImm             r4, r4, 12     r4 = r4 [1998752874] / 12 -> <1998752874>
00BA   0x018210   4E 04 04 00   LoadU16             ???            UNKNOWN INSTRUCTION
00BB   0x018218   0C 05 05 00   LoadU16Imm          r5, 5          r5 = 5
00BC   0x018220   1D 04 04 05   IEqual              r4, r4, r5     r4 = r4 [1998752768] == r5 [5]
L_19:
00BD   0x018228   2F C4 04 00   BranchIfNot         r4, 00C4       IF NOT r4 [0x77228C00] => L_20
00BE   0x018230   0C 04 00 00   LoadU16Imm          r4, 0          r4 = 0
00BF   0x018238   43 05 03 00   Move                r5, r3         r5 = r3 [ddict-value-at()]
00C0   0x018240   5D 05 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00C1   0x018248   51 05 05 00   LoadU64             r5, [r5]       r5 = [0x0 + 0x0]
00C2   0x018250   5A 04 04 05   INotEqual           ???            UNKNOWN INSTRUCTION
00C3   0x018258   2D D7 00 00   Branch              00D7           => L_12
L_20:
00C4   0x018260   43 04 03 00   Move                r4, r3         r4 = r3 [ddict-value-at()]
00C5   0x018268   2F CC 04 00   BranchIfNot         r4, 00CC       IF NOT r4 [ddict-value-at()] => L_21
00C6   0x018270   43 04 03 00   Move                r4, r3         r4 = r3 [ddict-value-at()]
00C7   0x018278   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00C8   0x018280   3B 04 04 0C   IAddImm             r4, r4, 12     r4 = r4 [1998752874] / 12 -> <1998752874>
00C9   0x018288   4E 04 04 00   LoadU16             ???            UNKNOWN INSTRUCTION
00CA   0x018290   0C 05 06 00   LoadU16Imm          r5, 6          r5 = 6
00CB   0x018298   1D 04 04 05   IEqual              r4, r4, r5     r4 = r4 [1998752768] == r5 [6]
L_21:
00CC   0x0182A0   2F D4 04 00   BranchIfNot         r4, 00D4       IF NOT r4 [0x77228C00] => L_22
00CD   0x0182A8   0C 04 00 00   LoadU16Imm          r4, 0          r4 = 0
00CE   0x0182B0   1A 04 04 00   CastFloat           r4, r4         r4 = float(r4) -> <0> => <0.000000>
00CF   0x0182B8   43 05 03 00   Move                r5, r3         r5 = r3 [ddict-value-at()]
00D0   0x0182C0   5D 05 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00D1   0x0182C8   0E 05 05 00   LoadFloat           r5, [r5]       r5 = [0x0 + 0x0]
00D2   0x0182D0   5B 04 04 05   FNotEqual           ???            UNKNOWN INSTRUCTION
00D3   0x0182D8   2D D7 00 00   Branch              00D7           => L_12
L_22:
00D4   0x0182E0   0C 04 00 00   LoadU16Imm          r4, 0          r4 = 0
00D5   0x0182E8   30 04 04 00   OpLogNot            r4, r4         r4 = !r4 -> <TRUE>
00D6   0x0182F0   30 04 04 00   OpLogNot            r4, r4         r4 = !r4 -> <FALSE>
L_12:
00D7   0x0182F8   43 03 04 00   Move                r3, r4         r3 = r4 [0x0]
00D8   0x018300   43 04 03 00   Move                r4, r3         r4 = r3 [0x0]
00D9   0x018308   30 04 04 00   OpLogNot            r4, r4         r4 = !r4 -> <TRUE>
00DA   0x018310   2F EE 04 00   BranchIfNot         r4, 00EE       IF NOT r4 [0x1] => L_23
00DB   0x018318   15 04 0F 00   LookupPointer       r4, 15         r4 = ST[15] -> <darray-append>
00DC   0x018320   15 05 04 00   LookupPointer       r5, 4          r5 = ST[4] -> <get-symbol>
00DD   0x018328   4A 06 10 00   LoadStaticU64Imm    r6, 16         r6 = ST[16] -> <#2005DE6CD0556E13>
00DE   0x018330   4A 07 01 00   LoadStaticU64Imm    r7, 1          r7 = ST[1] -> <self>
00DF   0x018338   43 31 06 00   Move                r49, r6        r49 = r6 [#2005DE6CD0556E13]
00E0   0x018340   43 32 07 00   Move                r50, r7        r50 = r7 [self]
00E1   0x018348   1C 05 05 02   CallFf              r5, r5, 2      r5 = get-symbol(#2005DE6CD0556E13, self)
00E2   0x018350   15 06 09 00   LookupPointer       r6, 9          r6 = ST[9] -> <new-boxed-value>
00E3   0x018358   0C 07 07 00   LoadU16Imm          r7, 7          r7 = 7
00E4   0x018360   43 08 02 00   Move                r8, r2         r8 = r2 [ddict-key-at()]
00E5   0x018368   43 31 07 00   Move                r49, r7        r49 = r7 [7]
00E6   0x018370   43 32 08 00   Move                r50, r8        r50 = r8 [ddict-key-at()]
00E7   0x018378   1C 06 06 02   CallFf              r6, r6, 2      r6 = new-boxed-value(7, ddict-key-at())
00E8   0x018380   0C 07 01 00   LoadU16Imm          r7, 1          r7 = 1
00E9   0x018388   43 31 05 00   Move                r49, r5        r49 = r5 [get-symbol()]
00EA   0x018390   43 32 06 00   Move                r50, r6        r50 = r6 [new-boxed-value()]
00EB   0x018398   43 33 07 00   Move                r51, r7        r51 = r7 [1]
00EC   0x0183A0   1C 04 04 03   CallFf              r4, r4, 3      r4 = darray-append(get-symbol(), new-boxed-value(), 1)
00ED   0x0183A8   2D EF 00 00   Branch              00EF           => L_24
L_23:
00EE   0x0183B0   0C 04 00 00   LoadU16Imm          r4, 0          r4 = 0
L_24:
00EF   0x0183B8   43 02 04 00   Move                r2, r4         r2 = r4 [0]
00F0   0x0183C0   43 02 01 00   Move                r2, r1         r2 = r1 [0]
00F1   0x0183C8   0C 03 01 00   LoadU16Imm          r3, 1          r3 = 1
00F2   0x0183D0   01 02 02 03   IAdd                r2, r2, r3     1 = 0 + 1
00F3   0x0183D8   43 01 02 00   Move                r1, r2         r1 = r2 [1]
00F4   0x0183E0   43 02 01 00   Move                r2, r1         r2 = r1 [1]
00F5   0x0183E8   2D 68 00 00   Branch              0068           => L_25
L_9:
00F6   0x0183F0   43 01 02 00   Move                r1, r2         r1 = r2 [1]
00F7   0x0183F8   15 01 11 00   LookupPointer       r1, 17         r1 = ST[17] -> <ddict-destroy>
00F8   0x018400   43 02 00 00   Move                r2, r0         r2 = r0 [ddict-create]
00F9   0x018408   43 31 02 00   Move                r49, r2        r49 = r2 [ddict-create]
00FA   0x018410   1C 01 01 01   CallFf              r1, r1, 1      r1 = ddict-destroy(ddict-create)
00FB   0x018418   15 01 03 00   LookupPointer       r1, 3          r1 = ST[3] -> <darray-count>
00FC   0x018420   15 02 04 00   LookupPointer       r2, 4          r2 = ST[4] -> <get-symbol>
00FD   0x018428   4A 03 05 00   LoadStaticU64Imm    r3, 5          r3 = ST[5] -> <#FE0CDBDD4CC9DFAD>
00FE   0x018430   4A 04 01 00   LoadStaticU64Imm    r4, 1          r4 = ST[1] -> <self>
00FF   0x018438   43 31 03 00   Move                r49, r3        r49 = r3 [#FE0CDBDD4CC9DFAD]
0100   0x018440   43 32 04 00   Move                r50, r4        r50 = r4 [self]
0101   0x018448   1C 02 02 02   CallFf              r2, r2, 2      r2 = get-symbol(#FE0CDBDD4CC9DFAD, self)
0102   0x018450   43 31 02 00   Move                r49, r2        r49 = r2 [get-symbol()]
0103   0x018458   1C 01 01 01   CallFf              r1, r1, 1      r1 = darray-count(get-symbol())
0104   0x018460   15 02 03 00   LookupPointer       r2, 3          r2 = ST[3] -> <darray-count>
0105   0x018468   15 03 04 00   LookupPointer       r3, 4          r3 = ST[4] -> <get-symbol>
0106   0x018470   4A 04 10 00   LoadStaticU64Imm    r4, 16         r4 = ST[16] -> <#2005DE6CD0556E13>
0107   0x018478   4A 05 01 00   LoadStaticU64Imm    r5, 1          r5 = ST[1] -> <self>
0108   0x018480   43 31 04 00   Move                r49, r4        r49 = r4 [#2005DE6CD0556E13]
0109   0x018488   43 32 05 00   Move                r50, r5        r50 = r5 [self]
010A   0x018490   1C 03 03 02   CallFf              r3, r3, 2      r3 = get-symbol(#2005DE6CD0556E13, self)
010B   0x018498   43 31 03 00   Move                r49, r3        r49 = r3 [get-symbol()]
010C   0x0184A0   1C 02 02 01   CallFf              r2, r2, 1      r2 = darray-count(get-symbol())
010D   0x0184A8   1E 01 01 02   IGreaterThan        r1, r1, r2     r1 = r1 [1753163008] > r2 [1753163078]
010E   0x0184B0   2F A6 01 01   BranchIfNot         r1, 01A6       IF NOT r1 [0x687F2500] => L_26
010F   0x0184B8   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
0110   0x0184C0   15 02 03 00   LookupPointer       r2, 3          r2 = ST[3] -> <darray-count>
0111   0x0184C8   15 03 04 00   LookupPointer       r3, 4          r3 = ST[4] -> <get-symbol>
0112   0x0184D0   4A 04 10 00   LoadStaticU64Imm    r4, 16         r4 = ST[16] -> <#2005DE6CD0556E13>
0113   0x0184D8   4A 05 01 00   LoadStaticU64Imm    r5, 1          r5 = ST[1] -> <self>
0114   0x0184E0   43 31 04 00   Move                r49, r4        r49 = r4 [#2005DE6CD0556E13]
0115   0x0184E8   43 32 05 00   Move                r50, r5        r50 = r5 [self]
0116   0x0184F0   1C 03 03 02   CallFf              r3, r3, 2      r3 = get-symbol(#2005DE6CD0556E13, self)
0117   0x0184F8   43 31 03 00   Move                r49, r3        r49 = r3 [get-symbol()]
0118   0x018500   1C 02 02 01   CallFf              r2, r2, 1      r2 = darray-count(get-symbol())
0119   0x018508   15 03 06 00   LookupPointer       r3, 6          r3 = ST[6] -> <begin-foreach>
011A   0x018510   1C 03 03 00   CallFf              r3, r3, 0      r3 = begin-foreach()
L_35:
011B   0x018518   43 03 01 00   Move                r3, r1         r3 = r1 [0]
011C   0x018520   43 04 02 00   Move                r4, r2         r4 = r2 [darray-count()]
011D   0x018528   20 03 03 04   ILessThan           r3, r3, r4     r3 = r3 [1] < r4 [1753163078]
011E   0x018530   2F 6C 03 01   BranchIfNot         r3, 016C       IF NOT r3 [0x1] => L_27
011F   0x018538   15 03 07 00   LookupPointer       r3, 7          r3 = ST[7] -> <darray-at>
0120   0x018540   15 04 04 00   LookupPointer       r4, 4          r4 = ST[4] -> <get-symbol>
0121   0x018548   4A 05 10 00   LoadStaticU64Imm    r5, 16         r5 = ST[16] -> <#2005DE6CD0556E13>
0122   0x018550   4A 06 01 00   LoadStaticU64Imm    r6, 1          r6 = ST[1] -> <self>
0123   0x018558   43 31 05 00   Move                r49, r5        r49 = r5 [#2005DE6CD0556E13]
0124   0x018560   43 32 06 00   Move                r50, r6        r50 = r6 [self]
0125   0x018568   1C 04 04 02   CallFf              r4, r4, 2      r4 = get-symbol(#2005DE6CD0556E13, self)
0126   0x018570   43 05 01 00   Move                r5, r1         r5 = r1 [0]
0127   0x018578   43 31 04 00   Move                r49, r4        r49 = r4 [get-symbol()]
0128   0x018580   43 32 05 00   Move                r50, r5        r50 = r5 [0]
0129   0x018588   1C 03 03 02   CallFf              r3, r3, 2      r3 = darray-at(get-symbol(), 0)
012A   0x018590   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
012B   0x018598   2F 32 04 01   BranchIfNot         r4, 0132       IF NOT r4 [darray-at()] => L_28
012C   0x0185A0   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
012D   0x0185A8   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
012E   0x0185B0   3B 04 04 0C   IAddImm             r4, r4, 12     r4 = r4 [-739117676] / 12 -> <-739117676>
012F   0x0185B8   4E 04 04 00   LoadU16             ???            UNKNOWN INSTRUCTION
0130   0x0185C0   0C 05 07 00   LoadU16Imm          r5, 7          r5 = 7
0131   0x0185C8   1D 04 04 05   IEqual              r4, r4, r5     r4 = r4 [-739117824] == r5 [7]
L_28:
0132   0x0185D0   2F 37 04 01   BranchIfNot         r4, 0137       IF NOT r4 [0xD3F1F500] => L_29
0133   0x0185D8   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
0134   0x0185E0   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0135   0x0185E8   51 04 04 00   LoadU64             r4, [r4]       r4 = [0x0 + 0x0]
0136   0x0185F0   2D 52 00 01   Branch              0152           => L_30
L_29:
0137   0x0185F8   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
0138   0x018600   2F 3F 04 01   BranchIfNot         r4, 013F       IF NOT r4 [darray-at()] => L_31
0139   0x018608   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
013A   0x018610   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
013B   0x018618   3B 04 04 0C   IAddImm             r4, r4, 12     r4 = r4 [-739117676] / 12 -> <-739117676>
013C   0x018620   4E 04 04 00   LoadU16             ???            UNKNOWN INSTRUCTION
013D   0x018628   0C 05 05 00   LoadU16Imm          r5, 5          r5 = 5
013E   0x018630   1D 04 04 05   IEqual              r4, r4, r5     r4 = r4 [-739117824] == r5 [5]
L_31:
013F   0x018638   2F 44 04 01   BranchIfNot         r4, 0144       IF NOT r4 [0xD3F1F500] => L_32
0140   0x018640   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
0141   0x018648   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0142   0x018650   51 04 04 00   LoadU64             r4, [r4]       r4 = [0x0 + 0x0]
0143   0x018658   2D 52 00 01   Branch              0152           => L_30
L_32:
0144   0x018660   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
0145   0x018668   2F 4C 04 01   BranchIfNot         r4, 014C       IF NOT r4 [darray-at()] => L_33
0146   0x018670   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
0147   0x018678   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0148   0x018680   3B 04 04 0C   IAddImm             r4, r4, 12     r4 = r4 [-739117676] / 12 -> <-739117676>
0149   0x018688   4E 04 04 00   LoadU16             ???            UNKNOWN INSTRUCTION
014A   0x018690   0C 05 04 00   LoadU16Imm          r5, 4          r5 = 4
014B   0x018698   1D 04 04 05   IEqual              r4, r4, r5     r4 = r4 [-739117824] == r5 [4]
L_33:
014C   0x0186A0   2F 51 04 01   BranchIfNot         r4, 0151       IF NOT r4 [0xD3F1F500] => L_34
014D   0x0186A8   43 04 03 00   Move                r4, r3         r4 = r3 [darray-at()]
014E   0x0186B0   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
014F   0x0186B8   51 04 04 00   LoadU64             r4, [r4]       r4 = [0x0 + 0x0]
0150   0x0186C0   2D 52 00 01   Branch              0152           => L_30
L_34:
0151   0x0186C8   0C 04 00 00   LoadU16Imm          r4, 0          r4 = 0
L_30:
0152   0x0186D0   43 03 04 00   Move                r3, r4         r3 = r4 [0]
0153   0x0186D8   15 04 12 00   LookupPointer       r4, 18         r4 = ST[18] -> <darray-find-remove>
0154   0x0186E0   15 05 04 00   LookupPointer       r5, 4          r5 = ST[4] -> <get-symbol>
0155   0x0186E8   4A 06 05 00   LoadStaticU64Imm    r6, 5          r6 = ST[5] -> <#FE0CDBDD4CC9DFAD>
0156   0x0186F0   4A 07 01 00   LoadStaticU64Imm    r7, 1          r7 = ST[1] -> <self>
0157   0x0186F8   43 31 06 00   Move                r49, r6        r49 = r6 [#FE0CDBDD4CC9DFAD]
0158   0x018700   43 32 07 00   Move                r50, r7        r50 = r7 [self]
0159   0x018708   1C 05 05 02   CallFf              r5, r5, 2      r5 = get-symbol(#FE0CDBDD4CC9DFAD, self)
015A   0x018710   15 06 09 00   LookupPointer       r6, 9          r6 = ST[9] -> <new-boxed-value>
015B   0x018718   0C 07 07 00   LoadU16Imm          r7, 7          r7 = 7
015C   0x018720   43 08 03 00   Move                r8, r3         r8 = r3 [0]
015D   0x018728   43 31 07 00   Move                r49, r7        r49 = r7 [7]
015E   0x018730   43 32 08 00   Move                r50, r8        r50 = r8 [0]
015F   0x018738   1C 06 06 02   CallFf              r6, r6, 2      r6 = new-boxed-value(7, 0)
0160   0x018740   0C 07 00 00   LoadU16Imm          r7, 0          r7 = 0
0161   0x018748   43 31 05 00   Move                r49, r5        r49 = r5 [get-symbol()]
0162   0x018750   43 32 06 00   Move                r50, r6        r50 = r6 [new-boxed-value()]
0163   0x018758   43 33 07 00   Move                r51, r7        r51 = r7 [0]
0164   0x018760   1B 04 04 03   Call                r4, r4, 3      r4 = darray-find-remove(get-symbol(), new-boxed-value(), 0)
0165   0x018768   43 04 01 00   Move                r4, r1         r4 = r1 [0]
0166   0x018770   0C 05 01 00   LoadU16Imm          r5, 1          r5 = 1
0167   0x018778   01 04 04 05   IAdd                r4, r4, r5     1 = 0 + 1
0168   0x018780   43 01 04 00   Move                r1, r4         r1 = r4 [1]
0169   0x018788   43 04 01 00   Move                r4, r1         r4 = r1 [1]
016A   0x018790   43 03 04 00   Move                r3, r4         r3 = r4 [1]
016B   0x018798   2D 1B 00 01   Branch              011B           => L_35
L_27:
016C   0x0187A0   15 03 0A 00   LookupPointer       r3, 10         r3 = ST[10] -> <end-foreach>
016D   0x0187A8   1C 03 03 00   CallFf              r3, r3, 0      r3 = end-foreach()
016E   0x0187B0   43 01 03 00   Move                r1, r3         r1 = r3 [end-foreach()]
016F   0x0187B8   15 01 13 00   LookupPointer       r1, 19         r1 = ST[19] -> <is-final-build?>
0170   0x0187C0   1C 01 01 00   CallFf              r1, r1, 0      r1 = is-final-build?()
0171   0x0187C8   30 01 01 00   OpLogNot            r1, r1         r1 = !r1 -> <TRUE>
0172   0x0187D0   2F 89 01 01   BranchIfNot         r1, 0189       IF NOT r1 [0x6620ACB7] => L_36
0173   0x0187D8   15 01 14 00   LookupPointer       r1, 20         r1 = ST[20] -> <display>
0174   0x0187E0   15 02 15 00   LookupPointer       r2, 21         r2 = ST[21] -> <#5445173390656D6D>
0175   0x0187E8   41 03 16 00   LoadStaticPointerImmr3, 22         r3 = ST[22] -> <0xBF026C81>
0176   0x0187F0   41 04 17 00   LoadStaticPointerImmr4, 23         r4 = ST[23] -> <0xBF025EFC>
0177   0x0187F8   15 05 03 00   LookupPointer       r5, 3          r5 = ST[3] -> <darray-count>
0178   0x018800   15 06 04 00   LookupPointer       r6, 4          r6 = ST[4] -> <get-symbol>
0179   0x018808   4A 07 10 00   LoadStaticU64Imm    r7, 16         r7 = ST[16] -> <#2005DE6CD0556E13>
017A   0x018810   4A 08 01 00   LoadStaticU64Imm    r8, 1          r8 = ST[1] -> <self>
017B   0x018818   43 31 07 00   Move                r49, r7        r49 = r7 [#2005DE6CD0556E13]
017C   0x018820   43 32 08 00   Move                r50, r8        r50 = r8 [self]
017D   0x018828   1C 06 06 02   CallFf              r6, r6, 2      r6 = get-symbol(#2005DE6CD0556E13, self)
017E   0x018830   43 31 06 00   Move                r49, r6        r49 = r6 [get-symbol()]
017F   0x018838   1C 05 05 01   CallFf              r5, r5, 1      r5 = darray-count(get-symbol())
0180   0x018840   43 31 03 00   Move                r49, r3        r49 = r3 [0xBF026C81]
0181   0x018848   43 32 04 00   Move                r50, r4        r50 = r4 [0xBF025EFC]
0182   0x018850   43 33 05 00   Move                r51, r5        r51 = r5 [darray-count()]
0183   0x018858   1C 02 02 03   CallFf              r2, r2, 3      r2 = #5445173390656D6D(0xBF026C81, 0xBF025EFC, darray-count())
0184   0x018860   0C 03 13 00   LoadU16Imm          r3, 19         r3 = 19
0185   0x018868   43 31 02 00   Move                r49, r2        r49 = r2 [#5445173390656D6D()]
0186   0x018870   43 32 03 00   Move                r50, r3        r50 = r3 [19]
0187   0x018878   1C 01 01 02   CallFf              r1, r1, 2      r1 = display(#5445173390656D6D(), 19)
0188   0x018880   2D 8A 00 01   Branch              018A           => L_37
L_36:
0189   0x018888   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
L_37:
018A   0x018890   15 01 13 00   LookupPointer       r1, 19         r1 = ST[19] -> <is-final-build?>
018B   0x018898   1C 01 01 00   CallFf              r1, r1, 0      r1 = is-final-build?()
018C   0x0188A0   30 01 01 00   OpLogNot            r1, r1         r1 = !r1 -> <TRUE>
018D   0x0188A8   2F A4 01 01   BranchIfNot         r1, 01A4       IF NOT r1 [0x6620ACB7] => L_38
018E   0x0188B0   15 01 14 00   LookupPointer       r1, 20         r1 = ST[20] -> <display>
018F   0x0188B8   15 02 15 00   LookupPointer       r2, 21         r2 = ST[21] -> <#5445173390656D6D>
0190   0x0188C0   41 03 18 00   LoadStaticPointerImmr3, 24         r3 = ST[24] -> <0xBF026CBC>
0191   0x0188C8   41 04 17 00   LoadStaticPointerImmr4, 23         r4 = ST[23] -> <0xBF025EFC>
0192   0x0188D0   15 05 03 00   LookupPointer       r5, 3          r5 = ST[3] -> <darray-count>
0193   0x0188D8   15 06 04 00   LookupPointer       r6, 4          r6 = ST[4] -> <get-symbol>
0194   0x0188E0   4A 07 05 00   LoadStaticU64Imm    r7, 5          r7 = ST[5] -> <#FE0CDBDD4CC9DFAD>
0195   0x0188E8   4A 08 01 00   LoadStaticU64Imm    r8, 1          r8 = ST[1] -> <self>
0196   0x0188F0   43 31 07 00   Move                r49, r7        r49 = r7 [#FE0CDBDD4CC9DFAD]
0197   0x0188F8   43 32 08 00   Move                r50, r8        r50 = r8 [self]
0198   0x018900   1C 06 06 02   CallFf              r6, r6, 2      r6 = get-symbol(#FE0CDBDD4CC9DFAD, self)
0199   0x018908   43 31 06 00   Move                r49, r6        r49 = r6 [get-symbol()]
019A   0x018910   1C 05 05 01   CallFf              r5, r5, 1      r5 = darray-count(get-symbol())
019B   0x018918   43 31 03 00   Move                r49, r3        r49 = r3 [0xBF026CBC]
019C   0x018920   43 32 04 00   Move                r50, r4        r50 = r4 [0xBF025EFC]
019D   0x018928   43 33 05 00   Move                r51, r5        r51 = r5 [darray-count()]
019E   0x018930   1C 02 02 03   CallFf              r2, r2, 3      r2 = #5445173390656D6D(0xBF026CBC, 0xBF025EFC, darray-count())
019F   0x018938   0C 03 13 00   LoadU16Imm          r3, 19         r3 = 19
01A0   0x018940   43 31 02 00   Move                r49, r2        r49 = r2 [#5445173390656D6D()]
01A1   0x018948   43 32 03 00   Move                r50, r3        r50 = r3 [19]
01A2   0x018950   1C 01 01 02   CallFf              r1, r1, 2      r1 = display(#5445173390656D6D(), 19)
01A3   0x018958   2D A5 00 01   Branch              01A5           => L_39
L_38:
01A4   0x018960   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
L_39:
01A5   0x018968   2D 42 00 02   Branch              0242           => L_40
L_26:
01A6   0x018970   15 01 04 00   LookupPointer       r1, 4          r1 = ST[4] -> <get-symbol>
01A7   0x018978   4A 02 19 00   LoadStaticU64Imm    r2, 25         r2 = ST[25] -> <#95719EBD5D274866>
01A8   0x018980   4A 03 01 00   LoadStaticU64Imm    r3, 1          r3 = ST[1] -> <self>
01A9   0x018988   43 31 02 00   Move                r49, r2        r49 = r2 [#95719EBD5D274866]
01AA   0x018990   43 32 03 00   Move                r50, r3        r50 = r3 [self]
01AB   0x018998   1C 01 01 02   CallFf              r1, r1, 2      r1 = get-symbol(#95719EBD5D274866, self)
01AC   0x0189A0   0C 02 00 00   LoadU16Imm          r2, 0          r2 = 0
01AD   0x0189A8   1D 01 01 02   IEqual              r1, r1, r2     r1 = r1 [1774822656] == r2 [0]
01AE   0x0189B0   30 01 01 00   OpLogNot            r1, r1         r1 = !r1 -> <TRUE>
01AF   0x0189B8   2F 17 01 02   BranchIfNot         r1, 0217       IF NOT r1 [0x69C9A501] => L_41
01B0   0x0189C0   15 01 13 00   LookupPointer       r1, 19         r1 = ST[19] -> <is-final-build?>
01B1   0x0189C8   1C 01 01 00   CallFf              r1, r1, 0      r1 = is-final-build?()
01B2   0x0189D0   30 01 01 00   OpLogNot            r1, r1         r1 = !r1 -> <TRUE>
01B3   0x0189D8   2F CA 01 01   BranchIfNot         r1, 01CA       IF NOT r1 [0x6620ACB7] => L_42
01B4   0x0189E0   15 01 14 00   LookupPointer       r1, 20         r1 = ST[20] -> <display>
01B5   0x0189E8   15 02 15 00   LookupPointer       r2, 21         r2 = ST[21] -> <#5445173390656D6D>
01B6   0x0189F0   41 03 1A 00   LoadStaticPointerImmr3, 26         r3 = ST[26] -> <0xBF026E36>
01B7   0x0189F8   41 04 17 00   LoadStaticPointerImmr4, 23         r4 = ST[23] -> <0xBF025EFC>
01B8   0x018A00   15 05 03 00   LookupPointer       r5, 3          r5 = ST[3] -> <darray-count>
01B9   0x018A08   15 06 04 00   LookupPointer       r6, 4          r6 = ST[4] -> <get-symbol>
01BA   0x018A10   4A 07 10 00   LoadStaticU64Imm    r7, 16         r7 = ST[16] -> <#2005DE6CD0556E13>
01BB   0x018A18   4A 08 01 00   LoadStaticU64Imm    r8, 1          r8 = ST[1] -> <self>
01BC   0x018A20   43 31 07 00   Move                r49, r7        r49 = r7 [#2005DE6CD0556E13]
01BD   0x018A28   43 32 08 00   Move                r50, r8        r50 = r8 [self]
01BE   0x018A30   1C 06 06 02   CallFf              r6, r6, 2      r6 = get-symbol(#2005DE6CD0556E13, self)
01BF   0x018A38   43 31 06 00   Move                r49, r6        r49 = r6 [get-symbol()]
01C0   0x018A40   1C 05 05 01   CallFf              r5, r5, 1      r5 = darray-count(get-symbol())
01C1   0x018A48   43 31 03 00   Move                r49, r3        r49 = r3 [0xBF026E36]
01C2   0x018A50   43 32 04 00   Move                r50, r4        r50 = r4 [0xBF025EFC]
01C3   0x018A58   43 33 05 00   Move                r51, r5        r51 = r5 [darray-count()]
01C4   0x018A60   1C 02 02 03   CallFf              r2, r2, 3      r2 = #5445173390656D6D(0xBF026E36, 0xBF025EFC, darray-count())
01C5   0x018A68   0C 03 13 00   LoadU16Imm          r3, 19         r3 = 19
01C6   0x018A70   43 31 02 00   Move                r49, r2        r49 = r2 [#5445173390656D6D()]
01C7   0x018A78   43 32 03 00   Move                r50, r3        r50 = r3 [19]
01C8   0x018A80   1C 01 01 02   CallFf              r1, r1, 2      r1 = display(#5445173390656D6D(), 19)
01C9   0x018A88   2D CB 00 01   Branch              01CB           => L_43
L_42:
01CA   0x018A90   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
L_43:
01CB   0x018A98   15 01 13 00   LookupPointer       r1, 19         r1 = ST[19] -> <is-final-build?>
01CC   0x018AA0   1C 01 01 00   CallFf              r1, r1, 0      r1 = is-final-build?()
01CD   0x018AA8   30 01 01 00   OpLogNot            r1, r1         r1 = !r1 -> <TRUE>
01CE   0x018AB0   2F E5 01 01   BranchIfNot         r1, 01E5       IF NOT r1 [0x6620ACB7] => L_44
01CF   0x018AB8   15 01 14 00   LookupPointer       r1, 20         r1 = ST[20] -> <display>
01D0   0x018AC0   15 02 15 00   LookupPointer       r2, 21         r2 = ST[21] -> <#5445173390656D6D>
01D1   0x018AC8   41 03 1B 00   LoadStaticPointerImmr3, 27         r3 = ST[27] -> <0xBF026F07>
01D2   0x018AD0   41 04 17 00   LoadStaticPointerImmr4, 23         r4 = ST[23] -> <0xBF025EFC>
01D3   0x018AD8   15 05 1C 00   LookupPointer       r5, 28         r5 = ST[28] -> <string-debug>
01D4   0x018AE0   15 06 04 00   LookupPointer       r6, 4          r6 = ST[4] -> <get-symbol>
01D5   0x018AE8   4A 07 19 00   LoadStaticU64Imm    r7, 25         r7 = ST[25] -> <#95719EBD5D274866>
01D6   0x018AF0   4A 08 01 00   LoadStaticU64Imm    r8, 1          r8 = ST[1] -> <self>
01D7   0x018AF8   43 31 07 00   Move                r49, r7        r49 = r7 [#95719EBD5D274866]
01D8   0x018B00   43 32 08 00   Move                r50, r8        r50 = r8 [self]
01D9   0x018B08   1C 06 06 02   CallFf              r6, r6, 2      r6 = get-symbol(#95719EBD5D274866, self)
01DA   0x018B10   43 31 06 00   Move                r49, r6        r49 = r6 [get-symbol()]
01DB   0x018B18   1C 05 05 01   CallFf              r5, r5, 1      r5 = string-debug(get-symbol())
01DC   0x018B20   43 31 03 00   Move                r49, r3        r49 = r3 [0xBF026F07]
01DD   0x018B28   43 32 04 00   Move                r50, r4        r50 = r4 [0xBF025EFC]
01DE   0x018B30   43 33 05 00   Move                r51, r5        r51 = r5 [string-debug()]
01DF   0x018B38   1C 02 02 03   CallFf              r2, r2, 3      r2 = #5445173390656D6D(0xBF026F07, 0xBF025EFC, string-debug())
01E0   0x018B40   0C 03 13 00   LoadU16Imm          r3, 19         r3 = 19
01E1   0x018B48   43 31 02 00   Move                r49, r2        r49 = r2 [#5445173390656D6D()]
01E2   0x018B50   43 32 03 00   Move                r50, r3        r50 = r3 [19]
01E3   0x018B58   1C 01 01 02   CallFf              r1, r1, 2      r1 = display(#5445173390656D6D(), 19)
01E4   0x018B60   2D E6 00 01   Branch              01E6           => L_45
L_44:
01E5   0x018B68   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
L_45:
01E6   0x018B70   15 01 13 00   LookupPointer       r1, 19         r1 = ST[19] -> <is-final-build?>
01E7   0x018B78   1C 01 01 00   CallFf              r1, r1, 0      r1 = is-final-build?()
01E8   0x018B80   30 01 01 00   OpLogNot            r1, r1         r1 = !r1 -> <TRUE>
01E9   0x018B88   2F F6 01 01   BranchIfNot         r1, 01F6       IF NOT r1 [0x6620ACB7] => L_46
01EA   0x018B90   15 01 14 00   LookupPointer       r1, 20         r1 = ST[20] -> <display>
01EB   0x018B98   15 02 15 00   LookupPointer       r2, 21         r2 = ST[21] -> <#5445173390656D6D>
01EC   0x018BA0   41 03 1D 00   LoadStaticPointerImmr3, 29         r3 = ST[29] -> <0xBF026F4F>
01ED   0x018BA8   41 04 17 00   LoadStaticPointerImmr4, 23         r4 = ST[23] -> <0xBF025EFC>
01EE   0x018BB0   43 31 03 00   Move                r49, r3        r49 = r3 [0xBF026F4F]
01EF   0x018BB8   43 32 04 00   Move                r50, r4        r50 = r4 [0xBF025EFC]
01F0   0x018BC0   1C 02 02 02   CallFf              r2, r2, 2      r2 = #5445173390656D6D(0xBF026F4F, 0xBF025EFC)
01F1   0x018BC8   0C 03 13 00   LoadU16Imm          r3, 19         r3 = 19
01F2   0x018BD0   43 31 02 00   Move                r49, r2        r49 = r2 [#5445173390656D6D()]
01F3   0x018BD8   43 32 03 00   Move                r50, r3        r50 = r3 [19]
01F4   0x018BE0   1C 01 01 02   CallFf              r1, r1, 2      r1 = display(#5445173390656D6D(), 19)
01F5   0x018BE8   2D F7 00 01   Branch              01F7           => L_47
L_46:
01F6   0x018BF0   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
L_47:
01F7   0x018BF8   15 01 0F 00   LookupPointer       r1, 15         r1 = ST[15] -> <darray-append>
01F8   0x018C00   15 02 04 00   LookupPointer       r2, 4          r2 = ST[4] -> <get-symbol>
01F9   0x018C08   4A 03 1E 00   LoadStaticU64Imm    r3, 30         r3 = ST[30] -> <#E44FA889CD257D23>
01FA   0x018C10   4A 04 01 00   LoadStaticU64Imm    r4, 1          r4 = ST[1] -> <self>
01FB   0x018C18   43 31 03 00   Move                r49, r3        r49 = r3 [#E44FA889CD257D23]
01FC   0x018C20   43 32 04 00   Move                r50, r4        r50 = r4 [self]
01FD   0x018C28   1C 02 02 02   CallFf              r2, r2, 2      r2 = get-symbol(#E44FA889CD257D23, self)
01FE   0x018C30   15 03 09 00   LookupPointer       r3, 9          r3 = ST[9] -> <new-boxed-value>
01FF   0x018C38   0C 04 07 00   LoadU16Imm          r4, 7          r4 = 7
0200   0x018C40   15 05 04 00   LookupPointer       r5, 4          r5 = ST[4] -> <get-symbol>
0201   0x018C48   4A 06 19 00   LoadStaticU64Imm    r6, 25         r6 = ST[25] -> <#95719EBD5D274866>
0202   0x018C50   4A 07 01 00   LoadStaticU64Imm    r7, 1          r7 = ST[1] -> <self>
0203   0x018C58   43 31 06 00   Move                r49, r6        r49 = r6 [#95719EBD5D274866]
0204   0x018C60   43 32 07 00   Move                r50, r7        r50 = r7 [self]
0205   0x018C68   1C 05 05 02   CallFf              r5, r5, 2      r5 = get-symbol(#95719EBD5D274866, self)
0206   0x018C70   43 31 04 00   Move                r49, r4        r49 = r4 [7]
0207   0x018C78   43 32 05 00   Move                r50, r5        r50 = r5 [get-symbol()]
0208   0x018C80   1C 03 03 02   CallFf              r3, r3, 2      r3 = new-boxed-value(7, get-symbol())
0209   0x018C88   0C 04 01 00   LoadU16Imm          r4, 1          r4 = 1
020A   0x018C90   43 31 02 00   Move                r49, r2        r49 = r2 [get-symbol()]
020B   0x018C98   43 32 03 00   Move                r50, r3        r50 = r3 [new-boxed-value()]
020C   0x018CA0   43 33 04 00   Move                r51, r4        r51 = r4 [1]
020D   0x018CA8   1C 01 01 03   CallFf              r1, r1, 3      r1 = darray-append(get-symbol(), new-boxed-value(), 1)
020E   0x018CB0   15 01 1F 00   LookupPointer       r1, 31         r1 = ST[31] -> <wait-one-frame>
020F   0x018CB8   1C 01 01 00   CallFf              r1, r1, 0      r1 = wait-one-frame()
0210   0x018CC0   15 01 20 00   LookupPointer       r1, 32         r1 = ST[32] -> <go>
0211   0x018CC8   4A 02 21 00   LoadStaticU64Imm    r2, 33         r2 = ST[33] -> <select-spawn-regions>
0212   0x018CD0   0C 03 01 00   LoadU16Imm          r3, 1          r3 = 1
0213   0x018CD8   43 31 02 00   Move                r49, r2        r49 = r2 [select-spawn-regions]
0214   0x018CE0   43 32 03 00   Move                r50, r3        r50 = r3 [1]
0215   0x018CE8   1C 01 01 02   CallFf              r1, r1, 2      r1 = go(select-spawn-regions, 1)
0216   0x018CF0   2D 42 00 02   Branch              0242           => L_40
L_41:
0217   0x018CF8   15 01 22 00   LookupPointer       r1, 34         r1 = ST[34] -> <darray-clear>
0218   0x018D00   15 02 04 00   LookupPointer       r2, 4          r2 = ST[4] -> <get-symbol>
0219   0x018D08   4A 03 05 00   LoadStaticU64Imm    r3, 5          r3 = ST[5] -> <#FE0CDBDD4CC9DFAD>
021A   0x018D10   4A 04 01 00   LoadStaticU64Imm    r4, 1          r4 = ST[1] -> <self>
021B   0x018D18   43 31 03 00   Move                r49, r3        r49 = r3 [#FE0CDBDD4CC9DFAD]
021C   0x018D20   43 32 04 00   Move                r50, r4        r50 = r4 [self]
021D   0x018D28   1C 02 02 02   CallFf              r2, r2, 2      r2 = get-symbol(#FE0CDBDD4CC9DFAD, self)
021E   0x018D30   43 31 02 00   Move                r49, r2        r49 = r2 [get-symbol()]
021F   0x018D38   1C 01 01 01   CallFf              r1, r1, 1      r1 = darray-clear(get-symbol())
0220   0x018D40   15 01 13 00   LookupPointer       r1, 19         r1 = ST[19] -> <is-final-build?>
0221   0x018D48   1C 01 01 00   CallFf              r1, r1, 0      r1 = is-final-build?()
0222   0x018D50   30 01 01 00   OpLogNot            r1, r1         r1 = !r1 -> <TRUE>
0223   0x018D58   2F 30 01 02   BranchIfNot         r1, 0230       IF NOT r1 [0x6620ACB7] => L_48
0224   0x018D60   15 01 14 00   LookupPointer       r1, 20         r1 = ST[20] -> <display>
0225   0x018D68   15 02 15 00   LookupPointer       r2, 21         r2 = ST[21] -> <#5445173390656D6D>
0226   0x018D70   41 03 23 00   LoadStaticPointerImmr3, 35         r3 = ST[35] -> <0xBF026E99>
0227   0x018D78   41 04 17 00   LoadStaticPointerImmr4, 23         r4 = ST[23] -> <0xBF025EFC>
0228   0x018D80   43 31 03 00   Move                r49, r3        r49 = r3 [0xBF026E99]
0229   0x018D88   43 32 04 00   Move                r50, r4        r50 = r4 [0xBF025EFC]
022A   0x018D90   1C 02 02 02   CallFf              r2, r2, 2      r2 = #5445173390656D6D(0xBF026E99, 0xBF025EFC)
022B   0x018D98   0C 03 13 00   LoadU16Imm          r3, 19         r3 = 19
022C   0x018DA0   43 31 02 00   Move                r49, r2        r49 = r2 [#5445173390656D6D()]
022D   0x018DA8   43 32 03 00   Move                r50, r3        r50 = r3 [19]
022E   0x018DB0   1C 01 01 02   CallFf              r1, r1, 2      r1 = display(#5445173390656D6D(), 19)
022F   0x018DB8   2D 31 00 02   Branch              0231           => L_49
L_48:
0230   0x018DC0   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
L_49:
0231   0x018DC8   15 01 13 00   LookupPointer       r1, 19         r1 = ST[19] -> <is-final-build?>
0232   0x018DD0   1C 01 01 00   CallFf              r1, r1, 0      r1 = is-final-build?()
0233   0x018DD8   30 01 01 00   OpLogNot            r1, r1         r1 = !r1 -> <TRUE>
0234   0x018DE0   2F 41 01 02   BranchIfNot         r1, 0241       IF NOT r1 [0x6620ACB7] => L_50
0235   0x018DE8   15 01 14 00   LookupPointer       r1, 20         r1 = ST[20] -> <display>
0236   0x018DF0   15 02 15 00   LookupPointer       r2, 21         r2 = ST[21] -> <#5445173390656D6D>
0237   0x018DF8   41 03 24 00   LoadStaticPointerImmr3, 36         r3 = ST[36] -> <0xBF026ED0>
0238   0x018E00   41 04 17 00   LoadStaticPointerImmr4, 23         r4 = ST[23] -> <0xBF025EFC>
0239   0x018E08   43 31 03 00   Move                r49, r3        r49 = r3 [0xBF026ED0]
023A   0x018E10   43 32 04 00   Move                r50, r4        r50 = r4 [0xBF025EFC]
023B   0x018E18   1C 02 02 02   CallFf              r2, r2, 2      r2 = #5445173390656D6D(0xBF026ED0, 0xBF025EFC)
023C   0x018E20   0C 03 13 00   LoadU16Imm          r3, 19         r3 = 19
023D   0x018E28   43 31 02 00   Move                r49, r2        r49 = r2 [#5445173390656D6D()]
023E   0x018E30   43 32 03 00   Move                r50, r3        r50 = r3 [19]
023F   0x018E38   1C 01 01 02   CallFf              r1, r1, 2      r1 = display(#5445173390656D6D(), 19)
0240   0x018E40   2D 42 00 02   Branch              0242           => L_40
L_50:
0241   0x018E48   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
L_40:
0242   0x018E50   43 00 01 00   Move                r0, r1         r0 = r1 [0]
0243   0x018E58   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x018E60    POINTER <ddict-create>
0001   0x018E68    SID <self>
0002   0x018E70    INT <-1>
0003   0x018E78    POINTER <darray-count>
0004   0x018E80    POINTER <get-symbol>
0005   0x018E88    SID <#FE0CDBDD4CC9DFAD>
0006   0x018E90    POINTER <begin-foreach>
0007   0x018E98    POINTER <darray-at>
0008   0x018EA0    POINTER <ddict-set>
0009   0x018EA8    POINTER <new-boxed-value>
000A   0x018EB0    POINTER <end-foreach>
000B   0x018EB8    POINTER <#14C6FC79122F4A87>
000C   0x018EC0    POINTER <ddict-key-count>
000D   0x018EC8    POINTER <ddict-key-at>
000E   0x018ED0    POINTER <ddict-value-at>
000F   0x018ED8    POINTER <darray-append>
0010   0x018EE0    SID <#2005DE6CD0556E13>
0011   0x018EE8    POINTER <ddict-destroy>
0012   0x018EF0    POINTER <darray-find-remove>
0013   0x018EF8    POINTER <is-final-build?>
0014   0x018F00    POINTER <display>
0015   0x018F08    POINTER <#5445173390656D6D>
0016   0x018F10    POINTER <#00000282BF026C81>
0017   0x018F18    POINTER <#00000282BF025EFC>
0018   0x018F20    POINTER <#00000282BF026CBC>
0019   0x018F28    SID <#95719EBD5D274866>
001A   0x018F30    POINTER <#00000282BF026E36>
001B   0x018F38    POINTER <#00000282BF026F07>
001C   0x018F40    POINTER <string-debug>
001D   0x018F48    POINTER <#00000282BF026F4F>
001E   0x018F50    SID <#E44FA889CD257D23>
001F   0x018F58    POINTER <wait-one-frame>
0020   0x018F60    POINTER <go>
0021   0x018F68    SID <select-spawn-regions>
0022   0x018F70    POINTER <darray-clear>
0023   0x018F78    POINTER <#00000282BF026E99>
0024   0x018F80    POINTER <#00000282BF026ED0>
0000   0x010270   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <darray-clear>
0001   0x010278   15 01 01 00   LookupPointer       r1, 1          r1 = ST[1] -> <get-symbol>
0002   0x010280   4A 02 02 00   LoadStaticU64Imm    r2, 2          r2 = ST[2] -> <#E44FA889CD257D23>
0003   0x010288   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
0004   0x010290   43 31 02 00   Move                r49, r2        r49 = r2 [#E44FA889CD257D23]
0005   0x010298   43 32 03 00   Move                r50, r3        r50 = r3 [self]
0006   0x0102A0   1C 01 01 02   CallFf              r1, r1, 2      r1 = get-symbol(#E44FA889CD257D23, self)
0007   0x0102A8   43 31 01 00   Move                r49, r1        r49 = r1 [get-symbol()]
0008   0x0102B0   1C 00 00 01   CallFf              r0, r0, 1      r0 = darray-clear(get-symbol())
0009   0x0102B8   00 00 00 00   Return              r0             Return darray-clear()
SYMBOL TABLE: 
0000   0x0102C0    POINTER <darray-clear>
0001   0x0102C8    POINTER <get-symbol>
0002   0x0102D0    SID <#E44FA889CD257D23>
0003   0x0102D8    SID <self>
0000   0x0145F0   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <#B29628137A15BFFD>
0001   0x0145F8   1B 00 00 00   Call                r0, r0, 0      r0 = #B29628137A15BFFD()
0002   0x014600   0C 01 01 00   LoadU16Imm          r1, 1          r1 = 1
0003   0x014608   1D 00 00 01   IEqual              r0, r0, r1     r0 = r0 [2048245504] == r1 [1]
0004   0x014610   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0005   0x014618   2F 17 00 00   BranchIfNot         r0, 0017       IF NOT r0 [0x7A15BF01] => L_0
0006   0x014620   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <fact-set>
0007   0x014628   4A 01 02 00   LoadStaticU64Imm    r1, 2          r1 = ST[2] -> <faction-enemy>
0008   0x014630   4A 02 03 00   LoadStaticU64Imm    r2, 3          r2 = ST[3] -> <#6FF230657119DAC0>
0009   0x014638   15 03 04 00   LookupPointer       r3, 4          r3 = ST[4] -> <new-boxed-value>
000A   0x014640   0C 04 08 00   LoadU16Imm          r4, 8          r4 = 8
000B   0x014648   15 05 05 00   LookupPointer       r5, 5          r5 = ST[5] -> <get-current-timeframe>
000C   0x014650   0C 06 00 00   LoadU16Imm          r6, 0          r6 = 0
000D   0x014658   43 31 06 00   Move                r49, r6        r49 = r6 [0]
000E   0x014660   1C 05 05 01   CallFf              r5, r5, 1      r5 = get-current-timeframe(0)
000F   0x014668   43 31 04 00   Move                r49, r4        r49 = r4 [8]
0010   0x014670   43 32 05 00   Move                r50, r5        r50 = r5 [get-current-timeframe()]
0011   0x014678   1C 03 03 02   CallFf              r3, r3, 2      r3 = new-boxed-value(8, get-current-timeframe())
0012   0x014680   43 31 01 00   Move                r49, r1        r49 = r1 [faction-enemy]
0013   0x014688   43 32 02 00   Move                r50, r2        r50 = r2 [#6FF230657119DAC0]
0014   0x014690   43 33 03 00   Move                r51, r3        r51 = r3 [new-boxed-value()]
0015   0x014698   1C 00 00 03   CallFf              r0, r0, 3      r0 = fact-set(faction-enemy, #6FF230657119DAC0, new-boxed-value())
0016   0x0146A0   2D 18 00 00   Branch              0018           => L_RETURN
L_0:
0017   0x0146A8   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
0018   0x0146B0   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x0146B8    POINTER <#B29628137A15BFFD>
0001   0x0146C0    POINTER <fact-set>
0002   0x0146C8    SID <faction-enemy>
0003   0x0146D0    SID <#6FF230657119DAC0>
0004   0x0146D8    POINTER <new-boxed-value>
0005   0x0146E0    POINTER <get-current-timeframe>
0000   0x01ACE8   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <#B29628137A15BFFD>
0001   0x01ACF0   1B 00 00 00   Call                r0, r0, 0      r0 = #B29628137A15BFFD()
0002   0x01ACF8   0C 01 01 00   LoadU16Imm          r1, 1          r1 = 1
0003   0x01AD00   1D 00 00 01   IEqual              r0, r0, r1     r0 = r0 [2048245504] == r1 [1]
0004   0x01AD08   2F 16 00 00   BranchIfNot         r0, 0016       IF NOT r0 [0x7A15BF00] => L_0
0005   0x01AD10   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <get-int32>
0006   0x01AD18   4A 01 02 00   LoadStaticU64Imm    r1, 2          r1 = ST[2] -> <#72E01BEEBCB61949>
0007   0x01AD20   4A 02 03 00   LoadStaticU64Imm    r2, 3          r2 = ST[3] -> <ss-survival-manager>
0008   0x01AD28   43 31 01 00   Move                r49, r1        r49 = r1 [#72E01BEEBCB61949]
0009   0x01AD30   43 32 02 00   Move                r50, r2        r50 = r2 [ss-survival-manager]
000A   0x01AD38   1C 00 00 02   CallFf              r0, r0, 2      r0 = get-int32(#72E01BEEBCB61949, ss-survival-manager)
000B   0x01AD40   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
000C   0x01AD48   1D 00 00 01   IEqual              r0, r0, r1     r0 = r0 [-635293440] == r1 [0]
000D   0x01AD50   2E 16 00 00   BranchIf            r0, 0016       IF r0 [0xDA223100] => L_0
000E   0x01AD58   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <get-int32>
000F   0x01AD60   4A 01 02 00   LoadStaticU64Imm    r1, 2          r1 = ST[2] -> <#72E01BEEBCB61949>
0010   0x01AD68   4A 02 03 00   LoadStaticU64Imm    r2, 3          r2 = ST[3] -> <ss-survival-manager>
0011   0x01AD70   43 31 01 00   Move                r49, r1        r49 = r1 [#72E01BEEBCB61949]
0012   0x01AD78   43 32 02 00   Move                r50, r2        r50 = r2 [ss-survival-manager]
0013   0x01AD80   1C 00 00 02   CallFf              r0, r0, 2      r0 = get-int32(#72E01BEEBCB61949, ss-survival-manager)
0014   0x01AD88   0C 01 01 00   LoadU16Imm          r1, 1          r1 = 1
0015   0x01AD90   1D 00 00 01   IEqual              r0, r0, r1     r0 = r0 [-635293440] == r1 [1]
L_0:
0016   0x01AD98   2F 28 00 00   BranchIfNot         r0, 0028       IF NOT r0 [0xDA223100] => L_1
0017   0x01ADA0   15 00 04 00   LookupPointer       r0, 4          r0 = ST[4] -> <fact-set>
0018   0x01ADA8   4A 01 05 00   LoadStaticU64Imm    r1, 5          r1 = ST[5] -> <faction-enemy>
0019   0x01ADB0   4A 02 06 00   LoadStaticU64Imm    r2, 6          r2 = ST[6] -> <#6FF230657119DAC0>
001A   0x01ADB8   15 03 07 00   LookupPointer       r3, 7          r3 = ST[7] -> <new-boxed-value>
001B   0x01ADC0   0C 04 08 00   LoadU16Imm          r4, 8          r4 = 8
001C   0x01ADC8   15 05 08 00   LookupPointer       r5, 8          r5 = ST[8] -> <get-current-timeframe>
001D   0x01ADD0   0C 06 00 00   LoadU16Imm          r6, 0          r6 = 0
001E   0x01ADD8   43 31 06 00   Move                r49, r6        r49 = r6 [0]
001F   0x01ADE0   1C 05 05 01   CallFf              r5, r5, 1      r5 = get-current-timeframe(0)
0020   0x01ADE8   43 31 04 00   Move                r49, r4        r49 = r4 [8]
0021   0x01ADF0   43 32 05 00   Move                r50, r5        r50 = r5 [get-current-timeframe()]
0022   0x01ADF8   1C 03 03 02   CallFf              r3, r3, 2      r3 = new-boxed-value(8, get-current-timeframe())
0023   0x01AE00   43 31 01 00   Move                r49, r1        r49 = r1 [faction-enemy]
0024   0x01AE08   43 32 02 00   Move                r50, r2        r50 = r2 [#6FF230657119DAC0]
0025   0x01AE10   43 33 03 00   Move                r51, r3        r51 = r3 [new-boxed-value()]
0026   0x01AE18   1C 00 00 03   CallFf              r0, r0, 3      r0 = fact-set(faction-enemy, #6FF230657119DAC0, new-boxed-value())
0027   0x01AE20   2D 29 00 00   Branch              0029           => L_RETURN
L_1:
0028   0x01AE28   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
0029   0x01AE30   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x01AE38    POINTER <#B29628137A15BFFD>
0001   0x01AE40    POINTER <get-int32>
0002   0x01AE48    SID <#72E01BEEBCB61949>
0003   0x01AE50    SID <ss-survival-manager>
0004   0x01AE58    POINTER <fact-set>
0005   0x01AE60    SID <faction-enemy>
0006   0x01AE68    SID <#6FF230657119DAC0>
0007   0x01AE70    POINTER <new-boxed-value>
0008   0x01AE78    POINTER <get-current-timeframe>
0000   0x01EC20   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <wait-one-frame>
0001   0x01EC28   1C 00 00 00   CallFf              r0, r0, 0      r0 = wait-one-frame()
0002   0x01EC30   00 00 00 00   Return              r0             Return wait-one-frame()
SYMBOL TABLE: 
0000   0x01EC38    POINTER <wait-one-frame>
0000   0x0101E0   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <go>
0001   0x0101E8   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <spawn-wave>
0002   0x0101F0   0C 02 01 00   LoadU16Imm          r2, 1          r2 = 1
0003   0x0101F8   43 31 01 00   Move                r49, r1        r49 = r1 [spawn-wave]
0004   0x010200   43 32 02 00   Move                r50, r2        r50 = r2 [1]
0005   0x010208   1C 00 00 02   CallFf              r0, r0, 2      r0 = go(spawn-wave, 1)
0006   0x010210   00 00 00 00   Return              r0             Return go()
SYMBOL TABLE: 
0000   0x010218    POINTER <go>
0001   0x010220    SID <spawn-wave>
      STATE spawn-wave:
         ON start
          TRACK main:
0000   0x010050   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <is-final-build?>
0001   0x010058   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0002   0x010060   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0003   0x010068   2F 0E 00 00   BranchIfNot         r0, 000E       IF NOT r0 [0x6620ACB7] => L_0
0004   0x010070   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <display>
0005   0x010078   15 01 02 00   LookupPointer       r1, 2          r1 = ST[2] -> <#5445173390656D6D>
0006   0x010080   41 02 03 00   LoadStaticPointerImmr2, 3          r2 = ST[3] -> <0xBF027159>
0007   0x010088   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF027159]
0008   0x010090   1C 01 01 01   CallFf              r1, r1, 1      r1 = #5445173390656D6D(0xBF027159)
0009   0x010098   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
000A   0x0100A0   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
000B   0x0100A8   43 32 02 00   Move                r50, r2        r50 = r2 [19]
000C   0x0100B0   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
000D   0x0100B8   2D 0F 00 00   Branch              000F           => L_RETURN
L_0:
000E   0x0100C0   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
000F   0x0100C8   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x0100D0    POINTER <is-final-build?>
0001   0x0100D8    POINTER <display>
0002   0x0100E0    POINTER <#5445173390656D6D>
0003   0x0100E8    POINTER <#00000282BF027159>
0000   0x014788   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <darray-count>
0001   0x014790   15 01 01 00   LookupPointer       r1, 1          r1 = ST[1] -> <get-symbol>
0002   0x014798   4A 02 02 00   LoadStaticU64Imm    r2, 2          r2 = ST[2] -> <#FE0CDBDD4CC9DFAD>
0003   0x0147A0   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <self>
0004   0x0147A8   43 31 02 00   Move                r49, r2        r49 = r2 [#FE0CDBDD4CC9DFAD]
0005   0x0147B0   43 32 03 00   Move                r50, r3        r50 = r3 [self]
0006   0x0147B8   1C 01 01 02   CallFf              r1, r1, 2      r1 = get-symbol(#FE0CDBDD4CC9DFAD, self)
0007   0x0147C0   43 31 01 00   Move                r49, r1        r49 = r1 [get-symbol()]
0008   0x0147C8   1C 00 00 01   CallFf              r0, r0, 1      r0 = darray-count(get-symbol())
0009   0x0147D0   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
000A   0x0147D8   21 00 00 01   ILessThanEqual      r0, r0, r1     r0 = r0 [1753163008] <= r1 [0]
000B   0x0147E0   2F 87 00 00   BranchIfNot         r0, 0087       IF NOT r0 [0x687F2500] => L_0
000C   0x0147E8   15 00 04 00   LookupPointer       r0, 4          r0 = ST[4] -> <display-error>
000D   0x0147F0   15 01 05 00   LookupPointer       r1, 5          r1 = ST[5] -> <#5445173390656D6D>
000E   0x0147F8   41 02 06 00   LoadStaticPointerImmr2, 6          r2 = ST[6] -> <0xBF02722C>
000F   0x014800   15 03 07 00   LookupPointer       r3, 7          r3 = ST[7] -> <string-debug>
0010   0x014808   15 04 01 00   LookupPointer       r4, 1          r4 = ST[1] -> <get-symbol>
0011   0x014810   4A 05 08 00   LoadStaticU64Imm    r5, 8          r5 = ST[8] -> <#7F25A075B1A9E239>
0012   0x014818   4A 06 03 00   LoadStaticU64Imm    r6, 3          r6 = ST[3] -> <self>
0013   0x014820   43 31 05 00   Move                r49, r5        r49 = r5 [#7F25A075B1A9E239]
0014   0x014828   43 32 06 00   Move                r50, r6        r50 = r6 [self]
0015   0x014830   1C 04 04 02   CallFf              r4, r4, 2      r4 = get-symbol(#7F25A075B1A9E239, self)
0016   0x014838   43 31 04 00   Move                r49, r4        r49 = r4 [get-symbol()]
0017   0x014840   1C 03 03 01   CallFf              r3, r3, 1      r3 = string-debug(get-symbol())
0018   0x014848   15 04 09 00   LookupPointer       r4, 9          r4 = ST[9] -> <#8A8D5C923D5DDB3B>
0019   0x014850   1B 04 04 00   Call                r4, r4, 0      r4 = #8A8D5C923D5DDB3B()
001A   0x014858   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF02722C]
001B   0x014860   43 32 03 00   Move                r50, r3        r50 = r3 [string-debug()]
001C   0x014868   43 33 04 00   Move                r51, r4        r51 = r4 [#8A8D5C923D5DDB3B()]
001D   0x014870   1C 01 01 03   CallFf              r1, r1, 3      r1 = #5445173390656D6D(0xBF02722C, string-debug(), #8A8D5C923D5DDB3B())
001E   0x014878   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
001F   0x014880   1C 00 00 01   CallFf              r0, r0, 1      r0 = display-error(#5445173390656D6D())
0020   0x014888   15 00 0A 00   LookupPointer       r0, 10         r0 = ST[10] -> <get-object-position>
0021   0x014890   4A 01 0B 00   LoadStaticU64Imm    r1, 11         r1 = ST[11] -> <player>
0022   0x014898   43 31 01 00   Move                r49, r1        r49 = r1 [player]
0023   0x0148A0   1C 00 00 01   CallFf              r0, r0, 1      r0 = get-object-position(player)
0024   0x0148A8   15 01 0C 00   LookupPointer       r1, 12         r1 = ST[12] -> <log-event>
0025   0x0148B0   41 02 0D 00   LoadStaticPointerImmr2, 13         r2 = ST[13] -> <0xBF027C1C>
0026   0x0148B8   0C 03 01 00   LoadU16Imm          r3, 1          r3 = 1
0027   0x0148C0   15 04 05 00   LookupPointer       r4, 5          r4 = ST[5] -> <#5445173390656D6D>
0028   0x0148C8   41 05 0E 00   LoadStaticPointerImmr5, 14         r5 = ST[14] -> <0xBF027C3D>
0029   0x0148D0   15 06 07 00   LookupPointer       r6, 7          r6 = ST[7] -> <string-debug>
002A   0x0148D8   15 07 01 00   LookupPointer       r7, 1          r7 = ST[1] -> <get-symbol>
002B   0x0148E0   4A 08 0F 00   LoadStaticU64Imm    r8, 15         r8 = ST[15] -> <#7E358C581E146817>
002C   0x0148E8   4A 09 03 00   LoadStaticU64Imm    r9, 3          r9 = ST[3] -> <self>
002D   0x0148F0   43 31 08 00   Move                r49, r8        r49 = r8 [#7E358C581E146817]
002E   0x0148F8   43 32 09 00   Move                r50, r9        r50 = r9 [self]
002F   0x014900   1C 07 07 02   CallFf              r7, r7, 2      r7 = get-symbol(#7E358C581E146817, self)
0030   0x014908   43 31 07 00   Move                r49, r7        r49 = r7 [get-symbol()]
0031   0x014910   1C 06 06 01   CallFf              r6, r6, 1      r6 = string-debug(get-symbol())
0032   0x014918   15 07 07 00   LookupPointer       r7, 7          r7 = ST[7] -> <string-debug>
0033   0x014920   15 08 01 00   LookupPointer       r8, 1          r8 = ST[1] -> <get-symbol>
0034   0x014928   4A 09 08 00   LoadStaticU64Imm    r9, 8          r9 = ST[8] -> <#7F25A075B1A9E239>
0035   0x014930   4A 0A 03 00   LoadStaticU64Imm    r10, 3         r10 = ST[3] -> <self>
0036   0x014938   43 31 09 00   Move                r49, r9        r49 = r9 [#7F25A075B1A9E239]
0037   0x014940   43 32 0A 00   Move                r50, r10       r50 = r10 [self]
0038   0x014948   1C 08 08 02   CallFf              r8, r8, 2      r8 = get-symbol(#7F25A075B1A9E239, self)
0039   0x014950   43 31 08 00   Move                r49, r8        r49 = r8 [get-symbol()]
003A   0x014958   1C 07 07 01   CallFf              r7, r7, 1      r7 = string-debug(get-symbol())
003B   0x014960   15 08 00 00   LookupPointer       r8, 0          r8 = ST[0] -> <darray-count>
003C   0x014968   15 09 01 00   LookupPointer       r9, 1          r9 = ST[1] -> <get-symbol>
003D   0x014970   4A 0A 10 00   LoadStaticU64Imm    r10, 16        r10 = ST[16] -> <#813B48C382415979>
003E   0x014978   4A 0B 03 00   LoadStaticU64Imm    r11, 3         r11 = ST[3] -> <self>
003F   0x014980   43 31 0A 00   Move                r49, r10       r49 = r10 [#813B48C382415979]
0040   0x014988   43 32 0B 00   Move                r50, r11       r50 = r11 [self]
0041   0x014990   1C 09 09 02   CallFf              r9, r9, 2      r9 = get-symbol(#813B48C382415979, self)
0042   0x014998   43 31 09 00   Move                r49, r9        r49 = r9 [get-symbol()]
0043   0x0149A0   1C 08 08 01   CallFf              r8, r8, 1      r8 = darray-count(get-symbol())
0044   0x0149A8   15 09 00 00   LookupPointer       r9, 0          r9 = ST[0] -> <darray-count>
0045   0x0149B0   15 0A 01 00   LookupPointer       r10, 1         r10 = ST[1] -> <get-symbol>
0046   0x0149B8   4A 0B 11 00   LoadStaticU64Imm    r11, 17        r11 = ST[17] -> <#95B0EBA52417EDE3>
0047   0x0149C0   4A 0C 03 00   LoadStaticU64Imm    r12, 3         r12 = ST[3] -> <self>
0048   0x0149C8   43 31 0B 00   Move                r49, r11       r49 = r11 [#95B0EBA52417EDE3]
0049   0x0149D0   43 32 0C 00   Move                r50, r12       r50 = r12 [self]
004A   0x0149D8   1C 0A 0A 02   CallFf              r10, r10, 2    r10 = get-symbol(#95B0EBA52417EDE3, self)
004B   0x0149E0   43 31 0A 00   Move                r49, r10       r49 = r10 [get-symbol()]
004C   0x0149E8   1C 09 09 01   CallFf              r9, r9, 1      r9 = darray-count(get-symbol())
004D   0x0149F0   01 08 08 09   IAdd                r8, r8, r9     -788641140 = darray-count() + darray-count()
004E   0x0149F8   15 09 12 00   LookupPointer       r9, 18         r9 = ST[18] -> <get-int32>
004F   0x014A00   4A 0A 13 00   LoadStaticU64Imm    r10, 19        r10 = ST[19] -> <#CEF93DF859F605EA>
0050   0x014A08   4A 0B 03 00   LoadStaticU64Imm    r11, 3         r11 = ST[3] -> <self>
0051   0x014A10   43 31 0A 00   Move                r49, r10       r49 = r10 [#CEF93DF859F605EA]
0052   0x014A18   43 32 0B 00   Move                r50, r11       r50 = r11 [self]
0053   0x014A20   1C 09 09 02   CallFf              r9, r9, 2      r9 = get-int32(#CEF93DF859F605EA, self)
0054   0x014A28   15 0A 05 00   LookupPointer       r10, 5         r10 = ST[5] -> <#5445173390656D6D>
0055   0x014A30   41 0B 14 00   LoadStaticPointerImmr11, 20        r11 = ST[20] -> <0xBF025F1F>
0056   0x014A38   43 0C 00 00   Move                r12, r0        r12 = r0 [get-object-position()]
0057   0x014A40   5D 0C 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0058   0x014A48   0E 0C 0C 00   LoadFloat           r12, [r12]     r12 = [0x0 + 0x0]
0059   0x014A50   43 0D 00 00   Move                r13, r0        r13 = r0 [get-object-position()]
005A   0x014A58   5D 0D 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
005B   0x014A60   3B 0D 0D 04   IAddImm             r13, r13, 4    r13 = r13 [502549891] / 4 -> <502549891>
005C   0x014A68   0E 0D 0D 00   LoadFloat           r13, [r13]     r13 = [0x0 + 0x0]
005D   0x014A70   43 0E 00 00   Move                r14, r0        r14 = r0 [get-object-position()]
005E   0x014A78   5D 0E 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
005F   0x014A80   3B 0E 0E 08   IAddImm             r14, r14, 8    r14 = r14 [502549891] / 8 -> <502549891>
0060   0x014A88   0E 0E 0E 00   LoadFloat           r14, [r14]     r14 = [0x0 + 0x0]
0061   0x014A90   43 31 0B 00   Move                r49, r11       r49 = r11 [0xBF025F1F]
0062   0x014A98   43 32 0C 00   Move                r50, r12       r50 = r12 [0x0]
0063   0x014AA0   43 33 0D 00   Move                r51, r13       r51 = r13 [0x0]
0064   0x014AA8   43 34 0E 00   Move                r52, r14       r52 = r14 [0x0]
0065   0x014AB0   1C 0A 0A 04   CallFf              r10, r10, 4    r10 = #5445173390656D6D(0xBF025F1F, 0x0, 0x0, 0x0)
0066   0x014AB8   15 0B 15 00   LookupPointer       r11, 21        r11 = ST[21] -> <get-boolean>
0067   0x014AC0   4A 0C 16 00   LoadStaticU64Imm    r12, 22        r12 = ST[22] -> <#B0E4DDF4A79D13AC>
0068   0x014AC8   4A 0D 17 00   LoadStaticU64Imm    r13, 23        r13 = ST[23] -> <ss-wave-manager-level-set-loader-1>
0069   0x014AD0   43 31 0C 00   Move                r49, r12       r49 = r12 [#B0E4DDF4A79D13AC]
006A   0x014AD8   43 32 0D 00   Move                r50, r13       r50 = r13 [ss-wave-manager-level-set-loader-1]
006B   0x014AE0   1C 0B 0B 02   CallFf              r11, r11, 2    r11 = get-boolean(#B0E4DDF4A79D13AC, ss-wave-manager-level-set-loader-1)
006C   0x014AE8   2F 6F 0B 00   BranchIfNot         r11, 006F      IF NOT r11 [get-boolean()] => L_1
006D   0x014AF0   41 0B 18 00   LoadStaticPointerImmr11, 24        r11 = ST[24] -> <0xBF027754>
006E   0x014AF8   2D 70 00 00   Branch              0070           => L_2
L_1:
006F   0x014B00   41 0B 19 00   LoadStaticPointerImmr11, 25        r11 = ST[25] -> <0xBF027429>
L_2:
0070   0x014B08   15 0C 1A 00   LookupPointer       r12, 26        r12 = ST[26] -> <get-svar>
0071   0x014B10   4A 0D 1B 00   LoadStaticU64Imm    r13, 27        r13 = ST[27] -> <#5E4ECC2D991AFC57>
0072   0x014B18   43 31 0D 00   Move                r49, r13       r49 = r13 [#5E4ECC2D991AFC57]
0073   0x014B20   1B 0C 0C 01   Call                r12, r12, 1    r12 = get-svar(#5E4ECC2D991AFC57)
0074   0x014B28   43 31 05 00   Move                r49, r5        r49 = r5 [0xBF027C3D]
0075   0x014B30   43 32 06 00   Move                r50, r6        r50 = r6 [string-debug()]
0076   0x014B38   43 33 07 00   Move                r51, r7        r51 = r7 [string-debug()]
0077   0x014B40   43 34 08 00   Move                r52, r8        r52 = r8 [-788641140]
0078   0x014B48   43 35 09 00   Move                r53, r9        r53 = r9 [get-int32()]
0079   0x014B50   43 36 0A 00   Move                r54, r10       r54 = r10 [#5445173390656D6D()]
007A   0x014B58   43 37 0B 00   Move                r55, r11       r55 = r11 [0xBF027429]
007B   0x014B60   43 38 0C 00   Move                r56, r12       r56 = r12 [get-svar()]
-svar())                                                           r4 = #5445173390656D6D(0xBF027C3D, string-debug(), string-debug(), -788641140, get-int32(), #5445173390656D6D(), 0xBF027429, get-svar())
007D   0x014B70   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
007E   0x014B78   0C 06 00 00   LoadU16Imm          r6, 0          r6 = 0
007F   0x014B80   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF027C1C]
0080   0x014B88   43 32 03 00   Move                r50, r3        r50 = r3 [1]
0081   0x014B90   43 33 04 00   Move                r51, r4        r51 = r4 [#5445173390656D6D()]
0082   0x014B98   43 34 05 00   Move                r52, r5        r52 = r5 [0]
0083   0x014BA0   43 35 06 00   Move                r53, r6        r53 = r6 [0]
0084   0x014BA8   1C 01 01 05   CallFf              r1, r1, 5      r1 = log-event(0xBF027C1C, 1, #5445173390656D6D(), 0, 0)
0085   0x014BB0   43 00 01 00   Move                r0, r1         r0 = r1 [log-event()]
0086   0x014BB8   2D 88 00 00   Branch              0088           => L_RETURN
L_0:
0087   0x014BC0   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
0088   0x014BC8   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x014BD0    POINTER <darray-count>
0001   0x014BD8    POINTER <get-symbol>
0002   0x014BE0    SID <#FE0CDBDD4CC9DFAD>
0003   0x014BE8    SID <self>
0004   0x014BF0    POINTER <display-error>
0005   0x014BF8    POINTER <#5445173390656D6D>
0006   0x014C00    POINTER <#00000282BF02722C>
0007   0x014C08    POINTER <string-debug>
0008   0x014C10    SID <#7F25A075B1A9E239>
0009   0x014C18    POINTER <#8A8D5C923D5DDB3B>
000A   0x014C20    POINTER <get-object-position>
000B   0x014C28    SID <player>
000C   0x014C30    POINTER <log-event>
000D   0x014C38    POINTER <#00000282BF027C1C>
000E   0x014C40    POINTER <#00000282BF027C3D>
000F   0x014C48    SID <#7E358C581E146817>
0010   0x014C50    SID <#813B48C382415979>
0011   0x014C58    SID <#95B0EBA52417EDE3>
0012   0x014C60    POINTER <get-int32>
0013   0x014C68    SID <#CEF93DF859F605EA>
0014   0x014C70    POINTER <#00000282BF025F1F>
0015   0x014C78    POINTER <get-boolean>
0016   0x014C80    SID <#B0E4DDF4A79D13AC>
0017   0x014C88    SID <ss-wave-manager-level-set-loader-1>
0018   0x014C90    POINTER <#00000282BF027754>
0019   0x014C98    POINTER <#00000282BF027429>
001A   0x014CA0    POINTER <get-svar>
001B   0x014CA8    SID <#5E4ECC2D991AFC57>
0000   0x015450   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <set-boolean>
0001   0x015458   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#D9DFB4F910DB3FD9>
0002   0x015460   15 02 02 00   LookupPointer       r2, 2          r2 = ST[2] -> <get-boolean>
0003   0x015468   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <#FA343BC04362318D>
0004   0x015470   4A 04 04 00   LoadStaticU64Imm    r4, 4          r4 = ST[4] -> <self>
0005   0x015478   43 31 03 00   Move                r49, r3        r49 = r3 [#FA343BC04362318D]
0006   0x015480   43 32 04 00   Move                r50, r4        r50 = r4 [self]
0007   0x015488   1C 02 02 02   CallFf              r2, r2, 2      r2 = get-boolean(#FA343BC04362318D, self)
0008   0x015490   2F 0F 02 00   BranchIfNot         r2, 000F       IF NOT r2 [get-boolean()] => L_0
0009   0x015498   15 02 05 00   LookupPointer       r2, 5          r2 = ST[5] -> <npc-group-alive-count>
000A   0x0154A0   4A 03 06 00   LoadStaticU64Imm    r3, 6          r3 = ST[6] -> <#88F409F4BF0F056A>
000B   0x0154A8   43 31 03 00   Move                r49, r3        r49 = r3 [#88F409F4BF0F056A]
000C   0x0154B0   1C 02 02 01   CallFf              r2, r2, 1      r2 = npc-group-alive-count(#88F409F4BF0F056A)
000D   0x0154B8   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
000E   0x0154C0   1E 02 02 03   IGreaterThan        r2, r2, r3     r2 = r2 [-143247359] > r3 [0]
L_0:
000F   0x0154C8   2F 19 02 00   BranchIfNot         r2, 0019       IF NOT r2 [0xF7763801] => L_1
0010   0x0154D0   15 02 07 00   LookupPointer       r2, 7          r2 = ST[7] -> <!>
0011   0x0154D8   15 03 08 00   LookupPointer       r3, 8          r3 = ST[8] -> <timer-running?>
0012   0x0154E0   4A 04 09 00   LoadStaticU64Imm    r4, 9          r4 = ST[9] -> <#A9297DB4F1A30CF7>
0013   0x0154E8   4A 05 04 00   LoadStaticU64Imm    r5, 4          r5 = ST[4] -> <self>
0014   0x0154F0   43 31 04 00   Move                r49, r4        r49 = r4 [#A9297DB4F1A30CF7]
0015   0x0154F8   43 32 05 00   Move                r50, r5        r50 = r5 [self]
0016   0x015500   1B 03 03 02   Call                r3, r3, 2      r3 = timer-running?(#A9297DB4F1A30CF7, self)
0017   0x015508   43 31 03 00   Move                r49, r3        r49 = r3 [timer-running?()]
0018   0x015510   1B 02 02 01   Call                r2, r2, 1      r2 = !(timer-running?())
L_1:
0019   0x015518   4A 03 04 00   LoadStaticU64Imm    r3, 4          r3 = ST[4] -> <self>
001A   0x015520   43 31 01 00   Move                r49, r1        r49 = r1 [#D9DFB4F910DB3FD9]
001B   0x015528   43 32 02 00   Move                r50, r2        r50 = r2 [!()]
001C   0x015530   43 33 03 00   Move                r51, r3        r51 = r3 [self]
001D   0x015538   1C 00 00 03   CallFf              r0, r0, 3      r0 = set-boolean(#D9DFB4F910DB3FD9, !(), self)
001E   0x015540   00 00 00 00   Return              r0             Return set-boolean()
SYMBOL TABLE: 
0000   0x015548    POINTER <set-boolean>
0001   0x015550    SID <#D9DFB4F910DB3FD9>
0002   0x015558    POINTER <get-boolean>
0003   0x015560    SID <#FA343BC04362318D>
0004   0x015568    SID <self>
0005   0x015570    POINTER <npc-group-alive-count>
0006   0x015578    SID <#88F409F4BF0F056A>
0007   0x015580    POINTER <!>
0008   0x015588    POINTER <timer-running?>
0009   0x015590    SID <#A9297DB4F1A30CF7>
0000   0x00D738   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <get-symbol>
0001   0x00D740   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#FDCBB431C41579BC>
0002   0x00D748   4A 02 02 00   LoadStaticU64Imm    r2, 2          r2 = ST[2] -> <self>
0003   0x00D750   43 31 01 00   Move                r49, r1        r49 = r1 [#FDCBB431C41579BC]
0004   0x00D758   43 32 02 00   Move                r50, r2        r50 = r2 [self]
0005   0x00D760   1C 00 00 02   CallFf              r0, r0, 2      r0 = get-symbol(#FDCBB431C41579BC, self)
0006   0x00D768   43 01 00 00   Move                r1, r0         r1 = r0 [get-symbol()]
0007   0x00D770   5D 01 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0008   0x00D778   0F 01 01 00   LoadPointer         r1, [r1]       r1 = [0x0 + 0x0]
0009   0x00D780   15 02 03 00   LookupPointer       r2, 3          r2 = ST[3] -> <darray-create>
000A   0x00D788   4A 03 02 00   LoadStaticU64Imm    r3, 2          r3 = ST[2] -> <self>
000B   0x00D790   3F 04 04 00   LoadStaticI32Imm    r4, 4          r4 = ST[4] -> <-1>
000C   0x00D798   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
000D   0x00D7A0   43 31 03 00   Move                r49, r3        r49 = r3 [self]
000E   0x00D7A8   43 32 04 00   Move                r50, r4        r50 = r4 [-1]
000F   0x00D7B0   43 33 05 00   Move                r51, r5        r51 = r5 [0]
0010   0x00D7B8   1C 02 02 03   CallFf              r2, r2, 3      r2 = darray-create(self, -1, 0)
0011   0x00D7C0   15 03 03 00   LookupPointer       r3, 3          r3 = ST[3] -> <darray-create>
0012   0x00D7C8   4A 04 02 00   LoadStaticU64Imm    r4, 2          r4 = ST[2] -> <self>
0013   0x00D7D0   3F 05 04 00   LoadStaticI32Imm    r5, 4          r5 = ST[4] -> <-1>
0014   0x00D7D8   0C 06 00 00   LoadU16Imm          r6, 0          r6 = 0
0015   0x00D7E0   43 31 04 00   Move                r49, r4        r49 = r4 [self]
0016   0x00D7E8   43 32 05 00   Move                r50, r5        r50 = r5 [-1]
0017   0x00D7F0   43 33 06 00   Move                r51, r6        r51 = r6 [0]
0018   0x00D7F8   1C 03 03 03   CallFf              r3, r3, 3      r3 = darray-create(self, -1, 0)
0019   0x00D800   15 04 00 00   LookupPointer       r4, 0          r4 = ST[0] -> <get-symbol>
001A   0x00D808   4A 05 05 00   LoadStaticU64Imm    r5, 5          r5 = ST[5] -> <#FE0CDBDD4CC9DFAD>
001B   0x00D810   4A 06 02 00   LoadStaticU64Imm    r6, 2          r6 = ST[2] -> <self>
001C   0x00D818   43 31 05 00   Move                r49, r5        r49 = r5 [#FE0CDBDD4CC9DFAD]
001D   0x00D820   43 32 06 00   Move                r50, r6        r50 = r6 [self]
001E   0x00D828   1C 04 04 02   CallFf              r4, r4, 2      r4 = get-symbol(#FE0CDBDD4CC9DFAD, self)
001F   0x00D830   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
0020   0x00D838   0C 06 00 00   LoadU16Imm          r6, 0          r6 = 0
0021   0x00D840   0C 07 00 00   LoadU16Imm          r7, 0          r7 = 0
L_12:
0022   0x00D848   43 08 07 00   Move                r8, r7         r8 = r7 [0]
0023   0x00D850   43 09 01 00   Move                r9, r1         r9 = r1 [0x0]
0024   0x00D858   0C 0A 08 00   LoadU16Imm          r10, 8         r10 = 8
0025   0x00D860   01 09 09 0A   IAdd                r9, r9, r10    0x0 = 0x0 + 8
0026   0x00D868   4F 09 09 00   LoadI32             ???            UNKNOWN INSTRUCTION
0027   0x00D870   20 08 08 09   ILessThan           r8, r8, r9     r8 = r8 [0] < r9 [0]
0028   0x00D878   2F A0 08 00   BranchIfNot         r8, 00A0       IF NOT r8 [0x0] => L_0
0029   0x00D880   43 08 01 00   Move                r8, r1         r8 = r1 [0x0]
002A   0x00D888   0F 08 08 00   LoadPointer         r8, [r8]       r8 = [0x0 + 0x0]
002B   0x00D890   43 09 07 00   Move                r9, r7         r9 = r7 [0]
002C   0x00D898   3D 09 09 10   IMulImm             r9, r9, 16     r9 = r9 [0] / 16 -> <0>
002D   0x00D8A0   01 08 08 09   IAdd                r8, r8, r9     0x0 = 0x0 + 0
002E   0x00D8A8   43 09 08 00   Move                r9, r8         r9 = r8 [0x0]
002F   0x00D8B0   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0030   0x00D8B8   51 09 09 00   LoadU64             r9, [r9]       r9 = [0x0 + 0x0]
0031   0x00D8C0   15 0A 06 00   LookupPointer       r10, 6         r10 = ST[6] -> <hash-lookup>
0032   0x00D8C8   15 0B 07 00   LookupPointer       r11, 7         r11 = ST[7] -> <#58A146443FB1E1D4>
0033   0x00D8D0   43 0C 09 00   Move                r12, r9        r12 = r9 [0]
0034   0x00D8D8   43 31 0B 00   Move                r49, r11       r49 = r11 [0x3FB1E1D4]
0035   0x00D8E0   43 32 0C 00   Move                r50, r12       r50 = r12 [0]
0036   0x00D8E8   1C 0A 0A 02   CallFf              r10, r10, 2    r10 = hash-lookup(0x3FB1E1D4, 0)
0037   0x00D8F0   43 0B 0A 00   Move                r11, r10       r11 = r10 [hash-lookup()]
0038   0x00D8F8   43 0C 0B 00   Move                r12, r11       r12 = r11 [hash-lookup()]
0039   0x00D900   2F 40 0C 00   BranchIfNot         r12, 0040      IF NOT r12 [hash-lookup()] => L_1
003A   0x00D908   43 0C 0B 00   Move                r12, r11       r12 = r11 [hash-lookup()]
003B   0x00D910   5D 0C 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
003C   0x00D918   3B 0C 0C 0C   IAddImm             r12, r12, 12   r12 = r12 [-1795405222] / 12 -> <-1795405222>
003D   0x00D920   4E 0C 0C 00   LoadU16             ???            UNKNOWN INSTRUCTION
003E   0x00D928   0C 0D 07 00   LoadU16Imm          r13, 7         r13 = 7
003F   0x00D930   1D 0C 0C 0D   IEqual              r12, r12, r13  r12 = r12 [-1795405312] == r13 [7]
L_1:
0040   0x00D938   2F 45 0C 00   BranchIfNot         r12, 0045      IF NOT r12 [0x94FC4A00] => L_2
0041   0x00D940   43 0C 0B 00   Move                r12, r11       r12 = r11 [hash-lookup()]
0042   0x00D948   5D 0C 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0043   0x00D950   51 0C 0C 00   LoadU64             r12, [r12]     r12 = [0x0 + 0x0]
0044   0x00D958   2D 60 00 00   Branch              0060           => L_3
L_2:
0045   0x00D960   43 0C 0B 00   Move                r12, r11       r12 = r11 [hash-lookup()]
0046   0x00D968   2F 4D 0C 00   BranchIfNot         r12, 004D      IF NOT r12 [hash-lookup()] => L_4
0047   0x00D970   43 0C 0B 00   Move                r12, r11       r12 = r11 [hash-lookup()]
0048   0x00D978   5D 0C 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0049   0x00D980   3B 0C 0C 0C   IAddImm             r12, r12, 12   r12 = r12 [-1795405222] / 12 -> <-1795405222>
004A   0x00D988   4E 0C 0C 00   LoadU16             ???            UNKNOWN INSTRUCTION
004B   0x00D990   0C 0D 05 00   LoadU16Imm          r13, 5         r13 = 5
004C   0x00D998   1D 0C 0C 0D   IEqual              r12, r12, r13  r12 = r12 [-1795405312] == r13 [5]
L_4:
004D   0x00D9A0   2F 52 0C 00   BranchIfNot         r12, 0052      IF NOT r12 [0x94FC4A00] => L_5
004E   0x00D9A8   43 0C 0B 00   Move                r12, r11       r12 = r11 [hash-lookup()]
004F   0x00D9B0   5D 0C 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0050   0x00D9B8   51 0C 0C 00   LoadU64             r12, [r12]     r12 = [0x0 + 0x0]
0051   0x00D9C0   2D 60 00 00   Branch              0060           => L_3
L_5:
0052   0x00D9C8   43 0C 0B 00   Move                r12, r11       r12 = r11 [hash-lookup()]
0053   0x00D9D0   2F 5A 0C 00   BranchIfNot         r12, 005A      IF NOT r12 [hash-lookup()] => L_6
0054   0x00D9D8   43 0C 0B 00   Move                r12, r11       r12 = r11 [hash-lookup()]
0055   0x00D9E0   5D 0C 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0056   0x00D9E8   3B 0C 0C 0C   IAddImm             r12, r12, 12   r12 = r12 [-1795405222] / 12 -> <-1795405222>
0057   0x00D9F0   4E 0C 0C 00   LoadU16             ???            UNKNOWN INSTRUCTION
0058   0x00D9F8   0C 0D 04 00   LoadU16Imm          r13, 4         r13 = 4
0059   0x00DA00   1D 0C 0C 0D   IEqual              r12, r12, r13  r12 = r12 [-1795405312] == r13 [4]
L_6:
005A   0x00DA08   2F 5F 0C 00   BranchIfNot         r12, 005F      IF NOT r12 [0x94FC4A00] => L_7
005B   0x00DA10   43 0C 0B 00   Move                r12, r11       r12 = r11 [hash-lookup()]
005C   0x00DA18   5D 0C 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
005D   0x00DA20   51 0C 0C 00   LoadU64             r12, [r12]     r12 = [0x0 + 0x0]
005E   0x00DA28   2D 60 00 00   Branch              0060           => L_3
L_7:
005F   0x00DA30   0C 0C 00 00   LoadU16Imm          r12, 0         r12 = 0
L_3:
0060   0x00DA38   43 0B 0C 00   Move                r11, r12       r11 = r12 [0]
0061   0x00DA40   15 0C 08 00   LookupPointer       r12, 8         r12 = ST[8] -> <string-length>
0062   0x00DA48   15 0D 09 00   LookupPointer       r13, 9         r13 = ST[9] -> <string-debug>
0063   0x00DA50   43 0E 0B 00   Move                r14, r11       r14 = r11 [0]
0064   0x00DA58   43 31 0E 00   Move                r49, r14       r49 = r14 [0]
0065   0x00DA60   1C 0D 0D 01   CallFf              r13, r13, 1    r13 = string-debug(0)
0066   0x00DA68   43 31 0D 00   Move                r49, r13       r49 = r13 [string-debug()]
0067   0x00DA70   1C 0C 0C 01   CallFf              r12, r12, 1    r12 = string-length(string-debug())
0068   0x00DA78   15 0D 0A 00   LookupPointer       r13, 10        r13 = ST[10] -> <#1BE229BC2DFB8FBB>
0069   0x00DA80   43 0E 08 00   Move                r14, r8        r14 = r8 [0x0]
006A   0x00DA88   43 31 0E 00   Move                r49, r14       r49 = r14 [0x0]
006B   0x00DA90   1B 0D 0D 01   Call                r13, r13, 1    r13 = #1BE229BC2DFB8FBB(0x0)
006C   0x00DA98   43 0E 0D 00   Move                r14, r13       r14 = r13 [#1BE229BC2DFB8FBB()]
006D   0x00DAA0   2F 92 0E 00   BranchIfNot         r14, 0092      IF NOT r14 [#1BE229BC2DFB8FBB()] => L_8
006E   0x00DAA8   15 0E 0B 00   LookupPointer       r14, 11        r14 = ST[11] -> <darray-append>
006F   0x00DAB0   43 0F 02 00   Move                r15, r2        r15 = r2 [darray-create()]
0070   0x00DAB8   15 10 0C 00   LookupPointer       r16, 12        r16 = ST[12] -> <new-boxed-value>
0071   0x00DAC0   0C 11 07 00   LoadU16Imm          r17, 7         r17 = 7
0072   0x00DAC8   43 12 09 00   Move                r18, r9        r18 = r9 [0]
0073   0x00DAD0   43 31 11 00   Move                r49, r17       r49 = r17 [7]
0074   0x00DAD8   43 32 12 00   Move                r50, r18       r50 = r18 [0]
0075   0x00DAE0   1C 10 10 02   CallFf              r16, r16, 2    r16 = new-boxed-value(7, 0)
0076   0x00DAE8   0C 11 00 00   LoadU16Imm          r17, 0         r17 = 0
0077   0x00DAF0   43 31 0F 00   Move                r49, r15       r49 = r15 [darray-create()]
0078   0x00DAF8   43 32 10 00   Move                r50, r16       r50 = r16 [new-boxed-value()]
0079   0x00DB00   43 33 11 00   Move                r51, r17       r51 = r17 [0]
007A   0x00DB08   1C 0E 0E 03   CallFf              r14, r14, 3    r14 = darray-append(darray-create(), new-boxed-value(), 0)
007B   0x00DB10   15 0E 0B 00   LookupPointer       r14, 11        r14 = ST[11] -> <darray-append>
007C   0x00DB18   43 0F 03 00   Move                r15, r3        r15 = r3 [darray-create()]
007D   0x00DB20   15 10 0C 00   LookupPointer       r16, 12        r16 = ST[12] -> <new-boxed-value>
007E   0x00DB28   0C 11 07 00   LoadU16Imm          r17, 7         r17 = 7
007F   0x00DB30   43 12 0B 00   Move                r18, r11       r18 = r11 [0]
0080   0x00DB38   43 31 11 00   Move                r49, r17       r49 = r17 [7]
0081   0x00DB40   43 32 12 00   Move                r50, r18       r50 = r18 [0]
0082   0x00DB48   1C 10 10 02   CallFf              r16, r16, 2    r16 = new-boxed-value(7, 0)
0083   0x00DB50   0C 11 00 00   LoadU16Imm          r17, 0         r17 = 0
0084   0x00DB58   43 31 0F 00   Move                r49, r15       r49 = r15 [darray-create()]
0085   0x00DB60   43 32 10 00   Move                r50, r16       r50 = r16 [new-boxed-value()]
0086   0x00DB68   43 33 11 00   Move                r51, r17       r51 = r17 [0]
0087   0x00DB70   1C 0E 0E 03   CallFf              r14, r14, 3    r14 = darray-append(darray-create(), new-boxed-value(), 0)
0088   0x00DB78   43 0E 0C 00   Move                r14, r12       r14 = r12 [string-length()]
0089   0x00DB80   43 0F 05 00   Move                r15, r5        r15 = r5 [0]
008A   0x00DB88   1E 0E 0E 0F   IGreaterThan        r14, r14, r15  r14 = r14 [606273536] > r15 [0]
008B   0x00DB90   2F 90 0E 00   BranchIfNot         r14, 0090      IF NOT r14 [0x24230000] => L_9
008C   0x00DB98   43 0E 0C 00   Move                r14, r12       r14 = r12 [string-length()]
008D   0x00DBA0   43 05 0E 00   Move                r5, r14        r5 = r14 [string-length()]
008E   0x00DBA8   43 0E 05 00   Move                r14, r5        r14 = r5 [string-length()]
008F   0x00DBB0   2D 91 00 00   Branch              0091           => L_10
L_9:
0090   0x00DBB8   0C 0E 00 00   LoadU16Imm          r14, 0         r14 = 0
L_10:
0091   0x00DBC0   2D 93 00 00   Branch              0093           => L_11
L_8:
0092   0x00DBC8   0C 0E 00 00   LoadU16Imm          r14, 0         r14 = 0
L_11:
0093   0x00DBD0   43 0E 0E 00   Move                r14, r14       r14 = r14 [0]
0094   0x00DBD8   43 0D 0E 00   Move                r13, r14       r13 = r14 [0]
0095   0x00DBE0   43 0C 0D 00   Move                r12, r13       r12 = r13 [0]
0096   0x00DBE8   43 0B 0C 00   Move                r11, r12       r11 = r12 [0]
0097   0x00DBF0   43 0A 0B 00   Move                r10, r11       r10 = r11 [0]
0098   0x00DBF8   43 09 0A 00   Move                r9, r10        r9 = r10 [0]
0099   0x00DC00   43 08 09 00   Move                r8, r9         r8 = r9 [0]
009A   0x00DC08   43 08 07 00   Move                r8, r7         r8 = r7 [0]
009B   0x00DC10   0C 09 01 00   LoadU16Imm          r9, 1          r9 = 1
009C   0x00DC18   01 08 08 09   IAdd                r8, r8, r9     1 = 0 + 1
009D   0x00DC20   43 07 08 00   Move                r7, r8         r7 = r8 [1]
009E   0x00DC28   43 08 07 00   Move                r8, r7         r8 = r7 [1]
009F   0x00DC30   2D 22 00 00   Branch              0022           => L_12
L_0:
00A0   0x00DC38   43 07 08 00   Move                r7, r8         r7 = r8 [1]
00A1   0x00DC40   15 07 0D 00   LookupPointer       r7, 13         r7 = ST[13] -> <is-final-build?>
00A2   0x00DC48   1C 07 07 00   CallFf              r7, r7, 0      r7 = is-final-build?()
00A3   0x00DC50   30 07 07 00   OpLogNot            r7, r7         r7 = !r7 -> <TRUE>
00A4   0x00DC58   2F B6 07 00   BranchIfNot         r7, 00B6       IF NOT r7 [0x6620ACB7] => L_13
00A5   0x00DC60   15 07 0E 00   LookupPointer       r7, 14         r7 = ST[14] -> <display>
00A6   0x00DC68   15 08 0F 00   LookupPointer       r8, 15         r8 = ST[15] -> <#5445173390656D6D>
00A7   0x00DC70   41 09 10 00   LoadStaticPointerImmr9, 16         r9 = ST[16] -> <0xBF0267A8>
00A8   0x00DC78   41 0A 11 00   LoadStaticPointerImmr10, 17        r10 = ST[17] -> <0xBF025EFC>
00A9   0x00DC80   15 0B 12 00   LookupPointer       r11, 18        r11 = ST[18] -> <darray-count>
00AA   0x00DC88   43 0C 03 00   Move                r12, r3        r12 = r3 [darray-create()]
00AB   0x00DC90   43 31 0C 00   Move                r49, r12       r49 = r12 [darray-create()]
00AC   0x00DC98   1C 0B 0B 01   CallFf              r11, r11, 1    r11 = darray-count(darray-create())
00AD   0x00DCA0   43 31 09 00   Move                r49, r9        r49 = r9 [0xBF0267A8]
00AE   0x00DCA8   43 32 0A 00   Move                r50, r10       r50 = r10 [0xBF025EFC]
00AF   0x00DCB0   43 33 0B 00   Move                r51, r11       r51 = r11 [darray-count()]
00B0   0x00DCB8   1C 08 08 03   CallFf              r8, r8, 3      r8 = #5445173390656D6D(0xBF0267A8, 0xBF025EFC, darray-count())
00B1   0x00DCC0   0C 09 13 00   LoadU16Imm          r9, 19         r9 = 19
00B2   0x00DCC8   43 31 08 00   Move                r49, r8        r49 = r8 [#5445173390656D6D()]
00B3   0x00DCD0   43 32 09 00   Move                r50, r9        r50 = r9 [19]
00B4   0x00DCD8   1C 07 07 02   CallFf              r7, r7, 2      r7 = display(#5445173390656D6D(), 19)
00B5   0x00DCE0   2D B7 00 00   Branch              00B7           => L_14
L_13:
00B6   0x00DCE8   0C 07 00 00   LoadU16Imm          r7, 0          r7 = 0
L_14:
00B7   0x00DCF0   0C 07 00 00   LoadU16Imm          r7, 0          r7 = 0
L_60:
00B8   0x00DCF8   43 08 07 00   Move                r8, r7         r8 = r7 [0]
00B9   0x00DD00   15 09 12 00   LookupPointer       r9, 18         r9 = ST[18] -> <darray-count>
00BA   0x00DD08   43 0A 03 00   Move                r10, r3        r10 = r3 [darray-create()]
00BB   0x00DD10   43 31 0A 00   Move                r49, r10       r49 = r10 [darray-create()]
00BC   0x00DD18   1C 09 09 01   CallFf              r9, r9, 1      r9 = darray-count(darray-create())
00BD   0x00DD20   20 08 08 09   ILessThan           r8, r8, r9     r8 = r8 [1] < r9 [1753163078]
00BE   0x00DD28   2F 3B 08 02   BranchIfNot         r8, 023B       IF NOT r8 [0x1] => L_15
00BF   0x00DD30   15 08 13 00   LookupPointer       r8, 19         r8 = ST[19] -> <darray-at>
00C0   0x00DD38   43 09 02 00   Move                r9, r2         r9 = r2 [darray-create()]
00C1   0x00DD40   43 0A 07 00   Move                r10, r7        r10 = r7 [0]
00C2   0x00DD48   43 31 09 00   Move                r49, r9        r49 = r9 [darray-create()]
00C3   0x00DD50   43 32 0A 00   Move                r50, r10       r50 = r10 [0]
00C4   0x00DD58   1C 08 08 02   CallFf              r8, r8, 2      r8 = darray-at(darray-create(), 0)
00C5   0x00DD60   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
00C6   0x00DD68   2F CD 09 00   BranchIfNot         r9, 00CD       IF NOT r9 [darray-at()] => L_16
00C7   0x00DD70   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
00C8   0x00DD78   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00C9   0x00DD80   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
00CA   0x00DD88   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
00CB   0x00DD90   0C 0A 07 00   LoadU16Imm          r10, 7         r10 = 7
00CC   0x00DD98   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [7]
L_16:
00CD   0x00DDA0   2F D2 09 00   BranchIfNot         r9, 00D2       IF NOT r9 [0xD3F1F500] => L_17
00CE   0x00DDA8   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
00CF   0x00DDB0   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00D0   0x00DDB8   51 09 09 00   LoadU64             r9, [r9]       r9 = [0x0 + 0x0]
00D1   0x00DDC0   2D ED 00 00   Branch              00ED           => L_18
L_17:
00D2   0x00DDC8   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
00D3   0x00DDD0   2F DA 09 00   BranchIfNot         r9, 00DA       IF NOT r9 [darray-at()] => L_19
00D4   0x00DDD8   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
00D5   0x00DDE0   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00D6   0x00DDE8   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
00D7   0x00DDF0   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
00D8   0x00DDF8   0C 0A 05 00   LoadU16Imm          r10, 5         r10 = 5
00D9   0x00DE00   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [5]
L_19:
00DA   0x00DE08   2F DF 09 00   BranchIfNot         r9, 00DF       IF NOT r9 [0xD3F1F500] => L_20
00DB   0x00DE10   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
00DC   0x00DE18   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00DD   0x00DE20   51 09 09 00   LoadU64             r9, [r9]       r9 = [0x0 + 0x0]
00DE   0x00DE28   2D ED 00 00   Branch              00ED           => L_18
L_20:
00DF   0x00DE30   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
00E0   0x00DE38   2F E7 09 00   BranchIfNot         r9, 00E7       IF NOT r9 [darray-at()] => L_21
00E1   0x00DE40   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
00E2   0x00DE48   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00E3   0x00DE50   3B 09 09 0C   IAddImm             r9, r9, 12     r9 = r9 [-739117676] / 12 -> <-739117676>
00E4   0x00DE58   4E 09 09 00   LoadU16             ???            UNKNOWN INSTRUCTION
00E5   0x00DE60   0C 0A 04 00   LoadU16Imm          r10, 4         r10 = 4
00E6   0x00DE68   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-739117824] == r10 [4]
L_21:
00E7   0x00DE70   2F EC 09 00   BranchIfNot         r9, 00EC       IF NOT r9 [0xD3F1F500] => L_22
00E8   0x00DE78   43 09 08 00   Move                r9, r8         r9 = r8 [darray-at()]
00E9   0x00DE80   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00EA   0x00DE88   51 09 09 00   LoadU64             r9, [r9]       r9 = [0x0 + 0x0]
00EB   0x00DE90   2D ED 00 00   Branch              00ED           => L_18
L_22:
00EC   0x00DE98   0C 09 00 00   LoadU16Imm          r9, 0          r9 = 0
L_18:
00ED   0x00DEA0   43 08 09 00   Move                r8, r9         r8 = r9 [0]
00EE   0x00DEA8   15 09 13 00   LookupPointer       r9, 19         r9 = ST[19] -> <darray-at>
00EF   0x00DEB0   43 0A 03 00   Move                r10, r3        r10 = r3 [darray-create()]
00F0   0x00DEB8   43 0B 07 00   Move                r11, r7        r11 = r7 [0]
00F1   0x00DEC0   43 31 0A 00   Move                r49, r10       r49 = r10 [darray-create()]
00F2   0x00DEC8   43 32 0B 00   Move                r50, r11       r50 = r11 [0]
00F3   0x00DED0   1C 09 09 02   CallFf              r9, r9, 2      r9 = darray-at(darray-create(), 0)
00F4   0x00DED8   43 0A 09 00   Move                r10, r9        r10 = r9 [darray-at()]
00F5   0x00DEE0   2F FC 0A 00   BranchIfNot         r10, 00FC      IF NOT r10 [darray-at()] => L_23
00F6   0x00DEE8   43 0A 09 00   Move                r10, r9        r10 = r9 [darray-at()]
00F7   0x00DEF0   5D 0A 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00F8   0x00DEF8   3B 0A 0A 0C   IAddImm             r10, r10, 12   r10 = r10 [-739117676] / 12 -> <-739117676>
00F9   0x00DF00   4E 0A 0A 00   LoadU16             ???            UNKNOWN INSTRUCTION
00FA   0x00DF08   0C 0B 07 00   LoadU16Imm          r11, 7         r11 = 7
00FB   0x00DF10   1D 0A 0A 0B   IEqual              r10, r10, r11  r10 = r10 [-739117824] == r11 [7]
L_23:
00FC   0x00DF18   2F 01 0A 01   BranchIfNot         r10, 0101      IF NOT r10 [0xD3F1F500] => L_24
00FD   0x00DF20   43 0A 09 00   Move                r10, r9        r10 = r9 [darray-at()]
00FE   0x00DF28   5D 0A 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
00FF   0x00DF30   51 0A 0A 00   LoadU64             r10, [r10]     r10 = [0x0 + 0x0]
0100   0x00DF38   2D 1C 00 01   Branch              011C           => L_25
L_24:
0101   0x00DF40   43 0A 09 00   Move                r10, r9        r10 = r9 [darray-at()]
0102   0x00DF48   2F 09 0A 01   BranchIfNot         r10, 0109      IF NOT r10 [darray-at()] => L_26
0103   0x00DF50   43 0A 09 00   Move                r10, r9        r10 = r9 [darray-at]
0104   0x00DF58   5D 0A 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0105   0x00DF60   3B 0A 0A 0C   IAddImm             r10, r10, 12   r10 = r10 [-739117676] / 12 -> <-739117676>
0106   0x00DF68   4E 0A 0A 00   LoadU16             ???            UNKNOWN INSTRUCTION
0107   0x00DF70   0C 0B 05 00   LoadU16Imm          r11, 5         r11 = 5
0108   0x00DF78   1D 0A 0A 0B   IEqual              r10, r10, r11  r10 = r10 [-739117824] == r11 [5]
L_26:
0109   0x00DF80   2F 0E 0A 01   BranchIfNot         r10, 010E      IF NOT r10 [0xD3F1F500] => L_27
010A   0x00DF88   43 0A 09 00   Move                r10, r9        r10 = r9 [darray-at]
010B   0x00DF90   5D 0A 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
010C   0x00DF98   51 0A 0A 00   LoadU64             r10, [r10]     r10 = [0x0 + 0x0]
010D   0x00DFA0   2D 1C 00 01   Branch              011C           => L_25
L_27:
010E   0x00DFA8   43 0A 09 00   Move                r10, r9        r10 = r9 [darray-at]
010F   0x00DFB0   2F 16 0A 01   BranchIfNot         r10, 0116      IF NOT r10 [darray-at] => L_28
0110   0x00DFB8   43 0A 09 00   Move                r10, r9        r10 = r9 [darray-at]
0111   0x00DFC0   5D 0A 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0112   0x00DFC8   3B 0A 0A 0C   IAddImm             r10, r10, 12   r10 = r10 [-739117676] / 12 -> <-739117676>
0113   0x00DFD0   4E 0A 0A 00   LoadU16             ???            UNKNOWN INSTRUCTION
0114   0x00DFD8   0C 0B 04 00   LoadU16Imm          r11, 4         r11 = 4
0115   0x00DFE0   1D 0A 0A 0B   IEqual              r10, r10, r11  r10 = r10 [-739117824] == r11 [4]
L_28:
0116   0x00DFE8   2F 1B 0A 01   BranchIfNot         r10, 011B      IF NOT r10 [0xD3F1F500] => L_29
0117   0x00DFF0   43 0A 09 00   Move                r10, r9        r10 = r9 [darray-at]
0118   0x00DFF8   5D 0A 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0119   0x00E000   51 0A 0A 00   LoadU64             r10, [r10]     r10 = [0x0 + 0x0]
011A   0x00E008   2D 1C 00 01   Branch              011C           => L_25
L_29:
011B   0x00E010   0C 0A 00 00   LoadU16Imm          r10, 0         r10 = 0
L_25:
011C   0x00E018   43 09 0A 00   Move                r9, r10        r9 = r10 [0]
011D   0x00E020   15 0A 12 00   LookupPointer       r10, 18        r10 = ST[18] -> <darray-count>
011E   0x00E028   43 0B 04 00   Move                r11, r4        r11 = r4 [get-symbol()]
011F   0x00E030   43 31 0B 00   Move                r49, r11       r49 = r11 [get-symbol()]
0120   0x00E038   1C 0A 0A 01   CallFf              r10, r10, 1    r10 = darray-count(get-symbol())
0121   0x00E040   0C 0B 00 00   LoadU16Imm          r11, 0         r11 = 0
0122   0x00E048   1D 0A 0A 0B   IEqual              r10, r10, r11  r10 = r10 [1753163008] == r11 [0]
0123   0x00E050   2F 26 0A 01   BranchIfNot         r10, 0126      IF NOT r10 [0x687F2500] => L_30
0124   0x00E058   43 0A 09 00   Move                r10, r9        r10 = r9 [0]
0125   0x00E060   2D 2A 00 01   Branch              012A           => L_31
L_30:
0126   0x00E068   15 0A 14 00   LookupPointer       r10, 20        r10 = ST[20] -> <group-random>
0127   0x00E070   43 0B 04 00   Move                r11, r4        r11 = r4 [get-symbol()]
0128   0x00E078   43 31 0B 00   Move                r49, r11       r49 = r11 [get-symbol()]
0129   0x00E080   1B 0A 0A 01   Call                r10, r10, 1    r10 = group-random(get-symbol())
L_31:
012A   0x00E088   15 0B 15 00   LookupPointer       r11, 21        r11 = ST[21] -> <wait-spawn-npc>
012B   0x00E090   43 0C 09 00   Move                r12, r9        r12 = r9 [0]
012C   0x00E098   43 0D 0A 00   Move                r13, r10       r13 = r10 [group-random()]
012D   0x00E0A0   0C 0E 01 00   LoadU16Imm          r14, 1         r14 = 1
012E   0x00E0A8   43 31 0C 00   Move                r49, r12       r49 = r12 [0]
012F   0x00E0B0   43 32 0D 00   Move                r50, r13       r50 = r13 [group-random()]
0130   0x00E0B8   43 33 0E 00   Move                r51, r14       r51 = r14 [1]
0131   0x00E0C0   1B 0B 0B 03   Call                r11, r11, 3    r11 = wait-spawn-npc(0, group-random(), 1)
0132   0x00E0C8   0C 0C 00 00   LoadU16Imm          r12, 0         r12 = 0
0133   0x00E0D0   43 0D 0B 00   Move                r13, r11       r13 = r11 [wait-spawn-npc()]
0134   0x00E0D8   0C 0E 00 00   LoadU16Imm          r14, 0         r14 = 0
0135   0x00E0E0   1D 0D 0D 0E   IEqual              r13, r13, r14  r13 = r13 [-2111838720] == r14 [0]
0136   0x00E0E8   30 0D 0D 00   OpLogNot            r13, r13       r13 = !r13 -> <TRUE>
0137   0x00E0F0   2F 0B 0D 02   BranchIfNot         r13, 020B      IF NOT r13 [0x821FE601] => L_32
0138   0x00E0F8   15 0D 16 00   LookupPointer       r13, 22        r13 = ST[22] -> <tag-specified?>
0139   0x00E100   4A 0E 17 00   LoadStaticU64Imm    r14, 23        r14 = ST[23] -> <#BE622B8D350CB286>
013A   0x00E108   43 0F 0B 00   Move                r15, r11       r15 = r11 [wait-spawn-npc]
013B   0x00E110   43 31 0E 00   Move                r49, r14       r49 = r14 [#BE622B8D350CB286]
013C   0x00E118   43 32 0F 00   Move                r50, r15       r50 = r15 [wait-spawn-npc]
013D   0x00E120   1C 0D 0D 02   CallFf              r13, r13, 2    r13 = tag-specified?(#BE622B8D350CB286, wait-spawn-npc)
013E   0x00E128   2F 47 0D 01   BranchIfNot         r13, 0147      IF NOT r13 [tag-specified?()] => L_33
013F   0x00E130   0C 0D 01 00   LoadU16Imm          r13, 1         r13 = 1
0140   0x00E138   15 0E 18 00   LookupPointer       r14, 24        r14 = ST[24] -> <tag-boolean>
0141   0x00E140   4A 0F 17 00   LoadStaticU64Imm    r15, 23        r15 = ST[23] -> <#BE622B8D350CB286>
0142   0x00E148   43 10 0B 00   Move                r16, r11       r16 = r11 [wait-spawn-npc]
0143   0x00E150   43 31 0F 00   Move                r49, r15       r49 = r15 [#BE622B8D350CB286]
0144   0x00E158   43 32 10 00   Move                r50, r16       r50 = r16 [wait-spawn-npc]
0145   0x00E160   1C 0E 0E 02   CallFf              r14, r14, 2    r14 = tag-boolean(#BE622B8D350CB286, wait-spawn-npc)
0146   0x00E168   1D 0D 0D 0E   IEqual              r13, r13, r14  r13 = r13 [0] == r14 [-1859919198]
L_33:
0147   0x00E170   2F 52 0D 01   BranchIfNot         r13, 0152      IF NOT r13 [0x0] => L_34
0148   0x00E178   15 0D 19 00   LookupPointer       r13, 25        r13 = ST[25] -> <#339811AF23AD2A2E>
0149   0x00E180   43 0E 0B 00   Move                r14, r11       r14 = r11 [wait-spawn-npc]
014A   0x00E188   0C 0F 00 00   LoadU16Imm          r15, 0         r15 = 0
014B   0x00E190   43 31 0E 00   Move                r49, r14       r49 = r14 [wait-spawn-npc]
014C   0x00E198   43 32 0F 00   Move                r50, r15       r50 = r15 [0]
014D   0x00E1A0   1C 0D 0D 02   CallFf              r13, r13, 2    r13 = #339811AF23AD2A2E(wait-spawn-npc, 0)
014E   0x00E1A8   0C 0D 01 00   LoadU16Imm          r13, 1         r13 = 1
014F   0x00E1B0   43 0C 0D 00   Move                r12, r13       r12 = r13 [1]
0150   0x00E1B8   43 0D 0C 00   Move                r13, r12       r13 = r12 [1]
0151   0x00E1C0   2D 53 00 01   Branch              0153           => L_35
L_34:
0152   0x00E1C8   0C 0D 00 00   LoadU16Imm          r13, 0         r13 = 0
L_35:
0153   0x00E1D0   43 0D 06 00   Move                r13, r6        r13 = r6 [0]
0154   0x00E1D8   0C 0E 00 00   LoadU16Imm          r14, 0         r14 = 0
0155   0x00E1E0   21 0D 0D 0E   ILessThanEqual      r13, r13, r14  r13 = r13 [1] <= r14 [0]
0156   0x00E1E8   2F 5C 0D 01   BranchIfNot         r13, 015C      IF NOT r13 [0x1] => L_36
0157   0x00E1F0   15 0D 1A 00   LookupPointer       r13, 26        r13 = ST[26] -> <darray-clear>
0158   0x00E1F8   4A 0E 1B 00   LoadStaticU64Imm    r14, 27        r14 = ST[27] -> <#9C27142D7E9F3555>
0159   0x00E200   43 31 0E 00   Move                r49, r14       r49 = r14 [#9C27142D7E9F3555]
015A   0x00E208   1C 0D 0D 01   CallFf              r13, r13, 1    r13 = darray-clear(#9C27142D7E9F3555)
015B   0x00E210   2D 5D 00 01   Branch              015D           => L_37
L_36:
015C   0x00E218   0C 0D 00 00   LoadU16Imm          r13, 0         r13 = 0
L_37:
015D   0x00E220   15 0D 0B 00   LookupPointer       r13, 11        r13 = ST[11] -> <darray-append>
015E   0x00E228   4A 0E 1C 00   LoadStaticU64Imm    r14, 28        r14 = ST[28] -> <#88F409F4BF0F056A>
015F   0x00E230   15 0F 0C 00   LookupPointer       r15, 12        r15 = ST[12] -> <new-boxed-value>
0160   0x00E238   0C 10 07 00   LoadU16Imm          r16, 7         r16 = 7
0161   0x00E240   43 11 0B 00   Move                r17, r11       r17 = r11 [wait-spawn-npc]
0162   0x00E248   43 31 10 00   Move                r49, r16       r49 = r16 [7]
0163   0x00E250   43 32 11 00   Move                r50, r17       r50 = r17 [wait-spawn-npc]
0164   0x00E258   1C 0F 0F 02   CallFf              r15, r15, 2    r15 = new-boxed-value(7, wait-spawn-npc)
0165   0x00E260   0C 10 01 00   LoadU16Imm          r16, 1         r16 = 1
0166   0x00E268   43 31 0E 00   Move                r49, r14       r49 = r14 [#88F409F4BF0F056A]
0167   0x00E270   43 32 0F 00   Move                r50, r15       r50 = r15 [new-boxed-value()]
0168   0x00E278   43 33 10 00   Move                r51, r16       r51 = r16 [1]
0169   0x00E280   1C 0D 0D 03   CallFf              r13, r13, 3    r13 = darray-append(#88F409F4BF0F056A, new-boxed-value(), 1)
016A   0x00E288   15 0D 0B 00   LookupPointer       r13, 11        r13 = ST[11] -> <darray-append>
016B   0x00E290   4A 0E 1B 00   LoadStaticU64Imm    r14, 27        r14 = ST[27] -> <#9C27142D7E9F3555>
016C   0x00E298   15 0F 0C 00   LookupPointer       r15, 12        r15 = ST[12] -> <new-boxed-value>
016D   0x00E2A0   0C 10 07 00   LoadU16Imm          r16, 7         r16 = 7
016E   0x00E2A8   43 11 0B 00   Move                r17, r11       r17 = r11 [wait-spawn-npc]
016F   0x00E2B0   43 31 10 00   Move                r49, r16       r49 = r16 [7]
0170   0x00E2B8   43 32 11 00   Move                r50, r17       r50 = r17 [wait-spawn-npc]
0171   0x00E2C0   1C 0F 0F 02   CallFf              r15, r15, 2    r15 = new-boxed-value(7, wait-spawn-npc)
0172   0x00E2C8   0C 10 01 00   LoadU16Imm          r16, 1         r16 = 1
0173   0x00E2D0   43 31 0E 00   Move                r49, r14       r49 = r14 [#9C27142D7E9F3555]
0174   0x00E2D8   43 32 0F 00   Move                r50, r15       r50 = r15 [new-boxed-value()]
0175   0x00E2E0   43 33 10 00   Move                r51, r16       r51 = r16 [1]
0176   0x00E2E8   1C 0D 0D 03   CallFf              r13, r13, 3    r13 = darray-append(#9C27142D7E9F3555, new-boxed-value(), 1)
0177   0x00E2F0   15 0D 12 00   LookupPointer       r13, 18        r13 = ST[18] -> <darray-count>
0178   0x00E2F8   4A 0E 1B 00   LoadStaticU64Imm    r14, 27        r14 = ST[27] -> <#9C27142D7E9F3555>
0179   0x00E300   43 31 0E 00   Move                r49, r14       r49 = r14 [#9C27142D7E9F3555]
017A   0x00E308   1C 0D 0D 01   CallFf              r13, r13, 1    r13 = darray-count(#9C27142D7E9F3555)
017B   0x00E310   43 06 0D 00   Move                r6, r13        r6 = r13 [darray-count()]
017C   0x00E318   43 0D 06 00   Move                r13, r6        r13 = r6 [darray-count()]
017D   0x00E320   15 0D 1D 00   LookupPointer       r13, 29        r13 = ST[29] -> <melee-fact-set-bool>
017E   0x00E328   43 0E 0B 00   Move                r14, r11       r14 = r11 [wait-spawn-npc]
017F   0x00E330   4A 0F 1E 00   LoadStaticU64Imm    r15, 30        r15 = ST[30] -> <death-begs-for-life>
0180   0x00E338   0C 10 00 00   LoadU16Imm          r16, 0         r16 = 0
0181   0x00E340   43 31 0E 00   Move                r49, r14       r49 = r14 [wait-spawn-npc]
0182   0x00E348   43 32 0F 00   Move                r50, r15       r50 = r15 [death-begs-for-life]
0183   0x00E350   43 33 10 00   Move                r51, r16       r51 = r16 [0]
0184   0x00E358   1B 0D 0D 03   Call                r13, r13, 3    r13 = melee-fact-set-bool(wait-spawn-npc, death-begs-for-life, 0)
0185   0x00E360   15 0D 1F 00   LookupPointer       r13, 31        r13 = ST[31] -> <npc-stalker?>
0186   0x00E368   43 0E 0B 00   Move                r14, r11       r14 = r11 [wait-spawn-npc]
0187   0x00E370   43 31 0E 00   Move                r49, r14       r49 = r14 [wait-spawn-npc]
0188   0x00E378   1B 0D 0D 01   Call                r13, r13, 1    r13 = npc-stalker?(wait-spawn-npc)
0189   0x00E380   2F 8E 0D 01   BranchIfNot         r13, 018E      IF NOT r13 [npc-stalker?()] => L_38
018A   0x00E388   15 0D 20 00   LookupPointer       r13, 32        r13 = ST[32] -> <#B29628137A15BFFD>
018B   0x00E390   1B 0D 0D 00   Call                r13, r13, 0    r13 = #B29628137A15BFFD()
018C   0x00E398   0C 0E 01 00   LoadU16Imm          r14, 1         r14 = 1
018D   0x00E3A0   1D 0D 0D 0E   IEqual              r13, r13, r14  r13 = r13 [2048245504] == r14 [1]
L_38:
018E   0x00E3A8   2F 96 0D 01   BranchIfNot         r13, 0196      IF NOT r13 [0x7A15BF00] => L_39
018F   0x00E3B0   15 0D 21 00   LookupPointer       r13, 33        r13 = ST[33] -> <send-event>
0190   0x00E3B8   4A 0E 22 00   LoadStaticU64Imm    r14, 34        r14 = ST[34] -> <disable-last-stalker-charge>
0191   0x00E3C0   43 0F 0B 00   Move                r15, r11       r15 = r11 [wait-spawn-npc]
0192   0x00E3C8   43 31 0E 00   Move                r49, r14       r49 = r14 [disable-last-stalker-charge]
0193   0x00E3D0   43 32 0F 00   Move                r50, r15       r50 = r15 [wait-spawn-npc]
0194   0x00E3D8   1C 0D 0D 02   CallFf              r13, r13, 2    r13 = send-event(disable-last-stalker-charge, wait-spawn-npc)
0195   0x00E3E0   2D 97 00 01   Branch              0197           => L_40
L_39:
0196   0x00E3E8   0C 0D 00 00   LoadU16Imm          r13, 0         r13 = 0
L_40:
0197   0x00E3F0   43 0D 05 00   Move                r13, r5        r13 = r5 [string-length()]
0198   0x00E3F8   0C 0E 23 00   LoadU16Imm          r14, 35        r14 = 35
0199   0x00E400   21 0D 0D 0E   ILessThanEqual      r13, r13, r14  r13 = r13 [606273537] <= r14 [35]
019A   0x00E408   2F BD 0D 01   BranchIfNot         r13, 01BD      IF NOT r13 [0x24230001] => L_41
019B   0x00E410   15 0D 0D 00   LookupPointer       r13, 13        r13 = ST[13] -> <is-final-build?>
019C   0x00E418   1C 0D 0D 00   CallFf              r13, r13, 0    r13 = is-final-build?()
019D   0x00E420   30 0D 0D 00   OpLogNot            r13, r13       r13 = !r13 -> <TRUE>
019E   0x00E428   2F BB 0D 01   BranchIfNot         r13, 01BB      IF NOT r13 [0x6620ACB7] => L_42
019F   0x00E430   15 0D 0E 00   LookupPointer       r13, 14        r13 = ST[14] -> <display>
01A0   0x00E438   15 0E 0F 00   LookupPointer       r14, 15        r14 = ST[15] -> <#5445173390656D6D>
01A1   0x00E440   41 0F 23 00   LoadStaticPointerImmr15, 35        r15 = ST[35] -> <0xBF026DC1>
01A2   0x00E448   41 10 11 00   LoadStaticPointerImmr16, 17        r16 = ST[17] -> <0xBF025EFC>
01A3   0x00E450   15 11 09 00   LookupPointer       r17, 9         r17 = ST[9] -> <string-debug>
01A4   0x00E458   43 12 0B 00   Move                r18, r11       r18 = r11 [wait-spawn-npc]
01A5   0x00E460   43 31 12 00   Move                r49, r18       r49 = r18 [wait-spawn-npc]
01A6   0x00E468   1C 11 11 01   CallFf              r17, r17, 1    r17 = string-debug(wait-spawn-npc)
01A7   0x00E470   15 12 09 00   LookupPointer       r18, 9         r18 = ST[9] -> <string-debug>
01A8   0x00E478   43 13 0A 00   Move                r19, r10       r19 = r10 [group-random()]
01A9   0x00E480   43 31 13 00   Move                r49, r19       r49 = r19 [group-random()]
01AA   0x00E488   1C 12 12 01   CallFf              r18, r18, 1    r18 = string-debug(group-random())
01AB   0x00E490   43 13 0C 00   Move                r19, r12       r19 = r12 [1]
01AC   0x00E498   2F AF 13 01   BranchIfNot         r19, 01AF      IF NOT r19 [1] => L_43
01AD   0x00E4A0   41 13 24 00   LoadStaticPointerImmr19, 36        r19 = ST[36] -> <0xBF025F55>
01AE   0x00E4A8   2D B0 00 01   Branch              01B0           => L_44
L_43:
01AF   0x00E4B0   41 13 11 00   LoadStaticPointerImmr19, 17        r19 = ST[17] -> <0xBF025EFC>
L_44:
01B0   0x00E4B8   43 31 0F 00   Move                r49, r15       r49 = r15 [0xBF026DC1]
01B1   0x00E4C0   43 32 10 00   Move                r50, r16       r50 = r16 [0xBF025EFC]
01B2   0x00E4C8   43 33 11 00   Move                r51, r17       r51 = r17 [string-debug()]
01B3   0x00E4D0   43 34 12 00   Move                r52, r18       r52 = r18 [string-debug()]
01B4   0x00E4D8   43 35 13 00   Move                r53, r19       r53 = r19 [0xBF025EFC]
01B5   0x00E4E0   1C 0E 0E 05   CallFf              r14, r14, 5    r14 = #5445173390656D6D(0xBF026DC1, 0xBF025EFC, string-debug(), string-debug(), 0xBF025EFC)
01B6   0x00E4E8   0C 0F 13 00   LoadU16Imm          r15, 19        r15 = 19
01B7   0x00E4F0   43 31 0E 00   Move                r49, r14       r49 = r14 [#5445173390656D6D()]
01B8   0x00E4F8   43 32 0F 00   Move                r50, r15       r50 = r15 [19]
01B9   0x00E500   1C 0D 0D 02   CallFf              r13, r13, 2    r13 = display(#5445173390656D6D(), 19)
01BA   0x00E508   2D BC 00 01   Branch              01BC           => L_45
L_42:
01BB   0x00E510   0C 0D 00 00   LoadU16Imm          r13, 0         r13 = 0
L_45:
01BC   0x00E518   2D 0A 00 02   Branch              020A           => L_46
L_41:
01BD   0x00E520   43 0D 05 00   Move                r13, r5        r13 = r5 [string-length()]
01BE   0x00E528   0C 0E 2D 00   LoadU16Imm          r14, 45        r14 = 45
01BF   0x00E530   21 0D 0D 0E   ILessThanEqual      r13, r13, r14  r13 = r13 [606273537] <= r14 [45]
01C0   0x00E538   2F E3 0D 01   BranchIfNot         r13, 01E3      IF NOT r13 [0x24230001] => L_47
01C1   0x00E540   15 0D 0D 00   LookupPointer       r13, 13        r13 = ST[13] -> <is-final-build?>
01C2   0x00E548   1C 0D 0D 00   CallFf              r13, r13, 0    r13 = is-final-build?()
01C3   0x00E550   30 0D 0D 00   OpLogNot            r13, r13       r13 = !r13 -> <TRUE>
01C4   0x00E558   2F E1 0D 01   BranchIfNot         r13, 01E1      IF NOT r13 [0x6620ACB7] => L_48
01C5   0x00E560   15 0D 0E 00   LookupPointer       r13, 14        r13 = ST[14] -> <display>
01C6   0x00E568   15 0E 0F 00   LookupPointer       r14, 15        r14 = ST[15] -> <#5445173390656D6D>
01C7   0x00E570   41 0F 25 00   LoadStaticPointerImmr15, 37        r15 = ST[37] -> <0xBF026DE8>
01C8   0x00E578   41 10 11 00   LoadStaticPointerImmr16, 17        r16 = ST[17] -> <0xBF025EFC>
01C9   0x00E580   15 11 09 00   LookupPointer       r17, 9         r17 = ST[9] -> <string-debug>
01CA   0x00E588   43 12 0B 00   Move                r18, r11       r18 = r11 [wait-spawn-npc]
01CB   0x00E590   43 31 12 00   Move                r49, r18       r49 = r18 [wait-spawn-npc]
01CC   0x00E598   1C 11 11 01   CallFf              r17, r17, 1    r17 = string-debug(wait-spawn-npc)
01CD   0x00E5A0   15 12 09 00   LookupPointer       r18, 9         r18 = ST[9] -> <string-debug>
01CE   0x00E5A8   43 13 0A 00   Move                r19, r10       r19 = r10 [group-random]
01CF   0x00E5B0   43 31 13 00   Move                r49, r19       r49 = r19 [group-random]
01D0   0x00E5B8   1C 12 12 01   CallFf              r18, r18, 1    r18 = string-debug(group-random)
01D1   0x00E5C0   43 13 0C 00   Move                r19, r12       r19 = r12 [1]
01D2   0x00E5C8   2F D5 13 01   BranchIfNot         r19, 01D5      IF NOT r19 [1] => L_49
01D3   0x00E5D0   41 13 24 00   LoadStaticPointerImmr19, 36        r19 = ST[36] -> <0xBF025F55>
01D4   0x00E5D8   2D D6 00 01   Branch              01D6           => L_50
L_49:
01D5   0x00E5E0   41 13 11 00   LoadStaticPointerImmr19, 17        r19 = ST[17] -> <0xBF025EFC>
L_50:
01D6   0x00E5E8   43 31 0F 00   Move                r49, r15       r49 = r15 [0xBF026DE8]
01D7   0x00E5F0   43 32 10 00   Move                r50, r16       r50 = r16 [0xBF025EFC]
01D8   0x00E5F8   43 33 11 00   Move                r51, r17       r51 = r17 [string-debug()]
01D9   0x00E600   43 34 12 00   Move                r52, r18       r52 = r18 [string-debug()]
01DA   0x00E608   43 35 13 00   Move                r53, r19       r53 = r19 [0xBF025EFC]
01DB   0x00E610   1C 0E 0E 05   CallFf              r14, r14, 5    r14 = #5445173390656D6D(0xBF026DE8, 0xBF025EFC, string-debug(), string-debug(), 0xBF025EFC)
01DC   0x00E618   0C 0F 13 00   LoadU16Imm          r15, 19        r15 = 19
01DD   0x00E620   43 31 0E 00   Move                r49, r14       r49 = r14 [#5445173390656D6D()]
01DE   0x00E628   43 32 0F 00   Move                r50, r15       r50 = r15 [19]
01DF   0x00E630   1C 0D 0D 02   CallFf              r13, r13, 2    r13 = display(#5445173390656D6D(), 19)
01E0   0x00E638   2D E2 00 01   Branch              01E2           => L_51
L_48:
01E1   0x00E640   0C 0D 00 00   LoadU16Imm          r13, 0         r13 = 0
L_51:
01E2   0x00E648   2D 0A 00 02   Branch              020A           => L_46
L_47:
01E3   0x00E650   43 0D 05 00   Move                r13, r5        r13 = r5 [string-length()]
01E4   0x00E658   0C 0E 2E 00   LoadU16Imm          r14, 46        r14 = 46
01E5   0x00E660   1F 0D 0D 0E   IGreaterThanEqual   r13, r13, r14  r13 = r13 [606273536] >= r14 [46]
01E6   0x00E668   2F 09 0D 02   BranchIfNot         r13, 0209      IF NOT r13 [0x24230000] => L_52
01E7   0x00E670   15 0D 0D 00   LookupPointer       r13, 13        r13 = ST[13] -> <is-final-build?>
01E8   0x00E678   1C 0D 0D 00   CallFf              r13, r13, 0    r13 = is-final-build?()
01E9   0x00E680   30 0D 0D 00   OpLogNot            r13, r13       r13 = !r13 -> <TRUE>
01EA   0x00E688   2F 07 0D 02   BranchIfNot         r13, 0207      IF NOT r13 [0x6620ACB7] => L_53
01EB   0x00E690   15 0D 0E 00   LookupPointer       r13, 14        r13 = ST[14] -> <display>
01EC   0x00E698   15 0E 0F 00   LookupPointer       r14, 15        r14 = ST[15] -> <#5445173390656D6D>
01ED   0x00E6A0   41 0F 26 00   LoadStaticPointerImmr15, 38        r15 = ST[38] -> <0xBF026E0F>
01EE   0x00E6A8   41 10 11 00   LoadStaticPointerImmr16, 17        r16 = ST[17] -> <0xBF025EFC>
01EF   0x00E6B0   15 11 09 00   LookupPointer       r17, 9         r17 = ST[9] -> <string-debug>
01F0   0x00E6B8   43 12 0B 00   Move                r18, r11       r18 = r11 [wait-spawn-npc]
01F1   0x00E6C0   43 31 12 00   Move                r49, r18       r49 = r18 [wait-spawn-npc]
01F2   0x00E6C8   1C 11 11 01   CallFf              r17, r17, 1    r17 = string-debug(wait-spawn-npc)
01F3   0x00E6D0   15 12 09 00   LookupPointer       r18, 9         r18 = ST[9] -> <string-debug>
01F4   0x00E6D8   43 13 0A 00   Move                r19, r10       r19 = r10 [group-random]
01F5   0x00E6E0   43 31 13 00   Move                r49, r19       r49 = r19 [group-random]
01F6   0x00E6E8   1C 12 12 01   CallFf              r18, r18, 1    r18 = string-debug(group-random)
01F7   0x00E6F0   43 13 0C 00   Move                r19, r12       r19 = r12 [1]
01F8   0x00E6F8   2F FB 13 01   BranchIfNot         r19, 01FB      IF NOT r19 [1] => L_54
01F9   0x00E700   41 13 24 00   LoadStaticPointerImmr19, 36        r19 = ST[36] -> <0xBF025F55>
01FA   0x00E708   2D FC 00 01   Branch              01FC           => L_55
L_54:
01FB   0x00E710   41 13 11 00   LoadStaticPointerImmr19, 17        r19 = ST[17] -> <0xBF025EFC>
L_55:
01FC   0x00E718   43 31 0F 00   Move                r49, r15       r49 = r15 [0xBF026E0F]
01FD   0x00E720   43 32 10 00   Move                r50, r16       r50 = r16 [0xBF025EFC]
01FE   0x00E728   43 33 11 00   Move                r51, r17       r51 = r17 [string-debug()]
01FF   0x00E730   43 34 12 00   Move                r52, r18       r52 = r18 [string-debug()]
0200   0x00E738   43 35 13 00   Move                r53, r19       r53 = r19 [0xBF025EFC]
0201   0x00E740   1C 0E 0E 05   CallFf              r14, r14, 5    r14 = #5445173390656D6D(0xBF026E0F, 0xBF025EFC, string-debug(), string-debug(), 0xBF025EFC)
0202   0x00E748   0C 0F 13 00   LoadU16Imm          r15, 19        r15 = 19
0203   0x00E750   43 31 0E 00   Move                r49, r14       r49 = r14 [#5445173390656D6D()]
0204   0x00E758   43 32 0F 00   Move                r50, r15       r50 = r15 [19]
0205   0x00E760   1C 0D 0D 02   CallFf              r13, r13, 2    r13 = display(#5445173390656D6D(), 19)
0206   0x00E768   2D 08 00 02   Branch              0208           => L_56
L_53:
0207   0x00E770   0C 0D 00 00   LoadU16Imm          r13, 0         r13 = 0
L_56:
0208   0x00E778   2D 0A 00 02   Branch              020A           => L_46
L_52:
0209   0x00E780   0C 0D 00 00   LoadU16Imm          r13, 0         r13 = 0
L_46:
020A   0x00E788   2D 2D 00 02   Branch              022D           => L_57
L_32:
020B   0x00E790   15 0D 0D 00   LookupPointer       r13, 13        r13 = ST[13] -> <is-final-build?>
020C   0x00E798   1C 0D 0D 00   CallFf              r13, r13, 0    r13 = is-final-build?()
020D   0x00E7A0   30 0D 0D 00   OpLogNot            r13, r13       r13 = !r13 -> <TRUE>
020E   0x00E7A8   2F 20 0D 02   BranchIfNot         r13, 0220      IF NOT r13 [0x6620ACB7] => L_58
020F   0x00E7B0   15 0D 0E 00   LookupPointer       r13, 14        r13 = ST[14] -> <display>
0210   0x00E7B8   15 0E 0F 00   LookupPointer       r14, 15        r14 = ST[15] -> <#5445173390656D6D>
0211   0x00E7C0   41 0F 27 00   LoadStaticPointerImmr15, 39        r15 = ST[39] -> <0xBF026D31>
0212   0x00E7C8   41 10 11 00   LoadStaticPointerImmr16, 17        r16 = ST[17] -> <0xBF025EFC>
0213   0x00E7D0   15 11 09 00   LookupPointer       r17, 9         r17 = ST[9] -> <string-debug>
0214   0x00E7D8   43 12 08 00   Move                r18, r8        r18 = r8 [0]
0215   0x00E7E0   43 31 12 00   Move                r49, r18       r49 = r18 [0]
0216   0x00E7E8   1C 11 11 01   CallFf              r17, r17, 1    r17 = string-debug(0)
0217   0x00E7F0   43 31 0F 00   Move                r49, r15       r49 = r15 [0xBF026D31]
0218   0x00E7F8   43 32 10 00   Move                r50, r16       r50 = r16 [0xBF025EFC]
0219   0x00E800   43 33 11 00   Move                r51, r17       r51 = r17 [string-debug()]
021A   0x00E808   1C 0E 0E 03   CallFf              r14, r14, 3    r14 = #5445173390656D6D(0xBF026D31, 0xBF025EFC, string-debug())
021B   0x00E810   0C 0F 13 00   LoadU16Imm          r15, 19        r15 = 19
021C   0x00E818   43 31 0E 00   Move                r49, r14       r49 = r14 [#5445173390656D6D()]
021D   0x00E820   43 32 0F 00   Move                r50, r15       r50 = r15 [19]
021E   0x00E828   1C 0D 0D 02   CallFf              r13, r13, 2    r13 = display(#5445173390656D6D(), 19)
021F   0x00E830   2D 21 00 02   Branch              0221           => L_59
L_58:
0220   0x00E838   0C 0D 00 00   LoadU16Imm          r13, 0         r13 = 0
L_59:
0221   0x00E840   15 0D 28 00   LookupPointer       r13, 40        r13 = ST[40] -> <display-error>
0222   0x00E848   15 0E 0F 00   LookupPointer       r14, 15        r14 = ST[15] -> <#5445173390656D6D>
0223   0x00E850   41 0F 29 00   LoadStaticPointerImmr15, 41        r15 = ST[41] -> <0xBF0272E0>
0224   0x00E858   15 10 09 00   LookupPointer       r16, 9         r16 = ST[9] -> <string-debug>
0225   0x00E860   43 11 08 00   Move                r17, r8        r17 = r8 [0]
0226   0x00E868   43 31 11 00   Move                r49, r17       r49 = r17 [0]
0227   0x00E870   1C 10 10 01   CallFf              r16, r16, 1    r16 = string-debug(0)
0228   0x00E878   43 31 0F 00   Move                r49, r15       r49 = r15 [0xBF0272E0]
0229   0x00E880   43 32 10 00   Move                r50, r16       r50 = r16 [string-debug()]
022A   0x00E888   1C 0E 0E 02   CallFf              r14, r14, 2    r14 = #5445173390656D6D(0xBF0272E0, string-debug())
022B   0x00E890   43 31 0E 00   Move                r49, r14       r49 = r14 [#5445173390656D6D()]
022C   0x00E898   1C 0D 0D 01   CallFf              r13, r13, 1    r13 = display-error(#5445173390656D6D())
L_57:
022D   0x00E8A0   15 0D 2A 00   LookupPointer       r13, 42        r13 = ST[42] -> <wait-one-frame>
022E   0x00E8A8   1C 0D 0D 00   CallFf              r13, r13, 0    r13 = wait-one-frame()
022F   0x00E8B0   43 0D 0D 00   Move                r13, r13       r13 = r13 [wait-one-frame()]
0230   0x00E8B8   43 0C 0D 00   Move                r12, r13       r12 = r13 [wait-one-frame]
0231   0x00E8C0   43 0B 0C 00   Move                r11, r12       r11 = r12 [wait-one-frame]
0232   0x00E8C8   43 0A 0B 00   Move                r10, r11       r10 = r11 [wait-one-frame]
0233   0x00E8D0   43 09 0A 00   Move                r9, r10        r9 = r10 [wait-one-frame]
0234   0x00E8D8   43 08 09 00   Move                r8, r9         r8 = r9 [wait-one-frame]
0235   0x00E8E0   43 08 07 00   Move                r8, r7         r8 = r7 [0]
0236   0x00E8E8   0C 09 01 00   LoadU16Imm          r9, 1          r9 = 1
0237   0x00E8F0   01 08 08 09   IAdd                r8, r8, r9     1 = 0 + 1
0238   0x00E8F8   43 07 08 00   Move                r7, r8         r7 = r8 [1]
0239   0x00E900   43 08 07 00   Move                r8, r7         r8 = r7 [1]
023A   0x00E908   2D B8 00 00   Branch              00B8           => L_60
L_15:
023B   0x00E910   43 07 08 00   Move                r7, r8         r7 = r8 [1]
023C   0x00E918   15 07 0D 00   LookupPointer       r7, 13         r7 = ST[13] -> <is-final-build?>
023D   0x00E920   1C 07 07 00   CallFf              r7, r7, 0      r7 = is-final-build?()
023E   0x00E928   30 07 07 00   OpLogNot            r7, r7         r7 = !r7 -> <TRUE>
023F   0x00E930   2F 51 07 02   BranchIfNot         r7, 0251       IF NOT r7 [0x6620ACB7] => L_61
0240   0x00E938   15 07 0E 00   LookupPointer       r7, 14         r7 = ST[14] -> <display>
0241   0x00E940   15 08 0F 00   LookupPointer       r8, 15         r8 = ST[15] -> <#5445173390656D6D>
0242   0x00E948   41 09 2B 00   LoadStaticPointerImmr9, 43         r9 = ST[43] -> <0xBF0267CD>
0243   0x00E950   41 0A 11 00   LoadStaticPointerImmr10, 17        r10 = ST[17] -> <0xBF025EFC>
0244   0x00E958   15 0B 12 00   LookupPointer       r11, 18        r11 = ST[18] -> <darray-count>
0245   0x00E960   4A 0C 1C 00   LoadStaticU64Imm    r12, 28        r12 = ST[28] -> <#88F409F4BF0F056A>
0246   0x00E968   43 31 0C 00   Move                r49, r12       r49 = r12 [#88F409F4BF0F056A]
0247   0x00E970   1C 0B 0B 01   CallFf              r11, r11, 1    r11 = darray-count(#88F409F4BF0F056A)
0248   0x00E978   43 31 09 00   Move                r49, r9        r49 = r9 [0xBF0267CD]
0249   0x00E980   43 32 0A 00   Move                r50, r10       r50 = r10 [0xBF025EFC]
024A   0x00E988   43 33 0B 00   Move                r51, r11       r51 = r11 [darray-count()]
024B   0x00E990   1C 08 08 03   CallFf              r8, r8, 3      r8 = #5445173390656D6D(0xBF0267CD, 0xBF025EFC, darray-count())
024C   0x00E998   0C 09 13 00   LoadU16Imm          r9, 19         r9 = 19
024D   0x00E9A0   43 31 08 00   Move                r49, r8        r49 = r8 [#5445173390656D6D()]
024E   0x00E9A8   43 32 09 00   Move                r50, r9        r50 = r9 [19]
024F   0x00E9B0   1C 07 07 02   CallFf              r7, r7, 2      r7 = display(#5445173390656D6D(), 19)
0250   0x00E9B8   2D 52 00 02   Branch              0252           => L_62
L_61:
0251   0x00E9C0   0C 07 00 00   LoadU16Imm          r7, 0          r7 = 0
L_62:
0252   0x00E9C8   15 07 2C 00   LookupPointer       r7, 44         r7 = ST[44] -> <darray-destroy>
0253   0x00E9D0   43 08 03 00   Move                r8, r3         r8 = r3 [darray-create()]
0254   0x00E9D8   43 31 08 00   Move                r49, r8        r49 = r8 [darray-create()]
0255   0x00E9E0   1C 07 07 01   CallFf              r7, r7, 1      r7 = darray-destroy(darray-create())
0256   0x00E9E8   15 07 2C 00   LookupPointer       r7, 44         r7 = ST[44] -> <darray-destroy>
0257   0x00E9F0   43 08 02 00   Move                r8, r2         r8 = r2 [darray-create()]
0258   0x00E9F8   43 31 08 00   Move                r49, r8        r49 = r8 [darray-create()]
0259   0x00EA00   1C 07 07 01   CallFf              r7, r7, 1      r7 = darray-destroy(darray-create())
025A   0x00EA08   43 07 07 00   Move                r7, r7         r7 = r7 [darray-destroy()]
025B   0x00EA10   43 06 07 00   Move                r6, r7         r6 = r7 [darray-destroy]
025C   0x00EA18   43 05 06 00   Move                r5, r6         r5 = r6 [darray-destroy]
025D   0x00EA20   43 04 05 00   Move                r4, r5         r4 = r5 [darray-destroy]
025E   0x00EA28   43 03 04 00   Move                r3, r4         r3 = r4 [darray-destroy]
025F   0x00EA30   43 02 03 00   Move                r2, r3         r2 = r3 [darray-destroy]
0260   0x00EA38   43 01 02 00   Move                r1, r2         r1 = r2 [darray-destroy]
0261   0x00EA40   43 00 01 00   Move                r0, r1         r0 = r1 [darray-destroy]
0262   0x00EA48   00 00 00 00   Return              r0             Return darray-destroy
SYMBOL TABLE: 
0000   0x00EA50    POINTER <get-symbol>
0001   0x00EA58    SID <#FDCBB431C41579BC>
0002   0x00EA60    SID <self>
0003   0x00EA68    POINTER <darray-create>
0004   0x00EA70    INT <-1>
0005   0x00EA78    SID <#FE0CDBDD4CC9DFAD>
0006   0x00EA80    POINTER <hash-lookup>
0007   0x00EA88    POINTER <#58A146443FB1E1D4>
0008   0x00EA90    POINTER <string-length>
0009   0x00EA98    POINTER <string-debug>
000A   0x00EAA0    POINTER <#1BE229BC2DFB8FBB>
000B   0x00EAA8    POINTER <darray-append>
000C   0x00EAB0    POINTER <new-boxed-value>
000D   0x00EAB8    POINTER <is-final-build?>
000E   0x00EAC0    POINTER <display>
000F   0x00EAC8    POINTER <#5445173390656D6D>
0010   0x00EAD0    POINTER <#00000282BF0267A8>
0011   0x00EAD8    POINTER <#00000282BF025EFC>
0012   0x00EAE0    POINTER <darray-count>
0013   0x00EAE8    POINTER <darray-at>
0014   0x00EAF0    POINTER <group-random>
0015   0x00EAF8    POINTER <wait-spawn-npc>
0016   0x00EB00    POINTER <tag-specified?>
0017   0x00EB08    SID <#BE622B8D350CB286>
0018   0x00EB10    POINTER <tag-boolean>
0019   0x00EB18    POINTER <#339811AF23AD2A2E>
001A   0x00EB20    POINTER <darray-clear>
001B   0x00EB28    SID <#9C27142D7E9F3555>
001C   0x00EB30    SID <#88F409F4BF0F056A>
001D   0x00EB38    POINTER <melee-fact-set-bool>
001E   0x00EB40    SID <death-begs-for-life>
001F   0x00EB48    POINTER <npc-stalker?>
0020   0x00EB50    POINTER <#B29628137A15BFFD>
0021   0x00EB58    POINTER <send-event>
0022   0x00EB60    SID <disable-last-stalker-charge>
0023   0x00EB68    POINTER <#00000282BF026DC1>
0024   0x00EB70    POINTER <#00000282BF025F55>
0025   0x00EB78    POINTER <#00000282BF026DE8>
0026   0x00EB80    POINTER <#00000282BF026E0F>
0027   0x00EB88    POINTER <#00000282BF026D31>
0028   0x00EB90    POINTER <display-error>
0029   0x00EB98    POINTER <#00000282BF0272E0>
002A   0x00EBA0    POINTER <wait-one-frame>
002B   0x00EBA8    POINTER <#00000282BF0267CD>
002C   0x00EBB0    POINTER <darray-destroy>
0000   0x01A290   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <go>
0001   0x01A298   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <set-npc-awareness>
0002   0x01A2A0   0C 02 01 00   LoadU16Imm          r2, 1          r2 = 1
0003   0x01A2A8   43 31 01 00   Move                r49, r1        r49 = r1 [set-npc-awareness]
0004   0x01A2B0   43 32 02 00   Move                r50, r2        r50 = r2 [1]
0005   0x01A2B8   1C 00 00 02   CallFf              r0, r0, 2      r0 = go(set-npc-awareness, 1)
0006   0x01A2C0   00 00 00 00   Return              r0             Return go()
SYMBOL TABLE: 
0000   0x01A2C8    POINTER <go>
0001   0x01A2D0    SID <set-npc-awareness>
      STATE set-npc-awareness:
         ON start
          TRACK main:
0000   0x0146E8   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <is-final-build?>
0001   0x0146F0   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0002   0x0146F8   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0003   0x014700   2F 0E 00 00   BranchIfNot         r0, 000E       IF NOT r0 [0x6620ACB7] => L_0
0004   0x014708   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <display>
0005   0x014710   15 01 02 00   LookupPointer       r1, 2          r1 = ST[2] -> <#5445173390656D6D>
0006   0x014718   41 02 03 00   LoadStaticPointerImmr2, 3          r2 = ST[3] -> <0xBF0270CE>
0007   0x014720   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF0270CE]
0008   0x014728   1C 01 01 01   CallFf              r1, r1, 1      r1 = #5445173390656D6D(0xBF0270CE)
0009   0x014730   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
000A   0x014738   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
000B   0x014740   43 32 02 00   Move                r50, r2        r50 = r2 [19]
000C   0x014748   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
000D   0x014750   2D 0F 00 00   Branch              000F           => L_RETURN
L_0:
000E   0x014758   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
000F   0x014760   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x014768    POINTER <is-final-build?>
0001   0x014770    POINTER <display>
0002   0x014778    POINTER <#5445173390656D6D>
0003   0x014780    POINTER <#00000282BF0270CE>
0000   0x0102E0   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <#03065977E96463A2>
0001   0x0102E8   15 01 01 00   LookupPointer       r1, 1          r1 = ST[1] -> <get-svar>
0002   0x0102F0   4A 02 02 00   LoadStaticU64Imm    r2, 2          r2 = ST[2] -> <#47CB08FCD5FE82DB>
0003   0x0102F8   43 31 02 00   Move                r49, r2        r49 = r2 [#47CB08FCD5FE82DB]
0004   0x010300   1B 01 01 01   Call                r1, r1, 1      r1 = get-svar(#47CB08FCD5FE82DB)
0005   0x010308   43 31 01 00   Move                r49, r1        r49 = r1 [get-svar()]
0006   0x010310   1B 00 00 01   Call                r0, r0, 1      r0 = #03065977E96463A2(get-svar())
0007   0x010318   15 01 03 00   LookupPointer       r1, 3          r1 = ST[3] -> <get-symbol>
0008   0x010320   4A 02 04 00   LoadStaticU64Imm    r2, 4          r2 = ST[4] -> <#F4BB1A242FE97D63>
0009   0x010328   4A 03 05 00   LoadStaticU64Imm    r3, 5          r3 = ST[5] -> <self>
000A   0x010330   43 31 02 00   Move                r49, r2        r49 = r2 [#F4BB1A242FE97D63]
000B   0x010338   43 32 03 00   Move                r50, r3        r50 = r3 [self]
000C   0x010340   1C 01 01 02   CallFf              r1, r1, 2      r1 = get-symbol(#F4BB1A242FE97D63, self)
000D   0x010348   15 02 03 00   LookupPointer       r2, 3          r2 = ST[3] -> <get-symbol>
000E   0x010350   4A 03 06 00   LoadStaticU64Imm    r3, 6          r3 = ST[6] -> <#FB88BDBA9A4B5DAA>
000F   0x010358   4A 04 05 00   LoadStaticU64Imm    r4, 5          r4 = ST[5] -> <self>
0010   0x010360   43 31 03 00   Move                r49, r3        r49 = r3 [#FB88BDBA9A4B5DAA]
0011   0x010368   43 32 04 00   Move                r50, r4        r50 = r4 [self]
0012   0x010370   1C 02 02 02   CallFf              r2, r2, 2      r2 = get-symbol(#FB88BDBA9A4B5DAA, self)
0013   0x010378   15 03 07 00   LookupPointer       r3, 7          r3 = ST[7] -> <#B96C7EEF7ACAB122>
0014   0x010380   2F 1B 03 00   BranchIfNot         r3, 001B       IF NOT r3 [0x7ACAB122] => L_0
0015   0x010388   15 03 07 01   LookupPointer       r3, 7          r3 = ST[7] -> <#B96C7EEF7ACAB122>
0016   0x010390   5D 03 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0017   0x010398   3B 03 03 1C   IAddImm             r3, r3, 28     r3 = r3 [-1621296570] / 28 -> <-1621296570>
0018   0x0103A0   4F 03 03 00   LoadI32             ???            UNKNOWN INSTRUCTION
0019   0x0103A8   3F 04 08 00   LoadStaticI32Imm    r4, 8          r4 = ST[8] -> <-1>
001A   0x0103B0   1E 03 03 04   IGreaterThan        r3, r3, r4     r3 = r3 [-1621296640] > r4 [-1]
L_0:
001B   0x0103B8   2F 22 03 00   BranchIfNot         r3, 0022       IF NOT r3 [0x9F5CFA00] => L_1
001C   0x0103C0   15 03 07 01   LookupPointer       r3, 7          r3 = ST[7] -> <#B96C7EEF7ACAB122>
001D   0x0103C8   5D 03 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
001E   0x0103D0   3B 03 03 20   IAddImm             r3, r3, 32     r3 = r3 [2060103970] / 32 -> <2060103970>
001F   0x0103D8   4F 03 03 00   LoadI32             ???            UNKNOWN INSTRUCTION
0020   0x0103E0   0C 04 00 00   LoadU16Imm          r4, 0          r4 = 0
0021   0x0103E8   1E 03 03 04   IGreaterThan        r3, r3, r4     r3 = r3 [2060103937] > r4 [0]
L_1:
0022   0x0103F0   2F 69 03 00   BranchIfNot         r3, 0069       IF NOT r3 [0x7ACAB101] => L_2
0023   0x0103F8   15 03 09 00   LookupPointer       r3, 9          r3 = ST[9] -> <is-final-build?>
0024   0x010400   1C 03 03 00   CallFf              r3, r3, 0      r3 = is-final-build?()
0025   0x010408   30 03 03 00   OpLogNot            r3, r3         r3 = !r3 -> <TRUE>
0026   0x010410   2F 33 03 00   BranchIfNot         r3, 0033       IF NOT r3 [0x6620ACB7] => L_3
0027   0x010418   15 03 0A 00   LookupPointer       r3, 10         r3 = ST[10] -> <display>
0028   0x010420   15 04 0B 00   LookupPointer       r4, 11         r4 = ST[11] -> <#5445173390656D6D>
0029   0x010428   41 05 0C 00   LoadStaticPointerImmr5, 12         r5 = ST[12] -> <0xBF0268C3>
002A   0x010430   41 06 0D 00   LoadStaticPointerImmr6, 13         r6 = ST[13] -> <0xBF025EFC>
002B   0x010438   43 31 05 00   Move                r49, r5        r49 = r5 [0xBF0268C3]
002C   0x010440   43 32 06 00   Move                r50, r6        r50 = r6 [0xBF025EFC]
002D   0x010448   1C 04 04 02   CallFf              r4, r4, 2      r4 = #5445173390656D6D(0xBF0268C3, 0xBF025EFC)
002E   0x010450   0C 05 13 00   LoadU16Imm          r5, 19         r5 = 19
002F   0x010458   43 31 04 00   Move                r49, r4        r49 = r4 [#5445173390656D6D()]
0030   0x010460   43 32 05 00   Move                r50, r5        r50 = r5 [19]
0031   0x010468   1C 03 03 02   CallFf              r3, r3, 2      r3 = display(#5445173390656D6D(), 19)
0032   0x010470   2D 34 00 00   Branch              0034           => L_4
L_3:
0033   0x010478   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
L_4:
0034   0x010480   15 03 07 01   LookupPointer       r3, 7          r3 = ST[7] -> <#B96C7EEF7ACAB122>
0035   0x010488   5D 03 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0036   0x010490   3B 03 03 1C   IAddImm             r3, r3, 28     r3 = r3 [-1621296570] / 28 -> <-1621296570>
0037   0x010498   4F 03 03 00   LoadI32             ???            UNKNOWN INSTRUCTION
0038   0x0104A0   0C 04 00 00   LoadU16Imm          r4, 0          r4 = 0
0039   0x0104A8   1E 03 03 04   IGreaterThan        r3, r3, r4     r3 = r3 [-1621296639] > r4 [0]
003A   0x0104B0   2F 57 03 00   BranchIfNot         r3, 0057       IF NOT r3 [0x9F5CFA01] => L_5
003B   0x0104B8   15 03 0E 00   LookupPointer       r3, 14         r3 = ST[14] -> <send-event>
003C   0x0104C0   4A 04 0F 00   LoadStaticU64Imm    r4, 15         r4 = ST[15] -> <#4BD8DC7CFB99D3AC>
003D   0x0104C8   4A 05 05 00   LoadStaticU64Imm    r5, 5          r5 = ST[5] -> <self>
003E   0x0104D0   15 06 10 00   LookupPointer       r6, 16         r6 = ST[16] -> <new-boxed-value>
003F   0x0104D8   0C 07 02 00   LoadU16Imm          r7, 2          r7 = 2
0040   0x0104E0   15 08 07 01   LookupPointer       r8, 7          r8 = ST[7] -> <#B96C7EEF7ACAB122>
0041   0x0104E8   5D 08 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0042   0x0104F0   3B 08 08 1C   IAddImm             r8, r8, 28     r8 = r8 [-1621296570] / 28 -> <-1621296570>
0043   0x0104F8   4F 08 08 00   LoadI32             ???            UNKNOWN INSTRUCTION
0044   0x010500   43 31 07 00   Move                r49, r7        r49 = r7 [2]
0045   0x010508   43 32 08 00   Move                r50, r8        r50 = r8 [-1621296570]
0046   0x010510   1C 06 06 02   CallFf              r6, r6, 2      r6 = new-boxed-value(2, -1621296570)
0047   0x010518   15 07 10 00   LookupPointer       r7, 16         r7 = ST[16] -> <new-boxed-value>
0048   0x010520   0C 08 06 00   LoadU16Imm          r8, 6          r8 = 6
0049   0x010528   15 09 07 01   LookupPointer       r9, 7          r9 = ST[7] -> <#B96C7EEF7ACAB122>
004A   0x010530   5D 09 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
004B   0x010538   3B 09 09 20   IAddImm             r9, r9, 32     r9 = r9 [2060103970] / 32 -> <2060103970>
004C   0x010540   4F 09 09 00   LoadI32             ???            UNKNOWN INSTRUCTION
004D   0x010548   1A 09 09 00   CastFloat           r9, r9         r9 = float(r9) -> <1324717410> => <2060103936.000000>
004E   0x010550   43 31 08 00   Move                r49, r8        r49 = r8 [6]
004F   0x010558   43 32 09 00   Move                r50, r9        r50 = r9 [0x4EF59562]
0050   0x010560   1C 07 07 02   CallFf              r7, r7, 2      r7 = new-boxed-value(6, 0x4EF59562)
0051   0x010568   43 31 04 00   Move                r49, r4        r49 = r4 [#4BD8DC7CFB99D3AC]
0052   0x010570   43 32 05 00   Move                r50, r5        r50 = r5 [self]
0053   0x010578   43 33 06 00   Move                r51, r6        r51 = r6 [new-boxed-value()]
0054   0x010580   43 34 07 00   Move                r52, r7        r52 = r7 [new-boxed-value()]
0055   0x010588   1C 03 03 04   CallFf              r3, r3, 4      r3 = send-event(#4BD8DC7CFB99D3AC, self, new-boxed-value(), new-boxed-value())
0056   0x010590   2D 68 00 00   Branch              0068           => L_6
L_5:
0057   0x010598   15 03 09 00   LookupPointer       r3, 9          r3 = ST[9] -> <is-final-build?>
0058   0x0105A0   1C 03 03 00   CallFf              r3, r3, 0      r3 = is-final-build?()
0059   0x0105A8   30 03 03 00   OpLogNot            r3, r3         r3 = !r3 -> <TRUE>
005A   0x0105B0   2F 67 03 00   BranchIfNot         r3, 0067       IF NOT r3 [0x6620ACB7] => L_7
005B   0x0105B8   15 03 0A 00   LookupPointer       r3, 10         r3 = ST[10] -> <display>
005C   0x0105C0   15 04 0B 00   LookupPointer       r4, 11         r4 = ST[11] -> <#5445173390656D6D>
005D   0x0105C8   41 05 11 00   LoadStaticPointerImmr5, 17         r5 = ST[17] -> <0xBF026D93>
005E   0x0105D0   41 06 0D 00   LoadStaticPointerImmr6, 13         r6 = ST[13] -> <0xBF025EFC>
005F   0x0105D8   43 31 05 00   Move                r49, r5        r49 = r5 [0xBF026D93]
0060   0x0105E0   43 32 06 00   Move                r50, r6        r50 = r6 [0xBF025EFC]
0061   0x0105E8   1C 04 04 02   CallFf              r4, r4, 2      r4 = #5445173390656D6D(0xBF026D93, 0xBF025EFC)
0062   0x0105F0   0C 05 13 00   LoadU16Imm          r5, 19         r5 = 19
0063   0x0105F8   43 31 04 00   Move                r49, r4        r49 = r4 [#5445173390656D6D()]
0064   0x010600   43 32 05 00   Move                r50, r5        r50 = r5 [19]
0065   0x010608   1C 03 03 02   CallFf              r3, r3, 2      r3 = display(#5445173390656D6D(), 19)
0066   0x010610   2D 68 00 00   Branch              0068           => L_6
L_7:
0067   0x010618   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
L_6:
0068   0x010620   2D E3 00 01   Branch              01E3           => L_8
L_2:
0069   0x010628   43 03 00 00   Move                r3, r0         r3 = r0 [#03065977E96463A2]
006A   0x010630   2F 71 03 00   BranchIfNot         r3, 0071       IF NOT r3 [#03065977E96463A2] => L_9
006B   0x010638   15 03 12 00   LookupPointer       r3, 18         r3 = ST[18] -> <get-boolean>
006C   0x010640   4A 04 13 00   LoadStaticU64Imm    r4, 19         r4 = ST[19] -> <#B0E4DDF4A79D13AC>
006D   0x010648   4A 05 14 00   LoadStaticU64Imm    r5, 20         r5 = ST[20] -> <ss-wave-manager-level-set-loader-1>
006E   0x010650   43 31 04 00   Move                r49, r4        r49 = r4 [#B0E4DDF4A79D13AC]
006F   0x010658   43 32 05 00   Move                r50, r5        r50 = r5 [ss-wave-manager-level-set-loader-1]
0070   0x010660   1C 03 03 02   CallFf              r3, r3, 2      r3 = get-boolean(#B0E4DDF4A79D13AC, ss-wave-manager-level-set-loader-1)
L_9:
0071   0x010668   2F 3F 03 01   BranchIfNot         r3, 013F       IF NOT r3 [get-boolean()] => L_10
0072   0x010670   43 03 00 00   Move                r3, r0         r3 = r0 [#03065977E96463A2]
0073   0x010678   5D 03 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0074   0x010680   3B 03 03 18   IAddImm             r3, r3, 24     r3 = r3 [-379296862] / 24 -> <-379296862>
0075   0x010688   4F 03 03 00   LoadI32             ???            UNKNOWN INSTRUCTION
0076   0x010690   43 04 00 00   Move                r4, r0         r4 = r0 [#03065977E96463A2]
0077   0x010698   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0078   0x0106A0   3B 04 04 1C   IAddImm             r4, r4, 28     r4 = r4 [-379296862] / 28 -> <-379296862>
0079   0x0106A8   0E 04 04 00   LoadFloat           r4, [r4]       r4 = [0x0 + 0x0]
007A   0x0106B0   43 05 00 00   Move                r5, r0         r5 = r0 [#03065977E96463A2]
007B   0x0106B8   5D 05 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
007C   0x0106C0   50 05 05 00   LoadI64             r5, [r5]       r5 = [0x0 + 0x0]
007D   0x0106C8   43 06 00 00   Move                r6, r0         r6 = r0 [#03065977E96463A2]
007E   0x0106D0   5D 06 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
007F   0x0106D8   3B 06 06 08   IAddImm             r6, r6, 8      r6 = r6 [-379296862] / 8 -> <-379296862>
0080   0x0106E0   50 06 06 00   LoadI64             r6, [r6]       r6 = [0x0 + 0x0]
0081   0x0106E8   43 07 00 00   Move                r7, r0         r7 = r0 [#03065977E96463A2]
0082   0x0106F0   5D 07 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0083   0x0106F8   3B 07 07 20   IAddImm             r7, r7, 32     r7 = r7 [-379296862] / 32 -> <-379296862>
0084   0x010700   4C 07 07 00   LoadU8              ???            UNKNOWN INSTRUCTION
0085   0x010708   43 08 00 00   Move                r8, r0         r8 = r0 [#03065977E96463A2]
0086   0x010710   5D 08 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0087   0x010718   3B 08 08 21   IAddImm             r8, r8, 33     r8 = r8 [-379296862] / 33 -> <-379296862>
0088   0x010720   4C 08 08 00   LoadU8              ???            UNKNOWN INSTRUCTION
0089   0x010728   15 09 15 00   LookupPointer       r9, 21         r9 = ST[21] -> <get-int32>
008A   0x010730   4A 0A 16 00   LoadStaticU64Imm    r10, 22        r10 = ST[22] -> <#30BFAD05B9FB096E>
008B   0x010738   4A 0B 05 00   LoadStaticU64Imm    r11, 5         r11 = ST[5] -> <self>
008C   0x010740   43 31 0A 00   Move                r49, r10       r49 = r10 [#30BFAD05B9FB096E]
008D   0x010748   43 32 0B 00   Move                r50, r11       r50 = r11 [self]
008E   0x010750   1C 09 09 02   CallFf              r9, r9, 2      r9 = get-int32(#30BFAD05B9FB096E, self)
008F   0x010758   0C 0A 03 00   LoadU16Imm          r10, 3         r10 = 3
0090   0x010760   1D 09 09 0A   IEqual              r9, r9, r10    r9 = r9 [-635293440] == r10 [3]
0091   0x010768   43 0A 03 00   Move                r10, r3        r10 = r3 [-379296862]
0092   0x010770   0C 0B 04 00   LoadU16Imm          r11, 4         r11 = 4
0093   0x010778   1D 0A 0A 0B   IEqual              r10, r10, r11  r10 = r10 [-379297024] == r11 [4]
0094   0x010780   15 0B 09 00   LookupPointer       r11, 9         r11 = ST[9] -> <is-final-build?>
0095   0x010788   1C 0B 0B 00   CallFf              r11, r11, 0    r11 = is-final-build?()
0096   0x010790   30 0B 0B 00   OpLogNot            r11, r11       r11 = !r11 -> <TRUE>
0097   0x010798   2F A6 0B 00   BranchIfNot         r11, 00A6      IF NOT r11 [0x6620ACB7] => L_11
0098   0x0107A0   15 0B 0A 00   LookupPointer       r11, 10        r11 = ST[10] -> <display>
0099   0x0107A8   15 0C 0B 00   LookupPointer       r12, 11        r12 = ST[11] -> <#5445173390656D6D>
009A   0x0107B0   41 0D 17 00   LoadStaticPointerImmr13, 23        r13 = ST[23] -> <0xBF0260C1>
009B   0x0107B8   41 0E 0D 00   LoadStaticPointerImmr14, 13        r14 = ST[13] -> <0xBF025EFC>
009C   0x0107C0   41 0F 18 00   LoadStaticPointerImmr15, 24        r15 = ST[24] -> <0xBF02769A>
009D   0x0107C8   43 31 0D 00   Move                r49, r13       r49 = r13 [0xBF0260C1]
009E   0x0107D0   43 32 0E 00   Move                r50, r14       r50 = r14 [0xBF025EFC]
009F   0x0107D8   43 33 0F 00   Move                r51, r15       r51 = r15 [0xBF02769A]
00A0   0x0107E0   1C 0C 0C 03   CallFf              r12, r12, 3    r12 = #5445173390656D6D(0xBF0260C1, 0xBF025EFC, 0xBF02769A)
00A1   0x0107E8   0C 0D 13 00   LoadU16Imm          r13, 19        r13 = 19
00A2   0x0107F0   43 31 0C 00   Move                r49, r12       r49 = r12 [#5445173390656D6D()]
00A3   0x0107F8   43 32 0D 00   Move                r50, r13       r50 = r13 [19]
00A4   0x010800   1C 0B 0B 02   CallFf              r11, r11, 2    r11 = display(#5445173390656D6D(), 19)
00A5   0x010808   2D A7 00 00   Branch              00A7           => L_12
L_11:
00A6   0x010810   0C 0B 00 00   LoadU16Imm          r11, 0         r11 = 0
L_12:
00A7   0x010818   15 0B 09 00   LookupPointer       r11, 9         r11 = ST[9] -> <is-final-build?>
00A8   0x010820   1C 0B 0B 00   CallFf              r11, r11, 0    r11 = is-final-build?()
00A9   0x010828   30 0B 0B 00   OpLogNot            r11, r11       r11 = !r11 -> <TRUE>
00AA   0x010830   2F BB 0B 00   BranchIfNot         r11, 00BB      IF NOT r11 [0x6620ACB7] => L_13
00AB   0x010838   15 0B 0A 00   LookupPointer       r11, 10        r11 = ST[10] -> <display>
00AC   0x010840   15 0C 0B 00   LookupPointer       r12, 11        r12 = ST[11] -> <#5445173390656D6D>
00AD   0x010848   41 0D 19 00   LoadStaticPointerImmr13, 25        r13 = ST[25] -> <0xBF026BEB>
00AE   0x010850   41 0E 0D 00   LoadStaticPointerImmr14, 13        r14 = ST[13] -> <0xBF025EFC>
00AF   0x010858   41 0F 1A 00   LoadStaticPointerImmr15, 26        r15 = ST[26] -> <0xBF027654>
00B0   0x010860   43 10 05 00   Move                r16, r5        r16 = r5 [0]
00B1   0x010868   43 31 0D 00   Move                r49, r13       r49 = r13 [0xBF026BEB]
00B2   0x010870   43 32 0E 00   Move                r50, r14       r50 = r14 [0xBF025EFC]
00B3   0x010878   43 33 0F 00   Move                r51, r15       r51 = r15 [0xBF027654]
00B4   0x010880   43 34 10 00   Move                r52, r16       r52 = r16 [0]
00B5   0x010888   1C 0C 0C 04   CallFf              r12, r12, 4    r12 = #5445173390656D6D(0xBF026BEB, 0xBF025EFC, 0xBF027654, 0)
00B6   0x010890   0C 0D 13 00   LoadU16Imm          r13, 19        r13 = 19
00B7   0x010898   43 31 0C 00   Move                r49, r12       r49 = r12 [#5445173390656D6D()]
00B8   0x0108A0   43 32 0D 00   Move                r50, r13       r50 = r13 [19]
00B9   0x0108A8   1C 0B 0B 02   CallFf              r11, r11, 2    r11 = display(#5445173390656D6D(), 19)
00BA   0x0108B0   2D BC 00 00   Branch              00BC           => L_14
L_13:
00BB   0x0108B8   0C 0B 00 00   LoadU16Imm          r11, 0         r11 = 0
L_14:
00BC   0x0108C0   15 0B 09 00   LookupPointer       r11, 9         r11 = ST[9] -> <is-final-build?>
00BD   0x0108C8   1C 0B 0B 00   CallFf              r11, r11, 0    r11 = is-final-build?()
00BE   0x0108D0   30 0B 0B 00   OpLogNot            r11, r11       r11 = !r11 -> <TRUE>
00BF   0x0108D8   2F D0 0B 00   BranchIfNot         r11, 00D0      IF NOT r11 [0x6620ACB7] => L_15
00C0   0x0108E0   15 0B 0A 00   LookupPointer       r11, 10        r11 = ST[10] -> <display>
00C1   0x0108E8   15 0C 0B 00   LookupPointer       r12, 11        r12 = ST[11] -> <#5445173390656D6D>
00C2   0x0108F0   41 0D 19 00   LoadStaticPointerImmr13, 25        r13 = ST[25] -> <0xBF026BEB>
00C3   0x0108F8   41 0E 0D 00   LoadStaticPointerImmr14, 13        r14 = ST[13] -> <0xBF025EFC>
00C4   0x010900   41 0F 1B 00   LoadStaticPointerImmr15, 27        r15 = ST[27] -> <0xBF0271B6>
00C5   0x010908   43 10 06 00   Move                r16, r6        r16 = r6 [0]
00C6   0x010910   43 31 0D 00   Move                r49, r13       r49 = r13 [0xBF026BEB]
00C7   0x010918   43 32 0E 00   Move                r50, r14       r50 = r14 [0xBF025EFC]
00C8   0x010920   43 33 0F 00   Move                r51, r15       r51 = r15 [0xBF0271B6]
00C9   0x010928   43 34 10 00   Move                r52, r16       r52 = r16 [0]
00CA   0x010930   1C 0C 0C 04   CallFf              r12, r12, 4    r12 = #5445173390656D6D(0xBF026BEB, 0xBF025EFC, 0xBF0271B6, 0)
00CB   0x010938   0C 0D 13 00   LoadU16Imm          r13, 19        r13 = 19
00CC   0x010940   43 31 0C 00   Move                r49, r12       r49 = r12 [#5445173390656D6D()]
00CD   0x010948   43 32 0D 00   Move                r50, r13       r50 = r13 [19]
00CE   0x010950   1C 0B 0B 02   CallFf              r11, r11, 2    r11 = display(#5445173390656D6D(), 19)
00CF   0x010958   2D D1 00 00   Branch              00D1           => L_16
L_15:
00D0   0x010960   0C 0B 00 00   LoadU16Imm          r11, 0         r11 = 0
L_16:
00D1   0x010968   15 0B 09 00   LookupPointer       r11, 9         r11 = ST[9] -> <is-final-build?>
00D2   0x010970   1C 0B 0B 00   CallFf              r11, r11, 0    r11 = is-final-build?()
00D3   0x010978   30 0B 0B 00   OpLogNot            r11, r11       r11 = !r11 -> <TRUE>
00D4   0x010980   2F E9 0B 00   BranchIfNot         r11, 00E9      IF NOT r11 [0x6620ACB7] => L_17
00D5   0x010988   15 0B 0A 00   LookupPointer       r11, 10        r11 = ST[10] -> <display>
00D6   0x010990   15 0C 0B 00   LookupPointer       r12, 11        r12 = ST[11] -> <#5445173390656D6D>
00D7   0x010998   41 0D 19 00   LoadStaticPointerImmr13, 25        r13 = ST[25] -> <0xBF026BEB>
00D8   0x0109A0   41 0E 0D 00   LoadStaticPointerImmr14, 13        r14 = ST[13] -> <0xBF025EFC>
00D9   0x0109A8   41 0F 1C 00   LoadStaticPointerImmr15, 28        r15 = ST[28] -> <0xBF0275E6>
00DA   0x0109B0   43 10 07 00   Move                r16, r7        r16 = r7 [-379296862]
00DB   0x0109B8   2F DE 10 00   BranchIfNot         r16, 00DE      IF NOT r16 [-379296862] => L_18
00DC   0x0109C0   41 10 1D 00   LoadStaticPointerImmr16, 29        r16 = ST[29] -> <0xBF027754>
00DD   0x0109C8   2D DF 00 00   Branch              00DF           => L_19
L_18:
00DE   0x0109D0   41 10 1E 00   LoadStaticPointerImmr16, 30        r16 = ST[30] -> <0xBF027429>
L_19:
00DF   0x0109D8   43 31 0D 00   Move                r49, r13       r49 = r13 [0xBF026BEB]
00E0   0x0109E0   43 32 0E 00   Move                r50, r14       r50 = r14 [0xBF025EFC]
00E1   0x0109E8   43 33 0F 00   Move                r51, r15       r51 = r15 [0xBF0275E6]
00E2   0x0109F0   43 34 10 00   Move                r52, r16       r52 = r16 [0xBF027429]
00E3   0x0109F8   1C 0C 0C 04   CallFf              r12, r12, 4    r12 = #5445173390656D6D(0xBF026BEB, 0xBF025EFC, 0xBF0275E6, 0xBF027429)
00E4   0x010A00   0C 0D 13 00   LoadU16Imm          r13, 19        r13 = 19
00E5   0x010A08   43 31 0C 00   Move                r49, r12       r49 = r12 [#5445173390656D6D()]
00E6   0x010A10   43 32 0D 00   Move                r50, r13       r50 = r13 [19]
00E7   0x010A18   1C 0B 0B 02   CallFf              r11, r11, 2    r11 = display(#5445173390656D6D(), 19)
00E8   0x010A20   2D EA 00 00   Branch              00EA           => L_20
L_17:
00E9   0x010A28   0C 0B 00 00   LoadU16Imm          r11, 0         r11 = 0
L_20:
00EA   0x010A30   15 0B 09 00   LookupPointer       r11, 9         r11 = ST[9] -> <is-final-build?>
00EB   0x010A38   1C 0B 0B 00   CallFf              r11, r11, 0    r11 = is-final-build?()
00EC   0x010A40   30 0B 0B 00   OpLogNot            r11, r11       r11 = !r11 -> <TRUE>
00ED   0x010A48   2F 02 0B 01   BranchIfNot         r11, 0102      IF NOT r11 [0x6620ACB7] => L_21
00EE   0x010A50   15 0B 0A 00   LookupPointer       r11, 10        r11 = ST[10] -> <display>
00EF   0x010A58   15 0C 0B 00   LookupPointer       r12, 11        r12 = ST[11] -> <#5445173390656D6D>
00F0   0x010A60   41 0D 19 00   LoadStaticPointerImmr13, 25        r13 = ST[25] -> <0xBF026BEB>
00F1   0x010A68   41 0E 0D 00   LoadStaticPointerImmr14, 13        r14 = ST[13] -> <0xBF025EFC>
00F2   0x010A70   41 0F 1F 00   LoadStaticPointerImmr15, 31        r15 = ST[31] -> <0xBF027671>
00F3   0x010A78   43 10 08 00   Move                r16, r8        r16 = r8 [-379296862]
00F4   0x010A80   2F F7 10 00   BranchIfNot         r16, 00F7      IF NOT r16 [-379296862] => L_22
00F5   0x010A88   41 10 20 00   LoadStaticPointerImmr16, 32        r16 = ST[32] -> <0xBF0273A3>
00F6   0x010A90   2D F8 00 00   Branch              00F8           => L_23
L_22:
00F7   0x010A98   41 10 21 00   LoadStaticPointerImmr16, 33        r16 = ST[33] -> <0xBF025FE2>
L_23:
00F8   0x010AA0   43 31 0D 00   Move                r49, r13       r49 = r13 [0xBF026BEB]
00F9   0x010AA8   43 32 0E 00   Move                r50, r14       r50 = r14 [0xBF025EFC]
00FA   0x010AB0   43 33 0F 00   Move                r51, r15       r51 = r15 [0xBF027671]
00FB   0x010AB8   43 34 10 00   Move                r52, r16       r52 = r16 [0xBF025FE2]
00FC   0x010AC0   1C 0C 0C 04   CallFf              r12, r12, 4    r12 = #5445173390656D6D(0xBF026BEB, 0xBF025EFC, 0xBF027671, 0xBF025FE2)
00FD   0x010AC8   0C 0D 13 00   LoadU16Imm          r13, 19        r13 = 19
00FE   0x010AD0   43 31 0C 00   Move                r49, r12       r49 = r12 [#5445173390656D6D()]
00FF   0x010AD8   43 32 0D 00   Move                r50, r13       r50 = r13 [19]
0100   0x010AE0   1C 0B 0B 02   CallFf              r11, r11, 2    r11 = display(#5445173390656D6D(), 19)
0101   0x010AE8   2D 03 00 01   Branch              0103           => L_24
L_21:
0102   0x010AF0   0C 0B 00 00   LoadU16Imm          r11, 0         r11 = 0
L_24:
0103   0x010AF8   43 0B 09 00   Move                r11, r9        r11 = r9 [0xDA223100]
0104   0x010B00   2F 06 0B 01   BranchIfNot         r11, 0106      IF NOT r11 [0xDA223100] => L_25
0105   0x010B08   43 0B 0A 00   Move                r11, r10       r11 = r10 [0xE9646300]
L_25:
0106   0x010B10   2F 20 0B 01   BranchIfNot         r11, 0120      IF NOT r11 [0xE9646300] => L_26
0107   0x010B18   40 0B 22 00   LoadStaticFloatImm  r11, 34        r11 = ST[34] -> <0.00>
0108   0x010B20   43 04 0B 00   Move                r4, r11        r4 = r11 [0x0]
0109   0x010B28   43 0B 04 00   Move                r11, r4        r11 = r4 [0x0]
010A   0x010B30   15 0B 09 00   LookupPointer       r11, 9         r11 = ST[9] -> <is-final-build?>
010B   0x010B38   1C 0B 0B 00   CallFf              r11, r11, 0    r11 = is-final-build?()
010C   0x010B40   30 0B 0B 00   OpLogNot            r11, r11       r11 = !r11 -> <TRUE>
010D   0x010B48   2F 1E 0B 01   BranchIfNot         r11, 011E      IF NOT r11 [0x6620ACB7] => L_27
010E   0x010B50   15 0B 0A 00   LookupPointer       r11, 10        r11 = ST[10] -> <display>
010F   0x010B58   15 0C 0B 00   LookupPointer       r12, 11        r12 = ST[11] -> <#5445173390656D6D>
0110   0x010B60   41 0D 19 00   LoadStaticPointerImmr13, 25        r13 = ST[25] -> <0xBF026BEB>
0111   0x010B68   41 0E 0D 00   LoadStaticPointerImmr14, 13        r14 = ST[13] -> <0xBF025EFC>
0112   0x010B70   41 0F 23 00   LoadStaticPointerImmr15, 35        r15 = ST[35] -> <0xBF027566>
0113   0x010B78   41 10 24 00   LoadStaticPointerImmr16, 36        r16 = ST[36] -> <0xBF027739>
0114   0x010B80   43 31 0D 00   Move                r49, r13       r49 = r13 [0xBF026BEB]
0115   0x010B88   43 32 0E 00   Move                r50, r14       r50 = r14 [0xBF025EFC]
0116   0x010B90   43 33 0F 00   Move                r51, r15       r51 = r15 [0xBF027566]
0117   0x010B98   43 34 10 00   Move                r52, r16       r52 = r16 [0xBF027739]
0118   0x010BA0   1C 0C 0C 04   CallFf              r12, r12, 4    r12 = #5445173390656D6D(0xBF026BEB, 0xBF025EFC, 0xBF027566, 0xBF027739)
0119   0x010BA8   0C 0D 13 00   LoadU16Imm          r13, 19        r13 = 19
011A   0x010BB0   43 31 0C 00   Move                r49, r12       r49 = r12 [#5445173390656D6D()]
011B   0x010BB8   43 32 0D 00   Move                r50, r13       r50 = r13 [19]
011C   0x010BC0   1C 0B 0B 02   CallFf              r11, r11, 2    r11 = display(#5445173390656D6D(), 19)
011D   0x010BC8   2D 1F 00 01   Branch              011F           => L_28
L_27:
011E   0x010BD0   0C 0B 00 00   LoadU16Imm          r11, 0         r11 = 0
L_28:
011F   0x010BD8   2D 21 00 01   Branch              0121           => L_29
L_26:
0120   0x010BE0   0C 0B 00 00   LoadU16Imm          r11, 0         r11 = 0
L_29:
0121   0x010BE8   15 0B 0E 00   LookupPointer       r11, 14        r11 = ST[14] -> <send-event>
0122   0x010BF0   4A 0C 0F 00   LoadStaticU64Imm    r12, 15        r12 = ST[15] -> <#4BD8DC7CFB99D3AC>
0123   0x010BF8   4A 0D 05 00   LoadStaticU64Imm    r13, 5         r13 = ST[5] -> <self>
0124   0x010C00   15 0E 10 00   LookupPointer       r14, 16        r14 = ST[16] -> <new-boxed-value>
0125   0x010C08   0C 0F 02 00   LoadU16Imm          r15, 2         r15 = 2
0126   0x010C10   43 10 03 00   Move                r16, r3        r16 = r3 [-379296862]
0127   0x010C18   43 31 0F 00   Move                r49, r15       r49 = r15 [2]
0128   0x010C20   43 32 10 00   Move                r50, r16       r50 = r16 [-379296862]
0129   0x010C28   1C 0E 0E 02   CallFf              r14, r14, 2    r14 = new-boxed-value(2, -379296862)
012A   0x010C30   15 0F 10 00   LookupPointer       r15, 16        r15 = ST[16] -> <new-boxed-value>
012B   0x010C38   0C 10 06 00   LoadU16Imm          r16, 6         r16 = 6
012C   0x010C40   43 11 04 00   Move                r17, r4        r17 = r4 [0x0]
012D   0x010C48   43 31 10 00   Move                r49, r16       r49 = r16 [6]
012E   0x010C50   43 32 11 00   Move                r50, r17       r50 = r17 [0x0]
012F   0x010C58   1C 0F 0F 02   CallFf              r15, r15, 2    r15 = new-boxed-value(6, 0x0)
0130   0x010C60   43 31 0C 00   Move                r49, r12       r49 = r12 [#4BD8DC7CFB99D3AC]
0131   0x010C68   43 32 0D 00   Move                r50, r13       r50 = r13 [self]
0132   0x010C70   43 33 0E 00   Move                r51, r14       r51 = r14 [new-boxed-value()]
0133   0x010C78   43 34 0F 00   Move                r52, r15       r52 = r15 [new-boxed-value()]
0134   0x010C80   1C 0B 0B 04   CallFf              r11, r11, 4    r11 = send-event(#4BD8DC7CFB99D3AC, self, new-boxed-value(), new-boxed-value())
0135   0x010C88   43 0B 0B 00   Move                r11, r11       r11 = r11 [send-event()]
0136   0x010C90   43 0A 0B 00   Move                r10, r11       r10 = r11 [send-event]
0137   0x010C98   43 09 0A 00   Move                r9, r10        r9 = r10 [send-event]
0138   0x010CA0   43 08 09 00   Move                r8, r9         r8 = r9 [send-event]
0139   0x010CA8   43 07 08 00   Move                r7, r8         r7 = r8 [send-event]
013A   0x010CB0   43 06 07 00   Move                r6, r7         r6 = r7 [send-event]
013B   0x010CB8   43 05 06 00   Move                r5, r6         r5 = r6 [send-event]
013C   0x010CC0   43 04 05 00   Move                r4, r5         r4 = r5 [send-event]
013D   0x010CC8   43 03 04 00   Move                r3, r4         r3 = r4 [send-event]
013E   0x010CD0   2D E3 00 01   Branch              01E3           => L_8
L_10:
013F   0x010CD8   43 03 01 00   Move                r3, r1         r3 = r1 [get-symbol()]
0140   0x010CE0   0C 04 00 00   LoadU16Imm          r4, 0          r4 = 0
0141   0x010CE8   1D 03 03 04   IEqual              r3, r3, r4     r3 = r3 [1774822656] == r4 [0]
0142   0x010CF0   30 03 03 00   OpLogNot            r3, r3         r3 = !r3 -> <TRUE>
0143   0x010CF8   2F 73 03 01   BranchIfNot         r3, 0173       IF NOT r3 [0x69C9A501] => L_30
0144   0x010D00   15 03 09 00   LookupPointer       r3, 9          r3 = ST[9] -> <is-final-build?>
0145   0x010D08   1C 03 03 00   CallFf              r3, r3, 0      r3 = is-final-build?()
0146   0x010D10   30 03 03 00   OpLogNot            r3, r3         r3 = !r3 -> <TRUE>
0147   0x010D18   2F 54 03 01   BranchIfNot         r3, 0154       IF NOT r3 [0x6620ACB7] => L_31
0148   0x010D20   15 03 0A 00   LookupPointer       r3, 10         r3 = ST[10] -> <display>
0149   0x010D28   15 04 0B 00   LookupPointer       r4, 11         r4 = ST[11] -> <#5445173390656D6D>
014A   0x010D30   41 05 25 00   LoadStaticPointerImmr5, 37         r5 = ST[37] -> <0xBF02695E>
014B   0x010D38   41 06 0D 00   LoadStaticPointerImmr6, 13         r6 = ST[13] -> <0xBF025EFC>
014C   0x010D40   43 31 05 00   Move                r49, r5        r49 = r5 [0xBF02695E]
014D   0x010D48   43 32 06 00   Move                r50, r6        r50 = r6 [0xBF025EFC]
014E   0x010D50   1C 04 04 02   CallFf              r4, r4, 2      r4 = #5445173390656D6D(0xBF02695E, 0xBF025EFC)
014F   0x010D58   0C 05 13 00   LoadU16Imm          r5, 19         r5 = 19
0150   0x010D60   43 31 04 00   Move                r49, r4        r49 = r4 [#5445173390656D6D()]
0151   0x010D68   43 32 05 00   Move                r50, r5        r50 = r5 [19]
0152   0x010D70   1C 03 03 02   CallFf              r3, r3, 2      r3 = display(#5445173390656D6D(), 19)
0153   0x010D78   2D 55 00 01   Branch              0155           => L_32
L_31:
0154   0x010D80   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
L_32:
0155   0x010D88   15 03 09 00   LookupPointer       r3, 9          r3 = ST[9] -> <is-final-build?>
0156   0x010D90   1C 03 03 00   CallFf              r3, r3, 0      r3 = is-final-build?()
0157   0x010D98   30 03 03 00   OpLogNot            r3, r3         r3 = !r3 -> <TRUE>
0158   0x010DA0   2F 71 03 01   BranchIfNot         r3, 0171       IF NOT r3 [0x6620ACB7] => L_33
0159   0x010DA8   15 03 0A 00   LookupPointer       r3, 10         r3 = ST[10] -> <display>
015A   0x010DB0   15 04 0B 00   LookupPointer       r4, 11         r4 = ST[11] -> <#5445173390656D6D>
015B   0x010DB8   41 05 19 00   LoadStaticPointerImmr5, 25         r5 = ST[25] -> <0xBF026BEB>
015C   0x010DC0   41 06 0D 00   LoadStaticPointerImmr6, 13         r6 = ST[13] -> <0xBF025EFC>
015D   0x010DC8   41 07 26 00   LoadStaticPointerImmr7, 38         r7 = ST[38] -> <0xBF027728>
015E   0x010DD0   15 08 27 00   LookupPointer       r8, 39         r8 = ST[39] -> <string-debug>
015F   0x010DD8   15 09 03 00   LookupPointer       r9, 3          r9 = ST[3] -> <get-symbol>
0160   0x010DE0   4A 0A 28 00   LoadStaticU64Imm    r10, 40        r10 = ST[40] -> <#7E358C581E146817>
0161   0x010DE8   4A 0B 05 00   LoadStaticU64Imm    r11, 5         r11 = ST[5] -> <self>
0162   0x010DF0   43 31 0A 00   Move                r49, r10       r49 = r10 [#7E358C581E146817]
0163   0x010DF8   43 32 0B 00   Move                r50, r11       r50 = r11 [self]
0164   0x010E00   1C 09 09 02   CallFf              r9, r9, 2      r9 = get-symbol(#7E358C581E146817, self)
0165   0x010E08   43 31 09 00   Move                r49, r9        r49 = r9 [get-symbol()]
0166   0x010E10   1C 08 08 01   CallFf              r8, r8, 1      r8 = string-debug(get-symbol())
0167   0x010E18   43 31 05 00   Move                r49, r5        r49 = r5 [0xBF026BEB]
0168   0x010E20   43 32 06 00   Move                r50, r6        r50 = r6 [0xBF025EFC]
0169   0x010E28   43 33 07 00   Move                r51, r7        r51 = r7 [0xBF027728]
016A   0x010E30   43 34 08 00   Move                r52, r8        r52 = r8 [string-debug()]
016B   0x010E38   1C 04 04 04   CallFf              r4, r4, 4      r4 = #5445173390656D6D(0xBF026BEB, 0xBF025EFC, 0xBF027728, string-debug())
016C   0x010E40   0C 05 13 00   LoadU16Imm          r5, 19         r5 = 19
016D   0x010E48   43 31 04 00   Move                r49, r4        r49 = r4 [#5445173390656D6D()]
016E   0x010E50   43 32 05 00   Move                r50, r5        r50 = r5 [19]
016F   0x010E58   1C 03 03 02   CallFf              r3, r3, 2      r3 = display(#5445173390656D6D(), 19)
0170   0x010E60   2D 72 00 01   Branch              0172           => L_34
L_33:
0171   0x010E68   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
L_34:
0172   0x010E70   2D A8 00 01   Branch              01A8           => L_35
L_30:
0173   0x010E78   43 03 02 00   Move                r3, r2         r3 = r2 [get-symbol]
0174   0x010E80   0C 04 00 00   LoadU16Imm          r4, 0          r4 = 0
0175   0x010E88   1D 03 03 04   IEqual              r3, r3, r4     r3 = r3 [1774822656] == r4 [0]
0176   0x010E90   30 03 03 00   OpLogNot            r3, r3         r3 = !r3 -> <TRUE>
0177   0x010E98   2F A7 03 01   BranchIfNot         r3, 01A7       IF NOT r3 [0x69C9A501] => L_36
0178   0x010EA0   15 03 09 00   LookupPointer       r3, 9          r3 = ST[9] -> <is-final-build?>
0179   0x010EA8   1C 03 03 00   CallFf              r3, r3, 0      r3 = is-final-build?()
017A   0x010EB0   30 03 03 00   OpLogNot            r3, r3         r3 = !r3 -> <TRUE>
017B   0x010EB8   2F 88 03 01   BranchIfNot         r3, 0188       IF NOT r3 [0x6620ACB7] => L_37
017C   0x010EC0   15 03 0A 00   LookupPointer       r3, 10         r3 = ST[10] -> <display>
017D   0x010EC8   15 04 0B 00   LookupPointer       r4, 11         r4 = ST[11] -> <#5445173390656D6D>
017E   0x010ED0   41 05 29 00   LoadStaticPointerImmr5, 41         r5 = ST[41] -> <0xBF02691F>
017F   0x010ED8   41 06 0D 00   LoadStaticPointerImmr6, 13         r6 = ST[13] -> <0xBF025EFC>
0180   0x010EE0   43 31 05 00   Move                r49, r5        r49 = r5 [0xBF02691F]
0181   0x010EE8   43 32 06 00   Move                r50, r6        r50 = r6 [0xBF025EFC]
0182   0x010EF0   1C 04 04 02   CallFf              r4, r4, 2      r4 = #5445173390656D6D(0xBF02691F, 0xBF025EFC)
0183   0x010EF8   0C 05 13 00   LoadU16Imm          r5, 19         r5 = 19
0184   0x010F00   43 31 04 00   Move                r49, r4        r49 = r4 [#5445173390656D6D()]
0185   0x010F08   43 32 05 00   Move                r50, r5        r50 = r5 [19]
0186   0x010F10   1C 03 03 02   CallFf              r3, r3, 2      r3 = display(#5445173390656D6D(), 19)
0187   0x010F18   2D 89 00 01   Branch              0189           => L_38
L_37:
0188   0x010F20   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
L_38:
0189   0x010F28   15 03 09 00   LookupPointer       r3, 9          r3 = ST[9] -> <is-final-build?>
018A   0x010F30   1C 03 03 00   CallFf              r3, r3, 0      r3 = is-final-build?()
018B   0x010F38   30 03 03 00   OpLogNot            r3, r3         r3 = !r3 -> <TRUE>
018C   0x010F40   2F A5 03 01   BranchIfNot         r3, 01A5       IF NOT r3 [0x6620ACB7] => L_39
018D   0x010F48   15 03 0A 00   LookupPointer       r3, 10         r3 = ST[10] -> <display>
018E   0x010F50   15 04 0B 00   LookupPointer       r4, 11         r4 = ST[11] -> <#5445173390656D6D>
018F   0x010F58   41 05 19 00   LoadStaticPointerImmr5, 25         r5 = ST[25] -> <0xBF026BEB>
0190   0x010F60   41 06 0D 00   LoadStaticPointerImmr6, 13         r6 = ST[13] -> <0xBF025EFC>
0191   0x010F68   41 07 2A 00   LoadStaticPointerImmr7, 42         r7 = ST[42] -> <0xBF0276CA>
0192   0x010F70   15 08 27 00   LookupPointer       r8, 39         r8 = ST[39] -> <string-debug>
0193   0x010F78   15 09 03 00   LookupPointer       r9, 3          r9 = ST[3] -> <get-symbol>
0194   0x010F80   4A 0A 2B 00   LoadStaticU64Imm    r10, 43        r10 = ST[43] -> <#7F25A075B1A9E239>
0195   0x010F88   4A 0B 05 00   LoadStaticU64Imm    r11, 5         r11 = ST[5] -> <self>
0196   0x010F90   43 31 0A 00   Move                r49, r10       r49 = r10 [#7F25A075B1A9E239]
0197   0x010F98   43 32 0B 00   Move                r50, r11       r50 = r11 [self]
0198   0x010FA0   1C 09 09 02   CallFf              r9, r9, 2      r9 = get-symbol(#7F25A075B1A9E239, self)
0199   0x010FA8   43 31 09 00   Move                r49, r9        r49 = r9 [get-symbol()]
019A   0x010FB0   1C 08 08 01   CallFf              r8, r8, 1      r8 = string-debug(get-symbol())
019B   0x010FB8   43 31 05 00   Move                r49, r5        r49 = r5 [0xBF026BEB]
019C   0x010FC0   43 32 06 00   Move                r50, r6        r50 = r6 [0xBF025EFC]
019D   0x010FC8   43 33 07 00   Move                r51, r7        r51 = r7 [0xBF0276CA]
019E   0x010FD0   43 34 08 00   Move                r52, r8        r52 = r8 [string-debug()]
019F   0x010FD8   1C 04 04 04   CallFf              r4, r4, 4      r4 = #5445173390656D6D(0xBF026BEB, 0xBF025EFC, 0xBF0276CA, string-debug())
01A0   0x010FE0   0C 05 13 00   LoadU16Imm          r5, 19         r5 = 19
01A1   0x010FE8   43 31 04 00   Move                r49, r4        r49 = r4 [#5445173390656D6D()]
01A2   0x010FF0   43 32 05 00   Move                r50, r5        r50 = r5 [19]
01A3   0x010FF8   1C 03 03 02   CallFf              r3, r3, 2      r3 = display(#5445173390656D6D(), 19)
01A4   0x011000   2D A6 00 01   Branch              01A6           => L_40
L_39:
01A5   0x011008   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
L_40:
01A6   0x011010   2D A8 00 01   Branch              01A8           => L_35
L_36:
01A7   0x011018   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
L_35:
01A8   0x011020   43 03 01 00   Move                r3, r1         r3 = r1 [get-symbol()]
01A9   0x011028   0C 04 00 00   LoadU16Imm          r4, 0          r4 = 0
01AA   0x011030   1D 03 03 04   IEqual              r3, r3, r4     r3 = r3 [1774822656] == r4 [0]
01AB   0x011038   30 03 03 00   OpLogNot            r3, r3         r3 = !r3 -> <TRUE>
01AC   0x011040   2F AF 03 01   BranchIfNot         r3, 01AF       IF NOT r3 [0x69C9A501] => L_41
01AD   0x011048   43 03 01 00   Move                r3, r1         r3 = r1 [get-symbol()]
01AE   0x011050   2D B0 00 01   Branch              01B0           => L_42
L_41:
01AF   0x011058   43 03 02 00   Move                r3, r2         r3 = r2 [get-symbol]
L_42:
01B0   0x011060   43 04 03 00   Move                r4, r3         r4 = r3 [get-symbol]
01B1   0x011068   5D 04 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
01B2   0x011070   3B 04 04 1C   IAddImm             r4, r4, 28     r4 = r4 [-1293010929] / 28 -> <-1293010929>
01B3   0x011078   4F 04 04 00   LoadI32             ???            UNKNOWN INSTRUCTION
01B4   0x011080   43 05 03 00   Move                r5, r3         r5 = r3 [get-symbol]
01B5   0x011088   5D 05 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
01B6   0x011090   3B 05 05 20   IAddImm             r5, r5, 32     r5 = r5 [1774822854] / 32 -> <1774822854>
01B7   0x011098   0E 05 05 00   LoadFloat           r5, [r5]       r5 = [0x0 + 0x0]
01B8   0x0110A0   15 06 12 00   LookupPointer       r6, 18         r6 = ST[18] -> <get-boolean>
01B9   0x0110A8   4A 07 2C 00   LoadStaticU64Imm    r7, 44         r7 = ST[44] -> <#D9DFB4F910DB3FD9>
01BA   0x0110B0   4A 08 05 00   LoadStaticU64Imm    r8, 5          r8 = ST[5] -> <self>
01BB   0x0110B8   43 31 07 00   Move                r49, r7        r49 = r7 [#D9DFB4F910DB3FD9]
01BC   0x0110C0   43 32 08 00   Move                r50, r8        r50 = r8 [self]
01BD   0x0110C8   1C 06 06 02   CallFf              r6, r6, 2      r6 = get-boolean(#D9DFB4F910DB3FD9, self)
01BE   0x0110D0   2F C5 06 01   BranchIfNot         r6, 01C5       IF NOT r6 [get-boolean()] => L_43
01BF   0x0110D8   15 06 2D 00   LookupPointer       r6, 45         r6 = ST[45] -> <timer-running?>
01C0   0x0110E0   4A 07 2E 00   LoadStaticU64Imm    r7, 46         r7 = ST[46] -> <#A9297DB4F1A30CF7>
01C1   0x0110E8   4A 08 05 00   LoadStaticU64Imm    r8, 5          r8 = ST[5] -> <self>
01C2   0x0110F0   43 31 07 00   Move                r49, r7        r49 = r7 [#A9297DB4F1A30CF7]
01C3   0x0110F8   43 32 08 00   Move                r50, r8        r50 = r8 [self]
01C4   0x011100   1B 06 06 02   Call                r6, r6, 2      r6 = timer-running?(#A9297DB4F1A30CF7, self)
L_43:
01C5   0x011108   2F CA 06 01   BranchIfNot         r6, 01CA       IF NOT r6 [timer-running?()] => L_44
01C6   0x011110   40 06 22 00   LoadStaticFloatImm  r6, 34         r6 = ST[34] -> <0.00>
01C7   0x011118   43 05 06 00   Move                r5, r6         r5 = r6 [0x0]
01C8   0x011120   43 06 05 00   Move                r6, r5         r6 = r5 [0x0]
01C9   0x011128   2D CB 00 01   Branch              01CB           => L_45
L_44:
01CA   0x011130   0C 06 00 00   LoadU16Imm          r6, 0          r6 = 0
L_45:
01CB   0x011138   15 06 0E 00   LookupPointer       r6, 14         r6 = ST[14] -> <send-event>
01CC   0x011140   4A 07 0F 00   LoadStaticU64Imm    r7, 15         r7 = ST[15] -> <#4BD8DC7CFB99D3AC>
01CD   0x011148   4A 08 05 00   LoadStaticU64Imm    r8, 5          r8 = ST[5] -> <self>
01CE   0x011150   15 09 10 00   LookupPointer       r9, 16         r9 = ST[16] -> <new-boxed-value>
01CF   0x011158   0C 0A 02 00   LoadU16Imm          r10, 2         r10 = 2
01D0   0x011160   43 0B 04 00   Move                r11, r4        r11 = r4 [-1293010929]
01D1   0x011168   43 31 0A 00   Move                r49, r10       r49 = r10 [2]
01D2   0x011170   43 32 0B 00   Move                r50, r11       r50 = r11 [-1293010929]
01D3   0x011178   1C 09 09 02   CallFf              r9, r9, 2      r9 = new-boxed-value(2, -1293010929)
01D4   0x011180   15 0A 10 00   LookupPointer       r10, 16        r10 = ST[16] -> <new-boxed-value>
01D5   0x011188   0C 0B 06 00   LoadU16Imm          r11, 6         r11 = 6
01D6   0x011190   43 0C 05 00   Move                r12, r5        r12 = r5 [0x0]
01D7   0x011198   43 31 0B 00   Move                r49, r11       r49 = r11 [6]
01D8   0x0111A0   43 32 0C 00   Move                r50, r12       r50 = r12 [0x0]
01D9   0x0111A8   1C 0A 0A 02   CallFf              r10, r10, 2    r10 = new-boxed-value(6, 0x0)
01DA   0x0111B0   43 31 07 00   Move                r49, r7        r49 = r7 [#4BD8DC7CFB99D3AC]
01DB   0x0111B8   43 32 08 00   Move                r50, r8        r50 = r8 [self]
01DC   0x0111C0   43 33 09 00   Move                r51, r9        r51 = r9 [new-boxed-value()]
01DD   0x0111C8   43 34 0A 00   Move                r52, r10       r52 = r10 [new-boxed-value()]
01DE   0x0111D0   1C 06 06 04   CallFf              r6, r6, 4      r6 = send-event(#4BD8DC7CFB99D3AC, self, new-boxed-value(), new-boxed-value())
01DF   0x0111D8   43 06 06 00   Move                r6, r6         r6 = r6 [send-event()]
01E0   0x0111E0   43 05 06 00   Move                r5, r6         r5 = r6 [send-event]
01E1   0x0111E8   43 04 05 00   Move                r4, r5         r4 = r5 [send-event]
01E2   0x0111F0   43 03 04 00   Move                r3, r4         r3 = r4 [send-event]
L_8:
01E3   0x0111F8   43 00 03 00   Move                r0, r3         r0 = r3 [send-event]
01E4   0x011200   00 00 00 00   Return              r0             Return send-event
SYMBOL TABLE: 
0000   0x011208    POINTER <#03065977E96463A2>
0001   0x011210    POINTER <get-svar>
0002   0x011218    SID <#47CB08FCD5FE82DB>
0003   0x011220    POINTER <get-symbol>
0004   0x011228    SID <#F4BB1A242FE97D63>
0005   0x011230    SID <self>
0006   0x011238    SID <#FB88BDBA9A4B5DAA>
0007   0x011240    POINTER <#B96C7EEF7ACAB122>
0008   0x011248    INT <-1>
0009   0x011250    POINTER <is-final-build?>
000A   0x011258    POINTER <display>
000B   0x011260    POINTER <#5445173390656D6D>
000C   0x011268    POINTER <#00000282BF0268C3>
000D   0x011270    POINTER <#00000282BF025EFC>
000E   0x011278    POINTER <send-event>
000F   0x011280    SID <#4BD8DC7CFB99D3AC>
0010   0x011288    POINTER <new-boxed-value>
0011   0x011290    POINTER <#00000282BF026D93>
0012   0x011298    POINTER <get-boolean>
0013   0x0112A0    SID <#B0E4DDF4A79D13AC>
0014   0x0112A8    SID <ss-wave-manager-level-set-loader-1>
0015   0x0112B0    POINTER <get-int32>
0016   0x0112B8    SID <#30BFAD05B9FB096E>
0017   0x0112C0    POINTER <#00000282BF0260C1>
0018   0x0112C8    POINTER <#00000282BF02769A>
0019   0x0112D0    POINTER <#00000282BF026BEB>
001A   0x0112D8    POINTER <#00000282BF027654>
001B   0x0112E0    POINTER <#00000282BF0271B6>
001C   0x0112E8    POINTER <#00000282BF0275E6>
001D   0x0112F0    POINTER <#00000282BF027754>
001E   0x0112F8    POINTER <#00000282BF027429>
001F   0x011300    POINTER <#00000282BF027671>
0020   0x011308    POINTER <#00000282BF0273A3>
0021   0x011310    POINTER <#00000282BF025FE2>
0022   0x011318    FLOAT <0.000000>
0023   0x011320    POINTER <#00000282BF027566>
0024   0x011328    POINTER <#00000282BF027739>
0025   0x011330    POINTER <#00000282BF02695E>
0026   0x011338    POINTER <#00000282BF027728>
0027   0x011340    POINTER <string-debug>
0028   0x011348    SID <#7E358C581E146817>
0029   0x011350    POINTER <#00000282BF02691F>
002A   0x011358    POINTER <#00000282BF0276CA>
002B   0x011360    SID <#7F25A075B1A9E239>
002C   0x011368    SID <#D9DFB4F910DB3FD9>
002D   0x011370    POINTER <timer-running?>
002E   0x011378    SID <#A9297DB4F1A30CF7>
0000   0x01AB10   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <get-boolean>
0001   0x01AB18   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#8011CE00FED42EB7>
0002   0x01AB20   4A 02 02 00   LoadStaticU64Imm    r2, 2          r2 = ST[2] -> <self>
0003   0x01AB28   43 31 01 00   Move                r49, r1        r49 = r1 [#8011CE00FED42EB7]
0004   0x01AB30   43 32 02 00   Move                r50, r2        r50 = r2 [self]
0005   0x01AB38   1C 00 00 02   CallFf              r0, r0, 2      r0 = get-boolean(#8011CE00FED42EB7, self)
0006   0x01AB40   2F 18 00 00   BranchIfNot         r0, 0018       IF NOT r0 [get-boolean()] => L_0
0007   0x01AB48   15 00 03 00   LookupPointer       r0, 3          r0 = ST[3] -> <set-boolean>
0008   0x01AB50   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#8011CE00FED42EB7>
0009   0x01AB58   0C 02 00 00   LoadU16Imm          r2, 0          r2 = 0
000A   0x01AB60   4A 03 02 00   LoadStaticU64Imm    r3, 2          r3 = ST[2] -> <self>
000B   0x01AB68   43 31 01 00   Move                r49, r1        r49 = r1 [#8011CE00FED42EB7]
000C   0x01AB70   43 32 02 00   Move                r50, r2        r50 = r2 [0]
000D   0x01AB78   43 33 03 00   Move                r51, r3        r51 = r3 [self]
000E   0x01AB80   1C 00 00 03   CallFf              r0, r0, 3      r0 = set-boolean(#8011CE00FED42EB7, 0, self)
000F   0x01AB88   15 00 03 00   LookupPointer       r0, 3          r0 = ST[3] -> <set-boolean>
0010   0x01AB90   4A 01 04 00   LoadStaticU64Imm    r1, 4          r1 = ST[4] -> <#031D4F1C6B501E2B>
0011   0x01AB98   0C 02 01 00   LoadU16Imm          r2, 1          r2 = 1
0012   0x01ABA0   4A 03 02 00   LoadStaticU64Imm    r3, 2          r3 = ST[2] -> <self>
0013   0x01ABA8   43 31 01 00   Move                r49, r1        r49 = r1 [#031D4F1C6B501E2B]
0014   0x01ABB0   43 32 02 00   Move                r50, r2        r50 = r2 [1]
0015   0x01ABB8   43 33 03 00   Move                r51, r3        r51 = r3 [self]
0016   0x01ABC0   1C 00 00 03   CallFf              r0, r0, 3      r0 = set-boolean(#031D4F1C6B501E2B, 1, self)
0017   0x01ABC8   2D 20 00 00   Branch              0020           => L_RETURN
L_0:
0018   0x01ABD0   15 00 03 00   LookupPointer       r0, 3          r0 = ST[3] -> <set-boolean>
0019   0x01ABD8   4A 01 05 00   LoadStaticU64Imm    r1, 5          r1 = ST[5] -> <#BE1B99861A282419>
001A   0x01ABE0   0C 02 01 00   LoadU16Imm          r2, 1          r2 = 1
001B   0x01ABE8   4A 03 02 00   LoadStaticU64Imm    r3, 2          r3 = ST[2] -> <self>
001C   0x01ABF0   43 31 01 00   Move                r49, r1        r49 = r1 [#BE1B99861A282419]
001D   0x01ABF8   43 32 02 00   Move                r50, r2        r50 = r2 [1]
001E   0x01AC00   43 33 03 00   Move                r51, r3        r51 = r3 [self]
001F   0x01AC08   1C 00 00 03   CallFf              r0, r0, 3      r0 = set-boolean(#BE1B99861A282419, 1, self)
L_RETURN:
0020   0x01AC10   00 00 00 00   Return              r0             Return set-boolean()
SYMBOL TABLE: 
0000   0x01AC18    POINTER <get-boolean>
0001   0x01AC20    SID <#8011CE00FED42EB7>
0002   0x01AC28    SID <self>
0003   0x01AC30    POINTER <set-boolean>
0004   0x01AC38    SID <#031D4F1C6B501E2B>
0005   0x01AC40    SID <#BE1B99861A282419>
0000   0x00FA98   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <broadcast-event>
0001   0x00FAA0   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#B95F1F3B9AF4FDF7>
0002   0x00FAA8   43 31 01 00   Move                r49, r1        r49 = r1 [#B95F1F3B9AF4FDF7]
0003   0x00FAB0   1C 00 00 01   CallFf              r0, r0, 1      r0 = broadcast-event(#B95F1F3B9AF4FDF7)
0004   0x00FAB8   00 00 00 00   Return              r0             Return broadcast-event()
SYMBOL TABLE: 
0000   0x00FAC0    POINTER <broadcast-event>
0001   0x00FAC8    SID <#B95F1F3B9AF4FDF7>
0000   0x019E68   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <go>
0001   0x019E70   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <ready-waiting>
0002   0x019E78   0C 02 01 00   LoadU16Imm          r2, 1          r2 = 1
0003   0x019E80   43 31 01 00   Move                r49, r1        r49 = r1 [ready-waiting]
0004   0x019E88   43 32 02 00   Move                r50, r2        r50 = r2 [1]
0005   0x019E90   1C 00 00 02   CallFf              r0, r0, 2      r0 = go(ready-waiting, 1)
0006   0x019E98   00 00 00 00   Return              r0             Return go()
SYMBOL TABLE: 
0000   0x019EA0    POINTER <go>
0001   0x019EA8    SID <ready-waiting>
      STATE done:
         ON start
          TRACK main:
0000   0x013F78   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <is-final-build?>
0001   0x013F80   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0002   0x013F88   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0003   0x013F90   2F 0E 00 00   BranchIfNot         r0, 000E       IF NOT r0 [0x6620ACB7] => L_0
0004   0x013F98   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <display>
0005   0x013FA0   15 01 02 00   LookupPointer       r1, 2          r1 = ST[2] -> <#5445173390656D6D>
0006   0x013FA8   41 02 03 00   LoadStaticPointerImmr2, 3          r2 = ST[3] -> <0xBF02718B>
0007   0x013FB0   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF02718B]
0008   0x013FB8   1C 01 01 01   CallFf              r1, r1, 1      r1 = #5445173390656D6D(0xBF02718B)
0009   0x013FC0   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
000A   0x013FC8   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
000B   0x013FD0   43 32 02 00   Move                r50, r2        r50 = r2 [19]
000C   0x013FD8   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
000D   0x013FE0   2D 0F 00 00   Branch              000F           => L_RETURN
L_0:
000E   0x013FE8   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
000F   0x013FF0   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x013FF8    POINTER <is-final-build?>
0001   0x014000    POINTER <display>
0002   0x014008    POINTER <#5445173390656D6D>
0003   0x014010    POINTER <#00000282BF02718B>
0000   0x0190D8   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <set-boolean>
0001   0x0190E0   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#C682097AD6DD2276>
0002   0x0190E8   0C 02 01 00   LoadU16Imm          r2, 1          r2 = 1
0003   0x0190F0   4A 03 02 00   LoadStaticU64Imm    r3, 2          r3 = ST[2] -> <self>
0004   0x0190F8   43 31 01 00   Move                r49, r1        r49 = r1 [#C682097AD6DD2276]
0005   0x019100   43 32 02 00   Move                r50, r2        r50 = r2 [1]
0006   0x019108   43 33 03 00   Move                r51, r3        r51 = r3 [self]
0007   0x019110   1C 00 00 03   CallFf              r0, r0, 3      r0 = set-boolean(#C682097AD6DD2276, 1, self)
0008   0x019118   00 00 00 00   Return              r0             Return set-boolean()
SYMBOL TABLE: 
0000   0x019120    POINTER <set-boolean>
0001   0x019128    SID <#C682097AD6DD2276>
0002   0x019130    SID <self>
  }
####################################################################################################
  [0x003AF0] #A238C0593743A3AE: script-lambda 
  {
LAMBDA0000   0x003B48   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <get-symbol>
0001   0x003B50   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#F4BB1A242FE97D63>
0002   0x003B58   4A 02 02 00   LoadStaticU64Imm    r2, 2          r2 = ST[2] -> <self>
0003   0x003B60   43 31 01 00   Move                r49, r1        r49 = r1 [#F4BB1A242FE97D63]
0004   0x003B68   43 32 02 00   Move                r50, r2        r50 = r2 [self]
0005   0x003B70   1C 00 00 02   CallFf              r0, r0, 2      r0 = get-symbol(#F4BB1A242FE97D63, self)
0006   0x003B78   0C 01 00 00   LoadU16Imm          r1, 0          r1 = 0
0007   0x003B80   1D 00 00 01   IEqual              r0, r0, r1     r0 = r0 [1774822656] == r1 [0]
0008   0x003B88   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0009   0x003B90   2F 11 00 00   BranchIfNot         r0, 0011       IF NOT r0 [0x69C9A501] => L_0
000A   0x003B98   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <get-symbol>
000B   0x003BA0   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <#F4BB1A242FE97D63>
000C   0x003BA8   4A 02 02 00   LoadStaticU64Imm    r2, 2          r2 = ST[2] -> <self>
000D   0x003BB0   43 31 01 00   Move                r49, r1        r49 = r1 [#F4BB1A242FE97D63]
000E   0x003BB8   43 32 02 00   Move                r50, r2        r50 = r2 [self]
000F   0x003BC0   1C 00 00 02   CallFf              r0, r0, 2      r0 = get-symbol(#F4BB1A242FE97D63, self)
0010   0x003BC8   2D 17 00 00   Branch              0017           => L_RETURN
L_0:
0011   0x003BD0   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <get-symbol>
0012   0x003BD8   4A 01 03 00   LoadStaticU64Imm    r1, 3          r1 = ST[3] -> <#FB88BDBA9A4B5DAA>
0013   0x003BE0   4A 02 02 00   LoadStaticU64Imm    r2, 2          r2 = ST[2] -> <self>
0014   0x003BE8   43 31 01 00   Move                r49, r1        r49 = r1 [#FB88BDBA9A4B5DAA]
0015   0x003BF0   43 32 02 00   Move                r50, r2        r50 = r2 [self]
0016   0x003BF8   1C 00 00 02   CallFf              r0, r0, 2      r0 = get-symbol(#FB88BDBA9A4B5DAA, self)
L_RETURN:
0017   0x003C00   00 00 00 00   Return              r0             Return get-symbol()
SYMBOL TABLE: 
0000   0x003C08    POINTER <get-symbol>
0001   0x003C10    SID <#F4BB1A242FE97D63>
0002   0x003C18    SID <self>
0003   0x003C20    SID <#FB88BDBA9A4B5DAA>
  }
####################################################################################################
  [0x003C28] #A548628CB635DC72: script-lambda 
  {
LAMBDA0000   0x003C80   43 00 31 00   Move                r0, r49        r0 = r49 [0x0]
0001   0x003C88   43 01 32 00   Move                r1, r50        r1 = r50 [0x0]
0002   0x003C90   0C 02 00 00   LoadU16Imm          r2, 0          r2 = 0
0003   0x003C98   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
0004   0x003CA0   15 04 00 00   LookupPointer       r4, 0          r4 = ST[0] -> <darray-count>
0005   0x003CA8   4A 05 01 00   LoadStaticU64Imm    r5, 1          r5 = ST[1] -> <#88F409F4BF0F056A>
0006   0x003CB0   43 31 05 00   Move                r49, r5        r49 = r5 [#88F409F4BF0F056A]
0007   0x003CB8   1C 04 04 01   CallFf              r4, r4, 1      r4 = darray-count(#88F409F4BF0F056A)
0008   0x003CC0   15 05 02 00   LookupPointer       r5, 2          r5 = ST[2] -> <begin-foreach>
0009   0x003CC8   1C 05 05 00   CallFf              r5, r5, 0      r5 = begin-foreach()
L_15:
000A   0x003CD0   43 05 03 00   Move                r5, r3         r5 = r3 [0]
000B   0x003CD8   43 06 04 00   Move                r6, r4         r6 = r4 [darray-count()]
000C   0x003CE0   20 05 05 06   ILessThan           r5, r5, r6     r5 = r5 [1] < r6 [1753163078]
000D   0x003CE8   2F 71 05 00   BranchIfNot         r5, 0071       IF NOT r5 [0x1] => L_0
000E   0x003CF0   15 05 03 00   LookupPointer       r5, 3          r5 = ST[3] -> <darray-at>
000F   0x003CF8   4A 06 01 00   LoadStaticU64Imm    r6, 1          r6 = ST[1] -> <#88F409F4BF0F056A>
0010   0x003D00   43 07 03 00   Move                r7, r3         r7 = r3 [0]
0011   0x003D08   43 31 06 00   Move                r49, r6        r49 = r6 [#88F409F4BF0F056A]
0012   0x003D10   43 32 07 00   Move                r50, r7        r50 = r7 [0]
0013   0x003D18   1C 05 05 02   CallFf              r5, r5, 2      r5 = darray-at(#88F409F4BF0F056A, 0)
0014   0x003D20   43 06 05 00   Move                r6, r5         r6 = r5 [darray-at()]
0015   0x003D28   2F 1C 06 00   BranchIfNot         r6, 001C       IF NOT r6 [darray-at()] => L_1
0016   0x003D30   43 06 05 00   Move                r6, r5         r6 = r5 [darray-at()]
0017   0x003D38   5D 06 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0018   0x003D40   3B 06 06 0C   IAddImm             r6, r6, 12     r6 = r6 [-739117676] / 12 -> <-739117676>
0019   0x003D48   4E 06 06 00   LoadU16             ???            UNKNOWN INSTRUCTION
001A   0x003D50   0C 07 07 00   LoadU16Imm          r7, 7          r7 = 7
001B   0x003D58   1D 06 06 07   IEqual              r6, r6, r7     r6 = r6 [-739117824] == r7 [7]
L_1:
001C   0x003D60   2F 21 06 00   BranchIfNot         r6, 0021       IF NOT r6 [0xD3F1F500] => L_2
001D   0x003D68   43 06 05 00   Move                r6, r5         r6 = r5 [darray-at()]
001E   0x003D70   5D 06 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
001F   0x003D78   51 06 06 00   LoadU64             r6, [r6]       r6 = [0x0 + 0x0]
0020   0x003D80   2D 3C 00 00   Branch              003C           => L_3
L_2:
0021   0x003D88   43 06 05 00   Move                r6, r5         r6 = r5 [darray-at()]
0022   0x003D90   2F 29 06 00   BranchIfNot         r6, 0029       IF NOT r6 [darray-at()] => L_4
0023   0x003D98   43 06 05 00   Move                r6, r5         r6 = r5 [darray-at()]
0024   0x003DA0   5D 06 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0025   0x003DA8   3B 06 06 0C   IAddImm             r6, r6, 12     r6 = r6 [-739117676] / 12 -> <-739117676>
0026   0x003DB0   4E 06 06 00   LoadU16             ???            UNKNOWN INSTRUCTION
0027   0x003DB8   0C 07 05 00   LoadU16Imm          r7, 5          r7 = 5
0028   0x003DC0   1D 06 06 07   IEqual              r6, r6, r7     r6 = r6 [-739117824] == r7 [5]
L_4:
0029   0x003DC8   2F 2E 06 00   BranchIfNot         r6, 002E       IF NOT r6 [0xD3F1F500] => L_5
002A   0x003DD0   43 06 05 00   Move                r6, r5         r6 = r5 [darray-at()]
002B   0x003DD8   5D 06 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
002C   0x003DE0   51 06 06 00   LoadU64             r6, [r6]       r6 = [0x0 + 0x0]
002D   0x003DE8   2D 3C 00 00   Branch              003C           => L_3
L_5:
002E   0x003DF0   43 06 05 00   Move                r6, r5         r6 = r5 [darray-at()]
002F   0x003DF8   2F 36 06 00   BranchIfNot         r6, 0036       IF NOT r6 [darray-at()] => L_6
0030   0x003E00   43 06 05 00   Move                r6, r5         r6 = r5 [darray-at()]
0031   0x003E08   5D 06 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0032   0x003E10   3B 06 06 0C   IAddImm             r6, r6, 12     r6 = r6 [-739117676] / 12 -> <-739117676>
0033   0x003E18   4E 06 06 00   LoadU16             ???            UNKNOWN INSTRUCTION
0034   0x003E20   0C 07 04 00   LoadU16Imm          r7, 4          r7 = 4
0035   0x003E28   1D 06 06 07   IEqual              r6, r6, r7     r6 = r6 [-739117824] == r7 [4]
L_6:
0036   0x003E30   2F 3B 06 00   BranchIfNot         r6, 003B       IF NOT r6 [0xD3F1F500] => L_7
0037   0x003E38   43 06 05 00   Move                r6, r5         r6 = r5 [darray-at()]
0038   0x003E40   5D 06 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0039   0x003E48   51 06 06 00   LoadU64             r6, [r6]       r6 = [0x0 + 0x0]
003A   0x003E50   2D 3C 00 00   Branch              003C           => L_3
L_7:
003B   0x003E58   0C 06 00 00   LoadU16Imm          r6, 0          r6 = 0
L_3:
003C   0x003E60   43 05 06 00   Move                r5, r6         r5 = r6 [0]
003D   0x003E68   15 06 04 00   LookupPointer       r6, 4          r6 = ST[4] -> <npc-alive?>
003E   0x003E70   43 07 05 00   Move                r7, r5         r7 = r5 [0]
003F   0x003E78   43 31 07 00   Move                r49, r7        r49 = r7 [0]
0040   0x003E80   1C 06 06 01   CallFf              r6, r6, 1      r6 = npc-alive?(0)
0041   0x003E88   2F 69 06 00   BranchIfNot         r6, 0069       IF NOT r6 [npc-alive?()] => L_8
0042   0x003E90   15 06 05 00   LookupPointer       r6, 5          r6 = ST[5] -> <npc-get-awareness>
0043   0x003E98   43 07 05 00   Move                r7, r5         r7 = r5 [0]
0044   0x003EA0   4A 08 06 00   LoadStaticU64Imm    r8, 6          r8 = ST[6] -> <player>
0045   0x003EA8   43 31 07 00   Move                r49, r7        r49 = r7 [0]
0046   0x003EB0   43 32 08 00   Move                r50, r8        r50 = r8 [player]
0047   0x003EB8   1C 06 06 02   CallFf              r6, r6, 2      r6 = npc-get-awareness(0, player)
0048   0x003EC0   15 07 07 00   LookupPointer       r7, 7          r7 = ST[7] -> <npc-get-recognition>
0049   0x003EC8   43 08 05 00   Move                r8, r5         r8 = r5 [0]
004A   0x003ED0   4A 09 06 00   LoadStaticU64Imm    r9, 6          r9 = ST[6] -> <player>
004B   0x003ED8   43 31 08 00   Move                r49, r8        r49 = r8 [0]
004C   0x003EE0   43 32 09 00   Move                r50, r9        r50 = r9 [player]
004D   0x003EE8   1C 07 07 02   CallFf              r7, r7, 2      r7 = npc-get-recognition(0, player)
004E   0x003EF0   43 08 05 00   Move                r8, r5         r8 = r5 [0]
004F   0x003EF8   43 09 00 00   Move                r9, r0         r9 = r0 [0x0]
0050   0x003F00   5A 08 08 09   INotEqual           ???            UNKNOWN INSTRUCTION
0051   0x003F08   2F 55 08 00   BranchIfNot         r8, 0055       IF NOT r8 [0] => L_9
0052   0x003F10   43 08 02 00   Move                r8, r2         r8 = r2 [0]
0053   0x003F18   0C 09 01 00   LoadU16Imm          r9, 1          r9 = 1
0054   0x003F20   5A 08 08 09   INotEqual           ???            UNKNOWN INSTRUCTION
L_9:
0055   0x003F28   2F 59 08 00   BranchIfNot         r8, 0059       IF NOT r8 [0] => L_10
0056   0x003F30   43 08 06 00   Move                r8, r6         r8 = r6 [npc-get-awareness()]
0057   0x003F38   0C 09 00 00   LoadU16Imm          r9, 0          r9 = 0
0058   0x003F40   1F 08 08 09   IGreaterThanEqual   r8, r8, r9     r8 = r8 [658906624] >= r9 [0]
L_10:
0059   0x003F48   2F 61 08 00   BranchIfNot         r8, 0061       IF NOT r8 [0x27461E00] => L_11
005A   0x003F50   43 08 06 00   Move                r8, r6         r8 = r6 [npc-get-awareness()]
005B   0x003F58   43 09 01 00   Move                r9, r1         r9 = r1 [0x0]
005C   0x003F60   5A 08 08 09   INotEqual           ???            UNKNOWN INSTRUCTION
005D   0x003F68   2E 61 08 00   BranchIf            r8, 0061       IF r8 [npc-get-awareness] => L_11
005E   0x003F70   43 08 07 00   Move                r8, r7         r8 = r7 [npc-get-recognition()]
005F   0x003F78   40 09 08 00   LoadStaticFloatImm  r9, 8          r9 = ST[8] -> <0.00>
0060   0x003F80   23 08 08 09   FGreaterThan        ???            UNKNOWN INSTRUCTION
L_11:
0061   0x003F88   2F 66 08 00   BranchIfNot         r8, 0066       IF NOT r8 [npc-get-recognition] => L_12
0062   0x003F90   0C 08 01 00   LoadU16Imm          r8, 1          r8 = 1
0063   0x003F98   43 02 08 00   Move                r2, r8         r2 = r8 [1]
0064   0x003FA0   43 08 02 00   Move                r8, r2         r8 = r2 [1]
0065   0x003FA8   2D 67 00 00   Branch              0067           => L_13
L_12:
0066   0x003FB0   0C 08 00 00   LoadU16Imm          r8, 0          r8 = 0
L_13:
0067   0x003FB8   43 06 08 00   Move                r6, r8         r6 = r8 [0]
0068   0x003FC0   2D 6A 00 00   Branch              006A           => L_14
L_8:
0069   0x003FC8   0C 06 00 00   LoadU16Imm          r6, 0          r6 = 0
L_14:
006A   0x003FD0   43 06 03 00   Move                r6, r3         r6 = r3 [0]
006B   0x003FD8   0C 07 01 00   LoadU16Imm          r7, 1          r7 = 1
006C   0x003FE0   01 06 06 07   IAdd                r6, r6, r7     1 = 0 + 1
006D   0x003FE8   43 03 06 00   Move                r3, r6         r3 = r6 [1]
006E   0x003FF0   43 06 03 00   Move                r6, r3         r6 = r3 [1]
006F   0x003FF8   43 05 06 00   Move                r5, r6         r5 = r6 [1]
0070   0x004000   2D 0A 00 00   Branch              000A           => L_15
L_0:
0071   0x004008   15 05 09 00   LookupPointer       r5, 9          r5 = ST[9] -> <end-foreach>
0072   0x004010   1C 05 05 00   CallFf              r5, r5, 0      r5 = end-foreach()
0073   0x004018   43 03 05 00   Move                r3, r5         r3 = r5 [end-foreach()]
0074   0x004020   43 03 02 00   Move                r3, r2         r3 = r2 [1]
0075   0x004028   43 02 03 00   Move                r2, r3         r2 = r3 [1]
0076   0x004030   00 02 02 00   Return              r2             Return 1
SYMBOL TABLE: 
0000   0x004038    POINTER <darray-count>
0001   0x004040    SID <#88F409F4BF0F056A>
0002   0x004048    POINTER <begin-foreach>
0003   0x004050    POINTER <darray-at>
0004   0x004058    POINTER <npc-alive?>
0005   0x004060    POINTER <npc-get-awareness>
0006   0x004068    SID <player>
0007   0x004070    POINTER <npc-get-recognition>
0008   0x004078    FLOAT <0.000000>
0009   0x004080    POINTER <end-foreach>
  }
####################################################################################################
  [0x004088] #B97D31F760DB0E8E: script-lambda 
  {
LAMBDA0000   0x0040E0   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <get-symbol>
0001   0x0040E8   4A 01 01 00   LoadStaticU64Imm    r1, 1          r1 = ST[1] -> <current-task>
0002   0x0040F0   4A 02 02 00   LoadStaticU64Imm    r2, 2          r2 = ST[2] -> <self>
0003   0x0040F8   43 31 01 00   Move                r49, r1        r49 = r1 [current-task]
0004   0x004100   43 32 02 00   Move                r50, r2        r50 = r2 [self]
0005   0x004108   1C 00 00 02   CallFf              r0, r0, 2      r0 = get-symbol(current-task, self)
0006   0x004110   15 01 00 00   LookupPointer       r1, 0          r1 = ST[0] -> <get-symbol>
0007   0x004118   4A 02 01 00   LoadStaticU64Imm    r2, 1          r2 = ST[1] -> <current-task>
0008   0x004120   4A 03 03 00   LoadStaticU64Imm    r3, 3          r3 = ST[3] -> <ss-wave-manager-level-set-loader-1>
0009   0x004128   43 31 02 00   Move                r49, r2        r49 = r2 [current-task]
000A   0x004130   43 32 03 00   Move                r50, r3        r50 = r3 [ss-wave-manager-level-set-loader-1]
000B   0x004138   1C 01 01 02   CallFf              r1, r1, 2      r1 = get-symbol(current-task, ss-wave-manager-level-set-loader-1)
000C   0x004140   1D 00 00 01   IEqual              r0, r0, r1     r0 = r0 [1774822657] == r1 [1774822854]
000D   0x004148   2F 14 00 00   BranchIfNot         r0, 0014       IF NOT r0 [0x69C9A501] => L_0
000E   0x004150   15 00 04 00   LookupPointer       r0, 4          r0 = ST[4] -> <get-boolean>
000F   0x004158   4A 01 05 00   LoadStaticU64Imm    r1, 5          r1 = ST[5] -> <#B0E4DDF4A79D13AC>
0010   0x004160   4A 02 03 00   LoadStaticU64Imm    r2, 3          r2 = ST[3] -> <ss-wave-manager-level-set-loader-1>
0011   0x004168   43 31 01 00   Move                r49, r1        r49 = r1 [#B0E4DDF4A79D13AC]
0012   0x004170   43 32 02 00   Move                r50, r2        r50 = r2 [ss-wave-manager-level-set-loader-1]
0013   0x004178   1C 00 00 02   CallFf              r0, r0, 2      r0 = get-boolean(#B0E4DDF4A79D13AC, ss-wave-manager-level-set-loader-1)
L_0:
0014   0x004180   2F 2F 00 00   BranchIfNot         r0, 002F       IF NOT r0 [get-boolean()] => L_1
0015   0x004188   15 00 06 00   LookupPointer       r0, 6          r0 = ST[6] -> <log-event>
0016   0x004190   41 01 07 00   LoadStaticPointerImmr1, 7          r1 = ST[7] -> <0xBF0277ED>
0017   0x004198   15 02 08 00   LookupPointer       r2, 8          r2 = ST[8] -> <get-int32>
0018   0x0041A0   4A 03 09 00   LoadStaticU64Imm    r3, 9          r3 = ST[9] -> <#CEF93DF859F605EA>
0019   0x0041A8   4A 04 02 00   LoadStaticU64Imm    r4, 2          r4 = ST[2] -> <self>
001A   0x0041B0   43 31 03 00   Move                r49, r3        r49 = r3 [#CEF93DF859F605EA]
001B   0x0041B8   43 32 04 00   Move                r50, r4        r50 = r4 [self]
001C   0x0041C0   1C 02 02 02   CallFf              r2, r2, 2      r2 = get-int32(#CEF93DF859F605EA, self)
001D   0x0041C8   15 03 0A 00   LookupPointer       r3, 10         r3 = ST[10] -> <#C57EE0A64537AE8F>
001E   0x0041D0   15 04 08 00   LookupPointer       r4, 8          r4 = ST[8] -> <get-int32>
001F   0x0041D8   4A 05 0B 00   LoadStaticU64Imm    r5, 11         r5 = ST[11] -> <#30BFAD05B9FB096E>
0020   0x0041E0   4A 06 02 00   LoadStaticU64Imm    r6, 2          r6 = ST[2] -> <self>
0021   0x0041E8   43 31 05 00   Move                r49, r5        r49 = r5 [#30BFAD05B9FB096E]
0022   0x0041F0   43 32 06 00   Move                r50, r6        r50 = r6 [self]
0023   0x0041F8   1C 04 04 02   CallFf              r4, r4, 2      r4 = get-int32(#30BFAD05B9FB096E, self)
0024   0x004200   43 31 04 00   Move                r49, r4        r49 = r4 [get-int32()]
0025   0x004208   1B 03 03 01   Call                r3, r3, 1      r3 = #C57EE0A64537AE8F(get-int32())
0026   0x004210   0C 04 00 00   LoadU16Imm          r4, 0          r4 = 0
0027   0x004218   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
0028   0x004220   43 31 01 00   Move                r49, r1        r49 = r1 [0xBF0277ED]
0029   0x004228   43 32 02 00   Move                r50, r2        r50 = r2 [get-int32()]
002A   0x004230   43 33 03 00   Move                r51, r3        r51 = r3 [#C57EE0A64537AE8F()]
002B   0x004238   43 34 04 00   Move                r52, r4        r52 = r4 [0]
002C   0x004240   43 35 05 00   Move                r53, r5        r53 = r5 [0]
002D   0x004248   1C 00 00 05   CallFf              r0, r0, 5      r0 = log-event(0xBF0277ED, get-int32(), #C57EE0A64537AE8F(), 0, 0)
002E   0x004250   2D 30 00 00   Branch              0030           => L_RETURN
L_1:
002F   0x004258   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_RETURN:
0030   0x004260   00 00 00 00   Return              r0             Return 0
SYMBOL TABLE: 
0000   0x004268    POINTER <get-symbol>
0001   0x004270    SID <current-task>
0002   0x004278    SID <self>
0003   0x004280    SID <ss-wave-manager-level-set-loader-1>
0004   0x004288    POINTER <get-boolean>
0005   0x004290    SID <#B0E4DDF4A79D13AC>
0006   0x004298    POINTER <log-event>
0007   0x0042A0    POINTER <#00000282BF0277ED>
0008   0x0042A8    POINTER <get-int32>
0009   0x0042B0    SID <#CEF93DF859F605EA>
000A   0x0042B8    POINTER <#C57EE0A64537AE8F>
000B   0x0042C0    SID <#30BFAD05B9FB096E>
  }
####################################################################################################
  [0x0042C8] #BC06CBDEAE8344C7: script-lambda 
  {
LAMBDA0000   0x004320   43 00 31 00   Move                r0, r49        r0 = r49 [0x0]
0001   0x004328   43 01 00 00   Move                r1, r0         r1 = r0 [0x0]
0002   0x004330   0C 02 00 00   LoadU16Imm          r2, 0          r2 = 0
0003   0x004338   1D 01 01 02   IEqual              r1, r1, r2     r1 = r1 [1] == r2 [0]
0004   0x004340   2F 07 01 00   BranchIfNot         r1, 0007       IF NOT r1 [0x1] => L_0
0005   0x004348   41 01 00 00   LoadStaticPointerImmr1, 0          r1 = ST[0] -> <0xBF027832>
0006   0x004350   2D 20 00 00   Branch              0020           => L_RETURN
L_0:
0007   0x004358   43 01 00 00   Move                r1, r0         r1 = r0 [0x0]
0008   0x004360   0C 02 01 00   LoadU16Imm          r2, 1          r2 = 1
0009   0x004368   1D 01 01 02   IEqual              r1, r1, r2     r1 = r1 [0] == r2 [1]
000A   0x004370   2F 0D 01 00   BranchIfNot         r1, 000D       IF NOT r1 [0x0] => L_2
000B   0x004378   41 01 01 00   LoadStaticPointerImmr1, 1          r1 = ST[1] -> <0xBF02784C>
000C   0x004380   2D 20 00 00   Branch              0020           => L_RETURN
L_2:
000D   0x004388   43 01 00 00   Move                r1, r0         r1 = r0 [0x0]
000E   0x004390   0C 02 02 00   LoadU16Imm          r2, 2          r2 = 2
000F   0x004398   1D 01 01 02   IEqual              r1, r1, r2     r1 = r1 [0] == r2 [2]
0010   0x0043A0   2F 13 01 00   BranchIfNot         r1, 0013       IF NOT r1 [0x0] => L_3
0011   0x0043A8   41 01 02 00   LoadStaticPointerImmr1, 2          r1 = ST[2] -> <0xBF0277CB>
0012   0x0043B0   2D 20 00 00   Branch              0020           => L_RETURN
L_3:
0013   0x0043B8   43 01 00 00   Move                r1, r0         r1 = r0 [0x0]
0014   0x0043C0   0C 02 03 00   LoadU16Imm          r2, 3          r2 = 3
0015   0x0043C8   1D 01 01 02   IEqual              r1, r1, r2     r1 = r1 [0] == r2 [3]
0016   0x0043D0   2F 19 01 00   BranchIfNot         r1, 0019       IF NOT r1 [0x0] => L_4
0017   0x0043D8   41 01 03 00   LoadStaticPointerImmr1, 3          r1 = ST[3] -> <0xBF02782A>
0018   0x0043E0   2D 20 00 00   Branch              0020           => L_RETURN
L_4:
0019   0x0043E8   43 01 00 00   Move                r1, r0         r1 = r0 [0x0]
001A   0x0043F0   0C 02 04 00   LoadU16Imm          r2, 4          r2 = 4
001B   0x0043F8   1D 01 01 02   IEqual              r1, r1, r2     r1 = r1 [0] == r2 [4]
001C   0x004400   2F 1F 01 00   BranchIfNot         r1, 001F       IF NOT r1 [0x0] => L_5
001D   0x004408   41 01 04 00   LoadStaticPointerImmr1, 4          r1 = ST[4] -> <0xBF02781D>
001E   0x004410   2D 20 00 00   Branch              0020           => L_RETURN
L_5:
001F   0x004418   41 01 05 00   LoadStaticPointerImmr1, 5          r1 = ST[5] -> <0xBF027815>
L_RETURN:
0020   0x004420   00 01 01 00   Return              r1             Return 0xBF027815
SYMBOL TABLE: 
0000   0x004428    POINTER <#00000282BF027832>
0001   0x004430    POINTER <#00000282BF02784C>
0002   0x004438    POINTER <#00000282BF0277CB>
0003   0x004440    POINTER <#00000282BF02782A>
0004   0x004448    POINTER <#00000282BF02781D>
0005   0x004450    POINTER <#00000282BF027815>
  }
####################################################################################################
  [0x004458] #C3B48D02AC9ECB46: script-lambda 
  {
LAMBDA0000   0x0044B0   15 00 00 00   LookupPointer       r0, 0          r0 = ST[0] -> <is-final-build?>
0001   0x0044B8   1C 00 00 00   CallFf              r0, r0, 0      r0 = is-final-build?()
0002   0x0044C0   30 00 00 00   OpLogNot            r0, r0         r0 = !r0 -> <TRUE>
0003   0x0044C8   2F 10 00 00   BranchIfNot         r0, 0010       IF NOT r0 [0x6620ACB7] => L_0
0004   0x0044D0   15 00 01 00   LookupPointer       r0, 1          r0 = ST[1] -> <display>
0005   0x0044D8   15 01 02 00   LookupPointer       r1, 2          r1 = ST[2] -> <#5445173390656D6D>
0006   0x0044E0   41 02 03 00   LoadStaticPointerImmr2, 3          r2 = ST[3] -> <0xBF0269DA>
0007   0x0044E8   41 03 04 00   LoadStaticPointerImmr3, 4          r3 = ST[4] -> <0xBF025EFC>
0008   0x0044F0   43 31 02 00   Move                r49, r2        r49 = r2 [0xBF0269DA]
0009   0x0044F8   43 32 03 00   Move                r50, r3        r50 = r3 [0xBF025EFC]
000A   0x004500   1C 01 01 02   CallFf              r1, r1, 2      r1 = #5445173390656D6D(0xBF0269DA, 0xBF025EFC)
000B   0x004508   0C 02 13 00   LoadU16Imm          r2, 19         r2 = 19
000C   0x004510   43 31 01 00   Move                r49, r1        r49 = r1 [#5445173390656D6D()]
000D   0x004518   43 32 02 00   Move                r50, r2        r50 = r2 [19]
000E   0x004520   1C 00 00 02   CallFf              r0, r0, 2      r0 = display(#5445173390656D6D(), 19)
000F   0x004528   2D 11 00 00   Branch              0011           => L_1
L_0:
0010   0x004530   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
L_1:
0011   0x004538   15 00 05 00   LookupPointer       r0, 5          r0 = ST[5] -> <fact-set>
0012   0x004540   4A 01 06 00   LoadStaticU64Imm    r1, 6          r1 = ST[6] -> <global>
0013   0x004548   4A 02 07 00   LoadStaticU64Imm    r2, 7          r2 = ST[7] -> <search-start-played?>
0014   0x004550   15 03 08 00   LookupPointer       r3, 8          r3 = ST[8] -> <new-boxed-value>
0015   0x004558   0C 04 01 00   LoadU16Imm          r4, 1          r4 = 1
0016   0x004560   0C 05 01 00   LoadU16Imm          r5, 1          r5 = 1
0017   0x004568   43 31 04 00   Move                r49, r4        r49 = r4 [1]
0018   0x004570   43 32 05 00   Move                r50, r5        r50 = r5 [1]
0019   0x004578   1C 03 03 02   CallFf              r3, r3, 2      r3 = new-boxed-value(1, 1)
001A   0x004580   43 31 01 00   Move                r49, r1        r49 = r1 [global]
001B   0x004588   43 32 02 00   Move                r50, r2        r50 = r2 [search-start-played?]
001C   0x004590   43 33 03 00   Move                r51, r3        r51 = r3 [new-boxed-value()]
001D   0x004598   1C 00 00 03   CallFf              r0, r0, 3      r0 = fact-set(global, search-start-played?, new-boxed-value())
001E   0x0045A0   15 00 05 00   LookupPointer       r0, 5          r0 = ST[5] -> <fact-set>
001F   0x0045A8   4A 01 06 00   LoadStaticU64Imm    r1, 6          r1 = ST[6] -> <global>
0020   0x0045B0   4A 02 09 00   LoadStaticU64Imm    r2, 9          r2 = ST[9] -> <ambush-played?>
0021   0x0045B8   15 03 08 00   LookupPointer       r3, 8          r3 = ST[8] -> <new-boxed-value>
0022   0x0045C0   0C 04 01 00   LoadU16Imm          r4, 1          r4 = 1
0023   0x0045C8   0C 05 01 00   LoadU16Imm          r5, 1          r5 = 1
0024   0x0045D0   43 31 04 00   Move                r49, r4        r49 = r4 [1]
0025   0x0045D8   43 32 05 00   Move                r50, r5        r50 = r5 [1]
0026   0x0045E0   1C 03 03 02   CallFf              r3, r3, 2      r3 = new-boxed-value(1, 1)
0027   0x0045E8   43 31 01 00   Move                r49, r1        r49 = r1 [global]
0028   0x0045F0   43 32 02 00   Move                r50, r2        r50 = r2 [ambush-played?]
0029   0x0045F8   43 33 03 00   Move                r51, r3        r51 = r3 [new-boxed-value()]
002A   0x004600   1C 00 00 03   CallFf              r0, r0, 3      r0 = fact-set(global, ambush-played?, new-boxed-value())
002B   0x004608   00 00 00 00   Return              r0             Return fact-set()
SYMBOL TABLE: 
0000   0x004610    POINTER <is-final-build?>
0001   0x004618    POINTER <display>
0002   0x004620    POINTER <#5445173390656D6D>
0003   0x004628    POINTER <#00000282BF0269DA>
0004   0x004630    POINTER <#00000282BF025EFC>
0005   0x004638    POINTER <fact-set>
0006   0x004640    SID <global>
0007   0x004648    SID <search-start-played?>
0008   0x004650    POINTER <new-boxed-value>
0009   0x004658    SID <ambush-played?>
  }
####################################################################################################
  [0x004660] #D14395D282B18D18: script-lambda 
  {
LAMBDA0000   0x0046B8   43 00 31 00   Move                r0, r49        r0 = r49 [0x0]
0001   0x0046C0   43 01 00 00   Move                r1, r0         r1 = r0 [0x0]
0002   0x0046C8   2F 36 01 00   BranchIfNot         r1, 0036       IF NOT r1 [0x0] => L_0
0003   0x0046D0   43 01 00 00   Move                r1, r0         r1 = r0 [0x0]
0004   0x0046D8   5D 01 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0005   0x0046E0   4F 01 01 00   LoadI32             ???            UNKNOWN INSTRUCTION
0006   0x0046E8   43 02 00 00   Move                r2, r0         r2 = r0 [0x0]
0007   0x0046F0   5D 02 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0008   0x0046F8   3B 02 02 04   IAddImm             r2, r2, 4      r2 = r2 [0] / 4 -> <0>
0009   0x004700   43 03 00 00   Move                r3, r0         r3 = r0 [0x0]
000A   0x004708   5D 03 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
000B   0x004710   3B 03 03 44   IAddImm             r3, r3, 68     r3 = r3 [0] / 68 -> <0>
000C   0x004718   41 04 00 00   LoadStaticPointerImmr4, 0          r4 = ST[0] -> <0xBF0277A4>
000D   0x004720   0C 05 00 00   LoadU16Imm          r5, 0          r5 = 0
L_2:
000E   0x004728   43 06 05 00   Move                r6, r5         r6 = r5 [0]
000F   0x004730   43 07 01 00   Move                r7, r1         r7 = r1 [0x0]
0010   0x004738   20 06 06 07   ILessThan           r6, r6, r7     r6 = r6 [0] < r7 [0]
0011   0x004740   2F 2E 06 00   BranchIfNot         r6, 002E       IF NOT r6 [0x0] => L_1
0012   0x004748   15 06 01 00   LookupPointer       r6, 1          r6 = ST[1] -> <#5445173390656D6D>
0013   0x004750   41 07 02 00   LoadStaticPointerImmr7, 2          r7 = ST[2] -> <0xBF025F13>
0014   0x004758   43 08 04 00   Move                r8, r4         r8 = r4 [0xBF0277A4]
0015   0x004760   43 09 02 00   Move                r9, r2         r9 = r2 [0]
0016   0x004768   43 0A 05 00   Move                r10, r5        r10 = r5 [0]
0017   0x004770   3D 0A 0A 04   IMulImm             r10, r10, 4    r10 = r10 [0] / 4 -> <0>
0018   0x004778   01 09 09 0A   IAdd                r9, r9, r10    0 = 0 + 0
0019   0x004780   0E 09 09 00   LoadFloat           r9, [r9]       r9 = [0x0 + 0x0]
001A   0x004788   19 09 09 00   CastInteger         r9, r9         r9 = int(r9) -> <0.000000> => <0>
001B   0x004790   43 0A 03 00   Move                r10, r3        r10 = r3 [0]
001C   0x004798   43 0B 05 00   Move                r11, r5        r11 = r5 [0]
001D   0x0047A0   3D 0B 0B 04   IMulImm             r11, r11, 4    r11 = r11 [0] / 4 -> <0>
001E   0x0047A8   01 0A 0A 0B   IAdd                r10, r10, r11  0 = 0 + 0
001F   0x0047B0   0E 0A 0A 00   LoadFloat           r10, [r10]     r10 = [0x0 + 0x0]
0020   0x0047B8   19 0A 0A 00   CastInteger         r10, r10       r10 = int(r10) -> <0.000000> => <0>
0021   0x0047C0   43 31 07 00   Move                r49, r7        r49 = r7 [0xBF025F13]
0022   0x0047C8   43 32 08 00   Move                r50, r8        r50 = r8 [0xBF0277A4]
0023   0x0047D0   43 33 09 00   Move                r51, r9        r51 = r9 [0]
0024   0x0047D8   43 34 0A 00   Move                r52, r10       r52 = r10 [0]
0025   0x0047E0   1C 06 06 04   CallFf              r6, r6, 4      r6 = #5445173390656D6D(0xBF025F13, 0xBF0277A4, 0, 0)
0026   0x0047E8   43 04 06 00   Move                r4, r6         r4 = r6 [#5445173390656D6D()]
0027   0x0047F0   43 06 04 00   Move                r6, r4         r6 = r4 [#5445173390656D6D()]
0028   0x0047F8   43 06 05 00   Move                r6, r5         r6 = r5 [0]
0029   0x004800   0C 07 01 00   LoadU16Imm          r7, 1          r7 = 1
002A   0x004808   01 06 06 07   IAdd                r6, r6, r7     1 = 0 + 1
002B   0x004810   43 05 06 00   Move                r5, r6         r5 = r6 [1]
002C   0x004818   43 06 05 00   Move                r6, r5         r6 = r5 [1]
002D   0x004820   2D 0E 00 00   Branch              000E           => L_2
L_1:
002E   0x004828   43 05 06 00   Move                r5, r6         r5 = r6 [1]
002F   0x004830   43 05 04 00   Move                r5, r4         r5 = r4 [#5445173390656D6D()]
0030   0x004838   43 05 05 00   Move                r5, r5         r5 = r5 [#5445173390656D6D()]
0031   0x004840   43 04 05 00   Move                r4, r5         r4 = r5 [#5445173390656D6D]
0032   0x004848   43 03 04 00   Move                r3, r4         r3 = r4 [#5445173390656D6D]
0033   0x004850   43 02 03 00   Move                r2, r3         r2 = r3 [#5445173390656D6D]
0034   0x004858   43 01 02 00   Move                r1, r2         r1 = r2 [#5445173390656D6D]
0035   0x004860   2D 37 00 00   Branch              0037           => L_RETURN
L_0:
0036   0x004868   41 01 03 00   LoadStaticPointerImmr1, 3          r1 = ST[3] -> <0xBF02747F>
L_RETURN:
0037   0x004870   00 01 01 00   Return              r1             Return 0xBF02747F
SYMBOL TABLE: 
0000   0x004878    POINTER <#00000282BF0277A4>
0001   0x004880    POINTER <#5445173390656D6D>
0002   0x004888    POINTER <#00000282BF025F13>
0003   0x004890    POINTER <#00000282BF02747F>
  }
####################################################################################################
  [0x004898] #E16F9CC43A37FADA: script-lambda 
  {
LAMBDA0000   0x0048F0   43 00 31 00   Move                r0, r49        r0 = r49 [0x0]
0001   0x0048F8   15 01 00 00   LookupPointer       r1, 0          r1 = ST[0] -> <get-region-centroid>
0002   0x004900   43 02 00 00   Move                r2, r0         r2 = r0 [0x0]
0003   0x004908   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
0004   0x004910   43 31 02 00   Move                r49, r2        r49 = r2 [0x0]
0005   0x004918   43 32 03 00   Move                r50, r3        r50 = r3 [0]
0006   0x004920   1C 01 01 02   CallFf              r1, r1, 2      r1 = get-region-centroid(0x0, 0)
0007   0x004928   15 02 01 00   LookupPointer       r2, 1          r2 = ST[1] -> <get-object-position>
0008   0x004930   4A 03 02 00   LoadStaticU64Imm    r3, 2          r3 = ST[2] -> <player>
0009   0x004938   43 31 03 00   Move                r49, r3        r49 = r3 [player]
000A   0x004940   1C 02 02 01   CallFf              r2, r2, 1      r2 = get-object-position(player)
000B   0x004948   15 03 03 00   LookupPointer       r3, 3          r3 = ST[3] -> <distance-between-points>
000C   0x004950   43 04 01 00   Move                r4, r1         r4 = r1 [get-region-centroid()]
000D   0x004958   43 05 02 00   Move                r5, r2         r5 = r2 [get-object-position()]
000E   0x004960   43 31 04 00   Move                r49, r4        r49 = r4 [get-region-centroid()]
000F   0x004968   43 32 05 00   Move                r50, r5        r50 = r5 [get-object-position()]
0010   0x004970   1B 03 03 02   Call                r3, r3, 2      r3 = distance-between-points(get-region-centroid(), get-object-position())
0011   0x004978   43 04 03 00   Move                r4, r3         r4 = r3 [distance-between-points()]
0012   0x004980   43 04 04 00   Move                r4, r4         r4 = r4 [distance-between-points()]
0013   0x004988   43 03 04 00   Move                r3, r4         r3 = r4 [distance-between-points]
0014   0x004990   43 02 03 00   Move                r2, r3         r2 = r3 [distance-between-points]
0015   0x004998   43 01 02 00   Move                r1, r2         r1 = r2 [distance-between-points]
0016   0x0049A0   00 01 01 00   Return              r1             Return distance-between-points
SYMBOL TABLE: 
0000   0x0049A8    POINTER <get-region-centroid>
0001   0x0049B0    POINTER <get-object-position>
0002   0x0049B8    SID <player>
0003   0x0049C0    POINTER <distance-between-points>
  }
####################################################################################################
  [0x0049C8] #E5FCFC6B95B3F669: script-lambda 
  {
LAMBDA0000   0x004A20   0C 00 00 00   LoadU16Imm          r0, 0          r0 = 0
0001   0x004A28   15 01 00 00   LookupPointer       r1, 0          r1 = ST[0] -> <darray-count>
0002   0x004A30   4A 02 01 00   LoadStaticU64Imm    r2, 1          r2 = ST[1] -> <#88F409F4BF0F056A>
0003   0x004A38   43 31 02 00   Move                r49, r2        r49 = r2 [#88F409F4BF0F056A]
0004   0x004A40   1C 01 01 01   CallFf              r1, r1, 1      r1 = darray-count(#88F409F4BF0F056A)
0005   0x004A48   15 02 02 00   LookupPointer       r2, 2          r2 = ST[2] -> <begin-foreach>
0006   0x004A50   1C 02 02 00   CallFf              r2, r2, 0      r2 = begin-foreach()
L_10:
0007   0x004A58   43 02 00 00   Move                r2, r0         r2 = r0 [0]
0008   0x004A60   43 03 01 00   Move                r3, r1         r3 = r1 [darray-count()]
0009   0x004A68   20 02 02 03   ILessThan           r2, r2, r3     r2 = r2 [1] < r3 [1753163078]
000A   0x004A70   2F 59 02 00   BranchIfNot         r2, 0059       IF NOT r2 [0x1] => L_0
000B   0x004A78   15 02 03 00   LookupPointer       r2, 3          r2 = ST[3] -> <darray-at>
000C   0x004A80   4A 03 01 00   LoadStaticU64Imm    r3, 1          r3 = ST[1] -> <#88F409F4BF0F056A>
000D   0x004A88   43 04 00 00   Move                r4, r0         r4 = r0 [0]
000E   0x004A90   43 31 03 00   Move                r49, r3        r49 = r3 [#88F409F4BF0F056A]
000F   0x004A98   43 32 04 00   Move                r50, r4        r50 = r4 [0]
0010   0x004AA0   1C 02 02 02   CallFf              r2, r2, 2      r2 = darray-at(#88F409F4BF0F056A, 0)
0011   0x004AA8   43 03 02 00   Move                r3, r2         r3 = r2 [darray-at()]
0012   0x004AB0   2F 19 03 00   BranchIfNot         r3, 0019       IF NOT r3 [darray-at()] => L_1
0013   0x004AB8   43 03 02 00   Move                r3, r2         r3 = r2 [darray-at()]
0014   0x004AC0   5D 03 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0015   0x004AC8   3B 03 03 0C   IAddImm             r3, r3, 12     r3 = r3 [-739117676] / 12 -> <-739117676>
0016   0x004AD0   4E 03 03 00   LoadU16             ???            UNKNOWN INSTRUCTION
0017   0x004AD8   0C 04 07 00   LoadU16Imm          r4, 7          r4 = 7
0018   0x004AE0   1D 03 03 04   IEqual              r3, r3, r4     r3 = r3 [-739117824] == r4 [7]
L_1:
0019   0x004AE8   2F 1E 03 00   BranchIfNot         r3, 001E       IF NOT r3 [0xD3F1F500] => L_2
001A   0x004AF0   43 03 02 00   Move                r3, r2         r3 = r2 [darray-at()]
001B   0x004AF8   5D 03 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
001C   0x004B00   51 03 03 00   LoadU64             r3, [r3]       r3 = [0x0 + 0x0]
001D   0x004B08   2D 39 00 00   Branch              0039           => L_3
L_2:
001E   0x004B10   43 03 02 00   Move                r3, r2         r3 = r2 [darray-at()]
001F   0x004B18   2F 26 03 00   BranchIfNot         r3, 0026       IF NOT r3 [darray-at()] => L_4
0020   0x004B20   43 03 02 00   Move                r3, r2         r3 = r2 [darray-at()]
0021   0x004B28   5D 03 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0022   0x004B30   3B 03 03 0C   IAddImm             r3, r3, 12     r3 = r3 [-739117676] / 12 -> <-739117676>
0023   0x004B38   4E 03 03 00   LoadU16             ???            UNKNOWN INSTRUCTION
0024   0x004B40   0C 04 05 00   LoadU16Imm          r4, 5          r4 = 5
0025   0x004B48   1D 03 03 04   IEqual              r3, r3, r4     r3 = r3 [-739117824] == r4 [5]
L_4:
0026   0x004B50   2F 2B 03 00   BranchIfNot         r3, 002B       IF NOT r3 [0xD3F1F500] => L_5
0027   0x004B58   43 03 02 00   Move                r3, r2         r3 = r2 [darray-at()]
0028   0x004B60   5D 03 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0029   0x004B68   51 03 03 00   LoadU64             r3, [r3]       r3 = [0x0 + 0x0]
002A   0x004B70   2D 39 00 00   Branch              0039           => L_3
L_5:
002B   0x004B78   43 03 02 00   Move                r3, r2         r3 = r2 [darray-at()]
002C   0x004B80   2F 33 03 00   BranchIfNot         r3, 0033       IF NOT r3 [darray-at()] => L_6
002D   0x004B88   43 03 02 00   Move                r3, r2         r3 = r2 [darray-at()]
002E   0x004B90   5D 03 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
002F   0x004B98   3B 03 03 0C   IAddImm             r3, r3, 12     r3 = r3 [-739117676] / 12 -> <-739117676>
0030   0x004BA0   4E 03 03 00   LoadU16             ???            UNKNOWN INSTRUCTION
0031   0x004BA8   0C 04 04 00   LoadU16Imm          r4, 4          r4 = 4
0032   0x004BB0   1D 03 03 04   IEqual              r3, r3, r4     r3 = r3 [-739117824] == r4 [4]
L_6:
0033   0x004BB8   2F 38 03 00   BranchIfNot         r3, 0038       IF NOT r3 [0xD3F1F500] => L_7
0034   0x004BC0   43 03 02 00   Move                r3, r2         r3 = r2 [darray-at()]
0035   0x004BC8   5D 03 00 00   AssertPointer       ???            UNKNOWN INSTRUCTION
0036   0x004BD0   51 03 03 00   LoadU64             r3, [r3]       r3 = [0x0 + 0x0]
0037   0x004BD8   2D 39 00 00   Branch              0039           => L_3
L_7:
0038   0x004BE0   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
L_3:
0039   0x004BE8   43 02 03 00   Move                r2, r3         r2 = r3 [0]
003A   0x004BF0   15 03 04 00   LookupPointer       r3, 4          r3 = ST[4] -> <npc-alive?>
003B   0x004BF8   43 04 02 00   Move                r4, r2         r4 = r2 [0]
003C   0x004C00   43 31 04 00   Move                r49, r4        r49 = r4 [0]
003D   0x004C08   1C 03 03 01   CallFf              r3, r3, 1      r3 = npc-alive?(0)
003E   0x004C10   2F 51 03 00   BranchIfNot         r3, 0051       IF NOT r3 [npc-alive?()] => L_8
003F   0x004C18   15 03 05 00   LookupPointer       r3, 5          r3 = ST[5] -> <npc-disable-has-ever-seen-updates/f>
0040   0x004C20   43 04 02 00   Move                r4, r2         r4 = r2 [0]
0041   0x004C28   43 31 04 00   Move                r49, r4        r49 = r4 [0]
0042   0x004C30   1C 03 03 01   CallFf              r3, r3, 1      r3 = npc-disable-has-ever-seen-updates/f(0)
0043   0x004C38   15 03 06 00   LookupPointer       r3, 6          r3 = ST[6] -> <fact-set>
0044   0x004C40   43 04 02 00   Move                r4, r2         r4 = r2 [0]
0045   0x004C48   4A 05 07 00   LoadStaticU64Imm    r5, 7          r5 = ST[7] -> <has-faction-ever-seen-player-or-buddy>
0046   0x004C50   15 06 08 00   LookupPointer       r6, 8          r6 = ST[8] -> <new-boxed-value>
0047   0x004C58   0C 07 01 00   LoadU16Imm          r7, 1          r7 = 1
0048   0x004C60   0C 08 01 00   LoadU16Imm          r8, 1          r8 = 1
0049   0x004C68   43 31 07 00   Move                r49, r7        r49 = r7 [1]
004A   0x004C70   43 32 08 00   Move                r50, r8        r50 = r8 [1]
004B   0x004C78   1C 06 06 02   CallFf              r6, r6, 2      r6 = new-boxed-value(1, 1)
004C   0x004C80   43 31 04 00   Move                r49, r4        r49 = r4 [0]
004D   0x004C88   43 32 05 00   Move                r50, r5        r50 = r5 [has-faction-ever-seen-player-or-buddy]
004E   0x004C90   43 33 06 00   Move                r51, r6        r51 = r6 [new-boxed-value()]
004F   0x004C98   1C 03 03 03   CallFf              r3, r3, 3      r3 = fact-set(0, has-faction-ever-seen-player-or-buddy, new-boxed-value())
0050   0x004CA0   2D 52 00 00   Branch              0052           => L_9
L_8:
0051   0x004CA8   0C 03 00 00   LoadU16Imm          r3, 0          r3 = 0
L_9:
0052   0x004CB0   43 03 00 00   Move                r3, r0         r3 = r0 [0]
0053   0x004CB8   0C 04 01 00   LoadU16Imm          r4, 1          r4 = 1
0054   0x004CC0   01 03 03 04   IAdd                r3, r3, r4     1 = 0 + 1
0055   0x004CC8   43 00 03 00   Move                r0, r3         r0 = r3 [1]
0056   0x004CD0   43 03 00 00   Move                r3, r0         r3 = r0 [1]
0057   0x004CD8   43 02 03 00   Move                r2, r3         r2 = r3 [1]
0058   0x004CE0   2D 07 00 00   Branch              0007           => L_10
L_0:
0059   0x004CE8   15 02 09 00   LookupPointer       r2, 9          r2 = ST[9] -> <end-foreach>
005A   0x004CF0   1C 02 02 00   CallFf              r2, r2, 0      r2 = end-foreach()
005B   0x004CF8   43 00 02 00   Move                r0, r2         r0 = r2 [end-foreach()]
005C   0x004D00   00 00 00 00   Return              r0             Return end-foreach()
SYMBOL TABLE: 
0000   0x004D08    POINTER <darray-count>
0001   0x004D10    SID <#88F409F4BF0F056A>
0002   0x004D18    POINTER <begin-foreach>
0003   0x004D20    POINTER <darray-at>
0004   0x004D28    POINTER <npc-alive?>
0005   0x004D30    POINTER <npc-disable-has-ever-seen-updates/f>
0006   0x004D38    POINTER <fact-set>
0007   0x004D40    SID <has-faction-ever-seen-player-or-buddy>
0008   0x004D48    POINTER <new-boxed-value>
0009   0x004D50    POINTER <end-foreach>
  }
####################################################################################################
